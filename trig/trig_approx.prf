(trig_approx
 (sin_term_TCC1 0
  (sin_term_TCC1-1 nil 3320763259
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (sin_term subtype
             "((number_fields.+)(number_fields.*(2, trig_approx.n), 1))"
             "{i: integers.int | booleans.OR(trig_approx.a /= 0, reals.>=(i, 0))}")))
 (sin_term_next 0
  (sin_term_next-1 nil 3320769270
   ("" (skosimp)
    (("" (expand "sin_term")
      (("" (expand "^")
        (("" (expand "expt" 1 2)
          (("" (expand "expt" 1 2)
            (("" (expand "expt" 1 1)
              ((""
                (name-replace "X"
                 "expt((-1), n!1) * expt(a!1, 1 + 2 * n!1)")
                (("" (rewrite "cross_mult")
                  (("" (expand "factorial" 1 1)
                    (("" (expand "factorial" 1 1)
                      (("" (expand "factorial" 1 5)
                        (("" (typepred "factorial(1+2*n!1)")
                          ((""
                            (name-replace "F" "factorial(1 + 2 * n!1)")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_term const-decl "real" trig_approx nil)
    (expt def-decl "real" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (cross_mult formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil))
   shostak))
 (sin_term_neg 0
  (sin_term_neg-1 nil 3320922359
   ("" (skosimp)
    (("" (expand "sin_term")
      (("" (case-replace "a!1=0")
        (("1" (expand "^")
          (("1" (name-replace "S" "expt((-1), n!1)")
            (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (lemma "expt_plus" ("i" "1" "j" "2*n!1"))
          (("2" (inst-cp - "a!1")
            (("1" (inst - "-a!1")
              (("1" (replace -1)
                (("1" (replace -2)
                  (("1" (rewrite "expt_x1")
                    (("1" (rewrite "expt_x1")
                      (("1" (lemma "expt_times" ("i" "2" "j" "n!1"))
                        (("1" (inst-cp - "a!1")
                          (("1" (inst - "-a!1")
                            (("1" (case-replace "(-a!1) ^ 2 = a!1 ^ 2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_term const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_plus formula-decl nil exponentiation nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (a!1 skolem-const-decl "real" trig_approx nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (sin_terms_alternate 0
  (sin_terms_alternate-1 nil 3320772448
   ("" (skosimp)
    (("" (expand "sin_term")
      (("" (rewrite "div_mult_pos_gt1" 2)
        (("" (rewrite "div_mult_pos_lt1" 2)
          (("" (rewrite "zero_times1")
            (("" (rewrite "expt_plus" 2)
              (("" (rewrite "expt_x1")
                (("" (name-replace "S" "(-1)^n!1")
                  ((""
                    (lemma "both_sides_times_neg_lt1"
                     ("nz" "-1" "x" "S * a!1 ^ (3 + 2 * n!1)" "y" "0"))
                    (("" (replace -1 2)
                      (("" (hide -1)
                        (("" (expand ">")
                          (("" (lemma "trichotomy" ("x" "S"))
                            (("" (split -1)
                              (("1"
                                (lemma
                                 "both_sides_times_pos_lt1"
                                 ("pz" "S" "x" "0"))
                                (("1"
                                  (rewrite "zero_times1" -1)
                                  (("1"
                                    (inst-cp - "a!1 ^ (1 + 2 * n!1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2 2)
                                        (("1"
                                          (inst
                                           -
                                           "a!1 ^ (3 + 2 * n!1)")
                                          (("1"
                                            (replace -1 2)
                                            (("1"
                                              (hide -1 -2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt" 2 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       2
                                                       1)
                                                      (("1"
                                                        (case-replace
                                                         "0 < expt(a!1, (1 + 2 * n!1))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "posreal_times_posreal_is_posreal"
                                                             ("px"
                                                              "a!1*a!1"
                                                              "py"
                                                              "expt(a!1, 1 + 2 * n!1)"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               3)
                                                              (("2"
                                                                (lemma
                                                                 "trichotomy"
                                                                 ("x"
                                                                  "a!1"))
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "both_sides_times_pos_lt1"
                                                                     ("pz"
                                                                      "a!1"
                                                                      "x"
                                                                      "0"
                                                                      "y"
                                                                      "a!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "both_sides_times_neg_lt1"
                                                                     ("nz"
                                                                      "a!1"
                                                                      "x"
                                                                      "0"
                                                                      "y"
                                                                      "a!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "0 <a!1*a!1")
                                                            (("1"
                                                              (lemma
                                                               "both_sides_times_pos_lt1"
                                                               ("pz"
                                                                "a!1*a!1"
                                                                "x"
                                                                "0"
                                                                "y"
                                                                "expt(a!1, 1 + 2 * n!1)"))
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 "trichotomy"
                                                                 ("x"
                                                                  "a!1"))
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "both_sides_times_pos_lt1"
                                                                     ("pz"
                                                                      "a!1"
                                                                      "x"
                                                                      "0"
                                                                      "y"
                                                                      "a!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "both_sides_times_neg_lt1"
                                                                     ("nz"
                                                                      "a!1"
                                                                      "x"
                                                                      "0"
                                                                      "y"
                                                                      "a!1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "S" -1)
                                (("2"
                                  (lemma
                                   "expt_nonzero"
                                   ("n0x" "-1" "i" "n!1"))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma
                                 "both_sides_times_neg_lt1"
                                 ("nz" "S" "x" "0"))
                                (("1"
                                  (inst-cp - "a!1 ^ (1 + 2 * n!1)")
                                  (("1"
                                    (inst - "a!1 ^ (3 + 2 * n!1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide -1 -2 -3)
                                            (("1"
                                              (case "0<a!1*a!1")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt" 2 1)
                                                  (("1"
                                                    (expand "expt" 2 1)
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "a!1*a!1"
                                                        "x"
                                                        "expt(a!1, 1 + 2 * n!1)"
                                                        "y"
                                                        "0"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "zero_times1")
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (case-replace
                                                                 "expt(a!1, 1 + 2 * n!1) * (a!1 * a!1) < 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 3)
                                                (("2"
                                                  (lemma
                                                   "trichotomy"
                                                   ("x" "a!1"))
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (lemma
                                                       "both_sides_times_pos_lt1"
                                                       ("pz"
                                                        "a!1"
                                                        "x"
                                                        "0"
                                                        "y"
                                                        "a!1"))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "both_sides_times_neg_lt1"
                                                       ("nz"
                                                        "a!1"
                                                        "x"
                                                        "0"
                                                        "y"
                                                        "a!1"))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_term const-decl "real" trig_approx nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (trichotomy formula-decl nil real_axioms nil)
    (S skolem-const-decl "int" trig_approx nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero_times1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (sin_term_nonzero 0
  (sin_term_nonzero-1 nil 3320769218
   ("" (expand "sin_term")
    (("" (skosimp*)
      (("" (rewrite "div_cancel3")
        (("" (lemma "expt_nonzero" ("n0x" "-1" "i" "n!1"))
          (("" (split)
            (("1" (flatten)
              (("1" (replace -1)
                (("1" (expand "^" 1 2)
                  (("1" (expand "expt") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (rewrite "zero_times1")
                (("2" (rewrite "zero_times3")
                  (("2"
                    (lemma "expt_nonzero" ("n0x" "a!1" "i" "1+2*n!1"))
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_nonzero formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (zero_times3 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_cancel3 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sin_term const-decl "real" trig_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (sin_term_zero 0
  (sin_term_zero-1 nil 3320924247
   ("" (skosimp)
    (("" (lemma "sin_term_nonzero" ("a" "a!1" "n" "n!1"))
      (("" (assert)
        (("" (split)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_term_nonzero formula-decl nil trig_approx nil))
   shostak))
 (sin_term_gt0 0
  (sin_term_gt0-1 nil 3320931387
   ("" (expand "sin_term")
    (("" (skosimp)
      (("" (case-replace "a!1=0")
        (("1" (expand "^" 1 2)
          (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil)
         ("2" (rewrite "expt_plus")
          (("2" (rewrite "expt_x1")
            (("2" (rewrite "expt_times")
              (("2" (lemma "expt_pos" ("px" "a!1^2" "i" "n!1"))
                (("1"
                  (lemma "posreal_div_posreal_is_posreal"
                   ("px" "(a!1 ^ 2) ^ n!1" "py"
                    "factorial(1 + 2 * n!1)"))
                  (("1"
                    (lemma "both_sides_times_pos_gt1"
                     ("pz" "(a!1 ^ 2) ^ n!1 / factorial(1 + 2 * n!1)"
                      "x" "(-1)^n!1*a!1" "y" "0"))
                    (("1" (rewrite "zero_times1")
                      (("1" (replace -1 2)
                        (("1" (hide-all-but (1 2))
                          (("1" (case "forall (n:nat): (-1)^(2*n) =1")
                            (("1" (lemma "trichotomy" ("x" "a!1"))
                              (("1"
                                (split -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "even_or_odd")
                                        (("1"
                                          (inst - "n!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 1 2)
                                              (("1"
                                                (expand "odd?")
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (rewrite
                                                       "expt_plus")
                                                      (("1"
                                                        (rewrite
                                                         "expt_x1")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "j!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "even?")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (inst - "j!1")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma
                                         "even_or_odd"
                                         ("x" "n!1"))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide 1)
                                            (("1"
                                              (expand "even?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst - "j!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "odd?")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite "expt_plus")
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (inst - "j!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2"
                                  (rewrite "expt_times")
                                  (("2"
                                    (expand "^" 1 1)
                                    (("2"
                                      (expand "expt")
                                      (("2"
                                        (expand "expt")
                                        (("2"
                                          (expand "expt")
                                          (("2"
                                            (rewrite "expt_1i")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (hide-all-but (1 2))
                  (("2" (lemma "pos_times_lt" ("x" "a!1" "y" "a!1"))
                    (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_plus formula-decl nil exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (j!1 skolem-const-decl "int" trig_approx nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (even? const-decl "bool" integers nil)
    (j!1 skolem-const-decl "int" trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (j!1 skolem-const-decl "int" trig_approx nil)
    (j!1 skolem-const-decl "int" trig_approx nil)
    (trichotomy formula-decl nil real_axioms nil)
    (expt_1i formula-decl nil exponentiation nil)
    (zero_times1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (pos_times_lt formula-decl nil real_props nil)
    (expt_times formula-decl nil exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_term const-decl "real" trig_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (sin_term_lt0 0
  (sin_term_lt0-1 nil 3320932130
   ("" (skosimp)
    (("" (lemma "trichotomy" ("x" "a!1"))
      (("" (split -1)
        (("1" (assert)
          (("1" (lemma "sin_term_gt0" ("a" "a!1" "n" "n!1"))
            (("1" (assert)
              (("1" (rewrite "even_or_odd")
                (("1" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2"
                        (lemma "sin_term_nonzero"
                         ("a" "a!1" "n" "n!1"))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace -1)
          (("2" (assert)
            (("2" (lemma "sin_term_zero" ("a" "0" "n" "n!1"))
              (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("3" (assert)
          (("3" (lemma "sin_term_gt0" ("a" "a!1" "n" "n!1"))
            (("3" (assert)
              (("3" (rewrite "even_or_odd")
                (("3" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2"
                        (lemma "sin_term_nonzero"
                         ("a" "a!1" "n" "n!1"))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (sin_term_zero formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_term_nonzero formula-decl nil trig_approx nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (sin_term_gt0 formula-decl nil trig_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (sin_tends_to_0 0
  (sin_tends_to_0-1 nil 3320988819
   ("" (skosimp)
    (("" (case-replace "a!1=0")
      (("1" (hide -1)
        (("1" (expand "tends_to_0?")
          (("1" (skosimp)
            (("1" (inst + "0")
              (("1" (skosimp)
                (("1" (expand "sin_term")
                  (("1" (expand "^" 1 2)
                    (("1" (assert)
                      (("1" (expand "expt" 1)
                        (("1" (rewrite "abs_div")
                          (("1" (expand "abs") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "exp_tends_to_0" ("n0a" "a!1"))
        (("1" (expand "exp_term")
          (("1" (expand "sin_term")
            (("1" (expand "tends_to_0?")
              (("1" (skosimp*)
                (("1" (inst - "epsilon!1")
                  (("1" (skosimp)
                    (("1" (inst + "1+2*n!1")
                      (("1" (skosimp)
                        (("1" (inst - "1+2*i!1")
                          (("1" (assert)
                            (("1" (rewrite "abs_div")
                              (("1"
                                (rewrite "abs_div")
                                (("1"
                                  (rewrite "abs_mult")
                                  (("1"
                                    (case-replace
                                     "abs((-1) ^ i!1) = 1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (case "(-1)^2 =1")
                                        (("1"
                                          (case "even?(i!1)")
                                          (("1"
                                            (expand "even?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite
                                                   "expt_times")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (rewrite
                                                       "expt_1i")
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "even_or_odd")
                                            (("2"
                                              (expand "odd?")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (rewrite
                                                     "expt_plus")
                                                    (("2"
                                                      (rewrite
                                                       "expt_times")
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (rewrite
                                                           "expt_x1")
                                                          (("2"
                                                            (rewrite
                                                             "expt_1i")
                                                            (("2"
                                                              (expand
                                                               "abs")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (tends_to_0? const-decl "bool" exp_term nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (sin_term const-decl "real" trig_approx nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (expt def-decl "real" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (^ const-decl "real" exponentiation nil)
    (exp_term const-decl "real" exp_term nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even? const-decl "bool" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd? const-decl "bool" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (exp_tends_to_0 formula-decl nil exp_term nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (cos_term_TCC1 0
  (cos_term_TCC1-1 nil 3320763259
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (cos_term subtype "(number_fields.*(2, trig_approx.n))"
             "{i: integers.int | booleans.OR(trig_approx.a /= 0, reals.>=(i, 0))}")))
 (cos_term_next 0
  (cos_term_next-1 nil 3320770358
   ("" (skosimp*)
    (("" (expand "cos_term")
      (("" (case-replace "n!1=0")
        (("1" (assert)
          (("1" (rewrite "expt_x1")
            (("1" (expand "factorial")
              (("1" (expand "factorial")
                (("1" (expand "factorial")
                  (("1" (expand "^")
                    (("1" (expand "expt")
                      (("1" (expand "expt")
                        (("1" (expand "expt") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (rewrite "expt_plus" 2)
            (("2" (name-replace "S" "(-1)^n!1")
              (("2" (rewrite "expt_x1")
                (("2" (expand "factorial" 2 1)
                  (("2" (expand "factorial" 2 2)
                    (("2" (expand "factorial" 2 1)
                      (("2" (case-replace "a!1=0")
                        (("1" (expand "^")
                          (("1" (expand "expt")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (rewrite "expt_plus" 3)
                          (("2" (typepred "factorial(2*n!1)")
                            (("2" (name-replace "F" "factorial(2*n!1)")
                              (("2"
                                (expand "^" 3 1)
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (expand "expt")
                                      (("2"
                                        (rewrite "cross_mult")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cos_term const-decl "real" trig_approx nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cross_mult formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cos_term_neg 0
  (cos_term_neg-2 "" 3744227010
   ("" (expand "cos_term")
    (("" (skosimp)
      (("" (case-replace "n!1=0")
        (("" (assert)
          (("" (case-replace "a!1=0")
            (("" (lemma "expt_times" ("i" "2" "j" "n!1"))
              (("" (inst-cp - "a!1")
                (("" (inst - "-a!1")
                  (("" (case-replace "(-a!1) ^ 2 = a!1 ^ 2")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_term_neg-1 nil 3320922908
   ("" (expand "cos_term")
    (("" (skosimp)
      (("" (case-replace "n!1=0")
        (("" (assert)
          (("" (case-replace "a!1=0")
            (("1" (expand "^")
              (("1" (expand "expt") (("1" (propax) nil nil)) nil)) nil)
             ("2" (lemma "expt_times" ("i" "2" "j" "n!1"))
              (("2" (inst-cp - "a!1")
                (("2" (inst - "-a!1")
                  (("2" (case-replace "(-a!1) ^ 2 = a!1 ^ 2")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_term const-decl "real" trig_approx nil))
   shostak))
 (cos_terms_alternate 0
  (cos_terms_alternate-1 nil 3320771767
   ("" (skosimp)
    (("" (expand "cos_term")
      (("" (case-replace "n!1=0")
        (("1" (assert)
          (("1" (rewrite "expt_x1")
            (("1" (expand "factorial")
              (("1" (expand "factorial")
                (("1" (expand "factorial")
                  (("1" (case "a!1^2>0")
                    (("1" (assert) nil nil)
                     ("2" (hide -1 3)
                      (("2" (lemma "trichotomy" ("x" "a!1"))
                        (("2" (split -1)
                          (("1"
                            (lemma "both_sides_times_pos_lt1"
                             ("pz" "a!1" "x" "0" "y" "a!1"))
                            (("1" (grind) nil nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3"
                            (lemma "both_sides_times_neg_lt1"
                             ("nz" "a!1" "x" "0" "y" "a!1"))
                            (("1" (grind) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "^")
            (("2" (expand "expt" 3 2)
              (("2" (expand "expt" 3 2)
                (("2" (expand "expt" 3 1)
                  (("2"
                    (name-replace "S"
                     "expt((-1), n!1) * expt(a!1, (2 * n!1))")
                    (("2" (case "a!1*a!1>0")
                      (("1" (assert)
                        (("1" (rewrite "div_mult_pos_gt1" 3)
                          (("1" (rewrite "div_mult_pos_lt1" 3)
                            (("1" (rewrite "zero_times1")
                              (("1"
                                (lemma "trichotomy" ("x" "S"))
                                (("1"
                                  (split -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("pz"
                                        "S"
                                        "x"
                                        "-1*(a!1*a!1)"
                                        "y"
                                        "0"))
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "S" -1)
                                    (("2"
                                      (lemma
                                       "expt_nonzero"
                                       ("n0x" "-1" "i" "n!1"))
                                      (("2"
                                        (lemma
                                         "expt_nonzero"
                                         ("n0x" "a!1" "i" "2*n!1"))
                                        (("2"
                                          (expand "^")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "both_sides_times_neg_lt1"
                                     ("nz"
                                      "S"
                                      "x"
                                      "-1*(a!1*a!1)"
                                      "y"
                                      "0"))
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 4)
                        (("2" (lemma "trichotomy" ("x" "a!1"))
                          (("2" (split -1)
                            (("1"
                              (lemma "both_sides_times_pos_lt1"
                               ("pz" "a!1" "x" "0" "y" "a!1"))
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3"
                              (lemma "both_sides_times_neg_lt1"
                               ("nz" "a!1" "x" "0" "y" "a!1"))
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_term const-decl "real" trig_approx nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (S skolem-const-decl "real" trig_approx nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (trichotomy formula-decl nil real_axioms nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cos_term_nonzero 0
  (cos_term_nonzero-1 nil 3320924341
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (replace -1)
          (("1" (expand "cos_term")
            (("1" (assert)
              (("1" (expand "^" 1)
                (("1" (expand "expt") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split -1)
          (("1" (replace -1)
            (("1" (expand "cos_term") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (assert)
            (("2" (expand "cos_term")
              (("2" (case-replace "n!1=0")
                (("1" (assert) nil nil)
                 ("2" (assert)
                  (("2"
                    (lemma "expt_nonzero" ("n0x" "a!1" "i" "2*n!1"))
                    (("2" (assert)
                      (("2"
                        (lemma "expt_nonzero" ("n0x" "-1" "i" "n!1"))
                        (("2"
                          (lemma "div_cancel3"
                           ("x" "(-1) ^ n!1 * a!1 ^ (2 * n!1)" "n0z"
                            "factorial(2 * n!1)" "y" "0"))
                          (("2" (replace -1 -5)
                            (("2" (hide -1)
                              (("2"
                                (rewrite "zero_times3" -4)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((hat_02n formula-decl nil power_series "series/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (cos_term const-decl "real" trig_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (zero_times3 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_nonzero formula-decl nil exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cos_term_zero 0
  (cos_term_zero-1 nil 3320924852
   ("" (skosimp)
    (("" (lemma "cos_term_nonzero" ("a" "a!1" "n" "n!1"))
      (("" (split)
        (("1" (flatten)
          (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (flatten) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_term_nonzero formula-decl nil trig_approx nil))
   shostak))
 (cos_term_gt0 0
  (cos_term_gt0-1 nil 3320925011
   ("" (skosimp)
    (("" (expand "cos_term")
      (("" (case-replace "n!1=0")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (rewrite "div_mult_pos_gt1")
            (("2" (rewrite "zero_times1")
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand ">")
                    (("1" (rewrite "pos_times_lt" -1)
                      (("1" (case-replace "a!1=0")
                        (("1" (expand "^")
                          (("1" (expand "expt")
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "a!1^2 > 0")
                            (("1"
                              (lemma "expt_pos"
                               ("px" "a!1^2" "i" "n!1"))
                              (("1"
                                (rewrite "expt_times")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1 -2 1)
                                    (("1"
                                      (rewrite "even_or_odd" 1)
                                      (("1"
                                        (expand "odd?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -2 1)
                                              (("1"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (rewrite
                                                   "expt_times")
                                                  (("1"
                                                    (rewrite "expt_x1")
                                                    (("1"
                                                      (case-replace
                                                       "(-1) ^ 2 = 1")
                                                      (("1"
                                                        (rewrite
                                                         "expt_1i")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (expand "expt")
                                      (("2"
                                        (lemma
                                         "pos_times_lt"
                                         ("x" "a!1" "y" "a!1"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (lemma
                                               "trichotomy"
                                               ("x" "a!1"))
                                              (("2"
                                                (split -1)
                                                (("1" (assert) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (case-replace "(-1)^n!1=1")
                    (("1" (rewrite "expt_times")
                      (("1" (lemma "expt_pos" ("px" "a!1^2" "i" "n!1"))
                        (("1" (propax) nil nil)
                         ("2" (hide-all-but (1 2))
                          (("2" (expand "^")
                            (("2" (expand "expt")
                              (("2"
                                (expand "expt")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (lemma
                                     "pos_times_lt"
                                     ("x" "a!1" "y" "a!1"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (lemma
                                           "trichotomy"
                                           ("x" "a!1"))
                                          (("2"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1))
                      (("2" (expand "even?")
                        (("2" (skosimp)
                          (("2" (replace -1 1)
                            (("2" (hide -1)
                              (("2"
                                (rewrite "expt_times")
                                (("2"
                                  (case-replace "(-1)^2 =1")
                                  (("1" (rewrite "expt_1i") nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_term const-decl "real" trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (zero_times1 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (pos_times_lt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trichotomy formula-decl nil real_axioms nil)
    (expt_pos formula-decl nil exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (odd? const-decl "bool" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cos_term_lt0 0
  (cos_term_lt0-1 nil 3320926707
   ("" (skosimp)
    (("" (expand "cos_term")
      (("" (case-replace "n!1=0")
        (("1" (assert)
          (("1" (expand "odd?") (("1" (propax) nil nil)) nil)) nil)
         ("2" (assert)
          (("2" (case-replace "a!1=0")
            (("1" (assert)
              (("1" (expand "^")
                (("1" (expand "expt") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (case "(-1) ^ n!1 < 0 IFF odd?(n!1)")
                (("1"
                  (lemma "both_sides_times_pos_lt1"
                   ("x" "(-1) ^ n!1" "pz"
                    "a!1 ^ (2 * n!1) / factorial(2 * n!1)" "y" "0"))
                  (("1" (replace -2 -1)
                    (("1" (rewrite "zero_times1")
                      (("1" (assert)
                        (("1" (split 3)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "a!1^2>0")
                    (("1" (lemma "expt_pos" ("px" "a!1^2" "i" "n!1"))
                      (("1" (rewrite "expt_times" 1)
                        (("1" (assert)
                          (("1"
                            (lemma "posreal_div_posreal_is_posreal"
                             ("px" "(a!1 ^ 2) ^ n!1" "py"
                              "factorial(2 * n!1)"))
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (hide-all-but (1 3))
                      (("2"
                        (lemma "pos_times_lt" ("x" "a!1" "y" "a!1"))
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (case "forall (n:nat): (-1)^(2*n) = 1")
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (lemma "even_or_odd")
                          (("1" (inst - "n!1")
                            (("1" (assert)
                              (("1"
                                (hide 1)
                                (("1"
                                  (expand "even?")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst - "j!1")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "odd?")
                          (("2" (skosimp)
                            (("2" (replace -1)
                              (("2"
                                (rewrite "expt_plus" 1)
                                (("2"
                                  (rewrite "expt_x1" 1)
                                  (("2"
                                    (inst - "j!1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp)
                        (("2" (rewrite "expt_times")
                          (("2" (expand "^" 1 1)
                            (("2" (expand "expt")
                              (("2"
                                (expand "expt")
                                (("2"
                                  (expand "expt")
                                  (("2" (rewrite "expt_1i") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_term const-decl "real" trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_1i formula-decl nil exponentiation nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (j!1 skolem-const-decl "int" trig_approx nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (j!1 skolem-const-decl "int" trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (zero_times1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (pos_times_lt formula-decl nil real_props nil)
    (expt_pos formula-decl nil exponentiation nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (hat_02n formula-decl nil power_series "series/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cos_tends_to_0 0
  (cos_tends_to_0-1 nil 3320988406
   ("" (skosimp)
    (("" (expand "cos_term")
      (("" (lemma "exp_tends_to_0" ("n0a" "n0x!1"))
        (("" (expand "exp_term")
          (("" (expand "tends_to_0?")
            (("" (skosimp*)
              (("" (inst - "epsilon!1")
                (("" (skosimp)
                  (("" (inst + "2*n!1")
                    (("" (skosimp)
                      (("" (inst - "2*i!1")
                        (("" (assert)
                          (("" (case-replace "i!1=0")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (rewrite "abs_div")
                                (("2"
                                  (rewrite "abs_div")
                                  (("2"
                                    (rewrite "abs_mult")
                                    (("2"
                                      (case-replace
                                       "abs((-1) ^ i!1) = 1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (case "(-1)^2 = 1")
                                          (("1"
                                            (case "even?(i!1)")
                                            (("1"
                                              (expand "even?")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (rewrite
                                                     "expt_times")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (rewrite
                                                         "expt_1i")
                                                        (("1"
                                                          (expand
                                                           "abs")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "even_or_odd")
                                              (("2"
                                                (expand "odd?")
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (rewrite
                                                       "expt_plus")
                                                      (("2"
                                                        (rewrite
                                                         "expt_times")
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (rewrite
                                                             "expt_x1")
                                                            (("2"
                                                              (rewrite
                                                               "expt_1i")
                                                              (("2"
                                                                (expand
                                                                 "abs")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_term const-decl "real" trig_approx nil)
    (exp_term const-decl "real" exp_term nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_exp application-judgement "int" exponentiation nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd? const-decl "bool" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (even? const-decl "bool" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (tends_to_0? const-decl "bool" exp_term nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (exp_tends_to_0 formula-decl nil exp_term nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (sin_term_deriv 0
  (sin_term_deriv-2 nil 3346173169
   ("" (skosimp)
    (("" (lemma "identity_derivable_fun[real]")
      (("" (lemma "deriv_id_fun[real]")
        (("" (expand "I")
          (("" (expand "const_fun")
            (("" (expand "sin_term")
              (("" (expand "cos_term")
                (("" (case-replace "n!1=0")
                  (("1" (rewrite "expt_x0")
                    (("1" (assert)
                      (("1" (expand "^")
                        (("1" (expand "expt")
                          (("1" (expand "expt")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "deriv_exp_fun[real]"
                     ("f" "LAMBDA (x: real): x" "n" "2*n!1+1"))
                    (("2" (assert)
                      (("2" (expand "^" -1)
                        (("2" (flatten)
                          (("2"
                            (lemma "scal_derivable_fun[real]"
                             ("f" "LAMBDA (t: real): t ^ (1 + 2 * n!1)"
                              "b"
                              "(-1) ^ n!1 / factorial(1 + 2 * n!1)"))
                            (("2" (assert)
                              (("2"
                                (lemma
                                 "deriv_scal_fun[real]"
                                 ("ff"
                                  "LAMBDA (t: real): t ^ (1 + 2 * n!1)"
                                  "b"
                                  "(-1) ^ n!1 / factorial(1 + 2 * n!1)"))
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "*")
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide-all-but (1 2))
                                              (("2"
                                                (apply-extensionality
                                                 2
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (name-replace
                                                   "X"
                                                   "x!1 ^ (2 * n!1)")
                                                  (("2"
                                                    (name-replace
                                                     "S"
                                                     "(-1) ^ n!1")
                                                    (("2"
                                                      (expand
                                                       "factorial"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "factorial"
                                                         1
                                                         3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "factorial(2*n!1)")
                                                            (("2"
                                                              (name-replace
                                                               "F"
                                                               "factorial(2 * n!1)")
                                                              (("2"
                                                                (lemma
                                                                 "div_cancel1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "2*n!1+1"
                                                                   "S*X/F")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "div_div2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (cos_term const-decl "real" trig_approx nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (expt_x1 formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sin_term const-decl "real" trig_approx nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (deriv_id_fun formula-decl nil derivatives "analysis/"))
   nil)
  (sin_term_deriv-1 nil 3320765733
   ("" (skosimp)
    (("" (lemma "identity_derivable_fun[real]")
      (("" (lemma "deriv_id_fun[real]")
        (("" (expand "I")
          (("" (expand "const_fun")
            (("" (expand "sin_term")
              (("" (expand "cos_term")
                (("" (case-replace "n!1=0")
                  (("1" (rewrite "expt_x0")
                    (("1" (assert)
                      (("1" (expand "^")
                        (("1" (expand "expt")
                          (("1" (expand "expt")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "deriv_exp_fun"
                     ("f" "LAMBDA (x: real): x" "n" "2*n!1+1"))
                    (("2" (assert)
                      (("2" (expand "^" -1)
                        (("2" (flatten)
                          (("2"
                            (lemma "scal_derivable_fun[real]"
                             ("f" "LAMBDA (t: real): t ^ (1 + 2 * n!1)"
                              "b"
                              "(-1) ^ n!1 / factorial(1 + 2 * n!1)"))
                            (("2" (assert)
                              (("2"
                                (lemma
                                 "deriv_scal_fun[real]"
                                 ("ff"
                                  "LAMBDA (t: real): t ^ (1 + 2 * n!1)"
                                  "b"
                                  "(-1) ^ n!1 / factorial(1 + 2 * n!1)"))
                                (("2"
                                  (replace -5)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "*")
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide-all-but (1 2))
                                              (("2"
                                                (apply-extensionality
                                                 2
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (name-replace
                                                   "X"
                                                   "x!1 ^ (2 * n!1)")
                                                  (("2"
                                                    (name-replace
                                                     "S"
                                                     "(-1) ^ n!1")
                                                    (("2"
                                                      (expand
                                                       "factorial"
                                                       1
                                                       2)
                                                      (("2"
                                                        (expand
                                                         "factorial"
                                                         1
                                                         3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "factorial(2*n!1)")
                                                            (("2"
                                                              (name-replace
                                                               "F"
                                                               "factorial(2 * n!1)")
                                                              (("2"
                                                                (lemma
                                                                 "div_cancel1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "2*n!1+1"
                                                                   "S*X/F")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "div_div2")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((identity_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_id_fun formula-decl nil derivatives "analysis/"))
   shostak))
 (cos_term_deriv_TCC1 0
  (cos_term_deriv_TCC1-1 nil 3320765601
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (cos_term_deriv subtype "(number_fields.-)(trig_approx.n, 1)"
    "nat")))
 (cos_term_deriv 0
  (cos_term_deriv-1 nil 3320767680
   ("" (skosimp)
    (("" (expand "cos_term")
      (("" (expand "sin_term")
        (("" (case-replace "n!1=0")
          (("1" (lemma "const_derivable_fun[real]" ("b" "1"))
            (("1" (lemma "deriv_const_fun[real]" ("b" "1"))
              (("1" (expand "const_fun") (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "identity_derivable_fun[real]")
              (("2" (lemma "deriv_id_fun[real]")
                (("2" (expand "I")
                  (("2" (expand "const_fun")
                    (("2"
                      (lemma "deriv_exp_fun[real]"
                       ("f" "LAMBDA (x: real): x" "n" "2*n!1"))
                      (("2" (assert)
                        (("2" (expand "^" -1)
                          (("2" (flatten)
                            (("2"
                              (lemma "scal_derivable_fun[real]"
                               ("f"
                                "LAMBDA (t: real): t ^ (2 * n!1)"
                                "b"
                                "(-1)^n!1/factorial(2 * n!1)"))
                              (("2"
                                (lemma
                                 "deriv_scal_fun[real]"
                                 ("ff"
                                  "LAMBDA (t: real): t ^ (2 * n!1)"
                                  "b"
                                  "(-1)^n!1/factorial(2 * n!1)"))
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "*")
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide-all-but (1 2))
                                              (("1"
                                                (apply-extensionality
                                                 2
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (name-replace
                                                   "X"
                                                   "x!1 ^ (2 * n!1 - 1)")
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       1)
                                                      (("1"
                                                        (name-replace
                                                         "S"
                                                         "expt((-1), n!1 - 1)")
                                                        (("1"
                                                          (expand
                                                           "factorial"
                                                           1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_term const-decl "real" trig_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (identity_derivable_fun formula-decl nil derivatives "analysis/")
    (I const-decl "(bijective?[T, T])" identity nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_scal_fun formula-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[T -> real]" real_fun_ops "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (scal_derivable_fun formula-decl nil derivatives "analysis/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "[T -> real]" real_fun_ops "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (deriv_exp_fun formula-decl nil derivatives "analysis/")
    (deriv_id_fun formula-decl nil derivatives "analysis/")
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_term const-decl "real" trig_approx nil))
   shostak))
 (sin_approx_TCC1 0
  (sin_approx_TCC1-1 nil 3374498161
   ("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (sin_approx subtype "trig_approx.n" "T_high[nat]")))
 (sin_approx_a0 0
  (sin_approx_a0-1 nil 3321006684
   ("" (expand "sin_approx")
    (("" (expand "sin_term")
      (("" (expand "^" 1 2)
        (("" (expand "expt")
          (("" (induct "n")
            (("1" (expand "sigma")
              (("1" (assert)
                (("1" (expand "sigma") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (skosimp*)
              (("2" (expand "sigma" 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (sin_term const-decl "real" trig_approx nil)
    (expt def-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat "reals/")
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (sin_approx const-decl "real" trig_approx nil))
   shostak))
 (sin_approx_neg 0
  (sin_approx_neg-1 nil 3320921408
   ("" (expand "sin_approx")
    (("" (induct "n")
      (("1" (expand "sigma")
        (("1" (expand "sin_term")
          (("1" (skosimp)
            (("1" (rewrite "expt_x1")
              (("1" (rewrite "expt_x1")
                (("1" (assert)
                  (("1" (expand "sigma") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "sigma" 1)
          (("2" (inst - "a!1")
            (("2" (replace -1)
              (("2" (assert)
                (("2" (hide -1)
                  (("2" (expand "sin_term")
                    (("2" (assert)
                      (("2"
                        (case-replace
                         "(-a!1) ^ (3 + 2 * j!1) = - a!1 ^ (3 + 2 * j!1)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2"
                            (lemma "expt_plus" ("i" "1" "j" "2*j!1+2"))
                            (("2" (case-replace "a!1=0")
                              (("1"
                                (expand "^" 1)
                                (("1"
                                  (expand "expt" 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst-cp - "-a!1")
                                (("1"
                                  (inst - "a!1")
                                  (("1"
                                    (rewrite "expt_x1")
                                    (("1"
                                      (rewrite "expt_x1")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (lemma
                                               "expt_times"
                                               ("i" "2" "j" "1+j!1"))
                                              (("1"
                                                (inst-cp - "a!1")
                                                (("1"
                                                  (inst - "-a!1")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (case-replace
                                                         "(-a!1) ^ 2 = a!1 ^ 2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (expand
                                                               "expt")
                                                              (("2"
                                                                (expand
                                                                 "expt")
                                                                (("2"
                                                                  (expand
                                                                   "expt")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (sin_term const-decl "real" trig_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (expt_x0 formula-decl nil exponentiation nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (a!1 skolem-const-decl "real" trig_approx nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sin_approx const-decl "real" trig_approx nil))
   shostak))
 (sin_approx_next 0
  (sin_approx_next-1 nil 3320919641
   ("" (skosimp)
    (("" (expand "sin_approx")
      (("" (expand "sigma" 1 1)
        (("" (expand "sigma" 1 1)
          (("" (expand "sin_term")
            (("" (expand "^")
              (("" (expand "expt" 1 1)
                (("" (name-replace "S" "expt((-1), 1 + n!1)")
                  (("" (expand "expt" 1 1)
                    (("" (expand "expt" 1 1)
                      (("" (name-replace "AA" "expt(a!1, 3 + 2 * n!1)")
                        (("" (rewrite "div_times")
                          (("" (assert)
                            (("" (expand "factorial" 1 1)
                              ((""
                                (expand "factorial" 1 2)
                                ((""
                                  (expand "factorial" 1 1)
                                  ((""
                                    (name-replace
                                     "DRL100"
                                     "(20 * factorial(3 + 2 * n!1) +
            18 * (factorial(3 + 2 * n!1) * n!1)
            + 4 * (factorial(3 + 2 * n!1) * n!1 * n!1))")
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_approx const-decl "real" trig_approx nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_times formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (sin_term const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/"))
   shostak))
 (sin_approx_eq 0
  (sin_approx_eq-1 nil 3321006162
   ("" (skosimp)
    (("" (lemma "sin_approx_next" ("a" "a!1" "n" "n!1"))
      (("" (replace -2)
        (("" (lemma "div_simp" ("n0x" "(2 * n!1 + 5) * (2 * n!1 + 4)"))
          (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_approx_next formula-decl nil trig_approx nil)
    (div_simp formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (sin_approx_sin 0
  (sin_approx_sin-2 nil 3403526502
   ("" (skosimp)
    (("" (lemma "sin_series" ("x" "a!1" "n" "n!1"))
      (("" (expand "sin_term")
        ((""
          (case "forall (n:nat): sin_series_n(a!1, n) = sin_approx(a!1, n)")
          (("1" (inst - "n!1")
            (("1" (replace -1 -2)
              (("1" (hide -1)
                (("1" (rewrite "abs_div")
                  (("1" (rewrite "abs_mult")
                    (("1" (expand "abs" 1 4)
                      (("1" (case-replace "abs((-1) ^ (1 + n!1)) = 1")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (case "(-1)^2 =1")
                            (("1" (case "even?(1+n!1)")
                              (("1"
                                (expand "even?")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (rewrite "expt_times")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (rewrite "expt_1i")
                                          (("1"
                                            (expand "abs")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "even_or_odd")
                                (("2"
                                  (expand "odd?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "expt_plus")
                                        (("2"
                                          (rewrite "expt_times")
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (rewrite "expt_1i")
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (expand "expt")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "sin_series_n")
              (("2" (expand "sin_approx")
                (("2" (expand "sin_term")
                  (("2" (expand "sin_series_term")
                    (("2" (induct "n")
                      (("1" (expand "sigma")
                        (("1" (expand "sigma") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (rewrite "sigma_rew" 1)
                          (("2" (swap-rel 1)
                            (("2" (rewrite "sigma_rew" 1)
                              (("2"
                                (replace -1 1 rl)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma
                                     "sigma_eq"
                                     ("low"
                                      "0"
                                      "high"
                                      "j!1"
                                      "F"
                                      "LAMBDA (i: nat):
                     IF i > 1 + j!1 THEN 0
                     ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
                     ENDIF"
                                      "G"
                                      "LAMBDA (i: nat):
                      IF i > j!1 THEN 0
                      ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
                      ENDIF"))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_series formula-decl nil sincos nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin_series_n const-decl "real" sincos nil)
    (sin_approx const-decl "real" trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs_div formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (expt def-decl "real" exponentiation nil)
    (even? const-decl "bool" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd? const-decl "bool" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_rew formula-decl nil sigma "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sin_series_term const-decl "[nat -> real]" sincos nil)
    (sin_term const-decl "real" trig_approx nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil))
   nil)
  (sin_approx_sin-1 nil 3320991568
   ("" (skosimp)
    (("" (lemma "sin_series" ("x" "a!1" "n" "n!1"))
      (("" (expand "sin_term")
        ((""
          (case "forall (n:nat): sin_series_n(a!1, n) = sin_approx(a!1, n)")
          (("1" (inst - "n!1")
            (("1" (replace -1 -2)
              (("1" (hide -1)
                (("1" (rewrite "abs_div")
                  (("1" (rewrite "abs_mult")
                    (("1" (expand "abs" 1 4)
                      (("1" (case-replace "abs((-1) ^ (1 + n!1)) = 1")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (case "(-1)^2 =1")
                            (("1" (case "even?(1+n!1)")
                              (("1"
                                (expand "even?")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (rewrite "expt_times")
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (rewrite "expt_1i")
                                          (("1"
                                            (expand "abs")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "even_or_odd")
                                (("2"
                                  (expand "odd?")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (rewrite "expt_plus")
                                        (("2"
                                          (rewrite "expt_times")
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (rewrite "expt_1i")
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (expand "expt")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (expand "sin_series_n")
              (("2" (expand "sin_approx")
                (("2" (expand "sin_term")
                  (("2" (expand "sin_series_term")
                    (("2" (induct "n")
                      (("1" (expand "sigma") (("1" (propax) nil nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (expand "sigma" 1)
                          (("2" (replace -1 1 rl)
                            (("2" (hide -1)
                              (("2"
                                (lemma
                                 "sigma_eq"
                                 ("low"
                                  "0"
                                  "high"
                                  "j!1"
                                  "F"
                                  "LAMBDA (i: nat):
              IF i > 1 + j!1 THEN 0
              ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
              ENDIF"
                                  "G"
                                  "LAMBDA (i: nat):
               IF i > j!1 THEN 0
               ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
               ENDIF"))
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma "reals/")
    (sigma_eq formula-decl nil sigma "reals/"))
   shostak))
 (cos_approx_a0 0
  (cos_approx_a0-1 nil 3321006785
   ("" (expand "cos_approx")
    (("" (expand "cos_term")
      (("" (induct "n")
        (("1" (expand "sigma")
          (("1" (expand "sigma") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skosimp*)
          (("2" (expand "sigma" 1)
            (("2" (expand "^" 1 4)
              (("2" (expand "expt") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_term const-decl "real" trig_approx nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (hat_02n formula-decl nil power_series "series/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (expt def-decl "real" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (cos_approx const-decl "real" trig_approx nil))
   shostak))
 (cos_approx_neg 0
  (cos_approx_neg-2 "" 3744227310
   ("" (expand "cos_approx")
    (("" (induct "n")
      (("1" (expand "sigma")
        (("1" (expand "cos_term")
          (("1" (skosimp*)
            (("1" (expand "sigma" 1) (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "sigma" 1)
          (("2" (inst - "a!1")
            (("2" (replace -1)
              (("2" (assert)
                (("2" (hide -1)
                  (("2" (expand "cos_term")
                    (("2" (case-replace "a!1=0")
                      (("2" (lemma "expt_times" ("i" "2" "j" "1+j!1"))
                        (("2" (inst-cp - "a!1")
                          (("2" (inst - "-a!1")
                            (("2" (case-replace "(-a!1) ^ 2 = a!1 ^ 2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_approx_neg-1 nil 3320922036
   ("" (expand "cos_approx")
    (("" (induct "n")
      (("1" (expand "sigma")
        (("1" (expand "cos_term")
          (("1" (skosimp*)
            (("1" (expand "sigma" 1) (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (expand "sigma" 1)
          (("2" (inst - "a!1")
            (("2" (replace -1)
              (("2" (assert)
                (("2" (hide -1)
                  (("2" (expand "cos_term")
                    (("2" (case-replace "a!1=0")
                      (("1" (expand "^")
                        (("1" (expand "expt") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (lemma "expt_times" ("i" "2" "j" "1+j!1"))
                        (("2" (inst-cp - "a!1")
                          (("2" (inst - "-a!1")
                            (("2" (case-replace "(-a!1) ^ 2 = a!1 ^ 2")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but (1 2))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (cos_term const-decl "real" trig_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt_times formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cos_approx const-decl "real" trig_approx nil))
   shostak))
 (cos_approx_cos 0
  (cos_approx_cos-1 nil 3320992237
   ("" (skosimp)
    (("" (lemma "cos_series" ("x" "a!1" "n" "n!1"))
      (("" (expand "cos_term")
        (("" (rewrite "abs_div")
          (("" (expand "abs" 1 3)
            (("" (rewrite "abs_mult")
              (("" (case-replace "abs((-1)^(1+n!1))=1")
                (("1"
                  (case "forall (n:nat): cos_series_n(a!1, n) = cos_approx(a!1, n)")
                  (("1" (inst - "n!1") (("1" (assert) nil nil)) nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "cos_approx")
                      (("2" (expand "cos_series_n")
                        (("2" (expand "cos_series_term")
                          (("2" (expand "cos_term")
                            (("2" (induct "n")
                              (("1"
                                (expand "sigma")
                                (("1"
                                  (expand "sigma")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp*)
                                (("2"
                                  (expand "sigma" 1)
                                  (("2"
                                    (replace -1 1 rl)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma
                                         "sigma_eq"
                                         ("low"
                                          "0"
                                          "high"
                                          "j!1"
                                          "F"
                                          "LAMBDA (i: nat):
              IF i > 1 + j!1 THEN 0
              ELSE IF i = 0 THEN 1
                   ELSE (-1) ^ i * a!1 ^ (2 * i) / factorial(2 * i)
                   ENDIF
              ENDIF"
                                          "G"
                                          "LAMBDA (i: nat):
               IF i > j!1 THEN 0
               ELSE IF i = 0 THEN 1
                    ELSE (-1) ^ i * a!1 ^ (2 * i) / factorial(2 * i)
                    ENDIF
               ENDIF"))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (case "(-1)^2=1")
                    (("1" (case "even?(1+n!1)")
                      (("1" (expand "even?")
                        (("1" (skosimp)
                          (("1" (replace -1)
                            (("1" (rewrite "expt_times")
                              (("1"
                                (replace -2)
                                (("1"
                                  (rewrite "expt_1i")
                                  (("1"
                                    (expand "abs")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "even_or_odd")
                        (("2" (expand "odd?")
                          (("2" (skosimp*)
                            (("2" (replace -1)
                              (("2"
                                (rewrite "expt_plus")
                                (("2"
                                  (rewrite "expt_times")
                                  (("2"
                                    (rewrite "expt_x1")
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (rewrite "expt_1i")
                                        (("2"
                                          (expand "abs")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "^")
                        (("2" (expand "expt")
                          (("2" (expand "expt")
                            (("2" (expand "expt")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_series formula-decl nil sincos nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs_div formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (expt def-decl "real" exponentiation nil)
    (even? const-decl "bool" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd? const-decl "bool" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (cos_series_n const-decl "real" sincos nil)
    (cos_approx const-decl "real" trig_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_series_term const-decl "[nat -> real]" sincos nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_eq formula-decl nil sigma "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cos_term const-decl "real" trig_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   shostak))
 (cos_approx_next 0
  (cos_approx_next-1 nil 3320919986
   ("" (skosimp)
    (("" (expand "cos_approx")
      (("" (expand "sigma" 1 1)
        (("" (expand "sigma" 1 1)
          (("" (expand "cos_term")
            (("" (expand "^")
              (("" (expand "expt" 1 1)
                (("" (name-replace "S" "expt((-1), 1 + n!1)")
                  (("" (expand "expt" 1 1)
                    (("" (expand "expt" 1 1)
                      (("" (name-replace "AA" "expt(a!1, 2 + 2 * n!1)")
                        (("" (expand "factorial" 1 1)
                          (("" (expand "factorial" 1 2)
                            (("" (expand "factorial" 1 1)
                              ((""
                                (rewrite "div_times")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_approx const-decl "real" trig_approx nil)
    (^ const-decl "real" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (div_times formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (cos_term const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/"))
   shostak))
 (cos_approx_eq 0
  (cos_approx_eq-1 nil 3321006042
   ("" (skosimp*)
    (("" (lemma "cos_approx_next" ("a" "a!1" "n" "n!1"))
      (("" (replace -2 -1)
        (("" (lemma "div_simp" ("n0x" "(2 * n!1 + 4) * (2 * n!1 + 3)"))
          (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_approx_next formula-decl nil trig_approx nil)
    (div_simp formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (sin_approx_deriv 0
  (sin_approx_deriv-1 nil 3320763896
   ("" (expand "sin_approx")
    (("" (expand "cos_approx")
      (("" (induct "n")
        (("1" (expand "sigma")
          (("1" (lemma "sin_term_deriv" ("n" "0"))
            (("1" (flatten)
              (("1" (lemma "sin_term_deriv" ("n" "0"))
                (("1" (flatten)
                  (("1" (expand "sigma") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "sin_term_deriv" ("n" "0"))
          (("2" (flatten)
            (("2" (expand "sigma")
              (("2" (expand "sigma") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skosimp)
          (("3" (expand "sigma" 1)
            (("3" (lemma "sin_term_deriv" ("n" "1+j!1"))
              (("3" (flatten)
                (("3"
                  (lemma "sum_derivable_fun[real]"
                   ("f1" "LAMBDA a: sin_term(a)(1 + j!1)" "f2"
                    "LAMBDA a: sigma(0, j!1, sin_term(a))"))
                  (("3" (assert)
                    (("3"
                      (lemma "deriv_sum_fun[real]"
                       ("ff1" "LAMBDA a: sin_term(a)(1 + j!1)" "ff2"
                        "LAMBDA a: sigma(0, j!1, sin_term(a))"))
                      (("3" (replace -4)
                        (("3" (replace -6)
                          (("3" (expand "+") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_approx const-decl "real" trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sum_derivable_fun formula-decl nil derivatives "analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_sum_fun formula-decl nil derivatives "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (sin_term_deriv formula-decl nil trig_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (cos_term const-decl "real" trig_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin_term const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_approx const-decl "real" trig_approx nil))
   shostak))
 (cos_approx_deriv_TCC1 0
  (cos_approx_deriv_TCC1-1 nil 3320763874
   ("" (skosimp) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (cos_approx_deriv subtype "(number_fields.-)(trig_approx.n, 1)"
    "nat")))
 (cos_approx_deriv 0
  (cos_approx_deriv-1 nil 3320768203
   ("" (expand "cos_approx")
    (("" (expand "sin_approx")
      (("" (induct "n")
        (("1" (expand "sigma")
          (("1" (expand "cos_term")
            (("1" (lemma "const_derivable_fun[real]" ("b" "1"))
              (("1" (expand "sigma") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "deriv_const_fun[real]" ("b" "1"))
          (("2" (expand "sigma")
            (("2" (expand "cos_term")
              (("2" (expand "sigma") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (skosimp*)
          (("3" (case-replace "j!1=0")
            (("1" (assert)
              (("1" (expand "sigma" 1)
                (("1" (lemma "cos_term_deriv" ("n" "1"))
                  (("1" (flatten)
                    (("1"
                      (lemma "sum_derivable_fun[real]"
                       ("f1" "LAMBDA a: cos_term(a)(1)" "f2"
                        "LAMBDA a: sigma(0, 0, cos_term(a))"))
                      (("1" (assert)
                        (("1" (expand "+")
                          (("1" (assert)
                            (("1"
                              (lemma "deriv_sum_fun[real]"
                               ("ff1"
                                "LAMBDA a: cos_term(a)(1)"
                                "ff2"
                                "LAMBDA a: sigma(0, 0, cos_term(a))"))
                              (("1"
                                (replace -7)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (expand "+")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "sigma" 2)
                (("2" (lemma "cos_term_deriv" ("n" "1+j!1"))
                  (("2" (flatten)
                    (("2" (assert)
                      (("2"
                        (lemma "sum_derivable_fun[real]"
                         ("f1" "LAMBDA a: cos_term(a)(1 + j!1)" "f2"
                          "LAMBDA a: sigma(0, j!1, cos_term(a))"))
                        (("2" (assert)
                          (("2" (expand "+")
                            (("2" (assert)
                              (("2"
                                (lemma
                                 "deriv_sum_fun[real]"
                                 ("ff1"
                                  "LAMBDA a: cos_term(a)(1+j!1)"
                                  "ff2"
                                  "LAMBDA a: sigma(0, j!1, cos_term(a))"))
                                (("2"
                                  (replace -4)
                                  (("2"
                                    (replace -6)
                                    (("2"
                                      (expand "+")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (hide-all-but (1 2))
                                          (("2"
                                            (apply-extensionality
                                             2
                                             :hide?
                                             t)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skosimp) (("4" (assert) nil nil)) nil)
         ("5" (skosimp) (("5" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sin_approx const-decl "real" trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_term_deriv formula-decl nil trig_approx nil)
    (sum_derivable_fun formula-decl nil derivatives "analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (deriv_sum_fun formula-decl nil derivatives "analysis/")
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (deriv_const_fun formula-decl nil derivatives "analysis/")
    (const_derivable_fun formula-decl nil derivatives "analysis/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (sin_term const-decl "real" trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (cos_term const-decl "real" trig_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cos_approx const-decl "real" trig_approx nil))
   shostak))
 (sin_lb_neg 0
  (sin_lb_neg-1 nil 3321098562
   ("" (expand "sin_lb")
    (("" (expand "sin_ub")
      (("" (skosimp)
        (("" (lemma "trichotomy" ("x" "a!1"))
          (("" (split -1)
            (("1" (assert) (("1" (rewrite "sin_approx_neg") nil nil))
              nil)
             ("2" (replace -1)
              (("2" (assert)
                (("2" (rewrite "sin_approx_a0")
                  (("2" (rewrite "sin_approx_a0")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (assert) (("3" (rewrite "sin_approx_neg") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_ub const-decl "real" trig_approx nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (sin_approx_a0 formula-decl nil trig_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin_approx_neg formula-decl nil trig_approx nil)
    (sin_lb const-decl "real" trig_approx nil))
   shostak))
 (sin_ub_neg 0
  (sin_ub_neg-1 nil 3321098748
   ("" (skosimp)
    (("" (lemma "sin_lb_neg" ("a" "-a!1" "n" "n!1"))
      (("" (assert) nil nil)) nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_lb_neg formula-decl nil trig_approx nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sin_lb_a0 0
  (sin_lb_a0-1 nil 3321123319
   ("" (expand "sin_lb")
    (("" (skosimp) (("" (rewrite "sin_approx_a0") nil nil)) nil)) nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_approx_a0 formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sin_lb const-decl "real" trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (sin_ub_a0 0
  (sin_ub_a0-1 nil 3321123338
   ("" (expand "sin_ub")
    (("" (skosimp) (("" (rewrite "sin_approx_a0") nil nil)) nil)) nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_approx_a0 formula-decl nil trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (sin_ub const-decl "real" trig_approx nil))
   shostak))
 (sin_lb_ub 0
  (sin_lb_ub-2 nil 3321626202
   ("" (skosimp)
    (("" (expand "sin_lb")
      (("" (expand "sin_ub")
        (("" (lift-if)
          (("" (case-replace "n0x!1 < 0")
            (("1" (expand "sin_approx")
              (("1" (expand "sigma" 1 2)
                (("1"
                  (lemma "sin_term_gt0" ("a" "n0x!1" "n" "1+2*n!1"))
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "sin_approx")
                (("2" (expand "sigma" 2 1)
                  (("2"
                    (lemma "sin_term_lt0" ("a" "n0x!1" "n" "1+2*n!1"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_lb const-decl "real" trig_approx nil)
    (sin_term_lt0 formula-decl nil trig_approx nil)
    (sin_approx const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin_term_gt0 formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_ub const-decl "real" trig_approx nil))
   nil))
 (sin_lb_inc 0
  (sin_lb_inc-1 nil 3321007393
   (""
    (case "FORALL (n: nat, px: posreal):
        px * px < (4 * n + 7) * (4 * n + 6) =>
         sin_lb(px, n) < sin_lb(px, n + 1)")
    (("1" (induct "pm" 1)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skosimp*)
        (("3" (case-replace "j!1=0")
          (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil)
           ("2" (inst - "n!1" "px!1")
            (("2" (assert)
              (("2" (inst - "1+n!1" "px!1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "sin_lb")
          (("2" (lemma "sin_approx_next" ("a" "px!1" "n" "1+2*n!1"))
            (("2"
              (lemma "div_mult_pos_lt1"
               ("z" "px!1 * px!1" "py" "(4 * n!1 + 7) * (4 * n!1 + 6)"
                "x" "1"))
              (("2" (replace -1 -3 rl)
                (("2" (hide -1)
                  (("2"
                    (name-replace "TT"
                     "px!1 * px!1 / ((4 * n!1 + 7) * (4 * n!1 + 6))")
                    (("2"
                      (lemma "sin_term_gt0"
                       ("a" "px!1" "n" "2*(1+n!1)"))
                      (("2" (assert)
                        (("2"
                          (name-replace "ST"
                           "sin_term(px!1)(2 + 2 * n!1)")
                          (("2"
                            (lemma "both_sides_times_pos_lt1"
                             ("pz" "ST" "x" "0" "y" "1-TT"))
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_lt1 formula-decl nil real_props nil)
    (sin_term_gt0 formula-decl nil trig_approx nil)
    (sin_term const-decl "real" trig_approx nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sin_approx_next formula-decl nil trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_lb const-decl "real" trig_approx nil))
   shostak))
 (sin_ub_dec 0
  (sin_ub_dec-2 nil 3321626241
   (""
    (case "FORALL (n: nat, px: posreal):
               px * px < (4 * n + 5) * (4 * n + 4) =>
                sin_ub(px, n + 1) < sin_ub(px, n)")
    (("1" (induct "pm")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skosimp*)
        (("3" (case-replace "j!1=0")
          (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil)
           ("2" (inst - "n!1" "px!1")
            (("2" (assert)
              (("2" (inst - "n!1+1" "px!1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "sin_ub")
          (("2" (lemma "sin_approx_next" ("a" "px!1" "n" "2*n!1"))
            (("2"
              (lemma "div_mult_pos_lt1"
               ("z" "px!1 * px!1" "py" "(4 * n!1 + 5) * (4 * n!1 + 4)"
                "x" "1"))
              (("2"
                (name-replace "TT"
                 "px!1 * px!1 / ((4 * n!1 + 5) * (4 * n!1 + 4))")
                (("2" (assert)
                  (("2" (hide -3)
                    (("2"
                      (lemma "sin_term_lt0" ("a" "px!1" "n" "1+2*n!1"))
                      (("2" (assert)
                        (("2"
                          (name-replace "ST"
                           "sin_term(px!1)(1 + 2 * n!1)")
                          (("2"
                            (lemma "both_sides_times_neg_lt1"
                             ("nz" "ST" "y" "0" "x" "1-TT"))
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sin_term_lt0 formula-decl nil trig_approx nil)
    (sin_term const-decl "real" trig_approx nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sin_approx_next formula-decl nil trig_approx nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_ub const-decl "real" trig_approx nil))
   nil))
 (sin_lb_lt 0
  (sin_lb_lt-1 nil 3321014972
   ("" (skosimp)
    (("" (name "EPS" "sin_ub(px!1,n!1+1) - sin_lb(px!1,n!1)")
      (("" (case "sin_term(px!1)(2*(n!1+1)) = EPS")
        (("1" (lemma "sin_term_gt0" ("a" "px!1" "n" "2*(n!1+1)"))
          (("1" (replace -2)
            (("1" (simplify -1)
              (("1" (lemma "sin_approx_sin" ("a" "px!1"))
                (("1" (expand "sin_lb")
                  (("1" (expand "sin_ub")
                    (("1"
                      (name-replace "SN"
                       "sin_approx(px!1, 1 + 2 * n!1)")
                      (("1" (inst - "2*(n!1+1)")
                        (("1"
                          (name-replace "SN2"
                           "sin_approx(px!1, 2 * (n!1 + 1))")
                          (("1" (rewrite "sin_term_next" -1)
                            (("1" (replace -3)
                              (("1"
                                (name-replace
                                 "M"
                                 "(4 * n!1 + 7) * (4 * n!1 + 6)")
                                (("1"
                                  (rewrite "abs_div")
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1"
                                      (rewrite "abs_mult")
                                      (("1"
                                        (rewrite "abs_mult")
                                        (("1"
                                          (expand "abs" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "div_mult_pos_lt1"
                                               ("z"
                                                "px!1*px!1"
                                                "py"
                                                "M"
                                                "x"
                                                "1"))
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "both_sides_times_pos_lt1"
                                                   ("pz"
                                                    "EPS"
                                                    "x"
                                                    "px!1 * px!1 / M"
                                                    "y"
                                                    "1"))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2 -2)
          (("2" (expand "sin_ub")
            (("2" (expand "sin_lb")
              (("2" (expand "sin_approx")
                (("2" (expand "sigma" -1 1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_lb const-decl "real" trig_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sin_ub const-decl "real" trig_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sigma def-decl "real" sigma "reals/")
    (sin_term_gt0 formula-decl nil trig_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_approx const-decl "real" trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sin_term_next formula-decl nil trig_approx nil)
    (sin_approx_sin formula-decl nil trig_approx nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_term const-decl "real" trig_approx nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (sin_ub_lt 0
  (sin_ub_lt-1 nil 3321016985
   ("" (skosimp)
    (("" (lemma "sin_ub_dec" ("px" "px!1" "n" "n!1" "pm" "1"))
      (("" (replace -2)
        (("" (lemma "sin_lb_ub" ("n0x" "px!1" "n" "n!1+1"))
          (("" (expand "sin_lb")
            (("" (lemma "sin_approx_sin" ("a" "px!1" "n" "3+2*n!1"))
              (("" (lemma "sin_term_neg" ("a" "px!1" "n" "3+2*n!1"))
                (("" (simplify -1)
                  (("" (name-replace "S" "sin(px!1)")
                    ((""
                      (case "sin_ub(px!1, 1 + n!1) - sin_approx(px!1, 3 + 2 * n!1) = -sin_term(px!1)(3+2*n!1)")
                      (("1" (name-replace "SN" "sin_ub(px!1, n!1)")
                        (("1"
                          (name-replace "SN1" "sin_ub(px!1, n!1+1)")
                          (("1"
                            (name-replace "SN3"
                             "sin_approx(px!1, 2*n!1+3)")
                            (("1" (rewrite "sin_term_next" -3)
                              (("1"
                                (name-replace
                                 "ST"
                                 "sin_term(px!1)(3 + 2 * n!1)")
                                (("1"
                                  (rewrite "abs_div")
                                  (("1"
                                    (rewrite "abs_mult")
                                    (("1"
                                      (rewrite "abs_mult")
                                      (("1"
                                        (rewrite "abs_mult")
                                        (("1"
                                          (expand "abs" -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "div_mult_pos_lt1"
                                               ("z"
                                                "px!1*px!1"
                                                "py"
                                                "72 + 36 * n!1 + (16 * (n!1 * n!1) + 32 * n!1)"
                                                "x"
                                                "1"))
                                              (("1"
                                                (lemma
                                                 "both_sides_times_pos_lt1"
                                                 ("pz"
                                                  "-ST"
                                                  "x"
                                                  "px!1 * px!1 / (72 + 36 * n!1 + (16 * (n!1 * n!1) + 32 * n!1))"
                                                  "y"
                                                  "1"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "sin_ub")
                          (("2" (expand "sin_approx")
                            (("2" (expand "sigma" 1 2)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_ub_dec formula-decl nil trig_approx nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sin_lb_ub formula-decl nil trig_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_approx_sin formula-decl nil trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_ub const-decl "real" trig_approx nil)
    (sin_approx const-decl "real" trig_approx nil)
    (sin_term const-decl "real" trig_approx nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sin_term_next formula-decl nil trig_approx nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin const-decl "real" sincos_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (sin_term_neg formula-decl nil trig_approx nil)
    (sin_lb const-decl "real" trig_approx nil))
   shostak))
 (sin_lb_gt 0
  (sin_lb_gt-1 nil 3321010974
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "sin_lb")
        (("1" (expand "sin_approx")
          (("1" (expand "sigma")
            (("1" (expand "sin_term")
              (("1" (expand "sigma")
                (("1" (rewrite "expt_x0")
                  (("1" (rewrite "expt_x1")
                    (("1" (rewrite "expt_x1")
                      (("1" (expand "factorial")
                        (("1" (expand "factorial")
                          (("1" (expand "factorial")
                            (("1" (expand "factorial")
                              (("1"
                                (assert)
                                (("1"
                                  (case "px!1<=6")
                                  (("1"
                                    (lemma
                                     "le_times_le_pos"
                                     ("nnx"
                                      "px!1"
                                      "y"
                                      "6"
                                      "nnz"
                                      "px!1"
                                      "w"
                                      "6"))
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (case "6<px!1")
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (case "1-px!1*px!1/6 < -6")
                                        (("1"
                                          (lemma
                                           "both_sides_times_pos_lt1"
                                           ("pz"
                                            "px!1"
                                            "x"
                                            "1 - px!1 * px!1 / 6"
                                            "y"
                                            "-6"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (expand "expt")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "both_sides_div_pos_lt1"
                                             ("pz"
                                              "6"
                                              "x"
                                              "42"
                                              "y"
                                              "px!1*px!1"))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst - "px!1")
        (("2" (assert)
          (("2" (expand "sin_lb")
            (("2" (lemma "sin_approx_next" ("a" "px!1" "n" "1+2*j!1"))
              (("2"
                (lemma "div_mult_pos_gt1"
                 ("z" "px!1*px!1" "py"
                  "110 + 44 * j!1 + (16 * (j!1 * j!1) + 40 * j!1)" "x"
                  "1"))
                (("2" (assert)
                  (("2"
                    (name-replace "SN" "sin_approx(px!1, 1 + 2 * j!1)")
                    (("2"
                      (name-replace "SN2"
                       "sin_approx(px!1, 3 + 2 * j!1)")
                      (("2"
                        (lemma "sin_term_gt0"
                         ("a" "px!1" "n" "2*(1+j!1)"))
                        (("2" (assert)
                          (("2"
                            (name-replace "ST"
                             "sin_term(px!1)(2 + 2 * j!1)")
                            (("2"
                              (case "1-px!1 * px!1 / (42 + 28 * j!1 + (16 * (j!1 * j!1) + 24 * j!1))<0")
                              (("1"
                                (lemma
                                 "both_sides_times_pos_lt1"
                                 ("pz"
                                  "ST"
                                  "x"
                                  "1 - px!1 * px!1 / (42 + 28 * j!1 + (16 * (j!1 * j!1) + 24 * j!1))"
                                  "y"
                                  "0"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (name-replace
                                       "TT"
                                       "(px!1 * px!1 / (42 + 16 * (j!1 * j!1) + 52 * j!1))")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 2 -1 -3 -4)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (lemma
                                     "div_mult_pos_gt1"
                                     ("z"
                                      "px!1*px!1"
                                      "py"
                                      "(42 + 28 * j!1 + (16 * (j!1 * j!1) + 24 * j!1))"
                                      "x"
                                      "1"))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sin_approx_next formula-decl nil trig_approx nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_term_gt0 formula-decl nil trig_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (sin_approx const-decl "real" trig_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin_term const-decl "real" trig_approx nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin_lb const-decl "real" trig_approx nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (sin_ub_gt 0
  (sin_ub_gt-2 nil 3321626316
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "sin_ub")
        (("1" (expand "sin_approx")
          (("1" (expand "sigma")
            (("1" (expand "sin_term")
              (("1" (rewrite "expt_x0")
                (("1" (rewrite "expt_x1")
                  (("1" (expand "factorial")
                    (("1" (expand "factorial")
                      (("1" (case "px!1<=4")
                        (("1"
                          (lemma "le_times_le_pos"
                           ("nnx" "px!1" "y" "4" "nnz" "px!1" "w" "4"))
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst - "px!1")
        (("2" (assert)
          (("2" (expand "sin_ub")
            (("2" (lemma "sin_approx_next" ("a" "px!1" "n" "2*j!1"))
              (("2" (name-replace "SN" "sin_approx(px!1, 2 * j!1)")
                (("2"
                  (name-replace "SN2" "sin_approx(px!1, 2 * j!1+2)")
                  (("2"
                    (lemma "sin_term_lt0" ("a" "px!1" "n" "1+2*j!1"))
                    (("2" (simplify -1)
                      (("2"
                        (name-replace "ST"
                         "sin_term(px!1)(1 + 2 * j!1)")
                        (("2"
                          (lemma "negreal_times_negreal_is_posreal"
                           ("nx" "ST" "ny"
                            "1 - px!1 * px!1 / ((2 * (2 * j!1) + 5) * (2 * (2 * j!1) + 4))"))
                          (("1" (assert) nil nil)
                           ("2" (hide -1 -2 -3 2)
                            (("2"
                              (lemma "div_mult_pos_gt1"
                               ("z"
                                "px!1*px!1"
                                "py"
                                "20 + 20 * j!1 + (16 * (j!1 * j!1) + 16 * j!1)"
                                "x"
                                "1"))
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sin_approx_next formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (sin_term_lt0 formula-decl nil trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin_approx const-decl "real" trig_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin_term const-decl "real" trig_approx nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (<= const-decl "bool" reals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (sin_ub const-decl "real" trig_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (sin_lb 0
         (sin_lb-1 nil 3321098107
          ("" (skosimp)
           (("" (lemma "trichotomy" ("x" "n0x!1"))
             (("" (split -1)
               (("1"
                 (lemma "trich_lt"
                  ("x" "n0x!1*n0x!1" "y" "(4*n!1+7)*(4*n!1+6)"))
                 (("1" (split -1)
                   (("1" (lemma "sin_lb_lt" ("px" "n0x!1" "n" "n!1"))
                     (("1" (assert) nil nil) ("2" (assert) nil nil))
                     nil)
                    ("2"
                     (case-replace
                      "sin_lb(n0x!1,n!1)=sin_lb(n0x!1,n!1+1)")
                     (("1"
                       (lemma "sin_lb_lt" ("px" "n0x!1" "n" "n!1+1"))
                       (("1" (assert) nil nil) ("2" (assert) nil nil))
                       nil)
                      ("2" (hide 2)
                       (("2" (expand "sin_lb")
                         (("2" (assert)
                           (("2"
                             (lemma "sin_approx_eq"
                              ("a" "n0x!1" "n" "1+2*n!1"))
                             (("2" (assert) nil nil)) nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("3" (lemma "sin_lb_gt" ("px" "n0x!1" "n" "n!1"))
                     (("1" (typepred "sin(n0x!1)")
                       (("1" (assert) nil nil)) nil)
                      ("2" (assert) nil nil))
                     nil))
                   nil))
                 nil)
                ("2" (assert) nil nil)
                ("3" (lemma "sin_neg" ("a" "n0x!1"))
                 (("3"
                   (lemma "both_sides_times_neg_lt1"
                    ("nz" "-1" "y" "sin_lb(n0x!1, n!1)" "x"
                     "sin(n0x!1)"))
                   (("3" (replace -1 1 rl)
                     (("3" (replace -2 1 rl)
                       (("3"
                         (lemma "sin_ub_neg" ("a" "n0x!1" "n" "n!1"))
                         (("3" (replace -1 1 rl)
                           (("3" (hide -1 -2 -3)
                             (("3"
                               (lemma
                                "trich_lt"
                                ("x"
                                 "-n0x!1*-n0x!1"
                                 "y"
                                 "(4*n!1+5)*(4*n!1+4)"))
                               (("3"
                                 (split -1)
                                 (("1"
                                   (lemma
                                    "sin_ub_lt"
                                    ("px" "-n0x!1" "n" "n!1"))
                                   (("1" (assert) nil nil)
                                    ("2" (assert) nil nil))
                                   nil)
                                  ("2"
                                   (lemma
                                    "sin_ub_lt"
                                    ("px" "-n0x!1" "n" "n!1+1"))
                                   (("1"
                                     (assert)
                                     (("1"
                                       (case-replace
                                        "sin_ub(-n0x!1, 1 + n!1) = sin_ub(-n0x!1, n!1)")
                                       (("1"
                                         (hide -1 2)
                                         (("1"
                                           (expand "sin_ub")
                                           (("1"
                                             (lemma
                                              "sin_approx_eq"
                                              ("a"
                                               "-n0x!1"
                                               "n"
                                               "2*n!1"))
                                             (("1" (assert) nil nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil)
                                    ("2" (assert) nil nil))
                                   nil)
                                  ("3"
                                   (lemma
                                    "sin_ub_gt"
                                    ("px" "-n0x!1" "n" "n!1"))
                                   (("1" (assert) nil nil)
                                    ("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ((nzreal nonempty-type-eq-decl nil reals nil)
           (/= const-decl "boolean" notequal nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (boolean nonempty-type-decl nil booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (trichotomy formula-decl nil real_axioms nil)
           (sin_neg formula-decl nil sincos_def nil)
           (sin_ub_neg formula-decl nil trig_approx nil)
           (sin_ub_lt formula-decl nil trig_approx nil)
           (minus_nzreal_is_nzreal application-judgement "nzreal"
            real_types nil)
           (int_minus_int_is_int application-judgement "int" integers
            nil)
           (sin_ub const-decl "real" trig_approx nil)
           (sin_ub_gt formula-decl nil trig_approx nil)
           (both_sides_times_neg_lt1 formula-decl nil real_props nil)
           (nonpos_real nonempty-type-eq-decl nil real_types nil)
           (< const-decl "bool" reals nil)
           (negreal nonempty-type-eq-decl nil real_types nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (>= const-decl "bool" reals nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (* const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (trich_lt formula-decl nil real_props nil)
           (posint_times_posint_is_posint application-judgement
            "posint" integers nil)
           (int_times_even_is_even application-judgement "even_int"
            integers nil)
           (nzreal_times_nzreal_is_nzreal application-judgement
            "nzreal" real_types nil)
           (sin_lb_gt formula-decl nil trig_approx nil)
           (minus_odd_is_odd application-judgement "odd_int" integers
            nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (sin const-decl "real" sincos_def nil)
           (- const-decl "[numfield -> numfield]" number_fields nil)
           (<= const-decl "bool" reals nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (sin_lb const-decl "real" trig_approx nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (sin_approx_eq formula-decl nil trig_approx nil)
           (odd_plus_even_is_odd application-judgement "odd_int"
            integers nil)
           (sin_lb_lt formula-decl nil trig_approx nil)
           (nonneg_real nonempty-type-eq-decl nil real_types nil)
           (> const-decl "bool" reals nil)
           (posreal nonempty-type-eq-decl nil real_types nil)
           (real_ge_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (real_gt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (AND const-decl "[bool, bool -> bool]" booleans nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (even_plus_odd_is_odd application-judgement "odd_int"
            integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (even_times_int_is_even application-judgement "even_int"
            integers nil)
           (nnint_times_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (even_plus_even_is_even application-judgement "even_int"
            integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (sin_range application-judgement "real_abs_le1" sincos nil))
          shostak))
 (sin_ub 0
  (sin_ub-1 nil 3321099757
   ("" (skosimp)
    (("" (lemma "trichotomy" ("x" "n0x!1"))
      (("" (split -1)
        (("1" (lemma "sin_lb" ("n0x" "-n0x!1" "n" "n!1"))
          (("1" (rewrite "sin_lb_neg")
            (("1" (rewrite "sin_neg")
              (("1"
                (lemma "both_sides_times_neg_lt1"
                 ("nz" "-1" "y" "sin(n0x!1)" "x" "sin_ub(n0x!1, n!1)"))
                (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil)
         ("3" (lemma "sin_lb" ("n0x" "-n0x!1" "n" "n!1"))
          (("3" (rewrite "sin_neg")
            (("3" (rewrite "sin_lb_neg")
              (("3"
                (lemma "both_sides_times_neg_lt1"
                 ("nz" "-1" "y" "sin(n0x!1)" "x" "sin_ub(n0x!1, n!1)"))
                (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trichotomy formula-decl nil real_axioms nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin_lb formula-decl nil trig_approx nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_neg formula-decl nil sincos_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin const-decl "real" sincos_def nil)
    (sin_ub const-decl "real" trig_approx nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_lb_neg formula-decl nil trig_approx nil))
   shostak))
 (sin_bounds 0
  (sin_bounds-1 nil 3321009206
   ("" (skosimp)
    (("" (case-replace "a!1=0")
      (("1" (rewrite "sin_0")
        (("1" (expand "sin_lb")
          (("1" (expand "sin_ub")
            (("1" (rewrite "sin_approx_a0")
              (("1" (rewrite "sin_approx_a0") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "sin_lb" ("n0x" "a!1" "n" "n!1"))
        (("1" (lemma "sin_ub" ("n0x" "a!1" "n" "n!1"))
          (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sin_lb const-decl "real" trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sin_approx_a0 formula-decl nil trig_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_ub const-decl "real" trig_approx nil)
    (sin_0 formula-decl nil sincos_def nil)
    (sin_ub formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sin_lb formula-decl nil trig_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (sin_lb_gt0 0
  (sin_lb_gt0-1 nil 3321123536
   ("" (skosimp*)
    (("" (assert)
      (("" (case "sin_lb(px!1,0) > 0")
        (("1" (case-replace "n!1=0")
          (("1" (lemma "sin_lb_inc" ("px" "px!1" "n" "0" "pm" "n!1"))
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         ("2" (assert)
          (("2" (hide 2)
            (("2" (expand "sin_lb")
              (("2" (assert)
                (("2" (expand "sin_approx")
                  (("2" (expand "sigma")
                    (("2" (expand "sigma")
                      (("2" (expand "sin_term")
                        (("2" (expand "^")
                          (("2" (expand "expt")
                            (("2" (expand "expt")
                              (("2"
                                (expand "expt")
                                (("2"
                                  (expand "expt")
                                  (("2"
                                    (expand "factorial")
                                    (("2"
                                      (expand "factorial")
                                      (("2"
                                        (expand "factorial")
                                        (("2"
                                          (expand "factorial")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "posreal_times_posreal_is_posreal"
                                               ("px"
                                                "px!1/6"
                                                "py"
                                                "6-px!1*px!1"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_approx const-decl "real" trig_approx nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (factorial def-decl "posnat" factorial "ints/")
    (expt def-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_term const-decl "real" trig_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sin_lb_inc formula-decl nil trig_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sin_lb const-decl "real" trig_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (cos_lb_neg 0
  (cos_lb_neg-1 nil 3321100129
   ("" (skosimp)
    (("" (expand "cos_lb") (("" (rewrite "cos_approx_neg") nil nil))
      nil))
    nil)
   ((cos_lb const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_approx_neg formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (cos_ub_neg 0
  (cos_ub_neg-1 nil 3321100152
   ("" (skosimp)
    (("" (expand "cos_ub") (("" (rewrite "cos_approx_neg") nil nil))
      nil))
    nil)
   ((cos_ub const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_approx_neg formula-decl nil trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (cos_lb_a0 0
  (cos_lb_a0-1 nil 3321123502
   ("" (expand "cos_lb")
    (("" (skosimp) (("" (rewrite "cos_approx_a0") nil nil)) nil)) nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_approx_a0 formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (cos_lb const-decl "real" trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (cos_ub_a0 0
  (cos_ub_a0-1 nil 3321123407
   ("" (expand "cos_ub")
    (("" (skosimp) (("" (rewrite "cos_approx_a0") nil nil)) nil)) nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_approx_a0 formula-decl nil trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cos_ub const-decl "real" trig_approx nil))
   shostak))
 (cos_lb_ub 0
  (cos_lb_ub-2 nil 3321626381
   ("" (skosimp)
    (("" (expand "cos_lb")
      (("" (expand "cos_ub")
        (("" (expand "cos_approx")
          (("" (expand "sigma" 1 1)
            (("" (lemma "cos_term_lt0" ("a" "n0x!1" "n" "1+2*n!1"))
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_lb const-decl "real" trig_approx nil)
    (cos_approx const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_term_lt0 formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma "reals/")
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (cos_ub const-decl "real" trig_approx nil))
   nil))
 (cos_lb_inc 0
  (cos_lb_inc-1 nil 3321021787
   (""
    (case "FORALL (n: nat, n0x: nzreal):
        n0x * n0x < (4 * n + 6) * (4 * n + 5) =>
         cos_lb(n0x, n) < cos_lb(n0x, n + 1)")
    (("1" (induct "pm")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skosimp*)
        (("3" (inst - "n!1" "n0x!1")
          (("3" (replace -3)
            (("3" (case-replace "j!1=0")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (inst - "n!1+1" "n0x!1") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "cos_lb")
          (("2" (lemma "cos_approx_next" ("a" "n0x!1" "n" "1+2*n!1"))
            (("2" (lemma "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+n!1)"))
              (("2" (simplify -1)
                (("2"
                  (name-replace "CT" "cos_term(n0x!1)(2 + 2 * n!1)")
                  (("2"
                    (name-replace "CN"
                     "cos_approx(n0x!1, 1 + 2 * n!1)")
                    (("2"
                      (name-replace "CN2"
                       "cos_approx(n0x!1, 3 + 2 * n!1)")
                      (("2"
                        (lemma "div_mult_pos_lt1"
                         ("z" "n0x!1*n0x!1" "py"
                          "(4 * n!1 + 6) * (4 * n!1 + 5)" "x" "1"))
                        (("2"
                          (name-replace "TT"
                           "n0x!1 * n0x!1 / ((4 * n!1 + 6) * (4 * n!1 + 5))")
                          (("2" (assert)
                            (("2"
                              (lemma "posreal_times_posreal_is_posreal"
                               ("px" "CT" "py" "1-TT"))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_term_gt0 formula-decl nil trig_approx nil)
    (cos_term const-decl "real" trig_approx nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cos_approx const-decl "real" trig_approx nil)
    (cos_approx_next formula-decl nil trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (> const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_lb const-decl "real" trig_approx nil))
   shostak))
 (cos_ub_dec 0
  (cos_ub_dec-2 nil 3321626426
   (""
    (case "FORALL (n: nat, n0x: nzreal):
               n0x * n0x < (4 * n + 4) * (4 * n + 3) =>
                cos_ub(n0x, n + 1) < cos_ub(n0x, n)")
    (("1" (induct "pm")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skosimp*)
        (("3" (inst - "n!1" "n0x!1")
          (("3" (case-replace "j!1=0")
            (("1" (assert) nil nil)
             ("2" (assert)
              (("2" (inst - "n!1+1" "n0x!1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "cos_ub")
          (("2" (lemma "cos_approx_next" ("a" "n0x!1" "n" "2*n!1"))
            (("2"
              (lemma "div_mult_pos_lt1"
               ("z" "n0x!1 * n0x!1" "py"
                "(4 * n!1 + 4) * (4 * n!1 + 3)" "x" "1"))
              (("2" (lemma "cos_term_lt0" ("a" "n0x!1" "n" "1+2*n!1"))
                (("2"
                  (name-replace "TT"
                   "n0x!1 * n0x!1 / ((4 * n!1 + 4) * (4 * n!1 + 3))")
                  (("2"
                    (name-replace "CT" "cos_term(n0x!1)(1 + 2 * n!1)")
                    (("2" (assert)
                      (("2"
                        (lemma "both_sides_times_pos_lt1"
                         ("pz" "1-TT" "x" "CT" "y" "0"))
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (cos_term const-decl "real" trig_approx nil)
    (cos_term_lt0 formula-decl nil trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (cos_approx_next formula-decl nil trig_approx nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (> const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_ub const-decl "real" trig_approx nil))
   nil))
 (cos_lb_lt 0
  (cos_lb_lt-1 nil 3321023357
   ("" (skosimp)
    (("" (lemma "cos_lb_inc" ("n0x" "n0x!1" "n" "n!1" "pm" "1"))
      (("" (replace -2 -1)
        (("" (lemma "cos_lb_ub" ("n0x" "n0x!1" "n" "n!1+1"))
          (("" (expand "cos_lb")
            (("" (expand "cos_ub")
              ((""
                (lemma "cos_approx_next"
                 ("a" "n0x!1" "n" "1 + 2 * n!1"))
                ((""
                  (lemma "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+n!1)"))
                  (("" (simplify -1)
                    ((""
                      (lemma "cos_approx_cos"
                       ("a" "n0x!1" "n" "2*(1+n!1)"))
                      (("" (name-replace "CC" "cos(n0x!1)")
                        (("" (rewrite "cos_term_next" -1)
                          ((""
                            (case "cos_approx(n0x!1, 2 + 2 * n!1) - cos_approx(n0x!1, 3 + 2 * n!1) = -cos_term(n0x!1)(3 + 2 * n!1)")
                            (("1"
                              (name-replace "CN1"
                               "cos_approx(n0x!1, 1 + 2 * n!1)")
                              (("1"
                                (name-replace
                                 "CN2"
                                 "cos_approx(n0x!1, 2 + 2 * n!1)")
                                (("1"
                                  (name-replace
                                   "CN3"
                                   "cos_approx(n0x!1, 3 + 2 * n!1)")
                                  (("1"
                                    (rewrite "cos_term_next" -1)
                                    (("1"
                                      (name-replace
                                       "CT"
                                       "cos_term(n0x!1)(2 + 2 * n!1)")
                                      (("1"
                                        (lemma
                                         "div_mult_pos_lt1"
                                         ("z"
                                          "n0x!1 * n0x!1"
                                          "py"
                                          "(4 * n!1 + 6) * (4 * n!1 + 5)"
                                          "x"
                                          "1"))
                                        (("1"
                                          (replace -8 -1)
                                          (("1"
                                            (simplify -1)
                                            (("1"
                                              (name-replace
                                               "M"
                                               "(4 * n!1 + 6) * (4 * n!1 + 5)")
                                              (("1"
                                                (case-replace
                                                 "-1 * (CT * n0x!1 * n0x!1) / M = -CT*((n0x!1 * n0x!1) / M)")
                                                (("1"
                                                  (lemma
                                                   "posreal_div_posreal_is_posreal"
                                                   ("px"
                                                    "n0x!1*n0x!1"
                                                    "py"
                                                    "M"))
                                                  (("1"
                                                    (name-replace
                                                     "TT"
                                                     "n0x!1 * n0x!1 / M")
                                                    (("1"
                                                      (rewrite
                                                       "abs_mult"
                                                       -5)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -5)
                                                        (("1"
                                                          (case-replace
                                                           "CC - CN2 < 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand "cos_approx")
                                (("2"
                                  (expand "sigma" 1 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_lb_inc formula-decl nil trig_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cos_lb_ub formula-decl nil trig_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_ub const-decl "real" trig_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (cos_term_gt0 formula-decl nil trig_approx nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_approx_cos formula-decl nil trig_approx nil)
    (cos_term_next formula-decl nil trig_approx nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma "reals/")
    (even_int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_term const-decl "real" trig_approx nil)
    (cos_approx const-decl "real" trig_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_approx_next formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (cos_lb const-decl "real" trig_approx nil))
   shostak))
 (cos_ub_lt 0
  (cos_ub_lt-1 nil 3321030211
   ("" (skosimp)
    (("" (lemma "cos_ub_dec" ("n0x" "n0x!1" "n" "n!1" "pm" "1"))
      (("" (replace -2 -1)
        (("" (lemma "cos_lb_ub" ("n0x" "n0x!1" "n" "n!1+1"))
          ((""
            (case "cos_ub(n0x!1, n!1 + 1) - cos_lb(n0x!1, n!1+1) = -cos_term(n0x!1)(3+2*n!1)")
            (("1" (lemma "cos_approx_cos" ("a" "n0x!1" "n" "2*n!1+3"))
              (("1" (expand "cos_lb")
                (("1" (name-replace "CC" "cos(n0x!1)")
                  (("1"
                    (name-replace "CN3"
                     "cos_approx(n0x!1, 2 * n!1 + 3)")
                    (("1" (rewrite "cos_term_next" -1)
                      (("1"
                        (lemma "cos_term_neg"
                         ("a" "n0x!1" "n" "3+2*n!1"))
                        (("1" (simplify -1)
                          (("1"
                            (name-replace "CT"
                             "cos_term(n0x!1)(3 + 2 * n!1)")
                            (("1"
                              (lemma "div_mult_pos_lt1"
                               ("z"
                                "n0x!1 * n0x!1"
                                "py"
                                "(56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1))"
                                "x"
                                "1"))
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "posreal_div_posreal_is_posreal"
                                   ("px"
                                    "n0x!1 * n0x!1"
                                    "py"
                                    "(56 + 16 * (n!1 * n!1) + 60 * n!1)"))
                                  (("1"
                                    (case-replace
                                     "(-1 * (CT * n0x!1 * n0x!1) /
            (56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1))) = -CT*((n0x!1 * n0x!1) /
            (56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1)))")
                                    (("1"
                                      (name-replace
                                       "TT"
                                       "((n0x!1 * n0x!1) / (56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1)))")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (rewrite "abs_mult" -4)
                                          (("1"
                                            (expand "abs" -4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "both_sides_times_pos_lt1"
                                                 ("pz"
                                                  "-CT"
                                                  "x"
                                                  "TT"
                                                  "y"
                                                  "1"))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "cos_ub")
                (("2" (expand "cos_lb")
                  (("2" (expand "cos_approx")
                    (("2" (expand "sigma" 1 2) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_ub_dec formula-decl nil trig_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cos_lb_ub formula-decl nil trig_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma "reals/")
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_approx_cos formula-decl nil trig_approx nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cos const-decl "real" sincos_def nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_term_next formula-decl nil trig_approx nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (cos_term_neg formula-decl nil trig_approx nil)
    (cos_approx const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_term const-decl "real" trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_lb const-decl "real" trig_approx nil)
    (cos_ub const-decl "real" trig_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cos_lb_gt 0
  (cos_lb_gt-1 nil 3321027181
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (expand "cos_lb")
        (("1" (expand "cos_approx")
          (("1" (expand "sigma")
            (("1" (expand "sigma")
              (("1" (expand "cos_term")
                (("1" (rewrite "expt_x1")
                  (("1" (expand "factorial")
                    (("1" (expand "factorial")
                      (("1" (expand "factorial")
                        (("1" (expand "^")
                          (("1" (expand "expt")
                            (("1" (expand "expt")
                              (("1"
                                (expand "expt")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (expand "cos_lb")
        (("2" (inst - "n0x!1")
          (("2" (lemma "cos_approx_next" ("a" "n0x!1" "n" "1+2*j!1"))
            (("2" (name-replace "CN1" "cos_approx(n0x!1, 1 + 2 * j!1)")
              (("2"
                (name-replace "CN3" "cos_approx(n0x!1, 3 + 2 * j!1)")
                (("2"
                  (lemma "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+j!1)"))
                  (("2" (simplify -1)
                    (("2"
                      (name-replace "CT"
                       "cos_term(n0x!1)(1 + 2 * j!1 + 1)")
                      (("2" (assert)
                        (("2"
                          (lemma "div_mult_pos_gt1"
                           ("z" "n0x!1*n0x!1" "py"
                            "(30 + 24 * j!1 + (16 * (j!1 * j!1) + 20 * j!1))"
                            "x" "1"))
                          (("2" (assert)
                            (("2"
                              (name-replace "TT"
                               "n0x!1 * n0x!1 / (30 + 16 * (j!1 * j!1) + 44 * j!1)")
                              (("2"
                                (lemma
                                 "both_sides_times_pos_lt1"
                                 ("pz" "CT" "x" "1-TT" "y" "0"))
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_term_gt0 formula-decl nil trig_approx nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_approx_next formula-decl nil trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cos_approx const-decl "real" trig_approx nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (cos_term const-decl "real" trig_approx nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_lb const-decl "real" trig_approx nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (cos_ub_gt 0
  (cos_ub_gt-4 nil 3321626563
   (""
    (case "FORALL (n: nat, px: posreal):
                                    px * px > (4 * n + 4) * (4 * n + 3) & n >= 1 => cos_ub(px, n) > 1")
    (("1" (skosimp)
      (("1" (lemma "trichotomy" ("x" "n0x!1"))
        (("1" (split -1)
          (("1" (inst - "n!1" "n0x!1")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (assert) nil nil)
           ("3" (inst - "n!1" "-n0x!1")
            (("1" (assert)
              (("1" (expand "cos_ub")
                (("1" (rewrite "cos_approx_neg") nil nil)) nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skosimp) (("1" (assert) nil nil)) nil)
         ("2" (skosimp*)
          (("2" (case-replace "j!1=0")
            (("1" (assert)
              (("1" (hide -1 -2 -4)
                (("1" (expand "cos_ub")
                  (("1" (expand "cos_approx")
                    (("1" (expand "sigma")
                      (("1" (expand "sigma")
                        (("1" (expand "sigma")
                          (("1" (expand "cos_term")
                            (("1" (expand "factorial")
                              (("1"
                                (expand "factorial")
                                (("1"
                                  (expand "factorial")
                                  (("1"
                                    (expand "factorial")
                                    (("1"
                                      (expand "factorial")
                                      (("1"
                                        (rewrite "expt_x1")
                                        (("1"
                                          (lemma
                                           "expt_times"
                                           ("n0x"
                                            "px!1"
                                            "i"
                                            "2"
                                            "j"
                                            "2"))
                                          (("1"
                                            (case-replace
                                             "px!1^2=px!1*px!1")
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (name-replace
                                                 "X"
                                                 "px!1 * px!1")
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand
                                                           "expt")
                                                          (("1"
                                                            (lemma
                                                             "posreal_times_posreal_is_posreal"
                                                             ("px"
                                                              "X"
                                                              "py"
                                                              "X/24-1/2"))
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "both_sides_times_pos_lt1"
                                                                 ("pz"
                                                                  "24"
                                                                  "x"
                                                                  "0"
                                                                  "y"
                                                                  "X / 24 - 1 / 2"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst - "px!1")
              (("2" (expand "cos_ub")
                (("2"
                  (lemma "cos_approx_next" ("a" "px!1" "n" "2*j!1"))
                  (("2"
                    (lemma "cos_term_lt0" ("a" "px!1" "n" "2*j!1+1"))
                    (("2" (simplify -1)
                      (("2"
                        (name-replace "CT"
                         "cos_term(px!1)(1 + 2 * j!1)")
                        (("2"
                          (lemma "div_mult_pos_gt1"
                           ("z" "px!1*px!1" "py" "(4*j!1+4)*(4*j!1+3)"
                            "x" "1"))
                          (("2"
                            (name-replace "TT"
                             "px!1 * px!1 / ((4 * j!1 + 4) * (4 * j!1 + 3))")
                            (("2" (assert)
                              (("2"
                                (lemma
                                 "negreal_times_negreal_is_posreal"
                                 ("nx" "CT" "ny" "1-TT"))
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_approx_next formula-decl nil trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (negreal_times_negreal_is_posreal judgement-tcc nil real_types nil)
    (cos_term_lt0 formula-decl nil trig_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (int_times_int_is_int application-judgement "int" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_term const-decl "real" trig_approx nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (cos_approx const-decl "real" trig_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (n0x!1 skolem-const-decl "nzreal" trig_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_approx_neg formula-decl nil trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (trichotomy formula-decl nil real_axioms nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_ub const-decl "real" trig_approx nil))
   nil))
 (cos_lb 0
         (cos_lb-1 nil 3321021268
          ("" (skosimp)
           ((""
             (lemma "trich_lt"
              ("x" "n0x!1*n0x!1" "y" "(4*n!1+6)*(4*n!1+5)"))
             (("" (split -1)
               (("1" (lemma "cos_lb_lt" ("n0x" "n0x!1" "n" "n!1"))
                 (("1" (assert) nil nil)) nil)
                ("2" (lemma "cos_lb_lt" ("n0x" "n0x!1" "n" "n!1+1"))
                 (("2"
                   (case-replace
                    "cos_lb(n0x!1, n!1 + 1) = cos_lb(n0x!1, n!1)")
                   (("1" (assert) nil nil)
                    ("2" (hide 2 -1)
                     (("2" (expand "cos_lb")
                       (("2"
                         (lemma "cos_approx_eq"
                          ("a" "n0x!1" "n" "1+2*n!1"))
                         (("2" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("3" (lemma "cos_lb_gt" ("n0x" "n0x!1" "n" "n!1"))
                 (("3" (assert) nil nil)) nil))
               nil))
             nil))
           nil)
          ((nat nonempty-type-eq-decl nil naturalnumbers nil)
           (>= const-decl "bool" reals nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (nzreal nonempty-type-eq-decl nil reals nil)
           (/= const-decl "boolean" notequal nil)
           (* const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (boolean nonempty-type-decl nil booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (trich_lt formula-decl nil real_props nil)
           (posint_times_posint_is_posint application-judgement
            "posint" integers nil)
           (even_times_int_is_even application-judgement "even_int"
            integers nil)
           (nzreal_times_nzreal_is_nzreal application-judgement
            "nzreal" real_types nil)
           (cos_lb_gt formula-decl nil trig_approx nil)
           (real_gt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (odd_plus_even_is_odd application-judgement "odd_int"
            integers nil)
           (cos_approx_eq formula-decl nil trig_approx nil)
           (int_minus_int_is_int application-judgement "int" integers
            nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (cos_lb const-decl "real" trig_approx nil)
           (cos_lb_lt formula-decl nil trig_approx nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (even_plus_even_is_even application-judgement "even_int"
            integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (nnint_times_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (even_plus_odd_is_odd application-judgement "odd_int"
            integers nil)
           (posint_plus_nnint_is_posint application-judgement "posint"
            integers nil)
           (nnint_plus_nnint_is_nnint application-judgement
            "nonneg_int" integers nil)
           (cos_range application-judgement "real_abs_le1" sincos nil))
          shostak))
 (cos_ub 0
         (cos_ub-1 nil 3321029937
          ("" (skosimp)
           ((""
             (lemma "trich_lt"
              ("x" "n0x!1*n0x!1" "y" "(4*pm!1+4)*(4*pm!1+3)"))
             (("" (split -1)
               (("1" (lemma "cos_ub_lt" ("n0x" "n0x!1" "n" "pm!1"))
                 (("1" (assert) nil nil)) nil)
                ("2" (lemma "cos_ub_lt" ("n0x" "n0x!1" "n" "pm!1+1"))
                 (("2"
                   (case-replace
                    "cos_ub(n0x!1, pm!1 + 1) = cos_ub(n0x!1, pm!1)")
                   (("1" (assert) nil nil)
                    ("2" (hide -1 2)
                     (("2" (expand "cos_ub")
                       (("2"
                         (lemma "cos_approx_eq"
                          ("a" "n0x!1" "n" "2*pm!1"))
                         (("2" (assert) nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("3" (lemma "cos_ub_gt" ("n0x" "n0x!1" "n" "pm!1"))
                 (("3" (typepred "cos(n0x!1)") (("3" (assert) nil nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ((posnat nonempty-type-eq-decl nil integers nil)
           (> const-decl "bool" reals nil)
           (nonneg_int nonempty-type-eq-decl nil integers nil)
           (>= const-decl "bool" reals nil)
           (bool nonempty-type-eq-decl nil booleans nil)
           (int nonempty-type-eq-decl nil integers nil)
           (integer_pred const-decl "[rational -> boolean]" integers
                         nil)
           (rational nonempty-type-from-decl nil rationals nil)
           (rational_pred const-decl "[real -> boolean]" rationals nil)
           (+ const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (nzreal nonempty-type-eq-decl nil reals nil)
           (/= const-decl "boolean" notequal nil)
           (* const-decl "[numfield, numfield -> numfield]"
              number_fields nil)
           (numfield nonempty-type-eq-decl nil number_fields nil)
           (real nonempty-type-from-decl nil reals nil)
           (real_pred const-decl "[number_field -> boolean]" reals nil)
           (number_field nonempty-type-from-decl nil number_fields nil)
           (number_field_pred const-decl "[number -> boolean]"
            number_fields nil)
           (boolean nonempty-type-decl nil booleans nil)
           (number nonempty-type-decl nil numbers nil)
           (trich_lt formula-decl nil real_props nil)
           (posint_times_posint_is_posint application-judgement
            "posint" integers nil)
           (even_times_int_is_even application-judgement "even_int"
            integers nil)
           (nzreal_times_nzreal_is_nzreal application-judgement
            "nzreal" real_types nil)
           (cos_ub_gt formula-decl nil trig_approx nil)
           (real_ge_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (real_gt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (minus_odd_is_odd application-judgement "odd_int" integers
            nil)
           (real_le_is_total_order name-judgement
            "(total_order?[real])" real_props nil)
           (cos const-decl "real" sincos_def nil)
           (- const-decl "[numfield -> numfield]" number_fields nil)
           (<= const-decl "bool" reals nil)
           (NOT const-decl "[bool -> bool]" booleans nil)
           (cos_approx_eq formula-decl nil trig_approx nil)
           (int_times_even_is_even application-judgement "even_int"
            integers nil)
           (int_minus_int_is_int application-judgement "int" integers
            nil)
           (= const-decl "[T, T -> boolean]" equalities nil)
           (cos_ub const-decl "real" trig_approx nil)
           (cos_ub_lt formula-decl nil trig_approx nil)
           (nat nonempty-type-eq-decl nil naturalnumbers nil)
           (real_lt_is_strict_total_order name-judgement
            "(strict_total_order?[real])" real_props nil)
           (even_plus_even_is_even application-judgement "even_int"
            integers nil)
           (nnint_plus_posint_is_posint application-judgement "posint"
            integers nil)
           (even_plus_odd_is_odd application-judgement "odd_int"
            integers nil)
           (cos_range application-judgement "real_abs_le1" sincos nil))
          shostak))
 (cos_bounds 0
  (cos_bounds-1 nil 3321021088
   ("" (skosimp)
    (("" (case-replace "a!1=0")
      (("1" (rewrite "cos_0")
        (("1" (expand "cos_lb")
          (("1" (expand "cos_ub")
            (("1" (rewrite "cos_approx_a0")
              (("1" (rewrite "cos_approx_a0") (("1" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "cos_lb" ("n0x" "a!1" "n" "n!1"))
        (("1" (assert)
          (("1" (hide -1)
            (("1" (case "n!1=0")
              (("1" (expand "cos_ub")
                (("1" (expand "cos_approx")
                  (("1" (replace -1)
                    (("1" (expand "sigma")
                      (("1" (expand "cos_term")
                        (("1" (typepred "cos(a!1)")
                          (("1" (expand "sigma")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "cos_ub" ("n0x" "a!1" "pm" "n!1"))
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cos_lb const-decl "real" trig_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cos_approx_a0 formula-decl nil trig_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_ub const-decl "real" trig_approx nil)
    (cos_0 formula-decl nil sincos_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_approx const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (cos_term const-decl "real" trig_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (cos_ub formula-decl nil trig_approx nil)
    (cos_lb formula-decl nil trig_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil))
   shostak))
 (sin_lb_deriv_TCC1 0
  (sin_lb_deriv_TCC1-1 nil 3551784317
   ("" (lemma "deriv_domain_nnreal") (("" (propax) nil nil)) nil)
   ((deriv_domain_nnreal formula-decl nil deriv_domain "analysis/"))
   nil
   (sin_lb_deriv assuming "analysis@derivatives[nnreal]"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (sin_lb_deriv_TCC2 0
  (sin_lb_deriv_TCC2-1 nil 3551784317
   ("" (lemma "not_one_element_nnreal") (("" (propax) nil nil)) nil)
   ((not_one_element_nnreal formula-decl nil deriv_domain "analysis/"))
   nil
   (sin_lb_deriv assuming "analysis@derivatives[nnreal]"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (sin_lb_deriv 0
  (sin_lb_deriv-1 nil 3321116669
   ("" (skosimp*)
    (("" (expand "sin_lb")
      (("" (lemma "sin_approx_deriv" ("n" "1+2*n!1"))
        (("" (flatten)
          ((""
            (lemma "restrict2_derivable[nnreal,real]"
             ("f" "LAMBDA a: sin_approx(a, 1+2*n!1)"))
            (("1"
              (lemma "restrict2_deriv[nnreal,real]"
               ("f" "LAMBDA a: sin_approx(a, 1+2*n!1)"))
              (("1" (expand "restrict2")
                (("1" (assert)
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (expand "cos_lb")
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (inst - "x!1")
                            (("1" (replace -1 1 rl)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
             ("4" (hide-all-but 1)
              (("4" (skosimp)
                (("4" (inst 1 "x!1+1") (("4" (assert) nil nil)) nil))
                nil))
              nil)
             ("5" (hide-all-but 1)
              (("5" (skosimp)
                (("5" (inst 1 "x!1+1") (("5" (assert) nil nil)) nil))
                nil))
              nil)
             ("6" (hide-all-but 1)
              (("6" (lemma deriv_domain_real) (("6" (propax) nil nil))
                nil))
              nil)
             ("7" (hide-all-but 1)
              (("7" (lemma deriv_domain_nnreal)
                (("7" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sin_lb const-decl "real" trig_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restrict2_deriv formula-decl nil restrict2_deriv "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (cos_approx const-decl "real" trig_approx nil)
    (cos_lb const-decl "real" trig_approx nil)
    (restrict2 const-decl "[T1 -> real]" restrict2_deriv "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis/")
    (nnreal type-eq-decl nil real_types nil)
    (sin_approx const-decl "real" trig_approx nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (restrict2_derivable formula-decl nil restrict2_deriv "analysis/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sin_approx_deriv formula-decl nil trig_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (sin_ub_deriv 0
  (sin_ub_deriv-1 nil 3321118579
   ("" (skosimp*)
    (("" (expand "sin_ub")
      (("" (expand "cos_ub")
        (("" (lemma "sin_approx_deriv" ("n" "2*n!1"))
          (("" (flatten)
            ((""
              (lemma "restrict2_derivable[nnreal,real]"
               ("f" "LAMBDA a: sin_approx(a, 2*n!1)"))
              (("1"
                (lemma "restrict2_deriv[nnreal,real]"
                 ("f" "LAMBDA a: sin_approx(a, 2*n!1)"))
                (("1" (expand "restrict2")
                  (("1" (replace -4)
                    (("1" (simplify -1)
                      (("1" (assert)
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (inst - "x!1") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
               ("4" (hide-all-but 1)
                (("4" (skosimp)
                  (("4" (inst 1 "x!1+1") (("4" (assert) nil nil)) nil))
                  nil))
                nil)
               ("5" (hide-all-but 1)
                (("5" (skosimp)
                  (("5" (inst 1 "x!1+1") (("5" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (hide-all-but 1)
                (("6" (assert)
                  (("6" (lemma deriv_domain_real)
                    (("6" (propax) nil nil)) nil))
                  nil))
                nil)
               ("7" (hide-all-but 1)
                (("7" (lemma deriv_domain_nnreal)
                  (("7" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_ub const-decl "real" trig_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_approx_deriv formula-decl nil trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (sin_approx const-decl "real" trig_approx nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (restrict2_derivable formula-decl nil restrict2_deriv "analysis/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict2 const-decl "[T1 -> real]" restrict2_deriv "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (cos_approx const-decl "real" trig_approx nil)
    (restrict2_deriv formula-decl nil restrict2_deriv "analysis/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cos_ub const-decl "real" trig_approx nil))
   shostak))
 (cos_lb_deriv 0
  (cos_lb_deriv-1 nil 3321109593
   ("" (skosimp)
    (("" (expand "cos_lb")
      (("" (lemma "cos_approx_deriv" ("n" "1+2*n!1"))
        (("" (flatten)
          (("" (assert)
            (("" (replace -2)
              (("" (hide-all-but 1)
                (("" (apply-extensionality :hide? t)
                  (("" (expand "sin_lb")
                    (("" (expand "sin_ub") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cos_lb const-decl "real" trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin_approx const-decl "real" trig_approx nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (< const-decl "bool" reals nil)
    (sin_lb const-decl "real" trig_approx nil)
    (sin_ub const-decl "real" trig_approx nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cos_approx_deriv formula-decl nil trig_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (cos_ub_deriv_TCC1 0
  (cos_ub_deriv_TCC1-1 nil 3321116581
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cos_ub_deriv subtype "(number_fields.-)(trig_approx.n, 1)" "nat")))
 (cos_ub_deriv_TCC2 0
  (cos_ub_deriv_TCC2-1 nil 3321116581
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (cos_ub_deriv subtype "(number_fields.-)(trig_approx.n, 1)" "nat")))
 (cos_ub_deriv 0
  (cos_ub_deriv-1 nil 3321109867
   ("" (skosimp)
    (("" (expand "cos_ub")
      (("" (lemma "cos_approx_deriv" ("n" "2*n!1"))
        (("" (flatten)
          (("" (assert)
            (("" (replace -2 1)
              (("" (apply-extensionality 1 :hide? t)
                (("1" (case-replace "n!1=0")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (expand "sin_ub")
                      (("2" (expand "sin_lb") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp) (("2" (assert) nil nil)) nil)
                 ("3" (skosimp) (("3" (assert) nil nil)) nil)
                 ("4" (skosimp) (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_ub const-decl "real" trig_approx nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (n!1 skolem-const-decl "nat" trig_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin_approx const-decl "real" trig_approx nil)
    (sin_ub const-decl "real" trig_approx nil)
    (sin_lb const-decl "real" trig_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cos_approx_deriv formula-decl nil trig_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (cos_lb_nn_strict_decreasing 0
  (cos_lb_nn_strict_decreasing-1 nil 3321105839
   ("" (expand "strict_decreasing?")
    (("" (skosimp*)
      (("" (typepred "x!1")
        (("" (typepred "y!1")
          (("" (expand ">=")
            (("" (expand "<=" -3)
              (("" (split -3)
                (("1" (lemma "cos_lb_deriv" ("n" "n!1"))
                  (("1" (flatten)
                    (("1"
                      (lemma
                       "restrict2_derivable[{x: posreal | x <= pi},real]"
                       ("f" "LAMBDA a: cos_lb(a, n!1)"))
                      (("1"
                        (lemma
                         "restrict2_deriv[{x: posreal | x <= pi},real]"
                         ("f" "LAMBDA a: cos_lb(a, n!1)"))
                        (("1" (expand "restrict2")
                          (("1" (replace -4)
                            (("1" (simplify -1)
                              (("1"
                                (lemma
                                 "negative_derivative[{x:posreal | x <= pi}]"
                                 ("g"
                                  "LAMBDA (a:{x:posreal | x <= pi}): cos_lb(a, n!1)"))
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "strict_decreasing?")
                                    (("1"
                                      (inst - "x!1" "y!1")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (inst - "x!2")
                                      (("2"
                                        (expand "deriv" -1)
                                        (("2"
                                          (replace -1 1 rl)
                                          (("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred "x!2")
                                              (("2"
                                                (lemma
                                                 "sin_ub"
                                                 ("n0x"
                                                  "x!2"
                                                  "n"
                                                  "n!1"))
                                                (("2"
                                                  (lemma
                                                   "sin_ge_0"
                                                   ("a" "x!2"))
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "connected?")
                                      (("3"
                                        (skosimp*)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (skosimp*) (("3" (inst 1 "x!2") nil nil))
                        nil)
                       ("4" (hide-all-but 1)
                        (("4" (assert)
                          (("4" (expand "not_one_element?")
                            (("4" (skosimp*)
                              (("4"
                                (inst + "x!2/2")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (hide-all-but 1)
                        (("5" (lemma "deriv_domain_oc")
                          (("5" (inst - "0" "pi")
                            (("5" (assert)
                              (("5"
                                (expand "deriv_domain?")
                                (("5"
                                  (skosimp*)
                                  (("5"
                                    (inst - "e!1" "x!2")
                                    (("5"
                                      (skosimp*)
                                      (("5" (inst + "y!2") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1 * rl)
                  (("2" (lemma "cos_lb" ("n0x" "y!1" "n" "n!1"))
                    (("1" (typepred "cos(y!1)")
                      (("1" (expand "cos_lb")
                        (("1" (rewrite "cos_approx_a0")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_approx_a0 formula-decl nil trig_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_lb formula-decl nil trig_approx nil)
    (cos_lb_deriv formula-decl nil trig_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cos_lb const-decl "real" trig_approx nil)
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (restrict2_derivable formula-decl nil restrict2_deriv "analysis/")
    (deriv_domain? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (restrict2 const-decl "[T1 -> real]" restrict2_deriv "analysis/")
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "{x: nnreal | x <= pi}" trig_approx nil)
    (y!1 skolem-const-decl "{x: nnreal | x <= pi}" trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_ge_0 formula-decl nil trig_ineq nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sin_ub formula-decl nil trig_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (negative_derivative formula-decl nil derivative_props "analysis/")
    (restrict2_deriv formula-decl nil restrict2_deriv "analysis/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (deriv_domain_oc formula-decl nil deriv_domain "analysis/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (cos_lb_np_strict_increasing 0
  (cos_lb_np_strict_increasing-1 nil 3321105605
   ("" (skosimp)
    (("" (lemma "cos_lb_nn_strict_decreasing" ("n" "n!1"))
      (("" (expand "strict_decreasing?")
        (("" (expand "strict_increasing?")
          (("" (skosimp)
            (("" (inst - "-y!1" "-x!1")
              (("" (assert)
                (("" (rewrite "cos_lb_neg")
                  (("" (rewrite "cos_lb_neg") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (npreal type-eq-decl nil real_types nil)
    (cos_lb_neg formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   shostak))
 (sin_px 0
  (sin_px-1 nil 3403980921
   ("" (skosimp)
    (("" (lemma "sin_lb" ("n0x" "px!1" "n" "0"))
      (("" (expand "sin_lb")
        (("" (expand "sin_approx")
          (("" (expand "sigma")
            (("" (expand "sigma")
              (("" (expand "sin_term")
                (("" (expand "^")
                  (("" (expand "expt")
                    (("" (expand "expt")
                      (("" (expand "expt")
                        (("" (expand "expt")
                          (("" (expand "factorial")
                            (("" (expand "factorial")
                              ((""
                                (expand "factorial")
                                ((""
                                  (expand "factorial")
                                  ((""
                                    (case
                                     "1 - 1 / 1500000 < 1-px!1*px!1/6")
                                    (("1"
                                      (lemma
                                       "both_sides_times_pos_lt1"
                                       ("pz"
                                        "px!1"
                                        "x"
                                        "1 - 1 / 1500000"
                                        "y"
                                        "1 - px!1 * px!1 / 6"))
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide -1 2)
                                      (("2"
                                        (lemma
                                         "sq_lt"
                                         ("nna" "px!1" "nnb" "1/500"))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "sq")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_lb formula-decl nil trig_approx nil)
    (sin_approx const-decl "real" trig_approx nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_lt formula-decl nil sq "reals/")
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_0_neg formula-decl nil sigma_nat "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_term const-decl "real" trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (sin_lb const-decl "real" trig_approx nil))
   nil))
 (cos_term_pi_lb 0
  (cos_term_pi_lb-2 nil 3403981394
   ("" (skosimp)
    (("" (rewrite "sin_shift" :dir rl)
      (("" (lemma "pi_lb_diff" ("n" "n!1"))
        (("" (lemma "pi_lb_inc" ("n" "n!1" "m" "n!1+1"))
          (("" (simplify -1)
            (("" (lemma "pi_bounds" ("n" "n!1+1"))
              (("" (flatten)
                (("" (hide -2)
                  ((""
                    (name "KK" "16 * (1 / 5) ^ (4 * n!1 + 5) *
                      (1 / (4 * n!1 + 5) - 1 / (25 * (4 * n!1 + 7)))
                      +
                      4 * (1 / 239) ^ (4 * n!1 + 3) *
                       (1 / (4 * n!1 + 3) - 1 / (57121 * (4 * n!1 + 5)))")
                    (("" (replace -1)
                      (("" (case "pi / 2 - pi_lbn(n!1) / 2 > KK / 2")
                        (("1" (case "pi / 2 - pi_lbn(n!1) / 2 < 1/500")
                          (("1"
                            (lemma "sin_px"
                             ("px" "pi / 2 - pi_lbn(n!1) / 2"))
                            (("1" (split -1)
                              (("1"
                                (case
                                 "cos_term(pi_lbn(n!1) / 2)(2 * n!1 + 2) < KK/2 * (1 - 1 / 1500000)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (name
                                       "F"
                                       "lambda (n:nat): 8 * (1 / 5) ^ (4 * n + 5) *
                                         (1 / (4 * n + 5) - 1 / (25 * (4 * n + 7)))
                                         +
                                         2 * (1 / 239) ^ (4 * n + 3) *
                                          (1 / (4 * n + 3) - 1 / (57121 * (4 * n + 5)))")
                                      (("2"
                                        (case-replace "KK/2=F(n!1)")
                                        (("1"
                                          (hide -1 -2 -5)
                                          (("1"
                                            (expand "cos_term")
                                            (("1"
                                              (case-replace
                                               "(-1) ^ (2 + 2 * n!1)=1")
                                              (("1"
                                                (lemma
                                                 "both_sides_expt_pos_lt"
                                                 ("px"
                                                  "pi_lbn(n!1) / 2"
                                                  "py"
                                                  "31415927/20000000"
                                                  "pm"
                                                  "4 + 4 * n!1"))
                                                (("1"
                                                  (lemma "pi_ub")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name
                                                       "G"
                                                       "lambda (n:nat): (31415927 / 20000000) ^ (4 + 4 * n)/factorial(4 + 4 * n)")
                                                      (("1"
                                                        (case
                                                         "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1) <G(n!1)")
                                                        (("1"
                                                          (case
                                                           "forall (m:nat): m>=5 => G(m)<F(m)*(1 - 1 / 1500000)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "n!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (name-replace
                                                                 "DRL1"
                                                                 "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (case
                                                               "G(5) < F(5) * (1 - 1 / 1500000)")
                                                              (("1"
                                                                (case
                                                                 "FORALL (m: nat): m >= 5 & G(m) < F(m) * (1 - 1 / 1500000) => G(m+1) < F(m+1) * (1 - 1 / 1500000)")
                                                                (("1"
                                                                  (induct
                                                                   "m")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (case-replace
                                                                       "j!1=4")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "j!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   -1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (name
                                                                       "LHS"
                                                                       "(31415927 / 20000000) ^ 4/((5+4 * m!1)*(6+4 * m!1)*(7+4 * m!1)*(8+4 * m!1))")
                                                                      (("2"
                                                                        (case-replace
                                                                         "G(m!1 + 1)=G(m!1)*LHS")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "LHS*F(m!1)<F(m!1 + 1)")
                                                                            (("1"
                                                                              (lemma
                                                                               "both_sides_times_pos_lt1"
                                                                               ("pz"
                                                                                "LHS"
                                                                                "x"
                                                                                "G(m!1)"
                                                                                "y"
                                                                                "F(m!1) * (1 - 1 / 1500000)"))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -3
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "F"
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "expt_plus"
                                                                                   ("n0x"
                                                                                    "1/5"
                                                                                    "i"
                                                                                    "4"
                                                                                    "j"
                                                                                    "5+4*m!1"))
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "FIVE"
                                                                                         "(1 / 5) ^ (5 + 4 * m!1)")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "expt_plus"
                                                                                           ("n0x"
                                                                                            "1 / 239"
                                                                                            "i"
                                                                                            "4"
                                                                                            "j"
                                                                                            "3 + 4 * m!1"))
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "TWOTHREENINE"
                                                                                                 "(1 / 239) ^ (3 + 4 * m!1)")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "(1 / 239) ^ 4 * TWOTHREENINE * (1 / (514089 + 228484 * m!1))= (1 / 239) ^ 6 * TWOTHREENINE * (1 / (9+4*m!1))")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "(TWOTHREENINE * (1 / (285605 + 228484 * m!1))) = (1/239)^2 * (TWOTHREENINE * (1 / (5 + 4 * m!1)))")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "(FIVE * (1 / (175 + 100 * m!1))) = (1/5)^2*FIVE*(1/(7+4*m!1))")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "-2 * ((1 / 239) ^ 2 * (TWOTHREENINE * (1 / (5 + 4 * m!1))) * LHS) -
                                                                           8 * ((1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1)) * LHS)
                                                                           + 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)
                                                                           + 2 * ((TWOTHREENINE * (1 / (3 + 4 * m!1))) * LHS) < 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)<8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) +
                                                                                2 * ((1 / 239) ^ 4 * TWOTHREENINE * (1 / (7 + 4 * m!1)))
                                                                                - 2 * ((1 / 239) ^ 6 * TWOTHREENINE * (1 / (9 + 4 * m!1)))
                                                                                - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "expt_plus"
                                                                                                                     ("n0x"
                                                                                                                      "1/239"
                                                                                                                      "i"
                                                                                                                      "2"
                                                                                                                      "j"
                                                                                                                      "4"))
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                           ("pz"
                                                                                                                            "2 * (1 / 239) ^ 4 * TWOTHREENINE"
                                                                                                                            "y"
                                                                                                                            "1 / (7 + 4 * m!1) -(1 / 239) ^ 2/ (9 + 4 * m!1)"
                                                                                                                            "x"
                                                                                                                            "0"))
                                                                                                                          (("2"
                                                                                                                            (flatten
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS) <8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (case-replace
                                                                                                                                       "1 / (275 + 100 * m!1) = (1/5)^2*1/(11+4*m!1)")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "8*FIVE"
                                                                                                                                            "x"
                                                                                                                                            "LHS/(5 + 4 * m!1)"
                                                                                                                                            "y"
                                                                                                                                            "(1 / 5) ^ 4*(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))"))
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "(24/25)*(1 / (9 + 4 * m!1)) < (1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "LHS / (5 + 4 * m!1) <(1 / 5) ^ 4 *(24 / 25) * (1 / (9 + 4 * m!1))")
                                                                                                                                                  (("1"
                                                                                                                                                    (name-replace
                                                                                                                                                     "RHS"
                                                                                                                                                     "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_times_pos_lt1"
                                                                                                                                                       ("pz"
                                                                                                                                                        "(1/5)^4"
                                                                                                                                                        "x"
                                                                                                                                                        "(24 / 25) * (1 / (9 + 4 * m!1))"
                                                                                                                                                        "y"
                                                                                                                                                        "RHS"))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "(31415927 / 20000000) ^ 4 < 609/100")
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "both_sides_div_pos_lt1"
                                                                                                                                                           ("pz"
                                                                                                                                                            "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))"
                                                                                                                                                            "x"
                                                                                                                                                            "(31415927 / 20000000) ^ 4"
                                                                                                                                                            "y"
                                                                                                                                                            "609 / 100"))
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "LHS < (1 / 5) ^ 4 * (12/15)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -2
                                                                                                                                                                     -3
                                                                                                                                                                     -4)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "both_sides_div_pos_lt1"
                                                                                                                                                                       ("pz"
                                                                                                                                                                        "5 + 4 * m!1"
                                                                                                                                                                        "x"
                                                                                                                                                                        "LHS"
                                                                                                                                                                        "y"
                                                                                                                                                                        "(1 / 5) ^ 4 * (12 / 15)"))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "both_sides_times_pos_lt1"
                                                                                                                                                                             ("pz"
                                                                                                                                                                              "(1 / 5) ^ 4"
                                                                                                                                                                              "x"
                                                                                                                                                                              "(12 / 15) / (5 + 4 * m!1)"
                                                                                                                                                                              "y"
                                                                                                                                                                              "(24 / 25) * (1 / (9 + 4 * m!1))"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1
                                                                                                                                                                                     -2
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "both_sides_times_pos_lt1"
                                                                                                                                                                                       ("pz"
                                                                                                                                                                                        "12/75"
                                                                                                                                                                                        "x"
                                                                                                                                                                                        "5/(5 + 4 * m!1)"
                                                                                                                                                                                        "y"
                                                                                                                                                                                        "6/(9 + 4 * m!1)"))
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "div_mult_pos_lt1"
                                                                                                                                                                                             ("py"
                                                                                                                                                                                              "5 + 4 * m!1"
                                                                                                                                                                                              "z"
                                                                                                                                                                                              "5"
                                                                                                                                                                                              "x"
                                                                                                                                                                                              "6 / (9 + 4 * m!1)"))
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "div_mult_pos_lt2"
                                                                                                                                                                                                 ("py"
                                                                                                                                                                                                  "9 + 4 * m!1"
                                                                                                                                                                                                  "z"
                                                                                                                                                                                                  "6*(5 + 4 * m!1)"
                                                                                                                                                                                                  "x"
                                                                                                                                                                                                  "5"))
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (case-replace
                                                                                                                                                                       "(1 / 5) ^ 4 * (12 / 15) = 12/9375")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "both_sides_div_pos_le2"
                                                                                                                                                                           ("pz"
                                                                                                                                                                            "609/100"
                                                                                                                                                                            "py"
                                                                                                                                                                            "25*26*27*28"
                                                                                                                                                                            "px"
                                                                                                                                                                            "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))"))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (name-replace
                                                                                                                                                                                   "LHS2"
                                                                                                                                                                                   "609 / 100 /
                                                                                                                        ((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   (1
                                                                                                                                                                                    -4))
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "le_times_le_pos"
                                                                                                                                                                                     ("nnx"
                                                                                                                                                                                      "25"
                                                                                                                                                                                      "y"
                                                                                                                                                                                      "5 + 4 * m!1"
                                                                                                                                                                                      "nnz"
                                                                                                                                                                                      "26 * 27 * 28"
                                                                                                                                                                                      "w"
                                                                                                                                                                                      "(6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1)"))
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "le_times_le_pos"
                                                                                                                                                                                       ("nnx"
                                                                                                                                                                                        "26"
                                                                                                                                                                                        "y"
                                                                                                                                                                                        "6 + 4 * m!1"
                                                                                                                                                                                        "nnz"
                                                                                                                                                                                        "27 * 28"
                                                                                                                                                                                        "w"
                                                                                                                                                                                        "(7 + 4 * m!1) * (8 + 4 * m!1)"))
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "le_times_le_pos"
                                                                                                                                                                                         ("nnx"
                                                                                                                                                                                          "27"
                                                                                                                                                                                          "y"
                                                                                                                                                                                          "7 + 4 * m!1"
                                                                                                                                                                                          "nnz"
                                                                                                                                                                                          "28"
                                                                                                                                                                                          "w"
                                                                                                                                                                                          "(8 + 4 * m!1)"))
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   -1
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "both_sides_times_pos_lt1"
                                                                                                                                                     ("pz"
                                                                                                                                                      "9 + 4 * m!1"
                                                                                                                                                      "x"
                                                                                                                                                      "(24 / 25) * (1 / (9 + 4 * m!1))"
                                                                                                                                                      "y"
                                                                                                                                                      "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))"))
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "div_cancel2"
                                                                                                                                                           ("x"
                                                                                                                                                            "1"
                                                                                                                                                            "n0z"
                                                                                                                                                            "9+4*m!1"))
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "associative_mult"
                                                                                                                                                             ("x"
                                                                                                                                                              "24 / 25"
                                                                                                                                                              "y"
                                                                                                                                                              "1 / (9 + 4 * m!1)"
                                                                                                                                                              "z"
                                                                                                                                                              "9 + 4 * m!1"))
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 1
                                                                                                                                                                 rl)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -1
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "both_sides_div_pos_lt2"
                                                                                                                                                                     ("pz"
                                                                                                                                                                      "1"
                                                                                                                                                                      "py"
                                                                                                                                                                      "9 + 4 * m!1"
                                                                                                                                                                      "px"
                                                                                                                                                                      "11 + 4 * m!1"))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (simplify
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case-replace
                                                                                                                                                                         "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1)) * (9 + 4 * m!1) = 1- (1 / 5) ^ 2*(9 + 4 * m!1)/(11 + 4 * m!1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "(1 / 5) ^ 2 * (9 + 4 * m!1) / (11 + 4 * m!1) < 1/25")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case-replace
                                                                                                                                                                                 "(1 / 5) ^ 2=1/25")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                                                   1)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "cross_mult")
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   -1
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "div_mult_pos_lt1"
                                                                                                                                     ("z"
                                                                                                                                      "(1 / 239) ^ 2"
                                                                                                                                      "py"
                                                                                                                                      "9 + 4 * m!1"
                                                                                                                                      "x"
                                                                                                                                      "1 / (7 + 4 * m!1)"))
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (name-replace
                                                                                                                                               "DRL1"
                                                                                                                                               "(1 / 239) ^ 2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "div_mult_pos_lt2"
                                                                                                                                               ("py"
                                                                                                                                                "7 + 4 * m!1"
                                                                                                                                                "z"
                                                                                                                                                "9 + 4 * m!1"
                                                                                                                                                "x"
                                                                                                                                                "(1 / 239) ^ 2"))
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "lt_times_lt_pos1"
                                                                                                                                                     ("px"
                                                                                                                                                      "(1 / 239) ^ 2"
                                                                                                                                                      "y"
                                                                                                                                                      "1"
                                                                                                                                                      "nnz"
                                                                                                                                                      "7 + 4 * m!1"
                                                                                                                                                      "w"
                                                                                                                                                      "9 + 4 * m!1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_expt_pos_lt"
                                                                                                                                                       ("px"
                                                                                                                                                        "1/239"
                                                                                                                                                        "py"
                                                                                                                                                        "1"
                                                                                                                                                        "pm"
                                                                                                                                                        "2"))
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "(2*TWOTHREENINE)*(1 / (3 + 4 * m!1)-(1 / 239) ^ 2*(1 / (5 + 4 * m!1))) - 8*(1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))<0")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "both_sides_times_pos_lt1"
                                                                                                                     ("pz"
                                                                                                                      "LHS"
                                                                                                                      "x"
                                                                                                                      "(2 * TWOTHREENINE) *
                                                                                     (1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))
                                                                                     - 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))"
                                                                                                                      "y"
                                                                                                                      "0"))
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "2 * TWOTHREENINE/(3 + 4 * m!1) < 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))")
                                                                                                                        (("1"
                                                                                                                          (name-replace
                                                                                                                           "RHS"
                                                                                                                           "8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "both_sides_times_pos_lt1"
                                                                                                                             ("y"
                                                                                                                              "1/(3 + 4 * m!1)"
                                                                                                                              "x"
                                                                                                                              "(1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))"
                                                                                                                              "pz"
                                                                                                                              "2 * TWOTHREENINE"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "times_div1")
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "div_mult_pos_lt1"
                                                                                                                               ("py"
                                                                                                                                "3 + 4 * m!1"
                                                                                                                                "z"
                                                                                                                                "2 * TWOTHREENINE"
                                                                                                                                "x"
                                                                                                                                "(8 * ((1 / 5) ^ 2 * FIVE))/(7 + 4 * m!1)"))
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "div_mult_pos_lt2"
                                                                                                                                     ("py"
                                                                                                                                      "7 + 4 * m!1"
                                                                                                                                      "z"
                                                                                                                                      "(8 * ((1 / 5) ^ 2 * FIVE))*(3 + 4 * m!1)"
                                                                                                                                      "x"
                                                                                                                                      "2 * TWOTHREENINE"))
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "FIVE")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "TWOTHREENINE")
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "forall (m:nat): m>=5 => 14 * (1 / 239) ^ (3 + 4 * m) +
                                                                                       8 * ((1 / 239) ^ (3 + 4 * m) * m)
                                                                                       <
                                                                                       24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m)) +
                                                                                        32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m) * m)")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "m!1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (induct
                                                                                                                                                   "m")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("2"
                                                                                                                                                      (case-replace
                                                                                                                                                       "j!1=4")
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "lt_times_lt_pos1"
                                                                                                                                                           ("px"
                                                                                                                                                            "14 * (1 / 239) ^ (3 + 4 * j!1) +
                                                                                                     8 * ((1 / 239) ^ (3 + 4 * j!1) * j!1)"
                                                                                                                                                            "y"
                                                                                                                                                            "24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1)) +
                                                                                                      32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1) * j!1)"
                                                                                                                                                            "nnz"
                                                                                                                                                            "(1 / 239) ^ 4"
                                                                                                                                                            "w"
                                                                                                                                                            "(1/5)^4"))
                                                                                                                                                          (("2"
                                                                                                                                                            (split
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "8*(1 / 239) ^ (7 + 4 * j!1)<32*((1 / 5) ^ 2 * (1 / 5) ^ (9 + 4 * j!1))")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_plus"
                                                                                                                                                                 ("n0x"
                                                                                                                                                                  "1/5"
                                                                                                                                                                  "i"
                                                                                                                                                                  "4"
                                                                                                                                                                  "j"
                                                                                                                                                                  "5+4*j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "expt_plus"
                                                                                                                                                                     ("n0x"
                                                                                                                                                                      "1/239"
                                                                                                                                                                      "i"
                                                                                                                                                                      "4"
                                                                                                                                                                      "j"
                                                                                                                                                                      "3+4*j!1"))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -1
                                                                                                                                                                 -2
                                                                                                                                                                 3)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "expt_plus"
                                                                                                                                                                   ("n0x"
                                                                                                                                                                    "1/5"
                                                                                                                                                                    "i"
                                                                                                                                                                    "2"
                                                                                                                                                                    "j"
                                                                                                                                                                    "7+4*j!1"))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "forall (m:nat): m>=27 => 8 * (1 / 239) ^ m <
                                                                                                           32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ m))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "7 + 4 * j!1")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (induct
                                                                                                                                                                             "m")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case-replace
                                                                                                                                                                                 "j!2=26")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "lt_times_lt_pos1"
                                                                                                                                                                                     ("px"
                                                                                                                                                                                      "1/239"
                                                                                                                                                                                      "y"
                                                                                                                                                                                      "1/5"
                                                                                                                                                                                      "nnz"
                                                                                                                                                                                      "8 * (1 / 239) ^ j!2"
                                                                                                                                                                                      "w"
                                                                                                                                                                                      "32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ j!2))"))
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "^")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "expt"
                                                                                                                                                                                         2
                                                                                                                                                                                         (1
                                                                                                                                                                                          4))
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (lemma
                                                                                                                                                                 "both_sides_expt_pos_lt"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1/239"
                                                                                                                                                                  "py"
                                                                                                                                                                  "1/5"
                                                                                                                                                                  "pm"
                                                                                                                                                                  "4"))
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "times_div1")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "times_div1")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "cross_mult")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "times_div1")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "times_div1")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "times_div1")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "cross_mult")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "expt_x2")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "times_div1")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "times_div1")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "cross_mult")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "expt"
                                                                                                               1
                                                                                                               (3
                                                                                                                4))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "expt"
                                                                                                                 1
                                                                                                                 (3
                                                                                                                  4))
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -3
                                                                           2
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "G")
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "expt_plus"
                                                                                 ("n0x"
                                                                                  "31415927 / 20000000"
                                                                                  "i"
                                                                                  "4"
                                                                                  "j"
                                                                                  "4 + 4 * m!1"))
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "LHS")
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "DRL11"
                                                                                         "(31415927 / 20000000) ^ 4")
                                                                                        (("2"
                                                                                          (name-replace
                                                                                           "DRL12"
                                                                                           "(31415927 / 20000000) ^ (4 + 4 * m!1)")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "factorial"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               1
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "factorial"
                                                                                                 1
                                                                                                 (1
                                                                                                  2
                                                                                                  3))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   (1
                                                                                                    2
                                                                                                    3
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "FACTORIAL"
                                                                                                       "factorial(4 + 4 * m!1)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "div_times")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "F")
                                                                  (("2"
                                                                    (expand
                                                                     "G")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "G"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "both_sides_div_pos_lt1"
                                                                 ("pz"
                                                                  "factorial(4 + 4 * n!1)"
                                                                  "x"
                                                                  "(pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)"
                                                                  "y"
                                                                  "(31415927 / 20000000) ^ (4 + 4 * n!1)"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (lemma
                                                   "expt_times"
                                                   ("n0x"
                                                    "-1"
                                                    "i"
                                                    "2"
                                                    "j"
                                                    "1+n!1"))
                                                  (("2"
                                                    (expand "^" -1 2)
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (expand "expt")
                                                        (("2"
                                                          (expand
                                                           "expt")
                                                          (("2"
                                                            (rewrite
                                                             "expt_1i")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "F" 1)
                                          (("2"
                                            (expand "KK" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2" (lemma "pi_lb_pi" ("n" "n!1"))
                              (("2"
                                (case
                                 "16 * ((1 / 5) ^ (4 * n!1 + 5) / (4 * n!1 + 5)) <= 16*(1/5)^25/25")
                                (("1"
                                  (case
                                   "4 * ((1 / 239) ^ (4 * n!1 + 3) / (4 * n!1 + 3)) <= 4*(1/239)^23/23")
                                  (("1"
                                    (case
                                     "16 * (1 / 5) ^ 25 / 25< 1/1000000")
                                    (("1"
                                      (case
                                       "4 * (1 / 239) ^ 23 / 23< 1 / 1000000")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (lemma
                                       "both_sides_expt_lt1_le"
                                       ("lt1x"
                                        "1/239"
                                        "j"
                                        "23"
                                        "i"
                                        "4*n!1+3"))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "both_sides_div_pos_le2"
                                           ("pz"
                                            "4"
                                            "px"
                                            "3+4*n!1"
                                            "py"
                                            "23"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "le_times_le_pos"
                                               ("nnx"
                                                "4 / (3 + 4 * n!1)"
                                                "y"
                                                "4 / 23"
                                                "nnz"
                                                "(1 / 239) ^ (3 + 4 * n!1)"
                                                "w"
                                                "(1 / 239) ^ 23"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-5 1))
                                  (("2"
                                    (lemma
                                     "both_sides_div_pos_le2"
                                     ("pz"
                                      "16"
                                      "px"
                                      "5+4*n!1"
                                      "py"
                                      "25"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "both_sides_expt_lt1_le"
                                         ("lt1x"
                                          "1/5"
                                          "j"
                                          "25"
                                          "i"
                                          "4*n!1+5"))
                                        (("2"
                                          (lemma
                                           "le_times_le_pos"
                                           ("nnx"
                                            "16 / (5 + 4 * n!1)"
                                            "y"
                                            "16 / 25"
                                            "nnz"
                                            "(1 / 5) ^ (4 * n!1 + 5)"
                                            "w"
                                            "(1 / 5) ^ 25"))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2"
                            (lemma "both_sides_div_pos_lt1"
                             ("pz" "2" "y" "pi-pi_lbn(n!1)" "x" "KK"))
                            (("2" (expand ">" 1)
                              (("2"
                                (replace -1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_shift formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pi_lb_inc formula-decl nil atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (KK skolem-const-decl "rat" trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (pi_ub const-decl "posreal" atan_approx nil)
    (factorial def-decl "posnat" factorial "ints/")
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (LHS skolem-const-decl "posrat" trig_approx nil)
    (div_times formula-decl nil real_props nil)
    (G skolem-const-decl "[nat -> posrat]" trig_approx nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (lt_times_lt_pos1 formula-decl nil real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (associative_mult formula-decl nil number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (cross_mult formula-decl nil real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (FIVE skolem-const-decl "posrat" trig_approx nil)
    (TWOTHREENINE skolem-const-decl "posrat" trig_approx nil)
    (times_div1 formula-decl nil real_props nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (F skolem-const-decl "[nat -> rat]" trig_approx nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (both_sides_expt_pos_lt formula-decl nil exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_term const-decl "real" trig_approx nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sin_px formula-decl nil trig_approx nil)
    (pi_lb_pi formula-decl nil atan_approx nil)
    (both_sides_expt_lt1_le formula-decl nil exponentiation nil)
    (<= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (cos const-decl "real" sincos_def nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_lb_diff formula-decl nil atan_approx nil))
   nil)
  (cos_term_pi_lb-1 nil 3403981026
   ("" (skosimp)
    (("" (rewrite "sin_shift" :dir rl)
      (("" (lemma "pi_lb_diff" ("n" "n!1"))
        (("" (lemma "pi_lb_inc" ("n" "n!1" "m" "n!1+1"))
          (("" (simplify -1)
            (("" (lemma "pi_bounds" ("n" "n!1+1"))
              (("" (flatten)
                (("" (hide -2)
                  ((""
                    (name "KK" "16 * (1 / 5) ^ (4 * n!1 + 5) *
               (1 / (4 * n!1 + 5) - 1 / (25 * (4 * n!1 + 7)))
               +
               4 * (1 / 239) ^ (4 * n!1 + 3) *
                (1 / (4 * n!1 + 3) - 1 / (57121 * (4 * n!1 + 5)))")
                    (("" (replace -1)
                      (("" (case "pi / 2 - pi_lbn(n!1) / 2 > KK / 2")
                        (("1" (case "pi / 2 - pi_lbn(n!1) / 2 < 1/500")
                          (("1"
                            (lemma "sin_px"
                             ("px" "pi / 2 - pi_lbn(n!1) / 2"))
                            (("1" (split -1)
                              (("1"
                                (case
                                 "cos_term(pi_lbn(n!1) / 2)(2 * n!1 + 2) < KK/2 * (1 - 1 / 1500000)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (name
                                       "F"
                                       "lambda (n:nat): 8 * (1 / 5) ^ (4 * n + 5) *
                        (1 / (4 * n + 5) - 1 / (25 * (4 * n + 7)))
                        +
                        2 * (1 / 239) ^ (4 * n + 3) *
                         (1 / (4 * n + 3) - 1 / (57121 * (4 * n + 5)))")
                                      (("2"
                                        (case-replace "KK/2=F(n!1)")
                                        (("1"
                                          (hide -1 -2 -5)
                                          (("1"
                                            (expand "cos_term")
                                            (("1"
                                              (case-replace
                                               "(-1) ^ (2 + 2 * n!1)=1")
                                              (("1"
                                                (lemma
                                                 "both_sides_expt_pos_lt"
                                                 ("px"
                                                  "pi_lbn(n!1) / 2"
                                                  "py"
                                                  "31415927/20000000"
                                                  "pm"
                                                  "4 + 4 * n!1"))
                                                (("1"
                                                  (lemma "pi_ub")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (name
                                                       "G"
                                                       "lambda (n:nat): (31415927 / 20000000) ^ (4 + 4 * n)/factorial(4 + 4 * n)")
                                                      (("1"
                                                        (case
                                                         "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1) <G(n!1)")
                                                        (("1"
                                                          (case
                                                           "forall (m:nat): m>=5 => G(m)<F(m)*(1 - 1 / 1500000)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "n!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (name-replace
                                                                 "DRL1"
                                                                 "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (case
                                                               "G(5) < F(5) * (1 - 1 / 1500000)")
                                                              (("1"
                                                                (case
                                                                 "FORALL (m: nat): m >= 5 & G(m) < F(m) * (1 - 1 / 1500000) => G(m+1) < F(m+1) * (1 - 1 / 1500000)")
                                                                (("1"
                                                                  (induct
                                                                   "m")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (case-replace
                                                                       "j!1=4")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "j!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   -1)
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (name
                                                                       "LHS"
                                                                       "(31415927 / 20000000) ^ 4/((5+4 * m!1)*(6+4 * m!1)*(7+4 * m!1)*(8+4 * m!1))")
                                                                      (("2"
                                                                        (case-replace
                                                                         "G(m!1 + 1)=G(m!1)*LHS")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (case
                                                                             "LHS*F(m!1)<F(m!1 + 1)")
                                                                            (("1"
                                                                              (lemma
                                                                               "both_sides_times_pos_lt1"
                                                                               ("pz"
                                                                                "LHS"
                                                                                "x"
                                                                                "G(m!1)"
                                                                                "y"
                                                                                "F(m!1) * (1 - 1 / 1500000)"))
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -3
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "F"
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "expt_plus"
                                                                                   ("n0x"
                                                                                    "1/5"
                                                                                    "i"
                                                                                    "4"
                                                                                    "j"
                                                                                    "5+4*m!1"))
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "FIVE"
                                                                                         "(1 / 5) ^ (5 + 4 * m!1)")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "expt_plus"
                                                                                           ("n0x"
                                                                                            "1 / 239"
                                                                                            "i"
                                                                                            "4"
                                                                                            "j"
                                                                                            "3 + 4 * m!1"))
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (name-replace
                                                                                                 "TWOTHREENINE"
                                                                                                 "(1 / 239) ^ (3 + 4 * m!1)")
                                                                                                (("2"
                                                                                                  (case-replace
                                                                                                   "(1 / 239) ^ 4 * TWOTHREENINE * (1 / (514089 + 228484 * m!1))= (1 / 239) ^ 6 * TWOTHREENINE * (1 / (9+4*m!1))")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "(TWOTHREENINE * (1 / (285605 + 228484 * m!1))) = (1/239)^2 * (TWOTHREENINE * (1 / (5 + 4 * m!1)))")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "(FIVE * (1 / (175 + 100 * m!1))) = (1/5)^2*FIVE*(1/(7+4*m!1))")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "-2 * ((1 / 239) ^ 2 * (TWOTHREENINE * (1 / (5 + 4 * m!1))) * LHS) -
                                         8 * ((1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1)) * LHS)
                                         + 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)
                                         + 2 * ((TWOTHREENINE * (1 / (3 + 4 * m!1))) * LHS) < 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)<8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) +
                                            2 * ((1 / 239) ^ 4 * TWOTHREENINE * (1 / (7 + 4 * m!1)))
                                            - 2 * ((1 / 239) ^ 6 * TWOTHREENINE * (1 / (9 + 4 * m!1)))
                                            - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "expt_plus"
                                                                                                                     ("n0x"
                                                                                                                      "1/239"
                                                                                                                      "i"
                                                                                                                      "2"
                                                                                                                      "j"
                                                                                                                      "4"))
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                           ("pz"
                                                                                                                            "2 * (1 / 239) ^ 4 * TWOTHREENINE"
                                                                                                                            "y"
                                                                                                                            "1 / (7 + 4 * m!1) -(1 / 239) ^ 2/ (9 + 4 * m!1)"
                                                                                                                            "x"
                                                                                                                            "0"))
                                                                                                                          (("2"
                                                                                                                            (flatten
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (case
                                                                                                                                   "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS) <8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (case-replace
                                                                                                                                       "1 / (275 + 100 * m!1) = (1/5)^2*1/(11+4*m!1)")
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "both_sides_times_pos_lt1"
                                                                                                                                           ("pz"
                                                                                                                                            "8*FIVE"
                                                                                                                                            "x"
                                                                                                                                            "LHS/(5 + 4 * m!1)"
                                                                                                                                            "y"
                                                                                                                                            "(1 / 5) ^ 4*(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))"))
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (hide
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "(24/25)*(1 / (9 + 4 * m!1)) < (1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "LHS / (5 + 4 * m!1) <(1 / 5) ^ 4 *(24 / 25) * (1 / (9 + 4 * m!1))")
                                                                                                                                                  (("1"
                                                                                                                                                    (name-replace
                                                                                                                                                     "RHS"
                                                                                                                                                     "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_times_pos_lt1"
                                                                                                                                                       ("pz"
                                                                                                                                                        "(1/5)^4"
                                                                                                                                                        "x"
                                                                                                                                                        "(24 / 25) * (1 / (9 + 4 * m!1))"
                                                                                                                                                        "y"
                                                                                                                                                        "RHS"))
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "(31415927 / 20000000) ^ 4 < 609/100")
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "both_sides_div_pos_lt1"
                                                                                                                                                           ("pz"
                                                                                                                                                            "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))"
                                                                                                                                                            "x"
                                                                                                                                                            "(31415927 / 20000000) ^ 4"
                                                                                                                                                            "y"
                                                                                                                                                            "609 / 100"))
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -3)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (flatten
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "LHS < (1 / 5) ^ 4 * (12/15)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (hide
                                                                                                                                                                     -2
                                                                                                                                                                     -3
                                                                                                                                                                     -4)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "both_sides_div_pos_lt1"
                                                                                                                                                                       ("pz"
                                                                                                                                                                        "5 + 4 * m!1"
                                                                                                                                                                        "x"
                                                                                                                                                                        "LHS"
                                                                                                                                                                        "y"
                                                                                                                                                                        "(1 / 5) ^ 4 * (12 / 15)"))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "both_sides_times_pos_lt1"
                                                                                                                                                                             ("pz"
                                                                                                                                                                              "(1 / 5) ^ 4"
                                                                                                                                                                              "x"
                                                                                                                                                                              "(12 / 15) / (5 + 4 * m!1)"
                                                                                                                                                                              "y"
                                                                                                                                                                              "(24 / 25) * (1 / (9 + 4 * m!1))"))
                                                                                                                                                                            (("1"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (hide
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1
                                                                                                                                                                                     -2
                                                                                                                                                                                     2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "both_sides_times_pos_lt1"
                                                                                                                                                                                       ("pz"
                                                                                                                                                                                        "12/75"
                                                                                                                                                                                        "x"
                                                                                                                                                                                        "5/(5 + 4 * m!1)"
                                                                                                                                                                                        "y"
                                                                                                                                                                                        "6/(9 + 4 * m!1)"))
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (replace
                                                                                                                                                                                         -1
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (hide
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (lemma
                                                                                                                                                                                             "div_mult_pos_lt1"
                                                                                                                                                                                             ("py"
                                                                                                                                                                                              "5 + 4 * m!1"
                                                                                                                                                                                              "z"
                                                                                                                                                                                              "5"
                                                                                                                                                                                              "x"
                                                                                                                                                                                              "6 / (9 + 4 * m!1)"))
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (lemma
                                                                                                                                                                                                 "div_mult_pos_lt2"
                                                                                                                                                                                                 ("py"
                                                                                                                                                                                                  "9 + 4 * m!1"
                                                                                                                                                                                                  "z"
                                                                                                                                                                                                  "6*(5 + 4 * m!1)"
                                                                                                                                                                                                  "x"
                                                                                                                                                                                                  "5"))
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (case-replace
                                                                                                                                                                       "(1 / 5) ^ 4 * (12 / 15) = 12/9375")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (hide
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "both_sides_div_pos_le2"
                                                                                                                                                                           ("pz"
                                                                                                                                                                            "609/100"
                                                                                                                                                                            "py"
                                                                                                                                                                            "25*26*27*28"
                                                                                                                                                                            "px"
                                                                                                                                                                            "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))"))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (split)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (name-replace
                                                                                                                                                                                   "LHS2"
                                                                                                                                                                                   "609 / 100 /
                                                                ((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   (1
                                                                                                                                                                                    -4))
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "le_times_le_pos"
                                                                                                                                                                                     ("nnx"
                                                                                                                                                                                      "25"
                                                                                                                                                                                      "y"
                                                                                                                                                                                      "5 + 4 * m!1"
                                                                                                                                                                                      "nnz"
                                                                                                                                                                                      "26 * 27 * 28"
                                                                                                                                                                                      "w"
                                                                                                                                                                                      "(6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1)"))
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "le_times_le_pos"
                                                                                                                                                                                       ("nnx"
                                                                                                                                                                                        "26"
                                                                                                                                                                                        "y"
                                                                                                                                                                                        "6 + 4 * m!1"
                                                                                                                                                                                        "nnz"
                                                                                                                                                                                        "27 * 28"
                                                                                                                                                                                        "w"
                                                                                                                                                                                        "(7 + 4 * m!1) * (8 + 4 * m!1)"))
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "le_times_le_pos"
                                                                                                                                                                                         ("nnx"
                                                                                                                                                                                          "27"
                                                                                                                                                                                          "y"
                                                                                                                                                                                          "7 + 4 * m!1"
                                                                                                                                                                                          "nnz"
                                                                                                                                                                                          "28"
                                                                                                                                                                                          "w"
                                                                                                                                                                                          "(8 + 4 * m!1)"))
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   -1
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "both_sides_times_pos_lt1"
                                                                                                                                                     ("pz"
                                                                                                                                                      "9 + 4 * m!1"
                                                                                                                                                      "x"
                                                                                                                                                      "(24 / 25) * (1 / (9 + 4 * m!1))"
                                                                                                                                                      "y"
                                                                                                                                                      "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))"))
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "div_cancel2"
                                                                                                                                                           ("x"
                                                                                                                                                            "1"
                                                                                                                                                            "n0z"
                                                                                                                                                            "9+4*m!1"))
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "associative_mult"
                                                                                                                                                             ("x"
                                                                                                                                                              "24 / 25"
                                                                                                                                                              "y"
                                                                                                                                                              "1 / (9 + 4 * m!1)"
                                                                                                                                                              "z"
                                                                                                                                                              "9 + 4 * m!1"))
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 1
                                                                                                                                                                 rl)
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -1
                                                                                                                                                                   -2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "both_sides_div_pos_lt2"
                                                                                                                                                                     ("pz"
                                                                                                                                                                      "1"
                                                                                                                                                                      "py"
                                                                                                                                                                      "9 + 4 * m!1"
                                                                                                                                                                      "px"
                                                                                                                                                                      "11 + 4 * m!1"))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (simplify
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case-replace
                                                                                                                                                                         "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1)) * (9 + 4 * m!1) = 1- (1 / 5) ^ 2*(9 + 4 * m!1)/(11 + 4 * m!1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (hide
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "(1 / 5) ^ 2 * (9 + 4 * m!1) / (11 + 4 * m!1) < 1/25")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case-replace
                                                                                                                                                                                 "(1 / 5) ^ 2=1/25")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "div_mult_pos_lt1"
                                                                                                                                                                                   1)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "cross_mult")
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   -1
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "div_mult_pos_lt1"
                                                                                                                                     ("z"
                                                                                                                                      "(1 / 239) ^ 2"
                                                                                                                                      "py"
                                                                                                                                      "9 + 4 * m!1"
                                                                                                                                      "x"
                                                                                                                                      "1 / (7 + 4 * m!1)"))
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (name-replace
                                                                                                                                               "DRL1"
                                                                                                                                               "(1 / 239) ^ 2")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "div_mult_pos_lt2"
                                                                                                                                               ("py"
                                                                                                                                                "7 + 4 * m!1"
                                                                                                                                                "z"
                                                                                                                                                "9 + 4 * m!1"
                                                                                                                                                "x"
                                                                                                                                                "(1 / 239) ^ 2"))
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (lemma
                                                                                                                                                     "lt_times_lt_pos1"
                                                                                                                                                     ("px"
                                                                                                                                                      "(1 / 239) ^ 2"
                                                                                                                                                      "y"
                                                                                                                                                      "1"
                                                                                                                                                      "nnz"
                                                                                                                                                      "7 + 4 * m!1"
                                                                                                                                                      "w"
                                                                                                                                                      "9 + 4 * m!1"))
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_expt_pos_lt"
                                                                                                                                                       ("px"
                                                                                                                                                        "1/239"
                                                                                                                                                        "py"
                                                                                                                                                        "1"
                                                                                                                                                        "pm"
                                                                                                                                                        "2"))
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (grind)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "(2*TWOTHREENINE)*(1 / (3 + 4 * m!1)-(1 / 239) ^ 2*(1 / (5 + 4 * m!1))) - 8*(1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))<0")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "both_sides_times_pos_lt1"
                                                                                                                     ("pz"
                                                                                                                      "LHS"
                                                                                                                      "x"
                                                                                                                      "(2 * TWOTHREENINE) *
                                              (1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))
                                              - 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))"
                                                                                                                      "y"
                                                                                                                      "0"))
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "2 * TWOTHREENINE/(3 + 4 * m!1) < 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))")
                                                                                                                        (("1"
                                                                                                                          (name-replace
                                                                                                                           "RHS"
                                                                                                                           "8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))")
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "both_sides_times_pos_lt1"
                                                                                                                             ("y"
                                                                                                                              "1/(3 + 4 * m!1)"
                                                                                                                              "x"
                                                                                                                              "(1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))"
                                                                                                                              "pz"
                                                                                                                              "2 * TWOTHREENINE"))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "times_div1")
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "div_mult_pos_lt1"
                                                                                                                               ("py"
                                                                                                                                "3 + 4 * m!1"
                                                                                                                                "z"
                                                                                                                                "2 * TWOTHREENINE"
                                                                                                                                "x"
                                                                                                                                "(8 * ((1 / 5) ^ 2 * FIVE))/(7 + 4 * m!1)"))
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "div_mult_pos_lt2"
                                                                                                                                     ("py"
                                                                                                                                      "7 + 4 * m!1"
                                                                                                                                      "z"
                                                                                                                                      "(8 * ((1 / 5) ^ 2 * FIVE))*(3 + 4 * m!1)"
                                                                                                                                      "x"
                                                                                                                                      "2 * TWOTHREENINE"))
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "FIVE")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "TWOTHREENINE")
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "forall (m:nat): m>=5 => 14 * (1 / 239) ^ (3 + 4 * m) +
                                               8 * ((1 / 239) ^ (3 + 4 * m) * m)
                                               <
                                               24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m)) +
                                                32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m) * m)")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "m!1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (induct
                                                                                                                                                   "m")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (skosimp)
                                                                                                                                                    (("2"
                                                                                                                                                      (case-replace
                                                                                                                                                       "j!1=4")
                                                                                                                                                      (("1"
                                                                                                                                                        (eval-formula)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "lt_times_lt_pos1"
                                                                                                                                                           ("px"
                                                                                                                                                            "14 * (1 / 239) ^ (3 + 4 * j!1) +
                                                      8 * ((1 / 239) ^ (3 + 4 * j!1) * j!1)"
                                                                                                                                                            "y"
                                                                                                                                                            "24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1)) +
                                                       32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1) * j!1)"
                                                                                                                                                            "nnz"
                                                                                                                                                            "(1 / 239) ^ 4"
                                                                                                                                                            "w"
                                                                                                                                                            "(1/5)^4"))
                                                                                                                                                          (("2"
                                                                                                                                                            (split
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "8*(1 / 239) ^ (7 + 4 * j!1)<32*((1 / 5) ^ 2 * (1 / 5) ^ (9 + 4 * j!1))")
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "expt_plus"
                                                                                                                                                                 ("n0x"
                                                                                                                                                                  "1/5"
                                                                                                                                                                  "i"
                                                                                                                                                                  "4"
                                                                                                                                                                  "j"
                                                                                                                                                                  "5+4*j!1"))
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "expt_plus"
                                                                                                                                                                     ("n0x"
                                                                                                                                                                      "1/239"
                                                                                                                                                                      "i"
                                                                                                                                                                      "4"
                                                                                                                                                                      "j"
                                                                                                                                                                      "3+4*j!1"))
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 -1
                                                                                                                                                                 -2
                                                                                                                                                                 3)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "expt_plus"
                                                                                                                                                                   ("n0x"
                                                                                                                                                                    "1/5"
                                                                                                                                                                    "i"
                                                                                                                                                                    "2"
                                                                                                                                                                    "j"
                                                                                                                                                                    "7+4*j!1"))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replace
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (hide
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "forall (m:nat): m>=27 => 8 * (1 / 239) ^ m <
                                                         32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ m))")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "7 + 4 * j!1")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (induct
                                                                                                                                                                             "m")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (case-replace
                                                                                                                                                                                 "j!2=26")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "lt_times_lt_pos1"
                                                                                                                                                                                     ("px"
                                                                                                                                                                                      "1/239"
                                                                                                                                                                                      "y"
                                                                                                                                                                                      "1/5"
                                                                                                                                                                                      "nnz"
                                                                                                                                                                                      "8 * (1 / 239) ^ j!2"
                                                                                                                                                                                      "w"
                                                                                                                                                                                      "32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ j!2))"))
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "^")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "expt"
                                                                                                                                                                                         2
                                                                                                                                                                                         (1
                                                                                                                                                                                          4))
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("3"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("3"
                                                                                                                                                                (lemma
                                                                                                                                                                 "both_sides_expt_pos_lt"
                                                                                                                                                                 ("px"
                                                                                                                                                                  "1/239"
                                                                                                                                                                  "py"
                                                                                                                                                                  "1/5"
                                                                                                                                                                  "pm"
                                                                                                                                                                  "4"))
                                                                                                                                                                (("3"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "times_div1")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "times_div1")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "cross_mult")
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "times_div1")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "times_div1")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "times_div1")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "cross_mult")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "expt_x2")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "times_div1")
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "times_div1")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "cross_mult")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "expt"
                                                                                                               1
                                                                                                               (3
                                                                                                                4))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "expt"
                                                                                                                 1
                                                                                                                 (3
                                                                                                                  4))
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -3
                                                                           2
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "G")
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "expt_plus"
                                                                                 ("n0x"
                                                                                  "31415927 / 20000000"
                                                                                  "i"
                                                                                  "4"
                                                                                  "j"
                                                                                  "4 + 4 * m!1"))
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "LHS")
                                                                                      (("2"
                                                                                        (name-replace
                                                                                         "DRL11"
                                                                                         "(31415927 / 20000000) ^ 4")
                                                                                        (("2"
                                                                                          (name-replace
                                                                                           "DRL12"
                                                                                           "(31415927 / 20000000) ^ (4 + 4 * m!1)")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "factorial"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               1
                                                                                               (1
                                                                                                2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "factorial"
                                                                                                 1
                                                                                                 (1
                                                                                                  2
                                                                                                  3))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   (1
                                                                                                    2
                                                                                                    3
                                                                                                    4))
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (name-replace
                                                                                                       "FACTORIAL"
                                                                                                       "factorial(4 + 4 * m!1)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "div_times")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "F")
                                                                  (("2"
                                                                    (expand
                                                                     "G")
                                                                    (("2"
                                                                      (eval-formula)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (expand
                                                             "G"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "both_sides_div_pos_lt1"
                                                                 ("pz"
                                                                  "factorial(4 + 4 * n!1)"
                                                                  "x"
                                                                  "(pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)"
                                                                  "y"
                                                                  "(31415927 / 20000000) ^ (4 + 4 * n!1)"))
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (lemma
                                                   "expt_times"
                                                   ("n0x"
                                                    "-1"
                                                    "i"
                                                    "2"
                                                    "j"
                                                    "1+n!1"))
                                                  (("2"
                                                    (expand "^" -1 2)
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (expand "expt")
                                                        (("2"
                                                          (expand
                                                           "expt")
                                                          (("2"
                                                            (rewrite
                                                             "sq_rew")
                                                            (("2"
                                                              (rewrite
                                                               "sq_neg")
                                                              (("2"
                                                                (rewrite
                                                                 "expt_1i")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "F" 1)
                                          (("2"
                                            (expand "KK" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2" (lemma "pi_lb_pi" ("n" "n!1"))
                              (("2"
                                (case
                                 "16 * ((1 / 5) ^ (4 * n!1 + 5) / (4 * n!1 + 5)) <= 16*(1/5)^25/25")
                                (("1"
                                  (case
                                   "4 * ((1 / 239) ^ (4 * n!1 + 3) / (4 * n!1 + 3)) <= 4*(1/239)^23/23")
                                  (("1"
                                    (case
                                     "16 * (1 / 5) ^ 25 / 25< 1/1000000")
                                    (("1"
                                      (case
                                       "4 * (1 / 239) ^ 23 / 23< 1 / 1000000")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (lemma
                                       "both_sides_expt_lt1_le"
                                       ("lt1x"
                                        "1/239"
                                        "j"
                                        "23"
                                        "i"
                                        "4*n!1+3"))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "both_sides_div_pos_le2"
                                           ("pz"
                                            "4"
                                            "px"
                                            "3+4*n!1"
                                            "py"
                                            "23"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "le_times_le_pos"
                                               ("nnx"
                                                "4 / (3 + 4 * n!1)"
                                                "y"
                                                "4 / 23"
                                                "nnz"
                                                "(1 / 239) ^ (3 + 4 * n!1)"
                                                "w"
                                                "(1 / 239) ^ 23"))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-5 1))
                                  (("2"
                                    (lemma
                                     "both_sides_div_pos_le2"
                                     ("pz"
                                      "16"
                                      "px"
                                      "5+4*n!1"
                                      "py"
                                      "25"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "both_sides_expt_lt1_le"
                                         ("lt1x"
                                          "1/5"
                                          "j"
                                          "25"
                                          "i"
                                          "4*n!1+5"))
                                        (("2"
                                          (lemma
                                           "le_times_le_pos"
                                           ("nnx"
                                            "16 / (5 + 4 * n!1)"
                                            "y"
                                            "16 / 25"
                                            "nnz"
                                            "(1 / 5) ^ (4 * n!1 + 5)"
                                            "w"
                                            "(1 / 5) ^ 25"))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2"
                            (lemma "both_sides_div_pos_lt1"
                             ("pz" "2" "y" "pi-pi_lbn(n!1)" "x" "KK"))
                            (("2" (expand ">" 1)
                              (("2"
                                (replace -1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lbn const-decl "real" atan_approx nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_lb_inc formula-decl nil atan_approx nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (pi_ub const-decl "posreal" atan_approx nil)
    (sq_neg formula-decl nil sq "reals/")
    (sq_1 formula-decl nil sq "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq_rew formula-decl nil sq "reals/")
    (pi_lb_pi formula-decl nil atan_approx nil)
    (pi_lb_diff formula-decl nil atan_approx nil))
   nil))
 (cos_lb_pi2_eps 0
  (cos_lb_pi2_eps-1 nil 3403981585
   ("" (skosimp)
    (("" (lemma "cos_approx_cos" ("a" "pi / 2 - px!1" "n" "1+2*n!1"))
      (("" (lemma "cos_bounds" ("a" "pi / 2 - px!1" "n" "n!1"))
        (("" (flatten)
          (("" (hide -2)
            (("" (expand "cos_lb")
              (("" (expand "abs" -2 1)
                (("" (assert)
                  ((""
                    (name-replace "COS_APPROX"
                     "cos_approx(pi / 2 - px!1, 1 + 2 * n!1)")
                    (("" (rewrite "cos_shift")
                      (("" (lemma "sin_gt_0" ("a" "px!1"))
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_approx_cos formula-decl nil trig_approx nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_lb const-decl "real" trig_approx nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_shift formula-decl nil sincos nil)
    (sin_gt_0 formula-decl nil trig_ineq nil)
    (cos_approx const-decl "real" trig_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cos_bounds formula-decl nil trig_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil))
   nil))
 (cos_lb_pi2_pos0 0
  (cos_lb_pi2_pos0-2 nil 3403981610
   ("" (skosimp)
    (("" (expand "cos_lb")
      (("" (expand "cos_approx")
        (("" (replace -1)
          (("" (expand "sigma")
            (("" (expand "sigma")
              (("" (expand "cos_term")
                (("" (expand "pi_lbn")
                  (("" (expand "atan_pos_le1_lb")
                    (("" (expand "atan_pos_le1_ub")
                      (("" (expand "atan_series_n")
                        (("" (expand "sigma")
                          (("" (expand "sigma")
                            (("" (expand "atan_series_term")
                              ((""
                                (expand "atan_series_coef")
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_lb const-decl "real" trig_approx nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (atan_series_iter def-decl "real" atan_approx nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (cos_term const-decl "real" trig_approx nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (cos_approx const-decl "real" trig_approx nil))
   nil)
  (cos_lb_pi2_pos0-1 nil 3403981522
   ("" (skosimp)
    (("" (lemma "cos_approx_cos" ("a" "pi / 2 - px!1" "n" "1+2*n!1"))
      (("" (lemma "cos_bounds" ("a" "pi / 2 - px!1" "n" "n!1"))
        (("" (flatten)
          (("" (hide -2)
            (("" (expand "cos_lb")
              (("" (expand "abs" -2 1)
                (("" (assert)
                  ((""
                    (name-replace "COS_APPROX"
                     "cos_approx(pi / 2 - px!1, 1 + 2 * n!1)")
                    (("" (rewrite "cos_shift")
                      (("" (lemma "sin_gt_0" ("a" "px!1"))
                        (("" (assert) nil))))))))))))))))))))))
    nil)
   nil nil))
 (cos_lb_pi2_pos1 0
  (cos_lb_pi2_pos1-1 nil 3403981651
   ("" (skosimp)
    (("" (replace -1) (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx nil)
    (atan_series_iter def-decl "real" atan_approx nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (cos_term const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (cos_approx const-decl "real" trig_approx nil)
    (cos_lb const-decl "real" trig_approx nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cos_lb_pi2_pos2 0
  (cos_lb_pi2_pos2-1 nil 3403981676
   ("" (skosimp)
    (("" (replace -1) (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx nil)
    (atan_series_iter def-decl "real" atan_approx nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (cos_term const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (cos_approx const-decl "real" trig_approx nil)
    (cos_lb const-decl "real" trig_approx nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cos_lb_pi2_pos 0
  (cos_lb_pi2_pos-1 nil 3403981773
   ("" (skosimp)
    ((""
      (lemma "cos_lb_pi2_eps" ("n" "n!1" "px" "pi/2-pi_lbn(n!1) / 2"))
      (("1" (assert)
        (("1" (hide 2)
          (("1" (lemma "pi_bounds" ("n" "n!1"))
            (("1" (flatten)
              (("1" (assert)
                (("1" (lemma "pi_bounds0")
                  (("1" (flatten)
                    (("1" (lemma "pi_lb_inc" ("n" "0" "m" "n!1"))
                      (("1" (assert)
                        (("1" (rewrite "sin_shift" 1)
                          (("1" (lemma "cos_term_pi_lb" ("n" "n!1"))
                            (("1" (assert)
                              (("1"
                                (name
                                 "TERM"
                                 "cos_term(pi_lbn(n!1) / 2)(2 + 2 * n!1)")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "cos_term")
                                    (("1"
                                      (lemma
                                       "expt_times"
                                       ("n0x"
                                        "-1"
                                        "i"
                                        "2"
                                        "j"
                                        "1+n!1"))
                                      (("1"
                                        (expand "^" -1 2)
                                        (("1"
                                          (expand "expt" -1)
                                          (("1"
                                            (expand "expt" -1)
                                            (("1"
                                              (expand "expt" -1)
                                              (("1"
                                                (rewrite "sq_rew")
                                                (("1"
                                                  (rewrite "sq_neg")
                                                  (("1"
                                                    (rewrite "expt_1i")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (typepred
                                                           "factorial(4 + 4 * n!1)")
                                                          (("1"
                                                            (lemma
                                                             "expt_pos"
                                                             ("px"
                                                              "pi_lbn(n!1) / 2"
                                                              "i"
                                                              "4 + 4 * n!1"))
                                                            (("1"
                                                              (expand
                                                               "abs"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "pi_bounds" ("n" "n!1"))
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pi_lbn const-decl "real" atan_approx nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_lb_pi2_eps formula-decl nil trig_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bounds0 formula-decl nil atan_approx nil)
    (pi_lb_inc formula-decl nil atan_approx nil)
    (sin_shift formula-decl nil sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expt_pos formula-decl nil exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_term const-decl "real" trig_approx nil)
    (cos_term_pi_lb formula-decl nil trig_approx nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sin_range application-judgement "real_abs_le1" sincos nil))
   nil))
 (sin_term_pi_lb 0
  (sin_term_pi_lb-4 nil 3566173322
   (""
    (case "FORALL (n: nat):
                                    n >= 12 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))")
    (("1" (skeep)
      (("1" (inst - "n")
        (("1" (assert)
          (("1" (case "n = 11")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (lemma "sin_bounds")
                  (("1" (inst - "pi_lbn(12)" "14")
                    (("1" (flatten)
                      (("1" (invoke (case "%1 < %2") (! 2 1) (! -1 1))
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (eval-formula) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (case "FORALL (n: nat):
                                                                                                                  n >= 20 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))")
        (("1"
          (case "FORALL (nnn: subrange(12,20)):
                                                                                                                                              sin_term(pi_lbn(nnn+1))(2 * nnn + 2) < sin_lb(pi_lbn(nnn+1),nnn)")
          (("1" (skeep)
            (("1" (inst -2 "n")
              (("1" (assert)
                (("1" (inst - "n")
                  (("1" (lemma "sin_bounds")
                    (("1" (inst - "pi_lbn(n+1)" "n")
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (eval-formula) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "sin_px")
            (("2" (skosimp*)
              (("2" (lemma "sin_pi_minus")
                (("2" (inst?)
                  (("2" (replace -1 :dir rl)
                    (("2" (inst?)
                      (("1" (split -)
                        (("1" (lemma "pi_bounds")
                          (("1" (inst - "n!1+1+1")
                            (("1" (flatten)
                              (("1"
                                (lemma "pi_lbn_lt")
                                (("1"
                                  (inst - "n!1+1")
                                  (("1"
                                    (case
                                     "pi-pi_lbn(n!1+1) >= pi_lbn(n!1+1+1)-pi_lbn(n!1+1)")
                                    (("1"
                                      (mult-by -1 "(1 - 1 / 1500000)")
                                      (("1"
                                        (name
                                         "KZ"
                                         "pi_lbn(n!1+1+1)-pi_lbn(n!1+1)")
                                        (("1"
                                          (case
                                           "sin_term(pi_lbn(n!1+1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "pi_lb_diff_bounds")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn+1))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (10 + 5 * nn)")
                                                    (("1"
                                                      (inst - "n!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (induct "nn")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "j < 19")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "j = 19")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   2)
                                                                  (("1"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT j>=20")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (1
                                                                    2))
                                                                  (("2"
                                                                    (name
                                                                     "M"
                                                                     "1-1 / 1500000")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "sin_term")
                                                                          (("2"
                                                                            (case
                                                                             "FORALL (k:nat): (-1)^(2*k) = 1")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               "1+j")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "2+j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "FORALL (aa:real): 1*aa = aa")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "pi_lb_quot_bounds")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j+1")
                                                                                                    (("1"
                                                                                                      (skoletin
                                                                                                       -1
                                                                                                       :old?
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (name
                                                                                                           "disepsi"
                                                                                                           "(1 - 14.5 * (1 / 5) ^ (4 * j + 7))")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "disepsi > 0")
                                                                                                            (("1"
                                                                                                              (name
                                                                                                               "epsi"
                                                                                                               "1/(disepsi)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "epsi > 1")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "((epsi*pi_lbn(j+1)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                                                                                                                                                                                                                                 14 * (((1 / 5) ^ (15 + 5 * j)) * M)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "pi_lbn(2+ j) <= epsi*pi_lbn(1+j)")
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "both_sides_expt_pos_lt_aux")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "8+4*j"
                                                                                                                           "pi_lbn(2 + j)"
                                                                                                                           "epsi * pi_lbn(1+j)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "1/factorial(9+4*j)")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "xquot"
                                                                                                                           -6)
                                                                                                                          (("2"
                                                                                                                            (cross-mult
                                                                                                                             -6)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "epsi"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (cross-mult
                                                                                                                                 1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "epsi^(9+4*j) * pi_lbn(j+1)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5")
                                                                                                                        (("1"
                                                                                                                          (mult-ineq
                                                                                                                           -1
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (invoke
                                                                                                                             (case
                                                                                                                              "%1 = %2")
                                                                                                                             (!
                                                                                                                              -1
                                                                                                                              1)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              1))
                                                                                                                            (("1"
                                                                                                                              (invoke
                                                                                                                               (case
                                                                                                                                "%1 = %2")
                                                                                                                               (!
                                                                                                                                -2
                                                                                                                                2)
                                                                                                                               (!
                                                                                                                                1
                                                                                                                                2))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -3))
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "expt_plus")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "10+5*j"
                                                                                                                                       "5"
                                                                                                                                       "1/5")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "(epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4)
                                                                                                                                                                                                                                                                                                                                                                                                                               * (pi_lbn(j+1) ^ (5 + 4 * j)) = (epsi * pi_lbn(j+1)) ^ (9 + 4 * j)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    -3
                                                                                                                                    2
                                                                                                                                    3))
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "mult_expt")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "9+4*j"
                                                                                                                                       "epsi"
                                                                                                                                       "pi_lbn(j+1)")
                                                                                                                                      (("2"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "expt_plus")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "5+4*j"
                                                                                                                                               "4"
                                                                                                                                               "pi_lbn(j+1)")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  2
                                                                                                                                  3))
                                                                                                                                (("2"
                                                                                                                                  (invoke
                                                                                                                                   (name
                                                                                                                                    "ej1"
                                                                                                                                    "%1")
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (invoke
                                                                                                                                     (name
                                                                                                                                      "ej2"
                                                                                                                                      "%1")
                                                                                                                                     (!
                                                                                                                                      1
                                                                                                                                      1
                                                                                                                                      2))
                                                                                                                                    (("2"
                                                                                                                                      (invoke
                                                                                                                                       (name
                                                                                                                                        "ej3"
                                                                                                                                        "%1")
                                                                                                                                       (!
                                                                                                                                        1
                                                                                                                                        1
                                                                                                                                        3))
                                                                                                                                      (("2"
                                                                                                                                        (invoke
                                                                                                                                         (name
                                                                                                                                          "ej4"
                                                                                                                                          "%1")
                                                                                                                                         (!
                                                                                                                                          1
                                                                                                                                          1
                                                                                                                                          4))
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "factorial"
                                                                                                                                                   +
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "ej1 -1 = ej2")
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "factorial"
                                                                                                                                                           +
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "ej2 -1 = ej3")
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "factorial"
                                                                                                                                                                 +
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "ej3-1 = ej4")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "factorial"
                                                                                                                                                                       +
                                                                                                                                                                       2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4 <= 1.1*3.1415927^4")
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))")
                                                                                                                              (("1"
                                                                                                                                (invoke
                                                                                                                                 (case
                                                                                                                                  "%1 < %2")
                                                                                                                                 (!
                                                                                                                                  -1
                                                                                                                                  2)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (name
                                                                                                                                       "RD"
                                                                                                                                       "j-18")
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "j = RD+18 AND RD>=0")
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-1
                                                                                                                                            1))
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "EXISTS (RD2:nat): RD2 = RD")
                                                                                                                                                (("1"
                                                                                                                                                  (skeep
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (cross-mult
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   "RD")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (invoke
                                                                                                                                 (case
                                                                                                                                  "%1 < %2 AND %3 < %4")
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  1)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2
                                                                                                                                  1)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  2)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (mult-ineq
                                                                                                                                     -1
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      1))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "epsi")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "disepsi")
                                                                                                                                        (("1"
                                                                                                                                          (name
                                                                                                                                           "egrange"
                                                                                                                                           "(1 - 14.5 * (1 / 5) ^ (7 + 4 * j))")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (name
                                                                                                                                               "alpha"
                                                                                                                                               "14.5 * (1 / 5) ^ (7 + 4 * j)")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "alpha < 1/3")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "1/egrange < 1+2*alpha")
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "(1+2*alpha)^(9+4*j) < 1.1")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_expt_pos_lt_aux")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "8+4*j"
                                                                                                                                                         "1/egrange"
                                                                                                                                                         "1+2*alpha")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "^")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "egrange > 0")
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               +)
                                                                                                                                                              (("1"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 1)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 1)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "14.5*(1/5)^(7+4*j) < 1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "div_expt"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "FORALL (nnm:nat): 1^nnm = 1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (7 + kkr)) < 1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (induct
                                                                                                                                                                             "kkr")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "^")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "expt"
                                                                                                                                                                                     +
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (induct
                                                                                                                                                                         "nnm")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "^")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "expt"
                                                                                                                                                                               +)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "alpha"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name
                                                                                                                                                           "FF"
                                                                                                                                                           "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+2)")
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "7+4*j")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "FF"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (induct
                                                                                                                                                                 "jj")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "j!1 = 82")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (eval-formula)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "FF"
                                                                                                                                                                           +)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "FORALL (egv:nnreal): egv^(3+j!1) = egv^(2+j!1)*egv")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (invoke
                                                                                                                                                                                     (case
                                                                                                                                                                                      "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)")
                                                                                                                                                                                     (!
                                                                                                                                                                                      1
                                                                                                                                                                                      1
                                                                                                                                                                                      2)
                                                                                                                                                                                     (!
                                                                                                                                                                                      1
                                                                                                                                                                                      1
                                                                                                                                                                                      1))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (both-sides
                                                                                                                                                                                         "+"
                                                                                                                                                                                         "1"
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (mult-ineq
                                                                                                                                                                                           -1
                                                                                                                                                                                           -2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (split)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (induct
                                                                                                                                                                                               "kkj")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "j!2 = 74")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (eval-formula)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "^")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "expt"
                                                                                                                                                                                                         +)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "FF")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (name
                                                                                                                                                                                             "K1"
                                                                                                                                                                                             "2 * (14.5 * (1 / 5) ^ (j!1))")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 "2 * (14.5 * (1 / 5) ^ (1+j!1)) = (1/5)*K1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (name
                                                                                                                                                                                                     "pj"
                                                                                                                                                                                                     "2+j!1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "binomial_theorem")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst-cp
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "pj"
                                                                                                                                                                                                           "1"
                                                                                                                                                                                                           "(1/5)*K1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "pj"
                                                                                                                                                                                                             "1"
                                                                                                                                                                                                             "K1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "sigma"
                                                                                                                                                                                                                   +
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (case-replace
                                                                                                                                                                                                                       "C(pj,pj) = 1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "sigma"
                                                                                                                                                                                                                           +
                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (case-replace
                                                                                                                                                                                                                             "C(pj, pj) * K1 ^ 0 = 1")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                                 "sigma_scal"
                                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                                   "sigma_le")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                                                         "mult_expt"
                                                                                                                                                                                                                                         +)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                           "(1 / 5) ^ (pj - n) <= 1/5")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (mult-by
                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                             "C(pj, n) * 1 ^ n * K1 ^ (pj - n)")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                             "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (inst-cp
                                                                                                                                                                                                                                               -
                                                                                                                                                                                                                                               "pj-n-1")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (induct
                                                                                                                                                                                                                                                 "kkr")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                     "^")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "expt"
                                                                                                                                                                                                                                                       +)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "C")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                         -
                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                           "C")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "^")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "expt"
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "^")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "expt"
                                                                                                                                                                                     +
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -3
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (cross-mult
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "alpha > 2*sq(alpha)")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "sq")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-1
                                                                                                                                                                1))
                                                                                                                                                              (("2"
                                                                                                                                                                (mult-by
                                                                                                                                                                 -1
                                                                                                                                                                 "alpha")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "sq")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "alpha"
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (induct
                                                                                                                                                         "kkp")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "j!1 = 69")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide-all-but
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (eval-formula)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "^")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "expt"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "both_sides_expt_pos_lt_aux")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "3"
                                                                                                                                       "pi_lbn(j+1)"
                                                                                                                                       "3.1415927")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "^")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "pi_bounds")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "pi_bounds")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "10")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (eval-expr
                                                                                                                                                             "pi_ubn(10)")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "epsi"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "FORALL (kkp:nat): kkp>=3 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (induct
                                                                                                                   "kkp")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "j!1 = 2")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "^")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (induct
                                                                                 "k")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "pi_bounds")
                                      (("2"
                                        (inst - "n!1+1")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "FORALL (kkp:nat): kkp>=20 IMPLIES 1 / 500 > pi - pi_lbn(kkp)")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (induct "kkp")
                              (("1" (assert) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "j = 19")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "pi_bounds")
                                      (("1"
                                        (inst - "19")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case
                                             "1/500 > pi_ubn(19)-pi_lbn(20)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (eval-formula)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "pi_lbn_lt")
                                      (("2"
                                        (inst - "j")
                                        (("2"
                                          (lemma "pi_bounds")
                                          (("2"
                                            (inst-cp - "j")
                                            (("2"
                                              (inst - "1+j")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "pi_bounds")
                          (("2" (inst - "n!1+1")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (n!1 skolem-const-decl "nat" trig_approx nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pi_lb_quot_bounds formula-decl nil atan_approx nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (alpha skolem-const-decl "posrat" trig_approx nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (C const-decl "posnat" binomial "reals/")
    (factorial_0 formula-decl nil factorial "ints/")
    (sigma_le formula-decl nil sigma "reals/")
    (sigma_scal formula-decl nil sigma "reals/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (binomial_theorem formula-decl nil polynomials "reals/")
    (posint nonempty-type-eq-decl nil integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (FF skolem-const-decl "[nat -> posrat]" trig_approx nil)
    (div_expt formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (rat_expt application-judgement "rat" exponentiation nil)
    (egrange skolem-const-decl "rat" trig_approx nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (pi_ubn const-decl "real" atan_approx nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (RD skolem-const-decl "int" trig_approx nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (mult_expt formula-decl nil exponentiation nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (epsi skolem-const-decl "nzrat" trig_approx nil)
    (j skolem-const-decl "nat" trig_approx nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (xquot skolem-const-decl "posreal" trig_approx nil)
    (disepsi skolem-const-decl "rat" trig_approx nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (pi_lb_diff_bounds formula-decl nil atan_approx nil)
    (pi_lbn_lt formula-decl nil atan_approx nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (sin_pi_minus formula-decl nil trig_extra nil)
    (sin_px formula-decl nil trig_approx nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_bounds formula-decl nil trig_approx nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_lb const-decl "real" trig_approx nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (sin_term const-decl "real" trig_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def nil))
   nil)
  (sin_term_pi_lb-3 nil 3554737763
   (""
    (case "FORALL (n: nat):
                             n >= 12 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))")
    (("1" (skeep)
      (("1" (inst - "n")
        (("1" (assert)
          (("1" (case "n = 11")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (lemma "sin_bounds")
                  (("1" (inst - "pi_lbn(12)" "14")
                    (("1" (flatten)
                      (("1" (invoke (case "%1 < %2") (! 2 1) (! -1 1))
                        (("1" (assert) nil)
                         ("2" (hide-all-but 1)
                          (("2" (eval-formula) nil)))))))))))))))
             ("2" (assert) nil)))))))))
     ("2" (hide 2)
      (("2"
        (case "FORALL (n: nat):
                                                                                                         n >= 20 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))")
        (("1"
          (case "FORALL (nnn: subrange(12,20)):
                                                                                                                                   sin_term(pi_lbn(nnn+1))(2 * nnn + 2) < sin_lb(pi_lbn(nnn+1),nnn)")
          (("1" (skeep)
            (("1" (inst -2 "n")
              (("1" (assert)
                (("1" (inst - "n")
                  (("1" (lemma "sin_bounds")
                    (("1" (inst - "pi_lbn(n+1)" "n")
                      (("1" (flatten) (("1" (assert) nil)))))))))))))))
           ("2" (hide-all-but 1) (("2" (eval-formula) nil)))))
         ("2" (hide 2)
          (("2" (lemma "sin_px")
            (("2" (skosimp*)
              (("2" (lemma "sin_pi_minus")
                (("2" (inst?)
                  (("2" (replace -1 :dir rl)
                    (("2" (inst?)
                      (("1" (split -)
                        (("1" (lemma "pi_bounds")
                          (("1" (inst - "n!1+1+1")
                            (("1" (flatten)
                              (("1"
                                (lemma "pi_lbn_lt")
                                (("1"
                                  (inst - "n!1+1")
                                  (("1"
                                    (case
                                     "pi-pi_lbn(n!1+1) >= pi_lbn(n!1+1+1)-pi_lbn(n!1+1)")
                                    (("1"
                                      (mult-by -1 "(1 - 1 / 1500000)")
                                      (("1"
                                        (name
                                         "KZ"
                                         "pi_lbn(n!1+1+1)-pi_lbn(n!1+1)")
                                        (("1"
                                          (case
                                           "sin_term(pi_lbn(n!1+1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ")
                                          (("1" (assert) nil)
                                           ("2"
                                            (lemma "pi_lb_diff_bounds")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn+1))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (10 + 5 * nn)")
                                                    (("1"
                                                      (inst - "n!1")
                                                      (("1"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (induct "nn")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "j < 19")
                                                            (("1"
                                                              (assert)
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "j = 19")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   2)
                                                                  (("1"
                                                                    (eval-formula)
                                                                    nil)))))
                                                               ("2"
                                                                (case
                                                                 "NOT j>=20")
                                                                (("1"
                                                                  (assert)
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (1
                                                                    2))
                                                                  (("2"
                                                                    (name
                                                                     "M"
                                                                     "1-1 / 1500000")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "sin_term")
                                                                          (("2"
                                                                            (case
                                                                             "FORALL (k:nat): (-1)^(2*k) = 1")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               "1+j")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "2+j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "FORALL (aa:real): 1*aa = aa")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "pi_lb_quot_bounds")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j+1")
                                                                                                    (("1"
                                                                                                      (skoletin
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (name
                                                                                                           "disepsi"
                                                                                                           "(1 - 14.5 * (1 / 5) ^ (4 * j + 7))")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "disepsi > 0")
                                                                                                            (("1"
                                                                                                              (name
                                                                                                               "epsi"
                                                                                                               "1/(disepsi)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "epsi > 1")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "((epsi*pi_lbn(j+1)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                                                                                                                                                                                               14 * (((1 / 5) ^ (15 + 5 * j)) * M)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "pi_lbn(2+ j) <= epsi*pi_lbn(1+j)")
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "both_sides_expt_pos_lt_aux")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "8+4*j"
                                                                                                                           "pi_lbn(2 + j)"
                                                                                                                           "epsi * pi_lbn(1+j)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "1/factorial(9+4*j)")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil)))))
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "xquot"
                                                                                                                           -6)
                                                                                                                          (("2"
                                                                                                                            (cross-mult
                                                                                                                             -6)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "epsi"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (cross-mult
                                                                                                                                 1)
                                                                                                                                nil)))))))))))
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "epsi^(9+4*j) * pi_lbn(j+1)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5")
                                                                                                                        (("1"
                                                                                                                          (mult-ineq
                                                                                                                           -1
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (invoke
                                                                                                                             (case
                                                                                                                              "%1 = %2")
                                                                                                                             (!
                                                                                                                              -1
                                                                                                                              1)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              1))
                                                                                                                            (("1"
                                                                                                                              (invoke
                                                                                                                               (case
                                                                                                                                "%1 = %2")
                                                                                                                               (!
                                                                                                                                -2
                                                                                                                                2)
                                                                                                                               (!
                                                                                                                                1
                                                                                                                                2))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil)))))
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -3))
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "expt_plus")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "10+5*j"
                                                                                                                                       "5"
                                                                                                                                       "1/5")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil)))))))))))
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "(epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4)
                                                                                                                                                                                                                                                                                                                                                                                     * (pi_lbn(j+1) ^ (5 + 4 * j)) = (epsi * pi_lbn(j+1)) ^ (9 + 4 * j)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    -3
                                                                                                                                    2
                                                                                                                                    3))
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "mult_expt")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "9+4*j"
                                                                                                                                       "epsi"
                                                                                                                                       "pi_lbn(j+1)")
                                                                                                                                      (("2"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "expt_plus")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "5+4*j"
                                                                                                                                               "4"
                                                                                                                                               "pi_lbn(j+1)")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil)))))))))))))))))
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  2
                                                                                                                                  3))
                                                                                                                                (("2"
                                                                                                                                  (invoke
                                                                                                                                   (name
                                                                                                                                    "ej1"
                                                                                                                                    "%1")
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (invoke
                                                                                                                                     (name
                                                                                                                                      "ej2"
                                                                                                                                      "%1")
                                                                                                                                     (!
                                                                                                                                      1
                                                                                                                                      1
                                                                                                                                      2))
                                                                                                                                    (("2"
                                                                                                                                      (invoke
                                                                                                                                       (name
                                                                                                                                        "ej3"
                                                                                                                                        "%1")
                                                                                                                                       (!
                                                                                                                                        1
                                                                                                                                        1
                                                                                                                                        3))
                                                                                                                                      (("2"
                                                                                                                                        (invoke
                                                                                                                                         (name
                                                                                                                                          "ej4"
                                                                                                                                          "%1")
                                                                                                                                         (!
                                                                                                                                          1
                                                                                                                                          1
                                                                                                                                          4))
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "factorial"
                                                                                                                                                   +
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "ej1 -1 = ej2")
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "factorial"
                                                                                                                                                           +
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "ej2 -1 = ej3")
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "factorial"
                                                                                                                                                                 +
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "ej3-1 = ej4")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "factorial"
                                                                                                                                                                       +
                                                                                                                                                                       2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil)))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil)))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil)))))))
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil)))))))))))))))))))))))))))))))
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4 <= 1.1*3.1415927^4")
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))")
                                                                                                                              (("1"
                                                                                                                                (invoke
                                                                                                                                 (case
                                                                                                                                  "%1 < %2")
                                                                                                                                 (!
                                                                                                                                  -1
                                                                                                                                  2)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (name
                                                                                                                                       "RD"
                                                                                                                                       "j-18")
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "j = RD+18 AND RD>=0")
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-1
                                                                                                                                            1))
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "EXISTS (RD2:nat): RD2 = RD")
                                                                                                                                                (("1"
                                                                                                                                                  (skeep
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (cross-mult
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil)))))))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   "RD")
                                                                                                                                                  nil)))))))))
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil)))))))))))))
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (invoke
                                                                                                                                 (case
                                                                                                                                  "%1 < %2 AND %3 < %4")
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  1)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2
                                                                                                                                  1)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  2)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (mult-ineq
                                                                                                                                     -1
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil)))))
                                                                                                                                 ("2"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      1))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "epsi")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "disepsi")
                                                                                                                                        (("1"
                                                                                                                                          (name
                                                                                                                                           "egrange"
                                                                                                                                           "(1 - 14.5 * (1 / 5) ^ (7 + 4 * j))")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (name
                                                                                                                                               "alpha"
                                                                                                                                               "14.5 * (1 / 5) ^ (7 + 4 * j)")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "alpha < 1/3")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "1/egrange < 1+2*alpha")
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "(1+2*alpha)^(9+4*j) < 1.1")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_expt_pos_lt_aux")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "8+4*j"
                                                                                                                                                         "1/egrange"
                                                                                                                                                         "1+2*alpha")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "^")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "egrange > 0")
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               +)
                                                                                                                                                              (("1"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 1)
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 1)
                                                                                                                                                                nil)))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "14.5*(1/5)^(7+4*j) < 1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "div_expt"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "FORALL (nnm:nat): 1^nnm = 1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (7 + kkr)) < 1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (induct
                                                                                                                                                                             "kkr")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "^")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "expt"
                                                                                                                                                                                     +
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil)))))))))))))))))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (induct
                                                                                                                                                                         "nnm")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "^")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "expt"
                                                                                                                                                                               +)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil)))))))))))))))))))))))))))
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "alpha"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name
                                                                                                                                                           "FF"
                                                                                                                                                           "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+2)")
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "7+4*j")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "FF"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil)))))))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (induct
                                                                                                                                                                 "jj")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "j!1 = 82")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (eval-formula)
                                                                                                                                                                        nil)))
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "FF"
                                                                                                                                                                           +)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "FORALL (egv:nnreal): egv^(3+j!1) = egv^(2+j!1)*egv")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (invoke
                                                                                                                                                                                     (case
                                                                                                                                                                                      "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)")
                                                                                                                                                                                     (!
                                                                                                                                                                                      1
                                                                                                                                                                                      1
                                                                                                                                                                                      2)
                                                                                                                                                                                     (!
                                                                                                                                                                                      1
                                                                                                                                                                                      1
                                                                                                                                                                                      1))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (both-sides
                                                                                                                                                                                         "+"
                                                                                                                                                                                         "1"
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (mult-ineq
                                                                                                                                                                                           -1
                                                                                                                                                                                           -2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil)))))))
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (split)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil)))
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (induct
                                                                                                                                                                                               "kkj")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "j!2 = 74")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (eval-formula)
                                                                                                                                                                                                        nil)))))
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "^")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "expt"
                                                                                                                                                                                                         +)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil)))))))))))))))))
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "FF")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (name
                                                                                                                                                                                             "K1"
                                                                                                                                                                                             "2 * (14.5 * (1 / 5) ^ (j!1))")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 "2 * (14.5 * (1 / 5) ^ (1+j!1)) = (1/5)*K1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (name
                                                                                                                                                                                                     "pj"
                                                                                                                                                                                                     "2+j!1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "binomial_theorem")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst-cp
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "pj"
                                                                                                                                                                                                           "1"
                                                                                                                                                                                                           "(1/5)*K1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "pj"
                                                                                                                                                                                                             "1"
                                                                                                                                                                                                             "K1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "sigma"
                                                                                                                                                                                                                   +
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "C(pj, pj) * 1 ^ pj * ((1 / 5) * K1) ^ 0 = 1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "sigma"
                                                                                                                                                                                                                             +
                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                               "C(pj, pj) * 1 ^ pj * K1 ^ 0 = 1")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                                     "sigma_scal_right"
                                                                                                                                                                                                                                     :dir
                                                                                                                                                                                                                                     rl)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                                                       "sigma_le")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (skeep)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "mult_expt"
                                                                                                                                                                                                                                             +)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                                               "(1 / 5) ^ (pj - n) <= 1/5")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (mult-by
                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                 "C(pj, n) * 1 ^ n * K1 ^ (pj - n)")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil)))
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                 "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (inst-cp
                                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                                   "pj-n-1")
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                    nil)))
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (induct
                                                                                                                                                                                                                                                     "kkr")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         "^")
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                           "expt"
                                                                                                                                                                                                                                                           +)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            nil)))))))))))))))))))))
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil)))))
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil)))))))))
                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                                   "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "C")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil)))))
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                         "FORALL (egv2:nat): 1^egv2 = 1")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                          (induct
                                                                                                                                                                                                                                           "egv2")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "^")
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 "expt"
                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil)))))))))))))
                                                                                                                                                                                                                                     ("3"
                                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                                                        (grind)
                                                                                                                                                                                                                                        nil)))))
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                                                      nil)))))))))))))))
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                           "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "C")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil)))))
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                 "FORALL (egv2:nat): 1^egv2 = 1")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (induct
                                                                                                                                                                                                                                   "egv2")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "^")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "expt"
                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil)))))))))))))
                                                                                                                                                                                                                             ("3"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("3"
                                                                                                                                                                                                                                (grind)
                                                                                                                                                                                                                                nil)))))
                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                                              nil)))))))))))))))))))))))))))))
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "^")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "expt"
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil)))))))))))))))))))))))))
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "^")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "expt"
                                                                                                                                                                                     +
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil)))))))))))))))))))))))))))))))))))
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -3
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (cross-mult
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "alpha > 2*sq(alpha)")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "sq")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil)))
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-1
                                                                                                                                                                1))
                                                                                                                                                              (("2"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   "alpha")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "sq")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil)))))))))))))))))))))
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "alpha"
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil)))
                                                                                                                                                       ("2"
                                                                                                                                                        (induct
                                                                                                                                                         "kkp")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "j!1 = 69")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide-all-but
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (eval-formula)
                                                                                                                                                                  nil)))))
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "^")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "expt"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil)))))))))))))))))))))))))))))))))
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "both_sides_expt_pos_lt_aux")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "3"
                                                                                                                                       "pi_lbn(j+1)"
                                                                                                                                       "3.1415927")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "^")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "pi_bounds")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "pi_bounds")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "10")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (eval-expr
                                                                                                                                                             "pi_ubn(10)")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "epsi"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil)))))))))
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil)))
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "FORALL (kkp:nat): kkp>=3 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil)))
                                                                                                                 ("2"
                                                                                                                  (induct
                                                                                                                   "kkp")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "j!1 = 2")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil)))))
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "^")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil)))))))))))))))
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (induct
                                                                                 "k")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                                     ("2"
                                      (lemma "pi_bounds")
                                      (("2"
                                        (inst - "n!1+1")
                                        (("2"
                                          (ground)
                                          nil)))))))))))))))))
                         ("2"
                          (case "FORALL (kkp:nat): kkp>=20 IMPLIES 1 / 500 > pi - pi_lbn(kkp)")
                          (("1" (inst?) (("1" (assert) nil)))
                           ("2" (hide-all-but 1)
                            (("2" (induct "kkp")
                              (("1" (assert) nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "j = 19")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "pi_bounds")
                                      (("1"
                                        (inst - "19")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case
                                             "1/500 > pi_ubn(19)-pi_lbn(20)")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (eval-formula)
                                                nil)))))))))))))
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "pi_lbn_lt")
                                      (("2"
                                        (inst - "j")
                                        (("2"
                                          (lemma "pi_bounds")
                                          (("2"
                                            (inst-cp - "j")
                                            (("2"
                                              (inst - "1+j")
                                              (("2"
                                                (ground)
                                                nil)))))))))))))))))))))))))
                       ("2" (assert)
                        (("2" (lemma "pi_bounds")
                          (("2" (inst - "n!1+1")
                            (("2" (ground)
                              nil))))))))))))))))))))))))))
    nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (pi_lb_quot_bounds formula-decl nil atan_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (C const-decl "posnat" binomial "reals/")
    (sigma_le formula-decl nil sigma "reals/")
    (sigma_scal_right formula-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (factorial_0 formula-decl nil factorial "ints/")
    (binomial_theorem formula-decl nil polynomials "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (pi_ubn const-decl "real" atan_approx nil)
    (factorial def-decl "posnat" factorial "ints/")
    (pi_lb_diff_bounds formula-decl nil atan_approx nil)
    (pi_lbn_lt formula-decl nil atan_approx nil)
    (sin_pi_minus formula-decl nil trig_extra nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (sin const-decl "real" sincos_def nil))
   nil)
  (sin_term_pi_lb-2 nil 3554628727
   (""
    (case "FORALL (n: nat):
        n >= 10 IMPLIES sin_term(pi_lbn(n))(2 * n + 2) < sin(pi_lbn(n))")
    (("1" (skeep)
      (("1" (inst - "n")
        (("1" (assert)
          (("1" (case "n = 9")
            (("1" (replace -1)
              (("1" (assert)
                (("1" (lemma "sin_bounds")
                  (("1" (inst - "pi_lbn(9)" "14")
                    (("1" (flatten)
                      (("1" (invoke (case "%1 < %2") (! 2 1) (! -1 1))
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (eval-formula) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2"
        (case "FORALL (n: nat):
                                                                              n >= 20 IMPLIES sin_term(pi_lbn(n))(2 * n + 2) < sin(pi_lbn(n))")
        (("1"
          (case "FORALL (nnn: subrange(10,20)):
                                                                                                  sin_term(pi_lbn(nnn))(2 * nnn + 2) < sin_lb(pi_lbn(nnn),nnn)")
          (("1" (skeep)
            (("1" (inst -2 "n")
              (("1" (assert)
                (("1" (inst - "n")
                  (("1" (lemma "sin_bounds")
                    (("1" (inst - "pi_lbn(n)" "n")
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1) (("2" (eval-formula) nil nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "sin_px")
            (("2" (skosimp*)
              (("2" (lemma "sin_pi_minus")
                (("2" (inst?)
                  (("2" (replace -1 :dir rl)
                    (("2" (inst?)
                      (("1" (split -)
                        (("1" (lemma "pi_bounds")
                          (("1" (inst - "n!1+1")
                            (("1" (flatten)
                              (("1"
                                (lemma "pi_lbn_lt")
                                (("1"
                                  (inst - "n!1")
                                  (("1"
                                    (case
                                     "pi-pi_lbn(n!1) >= pi_lbn(n!1+1)-pi_lbn(n!1)")
                                    (("1"
                                      (mult-by -1 "(1 - 1 / 1500000)")
                                      (("1"
                                        (name
                                         "KZ"
                                         "pi_lbn(n!1+1)-pi_lbn(n!1)")
                                        (("1"
                                          (case
                                           "sin_term(pi_lbn(n!1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (lemma "pi_lb_diff_bounds")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (5 + 5 * nn)")
                                                    (("1"
                                                      (inst - "n!1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (induct "nn")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "j < 19")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "j = 19")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (hide-all-but
                                                                   2)
                                                                  (("1"
                                                                    (eval-formula)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "NOT j>=20")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (1
                                                                    2))
                                                                  (("2"
                                                                    (name
                                                                     "M"
                                                                     "1-1 / 1500000")
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "sin_term")
                                                                          (("2"
                                                                            (case
                                                                             "FORALL (k:nat): (-1)^(2*k) = 1")
                                                                            (("1"
                                                                              (inst-cp
                                                                               -
                                                                               "1+j")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "2+j")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "FORALL (aa:real): 1*aa = aa")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "pi_lb_quot_bounds")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (skoletin
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (name
                                                                                                           "disepsi"
                                                                                                           "(1 - 14.5 * (1 / 5) ^ (4 * j + 3))")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "disepsi > 0")
                                                                                                            (("1"
                                                                                                              (name
                                                                                                               "epsi"
                                                                                                               "1/(disepsi)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "epsi > 1")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "((epsi*pi_lbn(j)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                                                                                         14 * (((1 / 5) ^ (10 + 5 * j)) * M)")
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "pi_lbn(1 + j) <= epsi*pi_lbn(j)")
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "both_sides_expt_pos_lt_aux")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -
                                                                                                                           "8+4*j"
                                                                                                                           "pi_lbn(1 + j)"
                                                                                                                           "epsi * pi_lbn(j)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "1/factorial(9+4*j)")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "^")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "xquot"
                                                                                                                           -6)
                                                                                                                          (("2"
                                                                                                                            (cross-mult
                                                                                                                             -6)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "epsi"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (cross-mult
                                                                                                                                 1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "epsi^(9+4*j) * pi_lbn(j)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5")
                                                                                                                        (("1"
                                                                                                                          (mult-ineq
                                                                                                                           -1
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (invoke
                                                                                                                             (case
                                                                                                                              "%1 = %2")
                                                                                                                             (!
                                                                                                                              -1
                                                                                                                              1)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              1))
                                                                                                                            (("1"
                                                                                                                              (invoke
                                                                                                                               (case
                                                                                                                                "%1 = %2")
                                                                                                                               (!
                                                                                                                                -2
                                                                                                                                2)
                                                                                                                               (!
                                                                                                                                1
                                                                                                                                2))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  -3))
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "expt_plus")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "5+5*j"
                                                                                                                                       "5"
                                                                                                                                       "1/5")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "(epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4)
                                                                                                                                                                                                                                                       * (pi_lbn(j) ^ (5 + 4 * j)) = (epsi * pi_lbn(j)) ^ (9 + 4 * j)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    -3
                                                                                                                                    2
                                                                                                                                    3))
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "mult_expt")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "9+4*j"
                                                                                                                                       "epsi"
                                                                                                                                       "pi_lbn(j)")
                                                                                                                                      (("2"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "expt_plus")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "5+4*j"
                                                                                                                                               "4"
                                                                                                                                               "pi_lbn(j)")
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2
                                                                                                                                  2
                                                                                                                                  3))
                                                                                                                                (("2"
                                                                                                                                  (invoke
                                                                                                                                   (name
                                                                                                                                    "ej1"
                                                                                                                                    "%1")
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (invoke
                                                                                                                                     (name
                                                                                                                                      "ej2"
                                                                                                                                      "%1")
                                                                                                                                     (!
                                                                                                                                      1
                                                                                                                                      1
                                                                                                                                      2))
                                                                                                                                    (("2"
                                                                                                                                      (invoke
                                                                                                                                       (name
                                                                                                                                        "ej3"
                                                                                                                                        "%1")
                                                                                                                                       (!
                                                                                                                                        1
                                                                                                                                        1
                                                                                                                                        3))
                                                                                                                                      (("2"
                                                                                                                                        (invoke
                                                                                                                                         (name
                                                                                                                                          "ej4"
                                                                                                                                          "%1")
                                                                                                                                         (!
                                                                                                                                          1
                                                                                                                                          1
                                                                                                                                          4))
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "factorial"
                                                                                                                                                   +
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "ej1 -1 = ej2")
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "factorial"
                                                                                                                                                           +
                                                                                                                                                           2)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "ej2 -1 = ej3")
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "factorial"
                                                                                                                                                                 +
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "ej3-1 = ej4")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "factorial"
                                                                                                                                                                       +
                                                                                                                                                                       2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4 <= 1.1*3.1415927^4")
                                                                                                                            (("1"
                                                                                                                              (mult-by
                                                                                                                               -1
                                                                                                                               "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))")
                                                                                                                              (("1"
                                                                                                                                (invoke
                                                                                                                                 (case
                                                                                                                                  "%1 < %2")
                                                                                                                                 (!
                                                                                                                                  -1
                                                                                                                                  2)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (name
                                                                                                                                       "RD"
                                                                                                                                       "j-18")
                                                                                                                                      (("2"
                                                                                                                                        (case
                                                                                                                                         "j = RD+18 AND RD>=0")
                                                                                                                                        (("1"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-1
                                                                                                                                            1))
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "EXISTS (RD2:nat): RD2 = RD")
                                                                                                                                                (("1"
                                                                                                                                                  (skeep
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (cross-mult
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   "RD")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (invoke
                                                                                                                                 (case
                                                                                                                                  "%1 < %2 AND %3 < %4")
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  1)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2
                                                                                                                                  1)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  2)
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  2
                                                                                                                                  2))
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (mult-ineq
                                                                                                                                     -1
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-8
                                                                                                                                      1))
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "epsi")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "disepsi")
                                                                                                                                        (("1"
                                                                                                                                          (name
                                                                                                                                           "egrange"
                                                                                                                                           "(1 - 14.5 * (1 / 5) ^ (3 + 4 * j))")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (name
                                                                                                                                               "alpha"
                                                                                                                                               "14.5 * (1 / 5) ^ (3 + 4 * j)")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "alpha < 1/3")
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "1/egrange < 1+2*alpha")
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "(1+2*alpha)^(9+4*j) < 1.1")
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "both_sides_expt_pos_lt_aux")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "8+4*j"
                                                                                                                                                         "1/egrange"
                                                                                                                                                         "1+2*alpha")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "^")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "egrange > 0")
                                                                                                                                                            (("1"
                                                                                                                                                              (split
                                                                                                                                                               +)
                                                                                                                                                              (("1"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 1)
                                                                                                                                                                nil
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 1)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "14.5*(1/5)^(3+4*j) < 1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "div_expt"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "FORALL (nnm:nat): 1^nnm = 1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (case
                                                                                                                                                                         "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (3 + kkr)) < 1")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (induct
                                                                                                                                                                             "kkr")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (skosimp*)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "^")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "expt"
                                                                                                                                                                                     +
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (induct
                                                                                                                                                                         "nnm")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "^")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "expt"
                                                                                                                                                                               +)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (expand
                                                                                                                                                       "alpha"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (name
                                                                                                                                                           "FF"
                                                                                                                                                           "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+6)")
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -
                                                                                                                                                               "3+4*j")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "FF"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (propax)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (induct
                                                                                                                                                                 "jj")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (skosimp*)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (case
                                                                                                                                                                     "j!1 = 82")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (eval-formula)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (hide
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "FF"
                                                                                                                                                                           +)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (case
                                                                                                                                                                             "FORALL (egv:nnreal): egv^(7+j!1) = egv^(6+j!1)*egv")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (invoke
                                                                                                                                                                                     (case
                                                                                                                                                                                      "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)")
                                                                                                                                                                                     (!
                                                                                                                                                                                      1
                                                                                                                                                                                      1
                                                                                                                                                                                      2)
                                                                                                                                                                                     (!
                                                                                                                                                                                      1
                                                                                                                                                                                      1
                                                                                                                                                                                      1))
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (both-sides
                                                                                                                                                                                         "+"
                                                                                                                                                                                         "1"
                                                                                                                                                                                         -2)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (mult-ineq
                                                                                                                                                                                           -1
                                                                                                                                                                                           -2)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (hide
                                                                                                                                                                                       2)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (split)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                             1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (induct
                                                                                                                                                                                               "kkj")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "j!2 = 74")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -1)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (hide
                                                                                                                                                                                                       -)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (eval-formula)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "^")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "expt"
                                                                                                                                                                                                         +)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "FF")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (name
                                                                                                                                                                                             "K1"
                                                                                                                                                                                             "2 * (14.5 * (1 / 5) ^ (j!1))")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (case
                                                                                                                                                                                                 "2 * (14.5 * (1 / 5) ^ (1 + j!1)) = (1/5)*K1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (name
                                                                                                                                                                                                     "pj"
                                                                                                                                                                                                     "6+j!1")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (replace
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "binomial_theorem")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst-cp
                                                                                                                                                                                                           -
                                                                                                                                                                                                           "pj"
                                                                                                                                                                                                           "1"
                                                                                                                                                                                                           "(1/5)*K1")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (inst
                                                                                                                                                                                                             -
                                                                                                                                                                                                             "pj"
                                                                                                                                                                                                             "1"
                                                                                                                                                                                                             "K1")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replaces
                                                                                                                                                                                                               -1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (replaces
                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "sigma"
                                                                                                                                                                                                                   +
                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "C(pj, pj) * 1 ^ pj * ((1 / 5) * K1) ^ 0 = 1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (replaces
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "sigma"
                                                                                                                                                                                                                             +
                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                               "C(pj, pj) * 1 ^ pj * K1 ^ 0 = 1")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                                     "sigma_scal_right"
                                                                                                                                                                                                                                     :dir
                                                                                                                                                                                                                                     rl)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (rewrite
                                                                                                                                                                                                                                       "sigma_le")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (hide
                                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (skeep)
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                                             "mult_expt"
                                                                                                                                                                                                                                             +)
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                                               "(1 / 5) ^ (pj - n) <= 1/5")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (mult-by
                                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                                 "C(pj, n) * 1 ^ n * K1 ^ (pj - n)")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                                 "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (inst-cp
                                                                                                                                                                                                                                                   -
                                                                                                                                                                                                                                                   "pj-n-1")
                                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (induct
                                                                                                                                                                                                                                                     "kkr")
                                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                                         "^")
                                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                                           "expt"
                                                                                                                                                                                                                                                           +)
                                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (skosimp*)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                                   "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (rewrite
                                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "C")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (case
                                                                                                                                                                                                                                         "FORALL (egv2:nat): 1^egv2 = 1")
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                                          (induct
                                                                                                                                                                                                                                           "egv2")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                                               "^")
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                                 "expt"
                                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("3"
                                                                                                                                                                                                                                      (hide-all-but
                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                      (("3"
                                                                                                                                                                                                                                        (grind)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (grind)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                           "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (rewrite
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                                 "C")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (case
                                                                                                                                                                                                                                 "FORALL (egv2:nat): 1^egv2 = 1")
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (inst?)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (induct
                                                                                                                                                                                                                                   "egv2")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "^")
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                                         "expt"
                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("3"
                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                              (("3"
                                                                                                                                                                                                                                (grind)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (grind)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "^")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "expt"
                                                                                                                                                                                                     1)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               1)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "^")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "expt"
                                                                                                                                                                                     +
                                                                                                                                                                                     1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -2)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -3
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (cross-mult
                                                                                                                                                         1)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "alpha > 2*sq(alpha)")
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "sq")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide-all-but
                                                                                                                                                               (-1
                                                                                                                                                                1))
                                                                                                                                                              (("2"
                                                                                                                                                                (cross-mult
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (mult-by
                                                                                                                                                                   -1
                                                                                                                                                                   "alpha")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "sq")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "alpha"
                                                                                                                                                     +)
                                                                                                                                                    (("2"
                                                                                                                                                      (case
                                                                                                                                                       "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (induct
                                                                                                                                                         "kkp")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (skosimp*)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "j!1 = 69")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide-all-but
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (eval-formula)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "^")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "expt"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (lemma
                                                                                                                                     "both_sides_expt_pos_lt_aux")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "3"
                                                                                                                                       "pi_lbn(j)"
                                                                                                                                       "3.1415927")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "^")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "pi_bounds")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "pi_bounds")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -
                                                                                                                                                         "10")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (eval-expr
                                                                                                                                                             "pi_ubn(10)")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "epsi"
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "FORALL (kkp:nat): kkp>=3 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (induct
                                                                                                                   "kkp")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "j!1 = 2")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "^")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "expt"
                                                                                                                             +)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (induct
                                                                                 "k")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt"
                                                                                       +)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt"
                                                                                         +)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "pi_bounds")
                                      (("2"
                                        (inst - "n!1+1")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "FORALL (kkp:nat): kkp>=20 IMPLIES 1 / 500 > pi - pi_lbn(kkp)")
                          (("1" (inst?) (("1" (assert) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (induct "kkp")
                              (("1" (assert) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "j = 19")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "pi_bounds")
                                      (("1"
                                        (inst - "19")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (case
                                             "1/500 > pi_ubn(19)-pi_lbn(20)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (eval-formula)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "pi_lbn_lt")
                                      (("2"
                                        (inst - "j")
                                        (("2"
                                          (lemma "pi_bounds")
                                          (("2"
                                            (inst-cp - "j")
                                            (("2"
                                              (inst - "1+j")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "pi_bounds")
                          (("2" (inst - "n!1") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (pi_lb_quot_bounds formula-decl nil atan_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (C const-decl "posnat" binomial "reals/")
    (sigma_le formula-decl nil sigma "reals/")
    (sigma_scal_right formula-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (factorial_0 formula-decl nil factorial "ints/")
    (binomial_theorem formula-decl nil polynomials "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (pi_ubn const-decl "real" atan_approx nil)
    (factorial def-decl "posnat" factorial "ints/")
    (pi_lb_diff_bounds formula-decl nil atan_approx nil)
    (pi_lbn_lt formula-decl nil atan_approx nil)
    (sin_pi_minus formula-decl nil trig_extra nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (sin const-decl "real" sincos_def nil))
   nil)
  (sin_term_pi_lb-1 nil 3552209695
   (""
    (case "FORALL (n: nat):
                                                                n >= 20 IMPLIES sin_term(pi_lbn(n))(2 * n + 2) < sin(pi_lbn(n))")
    (("1"
      (case "FORALL (nnn: subrange(10,20)):
                                                                                sin_term(pi_lbn(nnn))(2 * nnn + 2) < sin_lb(pi_lbn(nnn),nnn)")
      (("1" (skeep)
        (("1" (inst -2 "n")
          (("1" (assert)
            (("1" (inst - "n")
              (("1" (lemma "sin_bounds")
                (("1" (inst - "pi_lbn(n)" "n")
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (eval-formula) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "sin_px")
        (("2" (skosimp*)
          (("2" (lemma "sin_pi_minus")
            (("2" (inst?)
              (("2" (replace -1 :dir rl)
                (("2" (inst?)
                  (("1" (split -)
                    (("1" (lemma "pi_bounds")
                      (("1" (inst - "n!1+1")
                        (("1" (flatten)
                          (("1" (lemma "pi_lbn_lt")
                            (("1" (inst - "n!1")
                              (("1"
                                (case
                                 "pi-pi_lbn(n!1) >= pi_lbn(n!1+1)-pi_lbn(n!1)")
                                (("1"
                                  (mult-by -1 "(1 - 1 / 1500000)")
                                  (("1"
                                    (name
                                     "KZ"
                                     "pi_lbn(n!1+1)-pi_lbn(n!1)")
                                    (("1"
                                      (case
                                       "sin_term(pi_lbn(n!1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (lemma "pi_lb_diff_bounds")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (case
                                                 "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (5 + 5 * nn)")
                                                (("1"
                                                  (inst - "n!1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (induct "nn")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (case "j < 19")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "j = 19")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide-all-but
                                                               2)
                                                              (("1"
                                                                (eval-formula)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT j>=20")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (1 2))
                                                              (("2"
                                                                (name
                                                                 "M"
                                                                 "1-1 / 1500000")
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "sin_term")
                                                                      (("2"
                                                                        (case
                                                                         "FORALL (k:nat): (-1)^(2*k) = 1")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -
                                                                           "1+j")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "2+j")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "FORALL (aa:real): 1*aa = aa")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         -1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "pi_lb_quot_bounds")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j")
                                                                                                (("1"
                                                                                                  (skoletin
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (name
                                                                                                       "disepsi"
                                                                                                       "(1 - 14.5 * (1 / 5) ^ (4 * j + 3))")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "disepsi > 0")
                                                                                                        (("1"
                                                                                                          (name
                                                                                                           "epsi"
                                                                                                           "1/(disepsi)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "epsi > 1")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "((epsi*pi_lbn(j)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                         14 * (((1 / 5) ^ (10 + 5 * j)) * M)")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "pi_lbn(1 + j) <= epsi*pi_lbn(j)")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "both_sides_expt_pos_lt_aux")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "8+4*j"
                                                                                                                       "pi_lbn(1 + j)"
                                                                                                                       "epsi * pi_lbn(j)")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -1
                                                                                                                           "1/factorial(9+4*j)")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "^")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "xquot"
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (cross-mult
                                                                                                                         -6)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "epsi"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (cross-mult
                                                                                                                             1)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "epsi^(9+4*j) * pi_lbn(j)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5")
                                                                                                                    (("1"
                                                                                                                      (mult-ineq
                                                                                                                       -1
                                                                                                                       -10)
                                                                                                                      (("1"
                                                                                                                        (invoke
                                                                                                                         (case
                                                                                                                          "%1 = %2")
                                                                                                                         (!
                                                                                                                          -1
                                                                                                                          1)
                                                                                                                         (!
                                                                                                                          1
                                                                                                                          1))
                                                                                                                        (("1"
                                                                                                                          (invoke
                                                                                                                           (case
                                                                                                                            "%1 = %2")
                                                                                                                           (!
                                                                                                                            -2
                                                                                                                            2)
                                                                                                                           (!
                                                                                                                            1
                                                                                                                            2))
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (-1
                                                                                                                              -2
                                                                                                                              -3))
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "expt_plus")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "5+5*j"
                                                                                                                                   "5"
                                                                                                                                   "1/5")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (case
                                                                                                                           "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "(epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4)
                                                                                                                                                                       * (pi_lbn(j) ^ (5 + 4 * j)) = (epsi * pi_lbn(j)) ^ (9 + 4 * j)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               (-1
                                                                                                                                -2
                                                                                                                                -3
                                                                                                                                2
                                                                                                                                3))
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "mult_expt")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "9+4*j"
                                                                                                                                   "epsi"
                                                                                                                                   "pi_lbn(j)")
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "expt_plus")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "5+4*j"
                                                                                                                                           "4"
                                                                                                                                           "pi_lbn(j)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (-1
                                                                                                                              -2
                                                                                                                              2
                                                                                                                              3))
                                                                                                                            (("2"
                                                                                                                              (invoke
                                                                                                                               (name
                                                                                                                                "ej1"
                                                                                                                                "%1")
                                                                                                                               (!
                                                                                                                                1
                                                                                                                                1
                                                                                                                                1))
                                                                                                                              (("2"
                                                                                                                                (invoke
                                                                                                                                 (name
                                                                                                                                  "ej2"
                                                                                                                                  "%1")
                                                                                                                                 (!
                                                                                                                                  1
                                                                                                                                  1
                                                                                                                                  2))
                                                                                                                                (("2"
                                                                                                                                  (invoke
                                                                                                                                   (name
                                                                                                                                    "ej3"
                                                                                                                                    "%1")
                                                                                                                                   (!
                                                                                                                                    1
                                                                                                                                    1
                                                                                                                                    3))
                                                                                                                                  (("2"
                                                                                                                                    (invoke
                                                                                                                                     (name
                                                                                                                                      "ej4"
                                                                                                                                      "%1")
                                                                                                                                     (!
                                                                                                                                      1
                                                                                                                                      1
                                                                                                                                      4))
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -4)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "factorial"
                                                                                                                                               +
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "ej1 -1 = ej2")
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "factorial"
                                                                                                                                                       +
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "ej2 -1 = ej3")
                                                                                                                                                        (("1"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "factorial"
                                                                                                                                                             +
                                                                                                                                                             2)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "ej3-1 = ej4")
                                                                                                                                                              (("1"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "factorial"
                                                                                                                                                                   +
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4 <= 1.1*3.1415927^4")
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -1
                                                                                                                           "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))")
                                                                                                                          (("1"
                                                                                                                            (invoke
                                                                                                                             (case
                                                                                                                              "%1 < %2")
                                                                                                                             (!
                                                                                                                              -1
                                                                                                                              2)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (name
                                                                                                                                   "RD"
                                                                                                                                   "j-18")
                                                                                                                                  (("2"
                                                                                                                                    (case
                                                                                                                                     "j = RD+18 AND RD>=0")
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       (-1
                                                                                                                                        1))
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "EXISTS (RD2:nat): RD2 = RD")
                                                                                                                                            (("1"
                                                                                                                                              (skeep
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (cross-mult
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (inst
                                                                                                                                               +
                                                                                                                                               "RD")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (invoke
                                                                                                                             (case
                                                                                                                              "%1 < %2 AND %3 < %4")
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              1
                                                                                                                              1)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              2
                                                                                                                              1)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              1
                                                                                                                              2)
                                                                                                                             (!
                                                                                                                              1
                                                                                                                              2
                                                                                                                              2))
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (mult-ineq
                                                                                                                                 -1
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (hide-all-but
                                                                                                                                 (-8
                                                                                                                                  1))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "epsi")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "disepsi")
                                                                                                                                    (("1"
                                                                                                                                      (name
                                                                                                                                       "egrange"
                                                                                                                                       "(1 - 14.5 * (1 / 5) ^ (3 + 4 * j))")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (name
                                                                                                                                           "alpha"
                                                                                                                                           "14.5 * (1 / 5) ^ (3 + 4 * j)")
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "alpha < 1/3")
                                                                                                                                            (("1"
                                                                                                                                              (case
                                                                                                                                               "1/egrange < 1+2*alpha")
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "(1+2*alpha)^(9+4*j) < 1.1")
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "both_sides_expt_pos_lt_aux")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "8+4*j"
                                                                                                                                                     "1/egrange"
                                                                                                                                                     "1+2*alpha")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "^")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "egrange > 0")
                                                                                                                                                        (("1"
                                                                                                                                                          (split
                                                                                                                                                           +)
                                                                                                                                                          (("1"
                                                                                                                                                            (cross-mult
                                                                                                                                                             1)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (cross-mult
                                                                                                                                                             1)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "14.5*(1/5)^(3+4*j) < 1")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (rewrite
                                                                                                                                                               "div_expt"
                                                                                                                                                               1)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "FORALL (nnm:nat): 1^nnm = 1")
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (3 + kkr)) < 1")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (hide-all-but
                                                                                                                                                                       1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (induct
                                                                                                                                                                         "kkr")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (grind)
                                                                                                                                                                          nil
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (skosimp*)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "^")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "expt"
                                                                                                                                                                                 +
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (induct
                                                                                                                                                                     "nnm")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "^")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "expt"
                                                                                                                                                                           +)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (expand
                                                                                                                                                   "alpha"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (name
                                                                                                                                                       "FF"
                                                                                                                                                       "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+6)")
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "3+4*j")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "FF"
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (induct
                                                                                                                                                             "jj")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (skosimp*)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "j!1 = 82")
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (eval-formula)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "FF"
                                                                                                                                                                       +)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (case
                                                                                                                                                                         "FORALL (egv:nnreal): egv^(7+j!1) = egv^(6+j!1)*egv")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (hide
                                                                                                                                                                               -1)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (invoke
                                                                                                                                                                                 (case
                                                                                                                                                                                  "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)")
                                                                                                                                                                                 (!
                                                                                                                                                                                  1
                                                                                                                                                                                  1
                                                                                                                                                                                  2)
                                                                                                                                                                                 (!
                                                                                                                                                                                  1
                                                                                                                                                                                  1
                                                                                                                                                                                  1))
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (both-sides
                                                                                                                                                                                     "+"
                                                                                                                                                                                     "1"
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (mult-ineq
                                                                                                                                                                                       -1
                                                                                                                                                                                       -2)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   2)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (case
                                                                                                                                                                                       "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst?)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                         1)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (induct
                                                                                                                                                                                           "kkj")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (skosimp*)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "j!2 = 74")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (hide
                                                                                                                                                                                                   -)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (eval-formula)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "^")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (expand
                                                                                                                                                                                                     "expt"
                                                                                                                                                                                                     +)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      nil
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "FF")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (name
                                                                                                                                                                                         "K1"
                                                                                                                                                                                         "2 * (14.5 * (1 / 5) ^ (j!1))")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (replace
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (case
                                                                                                                                                                                             "2 * (14.5 * (1 / 5) ^ (1 + j!1)) = (1/5)*K1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -1)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (name
                                                                                                                                                                                                 "pj"
                                                                                                                                                                                                 "6+j!1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (replace
                                                                                                                                                                                                   -1)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "binomial_theorem")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst-cp
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "pj"
                                                                                                                                                                                                       "1"
                                                                                                                                                                                                       "(1/5)*K1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -
                                                                                                                                                                                                         "pj"
                                                                                                                                                                                                         "1"
                                                                                                                                                                                                         "K1")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (replaces
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (replaces
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (expand
                                                                                                                                                                                                               "sigma"
                                                                                                                                                                                                               +
                                                                                                                                                                                                               1)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (case
                                                                                                                                                                                                                   "C(pj, pj) * 1 ^ pj * ((1 / 5) * K1) ^ 0 = 1")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (replaces
                                                                                                                                                                                                                     -1)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "sigma"
                                                                                                                                                                                                                         +
                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                           "C(pj, pj) * 1 ^ pj * K1 ^ 0 = 1")
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (replace
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                                 "sigma_scal_right"
                                                                                                                                                                                                                                 :dir
                                                                                                                                                                                                                                 rl)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                                                   "sigma_le")
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (hide
                                                                                                                                                                                                                                     2)
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                                                         "mult_expt"
                                                                                                                                                                                                                                         +)
                                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                                          (case
                                                                                                                                                                                                                                           "(1 / 5) ^ (pj - n) <= 1/5")
                                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                                            (mult-by
                                                                                                                                                                                                                                             -1
                                                                                                                                                                                                                                             "C(pj, n) * 1 ^ n * K1 ^ (pj - n)")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                                             "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5")
                                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                                              (inst-cp
                                                                                                                                                                                                                                               -
                                                                                                                                                                                                                                               "pj-n-1")
                                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                                              (hide-all-but
                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                                (induct
                                                                                                                                                                                                                                                 "kkr")
                                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                                     "^")
                                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                                       "expt"
                                                                                                                                                                                                                                                       +)
                                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                                    (skosimp*)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (skosimp*)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil)
                                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                                            (hide-all-but
                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (case
                                                                                                                                                                                                                               "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                                                 -1)
                                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "C")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (case
                                                                                                                                                                                                                                     "FORALL (egv2:nat): 1^egv2 = 1")
                                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                                      (inst?)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                                      (induct
                                                                                                                                                                                                                                       "egv2")
                                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                                        (grind)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                                        (skosimp*)
                                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                                          (expand
                                                                                                                                                                                                                                           "^")
                                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                                             "expt"
                                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                                 ("3"
                                                                                                                                                                                                                                  (hide-all-but
                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                  (("3"
                                                                                                                                                                                                                                    (grind)
                                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                    (hide-all-but
                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (case
                                                                                                                                                                                                                       "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1")
                                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                                        (rewrite
                                                                                                                                                                                                                         -1)
                                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "C")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (case
                                                                                                                                                                                                                             "FORALL (egv2:nat): 1^egv2 = 1")
                                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                                              (inst?)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil)
                                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                                              (induct
                                                                                                                                                                                                                               "egv2")
                                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                                (grind)
                                                                                                                                                                                                                                nil
                                                                                                                                                                                                                                nil)
                                                                                                                                                                                                                               ("2"
                                                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                                   "^")
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                                     "expt"
                                                                                                                                                                                                                                     1)
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil)
                                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                                          (hide-all-but
                                                                                                                                                                                                                           1)
                                                                                                                                                                                                                          (("3"
                                                                                                                                                                                                                            (grind)
                                                                                                                                                                                                                            nil
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil)
                                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                                        (hide-all-but
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (grind)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "^")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "expt"
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "^")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "expt"
                                                                                                                                                                                 +
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (replace
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -3
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("2"
                                                                                                                                                    (cross-mult
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "alpha > 2*sq(alpha)")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "sq")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (hide-all-but
                                                                                                                                                           (-1
                                                                                                                                                            1))
                                                                                                                                                          (("2"
                                                                                                                                                            (cross-mult
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (mult-by
                                                                                                                                                               -1
                                                                                                                                                               "alpha")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "sq")
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "alpha"
                                                                                                                                                 +)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (induct
                                                                                                                                                     "kkp")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skosimp*)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "j!1 = 69")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide-all-but
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (eval-formula)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "^")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "expt"
                                                                                                                                                               2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (postpone)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (postpone)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (postpone)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (postpone)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (postpone) nil nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (sin_lb_pi_not_pos 0
  (sin_lb_pi_not_pos-1 nil 3554629942 ("" (eval-formula) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (sin_lb_pi_pos 0
  (sin_lb_pi_pos-1 nil 3552149259
   ("" (skeep)
    (("" (lemma "sin_approx_sin")
      (("" (case "pi_lbn(n+1) > 0")
        (("1" (expand "sin_lb")
          (("1" (assert)
            (("1" (inst?)
              (("1" (assert)
                (("1" (case "sin_term(pi_lbn(n+1))(2 + 2 * n) > 0")
                  (("1" (expand "abs" - 2)
                    (("1" (assert)
                      (("1" (lemma "sin_term_pi_lb")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "sin_term" +)
                    (("2" (cross-mult 1)
                      (("2" (assert)
                        (("2"
                          (lemma "posreal_times_posreal_is_posreal")
                          (("2" (inst?)
                            (("1" (assert) nil nil)
                             ("2"
                              (case "FORALL (kn:nat): (-1)^(2*kn) = 1")
                              (("1"
                                (inst - "1+n")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (induct "kn")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "expt" +)
                                        (("2"
                                          (expand "expt" +)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((sin_approx_sin formula-decl nil trig_approx nil)
    (sin_lb const-decl "real" trig_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (sin_term const-decl "real" trig_approx nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_term_pi_lb formula-decl nil trig_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (pi_lb_est_TCC1 0
  (pi_lb_est_TCC1-1 nil 3554740660 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (pi_lb_est subtype "3"
              "{i: integers.int | booleans.OR(trig_approx.n /= 0, reals.>=(i, 0))}")))
 (pi_lb_est_TCC2 0
  (pi_lb_est_TCC2-1 nil 3554740660
   ("" (skeep)
    (("" (assert)
      (("" (split)
        (("1"
          (case "FORALL (nn:below(13)): pi_lbn(nn) - 2 / (1 + nn ^ 3) >= 0")
          (("1" (inst - "n") nil nil) ("2" (eval-formula) nil nil))
          nil)
         ("2" (lemma "pi_bounds")
          (("2" (inst - "n") (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (pi_lb_est subtype
              "(number_fields.-)(atan_approx.pi_lbn(trig_approx.n), number_fields./(2, ((number_fields.+)(exponentiation.^(trig_approx.n, 3), 1))))"
              "{rr: real_types.nnreal | reals.<(rr, pi_def.pi)}")))
 (pi_lb_est_TCC3 0
  (pi_lb_est_TCC3-1 nil 3554740660
   ("" (skeep)
    (("" (lemma "pi_bounds")
      (("" (inst - "n") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((pi_bounds formula-decl nil atan_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (pi_lb_est subtype "atan_approx.pi_lbn(trig_approx.n)"
              "{rr: real_types.nnreal | reals.<(rr, pi_def.pi)}")))
 (pi_lb_est_le 0
  (pi_lb_est_le-1 nil 3554808433
   ("" (skeep)
    (("" (lemma "pi_bounds")
      (("" (inst - "n")
        (("" (expand "pi_lb_est")
          (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pi_bounds formula-decl nil atan_approx nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (sin_lb_pi_est_pos 0
  (sin_lb_pi_est_pos-1 nil 3554740662
   ("" (skeep)
    (("" (lemma "sin_lb_pi_pos")
      (("" (inst - "n")
        (("" (case "n>=12")
          (("1" (assert)
            (("1" (expand "pi_lb_est") (("1" (propax) nil nil)) nil))
            nil)
           ("2"
            (case "FORALL (nn:below(12)): sin_lb(pi_lb_est(nn + 1), nn) > 0")
            (("1" (inst - "n") (("1" (assert) nil nil)) nil)
             ("2" (hide-all-but 1) (("2" (eval-formula) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_lb_pi_pos formula-decl nil trig_approx nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (sin_lb const-decl "real" trig_approx nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (sin_lb_pi_range_pos 0
  (sin_lb_pi_range_pos-3 nil 3554802047
   ("" (skeep)
    ((""
      (case "NOT FORALL (pxx:posreal): pxx <= 1.8 IMPLIES sin_lb(pxx,n) > 0")
      (("1" (hide-all-but 1)
        (("1" (skeep)
          (("1" (case "sin_lb(pxx,0) > 0")
            (("1" (lemma "sin_lb_inc")
              (("1" (inst - "0" "n" "pxx")
                (("1" (assert)
                  (("1" (lemma "sq_lt")
                    (("1" (inst - "pxx" "1.8")
                      (("1" (assert)
                        (("1" (expand "sq" -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (case "1 > pxx^2/6")
              (("1" (mult-by -1 "pxx")
                (("1" (hide 2) (("1" (grind) nil nil)) nil)) nil)
               ("2" (hide 2)
                (("2" (hide 2)
                  (("2" (cross-mult 1)
                    (("2" (lemma "sq_lt")
                      (("2" (inst - "pxx" "1.8")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst-cp - "px")
        (("2" (assert)
          (("2" (lemma "mean_value[nnreal]")
            (("1" (inst -2 "1.8")
              (("1" (assert)
                (("1"
                  (inst - "px" "pi_lb_est(1+n)"
                   "LAMBDA (x:nnreal): sin_lb(x,n)")
                  (("1" (assert)
                    (("1" (lemma "sin_lb_deriv")
                      (("1" (inst?)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (lemma "sin_lb_pi_est_pos")
                              (("1"
                                (inst - "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep -4)
                                    (("1"
                                      (decompose-equality -3)
                                      (("1"
                                        (inst - "c")
                                        (("1"
                                          (expand "deriv" -1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "cos_lb(c,n) < 0")
                                                (("1"
                                                  (mult-by
                                                   -1
                                                   "pi_lb_est(n+1)-px")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "cos_lb_nn_strict_decreasing")
                                                  (("2"
                                                    (inst - "n")
                                                    (("2"
                                                      (expand
                                                       "strict_decreasing?")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "1.8"
                                                         "c")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "cos_lb(1.8,n) < 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (case
                                                                 "NOT FORALL (ii:below(10)): cos_lb(1.8,ii) < 0")
                                                                (("1"
                                                                  (eval-formula)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "n < 10")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "n")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (lemma
                                                                         "cos_bounds")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "1.8"
                                                                           "n")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (lemma
                                                                               "cos_ub_dec")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "8"
                                                                                 "1.8"
                                                                                 "n-8")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "cos_ub(1.8,8) < 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (eval-formula)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "connected_nnreal") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_lb const-decl "real" trig_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (sin_approx const-decl "real" trig_approx nil)
    (sigma def-decl "real" sigma "reals/")
    (sin_term const-decl "real" trig_approx nil)
    (factorial def-decl "posnat" factorial "ints/")
    (expt def-decl "real" exponentiation nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (sin_lb_inc formula-decl nil trig_approx nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq const-decl "nonneg_real" sq "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq_lt formula-decl nil sq "reals/")
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected_nnreal formula-decl nil deriv_domain "analysis/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (sin_lb_deriv formula-decl nil trig_approx nil)
    (sin_lb_pi_est_pos formula-decl nil trig_approx nil)
    (cos_lb const-decl "real" trig_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (cos_ub_dec formula-decl nil trig_approx nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_ub const-decl "real" trig_approx nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cos_bounds formula-decl nil trig_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (nnreal type-eq-decl nil real_types nil)
    (mean_value formula-decl nil derivative_props "analysis/"))
   nil)
  (sin_lb_pi_range_pos-2 nil 3554645774
   ("" (skeep)
    (("" (case "px < pi_lbn(n)/2")
      (("1" (lemma "mean_value[nnreal]")
        (("1" (inst - "0" "px" "LAMBDA (x:nnreal): sin_lb(x,n)")
          (("1" (lemma "sin_lb_deriv")
            (("1" (inst?)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (skeep -3)
                    (("1" (decompose-equality -2)
                      (("1" (inst - "c")
                        (("1" (expand "deriv" -1)
                          (("1" (replaces -1)
                            (("1" (lemma "sin_lb_a0")
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "posreal_times_posreal_is_posreal")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "cos_lb(c,n) > 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "cos_lb_nn_strict_decreasing")
                                              (("2"
                                                (inst - "n")
                                                (("2"
                                                  (expand
                                                   "strict_decreasing?")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "c"
                                                     "pi_lbn(n)/2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "cos_lb_pi2_pos")
                                                        (("1"
                                                          (inst - "n")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "pi_bounds")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (lemma
                                                         "pi_bounds")
                                                        (("3"
                                                          (inst - "n")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "connected_nnreal") (("2" (propax) nil nil)) nil))
        nil)
       ("2"
        (case "NOT FORALL (pxx:posreal): 1.5 <= pxx AND pxx <= 1.8 IMPLIES sin_lb(pxx,n) > 0")
        (("1" (hide-all-but (-1 1))
          (("1" (skeep)
            (("1" (case "sin_lb(pxx,0) > 0")
              (("1" (lemma "sin_lb_inc")
                (("1" (inst - "0" "n" "pxx")
                  (("1" (assert)
                    (("1" (lemma "sq_lt")
                      (("1" (inst - "pxx" "1.8")
                        (("1" (assert)
                          (("1" (expand "sq" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 -2 1))
                (("2" (case "1 > pxx^2/6")
                  (("1" (mult-by -1 "pxx") (("1" (grind) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (cross-mult 1)
                      (("2" (lemma "sq_lt")
                        (("2" (inst - "pxx" "1.8")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst-cp - "px")
          (("2" (assert)
            (("2" (case "NOT px >= 1.8")
              (("1" (case "FORALL (n:nat): pi_lbn(n+9)/2 > 1.5")
                (("1" (inst - "n-9") (("1" (assert) nil nil)) nil)
                 ("2" (hide-all-but 1)
                  (("2" (induct "n")
                    (("1" (eval-formula) nil nil)
                     ("2" (skeep)
                      (("2" (assert)
                        (("2" (lemma "pi_lbn_lt")
                          (("2" (inst - "9+j") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (hide 2)
                  (("2" (hide 1)
                    (("2" (lemma "mean_value[nnreal]")
                      (("1" (inst -3 "1.8")
                        (("1" (assert)
                          (("1"
                            (inst - "px" "pi_lbn(n+1)"
                             "LAMBDA (x:nnreal): sin_lb(x,n)")
                            (("1" (assert)
                              (("1"
                                (lemma "sin_lb_deriv")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "sin_lb_pi_pos")
                                        (("1"
                                          (inst - "n")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -4)
                                              (("1"
                                                (decompose-equality -3)
                                                (("1"
                                                  (inst - "c")
                                                  (("1"
                                                    (expand "deriv" -1)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "cos_lb(c,n) < 0")
                                                          (("1"
                                                            (mult-by
                                                             -1
                                                             "pi_lbn(n+1)-px")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "cos_lb_nn_strict_decreasing")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "n")
                                                              (("2"
                                                                (expand
                                                                 "strict_decreasing?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "1.8"
                                                                   "c")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "cos_lb(1.8,n) < 0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "n>=9")
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (case
                                                                             "cos_ub(1.8,n) < 0")
                                                                            (("1"
                                                                              (lemma
                                                                               "cos_bounds")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "cos_ub_dec")
                                                                                (("2"
                                                                                  (case
                                                                                   "cos_ub(1.8,9) < 0")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "9"
                                                                                     "1.8"
                                                                                     "n-9")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (eval-formula)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "pi_bounds")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "n+1")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("3"
                                                                        (lemma
                                                                         "pi_bounds")
                                                                        (("3"
                                                                          (inst
                                                                           -
                                                                           "4")
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (eval-expr
                                                                               "pi_lbn(4)")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "connected_nnreal")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lbn const-decl "real" atan_approx nil)
    (connected_nnreal formula-decl nil deriv_domain "analysis/")
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (pi_bounds formula-decl nil atan_approx nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (mean_value formula-decl nil derivative_props "analysis/")
    (pi_lbn_lt formula-decl nil atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (sq_lt formula-decl nil sq "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (factorial def-decl "posnat" factorial "ints/")
    (sigma def-decl "real" sigma "reals/"))
   nil)
  (sin_lb_pi_range_pos-1 nil 3554645662 ("" (postpone) nil nil) nil
   shostak))
 (cos_ub_nn_strict_decreasing 0
  (cos_ub_nn_strict_decreasing-2 nil 3554653590
   ("" (expand "strict_decreasing?")
    (("" (skosimp*)
      (("" (typepred "x!1")
        (("" (typepred "y!1")
          (("" (expand ">=")
            (("" (lemma "cos_ub_deriv")
              (("" (inst - "n!1")
                (("" (flatten)
                  (("" (lemma "mean_value[real]")
                    (("1"
                      (inst - "x!1" "y!1"
                       "LAMBDA (xnn:real): cos_ub(xnn,n!1)")
                      (("1" (assert)
                        (("1" (skeep -1)
                          (("1" (decompose-equality -5)
                            (("1" (inst - "c")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "deriv" -1)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma "sin_lb_pi_range_pos")
                                        (("1"
                                          (inst - "n!1-1" "c")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (mult-by -1 "y!1 - x!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "connected_real")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_ub_deriv formula-decl nil trig_approx nil)
    (cos_ub const-decl "real" trig_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sin_lb_pi_range_pos formula-decl nil trig_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin_ub const-decl "real" trig_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_lb const-decl "real" trig_approx nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mean_value formula-decl nil derivative_props "analysis/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/"))
   nil)
  (cos_ub_nn_strict_decreasing-1 nil 3554651782 ("" (postpone) nil nil)
   nil shostak))
 (cos_ub_np_strict_increasing 0
  (cos_ub_np_strict_increasing-1 nil 3554654071
   ("" (skosimp)
    (("" (lemma "cos_ub_nn_strict_decreasing" ("n" "n!1"))
      (("" (assert)
        (("" (expand "strict_decreasing?")
          (("" (expand "strict_increasing?")
            (("" (skosimp)
              (("" (inst - "-y!1" "-x!1")
                (("" (assert)
                  (("" (rewrite "cos_ub_neg")
                    (("" (rewrite "cos_ub_neg") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_ub_nn_strict_decreasing formula-decl nil trig_approx nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_ub_neg formula-decl nil trig_approx nil)
    (npreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (sin_lb_increasing 0
  (sin_lb_increasing-2 nil 3555062074
   (""
    (case "FORALL (n: nat):
                      strict_increasing?(LAMBDA (x:
                                                   {x: nnreal |
                                                    x <= pi_lb_est(n) / 2}):
                                           sin_lb(x, n))")
    (("1"
      (case "FORALL (n: nat):
                          strict_increasing?(LAMBDA (x:
                                                       {x: nnreal |
                                                        x <= pi_lb_est(n) / 2}):
                                               sin_ub(x, n))")
      (("1" (skeep)
        (("1" (inst - "n")
          (("1" (inst - "n")
            (("1" (expand "strict_increasing?")
              (("1" (skeep)
                (("1" (case "x_1 >= 0")
                  (("1" (inst -3 "x_1" "y")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil)
                   ("2" (case "y<=0")
                    (("1" (inst - "-y" "-x_1")
                      (("1" (assert)
                        (("1" (rewrite "sin_ub_neg")
                          (("1" (rewrite "sin_ub_neg")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide (-1 -2))
                        (("2"
                          (case "sin_lb(x_1,n) <= 0 AND 0< sin_lb(y,n)")
                          (("1" (ground) nil nil)
                           ("2" (hide 4)
                            (("2" (split)
                              (("1"
                                (lemma "sin_bounds")
                                (("1"
                                  (inst - "x_1" "n")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "sin_le_0")
                                      (("1"
                                        (inst - "x_1 + 2*pi")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "sin_period")
                                            (("1"
                                              (inst - "x_1" "1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "-x_1 < pi")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred "x_1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "sin_lb_pi_range_pos")
                                (("2"
                                  (inst - "n" "y")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "y")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "pi_lb_est(n) <= pi_lb_est(1+n)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (case "n<=20")
                                            (("1"
                                              (case
                                               "FORALL (nn:below(23)): pi_lb_est(nn) <= pi_lb_est(1+nn)")
                                              (("1"
                                                (inst - "n")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (eval-formula)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "pi_lb_est" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "pi_lbn_lt")
                                                  (("2"
                                                    (inst - "n")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (skosimp*)
          (("2" (expand "strict_increasing?")
            (("2" (skosimp*)
              (("2" (lemma "sin_ub_deriv")
                (("2" (inst - "n!1")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (lemma "mean_value[nnreal]")
                        (("1"
                          (inst - "x!1" "y!1"
                           "LAMBDA (xnn:nnreal): sin_ub(xnn,n!1)")
                          (("1" (assert)
                            (("1" (skeep -1)
                              (("1"
                                (decompose-equality -5)
                                (("1"
                                  (inst - "c")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "deriv" -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "cos_ub(c,n!1) > 0")
                                          (("1"
                                            (mult-by -1 "y!1-x!1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "cos_bounds")
                                            (("2"
                                              (inst - "c" "n!1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma "cos_gt_0")
                                                  (("2"
                                                    (inst - "c")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "x!1")
                                                        (("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "connected_nnreal")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (expand "strict_increasing?")
          (("2" (skosimp*)
            (("2" (lemma "sin_lb_deriv")
              (("2" (inst - "n!1")
                (("2" (assert)
                  (("2" (flatten)
                    (("2" (lemma "mean_value[nnreal]")
                      (("1"
                        (inst - "x!1" "y!1"
                         "LAMBDA (xnn:nnreal): sin_lb(xnn,n!1)")
                        (("1" (assert)
                          (("1" (skeep -1)
                            (("1" (decompose-equality -5)
                              (("1"
                                (inst - "c")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv" -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case "cos_lb(c,n!1) > 0")
                                        (("1"
                                          (mult-by -1 "y!1-x!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (lemma "cos_lb_pi2_pos")
                                          (("2"
                                            (case
                                             "FORALL (n: nat): cos_lb(pi_lb_est(n) / 2, n) > 0")
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (inst - "n!1")
                                                (("1"
                                                  (lemma
                                                   "cos_lb_nn_strict_decreasing")
                                                  (("1"
                                                    (inst - "n!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "strict_decreasing?")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "c"
                                                           "pi_lb_est(n!1)/2")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "FORALL (egv1:below(12)): cos_lb(pi_lb_est(egv1)/2,egv1) > 0")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case "n < 12")
                                                  (("1"
                                                    (inst - "n")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst -2 "n")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "pi_lb_est")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (eval-formula)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "connected_nnreal")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_lb_deriv formula-decl nil trig_approx nil)
    (cos_lb const-decl "real" trig_approx nil)
    (cos_lb_pi2_pos formula-decl nil trig_approx nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (sin_ub const-decl "real" trig_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y skolem-const-decl
     "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}"
     trig_approx nil)
    (x_1 skolem-const-decl
     "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}"
     trig_approx nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_le_0 formula-decl nil trig_ineq nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (sin_period formula-decl nil sincos nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_bounds formula-decl nil trig_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (pi_lbn_lt formula-decl nil atan_approx nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sin_lb_pi_range_pos formula-decl nil trig_approx nil)
    (sin_ub_neg formula-decl nil trig_approx nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (connected_nnreal formula-decl nil deriv_domain "analysis/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (cos_gt_0 formula-decl nil trig_basic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_bounds formula-decl nil trig_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (cos_ub const-decl "real" trig_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (mean_value formula-decl nil derivative_props "analysis/")
    (sin_ub_deriv formula-decl nil trig_approx nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (sin_lb const-decl "real" trig_approx nil))
   nil)
  (sin_lb_increasing-1 nil 3555062035
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (sin_ub_increasing 0
  (sin_ub_increasing-1 nil 3555068416
   ("" (skeep)
    ((""
      (case "FORALL (n: nat):
                                    strict_increasing?(LAMBDA (x:
                                                                 {x: nnreal |
                                                                  x <= pi_lb_est(n) / 2}):
                                                         sin_ub(x, n))")
      (("1"
        (case "FORALL (n: nat):
                                            strict_increasing?(LAMBDA (x:
                                                                         {x: nnreal |
                                                                          x <= pi_lb_est(n) / 2}):
                                                                 sin_lb(x, n))")
        (("1" (inst - "n")
          (("1" (inst - "n")
            (("1" (expand "strict_increasing?")
              (("1" (skeep)
                (("1" (case "x_1 >= 0")
                  (("1" (inst -3 "x_1" "y")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil)
                   ("2" (case "y<=0")
                    (("1" (inst - "-y" "-x_1")
                      (("1" (assert)
                        (("1" (rewrite "sin_lb_neg")
                          (("1" (rewrite "sin_lb_neg")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil) ("3" (assert) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (hide (-1 -2))
                        (("2"
                          (case "sin_ub(x_1,n) <= 0 AND 0< sin_ub(y,n)")
                          (("1" (ground) nil nil)
                           ("2" (hide 4)
                            (("2" (split)
                              (("1"
                                (lemma "sin_gt_0")
                                (("1"
                                  (inst - "-x_1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "sin_ub_neg")
                                      (("1"
                                        (inst - "-x_1" "n")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma
                                               "sin_lb_pi_range_pos")
                                              (("1"
                                                (inst - "n" "-x_1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "x_1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "pi_lb_est(n) < pi_lb_est(n+1)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (case
                                                               "n < 12")
                                                              (("1"
                                                                (case
                                                                 "FORALL (nn:below(12)): pi_lb_est(nn) < pi_lb_est(nn+1)")
                                                                (("1"
                                                                  (inst?)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (eval-formula)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "pi_lb_est")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "pi_lbn_lt")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "sin_gt_0")
                                (("2"
                                  (inst - "y")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "sin_bounds")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "y")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (skosimp*)
            (("2" (expand "strict_increasing?")
              (("2" (skosimp*)
                (("2" (lemma "sin_lb_deriv")
                  (("2" (inst - "n!1")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (lemma "mean_value[nnreal]")
                          (("1"
                            (inst - "x!1" "y!1"
                             "LAMBDA (xnn:nnreal): sin_lb(xnn,n!1)")
                            (("1" (assert)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (decompose-equality -5)
                                  (("1"
                                    (inst - "c")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "deriv" -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case "cos_lb(c,n!1) > 0")
                                            (("1"
                                              (mult-by -1 "y!1-x!1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "cos_lb_nn_strict_decreasing")
                                              (("2"
                                                (inst - "n!1")
                                                (("2"
                                                  (expand
                                                   "strict_decreasing?")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "c"
                                                     "pi_lb_est(n!1)/2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "NOT FORALL (nn:subrange(0,12)): cos_lb(pi_lb_est(nn)/2,nn) > 0")
                                                        (("1"
                                                          (eval-formula)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "n!1 < 12")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "n!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "cos_lb_pi2_pos")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "n!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "pi_lb_est"
                                                                     -3)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (typepred
                                                         "y!1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "connected_nnreal")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (expand "strict_increasing?")
            (("2" (skosimp*)
              (("2" (lemma "sin_ub_deriv")
                (("2" (inst - "n!1")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (lemma "mean_value[nnreal]")
                        (("1"
                          (inst - "x!1" "y!1"
                           "LAMBDA (xnn:nnreal): sin_ub(xnn,n!1)")
                          (("1" (assert)
                            (("1" (skeep -1)
                              (("1"
                                (decompose-equality -5)
                                (("1"
                                  (inst - "c")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "deriv" -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case "cos_ub(c,n!1) > 0")
                                          (("1"
                                            (mult-by -1 "y!1-x!1")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "cos_bounds")
                                            (("2"
                                              (inst - "c" "n!1")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma "cos_gt_0")
                                                  (("2"
                                                    (inst - "c")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "x!1")
                                                        (("2"
                                                          (typepred
                                                           "y!1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "connected_nnreal")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_ub const-decl "real" trig_approx nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sin_lb_deriv formula-decl nil trig_approx nil)
    (mean_value formula-decl nil derivative_props "analysis/")
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_lb const-decl "real" trig_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_lb_nn_strict_decreasing formula-decl nil trig_approx nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (cos_lb_pi2_pos formula-decl nil trig_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (subrange type-eq-decl nil integers nil)
    (n!1 skolem-const-decl "nat" trig_approx nil)
    (c skolem-const-decl "nnreal" trig_approx nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (connected_nnreal formula-decl nil deriv_domain "analysis/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y skolem-const-decl
     "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}"
     trig_approx nil)
    (x_1 skolem-const-decl
     "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}"
     trig_approx nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_ub_neg formula-decl nil trig_approx nil)
    (sin_lb_pi_range_pos formula-decl nil trig_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pi_lbn_lt formula-decl nil atan_approx nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_gt_0 formula-decl nil trig_ineq nil)
    (sin_bounds formula-decl nil trig_approx nil)
    (sin_lb_neg formula-decl nil trig_approx nil)
    (sin_lb const-decl "real" trig_approx nil)
    (cos_gt_0 formula-decl nil trig_basic nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_bounds formula-decl nil trig_approx nil)
    (cos_ub const-decl "real" trig_approx nil)
    (sin_ub_deriv formula-decl nil trig_approx nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (sin_lb_nn_decreasing 0
  (sin_lb_nn_decreasing-2 nil 3555075160
   ("" (skosimp*)
    (("" (expand "strict_decreasing?")
      (("" (skosimp*)
        (("" (typepred "x!1")
          (("" (typepred "y!1")
            (("" (lemma "sin_lb_deriv")
              (("" (inst - "n!1")
                (("" (assert)
                  (("" (flatten)
                    (("" (lemma "mean_value[nnreal]")
                      (("1"
                        (inst - "x!1" "y!1"
                         "LAMBDA (xnn:nnreal): sin_lb(xnn,n!1)")
                        (("1" (assert)
                          (("1" (skeep -1)
                            (("1" (decompose-equality -5)
                              (("1"
                                (inst - "c")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv" -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (case "cos_lb(c,n!1) < 0")
                                        (("1"
                                          (mult-by -1 "y!1-x!1")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide (-3 -4 2))
                                          (("2"
                                            (lemma "cos_lt_0")
                                            (("2"
                                              (inst - "c")
                                              (("2"
                                                (lemma "cos_bounds")
                                                (("2"
                                                  (inst - "c" "n!1")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "connected_nnreal")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_lb_deriv formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mean_value formula-decl nil derivative_props "analysis/")
    (nnreal type-eq-decl nil real_types nil)
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_lb const-decl "real" trig_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_bounds formula-decl nil trig_approx nil)
    (cos_lt_0 formula-decl nil trig_ineq nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_lb const-decl "real" trig_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (connected_nnreal formula-decl nil deriv_domain "analysis/")
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil)
  (sin_lb_nn_decreasing-1 nil 3555075104
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (cos_term_pi_ub 0
  (cos_term_pi_ub-3 "" 3744228355
   (""
    (case "FORALL (n:nat):
                            n>=10 IMPLIES -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos(pi_ubn(n) / 2)")
    (("1" (skeep)
      (("1"
        (case "NOT FORALL (n: subrange(5,10)):
                           -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos_ub(pi_ubn(n) / 2,n+4)")
        (("1" (hide 2) (("1" (eval-formula) nil nil)) nil)
         ("2" (case "n >= 10")
          (("1" (inst -3 "n") (("1" (assert) nil nil)) nil)
           ("2" (inst - "n")
            (("1" (lemma "cos_bounds")
              (("1" (inst - "pi_ubn(n)/2" "n+4")
                (("1" (ground) nil nil)) nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "sin_cos")
          (("2" (inst - "pi_ubn(n)/2-pi/2")
            (("2" (assert)
              (("2" (replace -1 :dir rl)
                (("2" (hide -1)
                  (("2" (lemma "sin_px")
                    (("2" (inst?)
                      (("1" (name "M" "1-1 / 1500000")
                        (("1" (replace -1)
                          (("1" (name "pd" "pi_ubn(n) / 2 - pi / 2")
                            (("1" (replace -1)
                              (("1"
                                (split -)
                                (("1"
                                  (invoke (case "%1 < pd*M") (! 1 1))
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide (2 -1))
                                    (("2"
                                      (case
                                       "pd >= pi_ubn(n)/2 - pi_ubn(n+1)/2")
                                      (("1"
                                        (mult-by -1 "M")
                                        (("1"
                                          (lemma "pi_ub_diff_bounds")
                                          (("1"
                                            (inst - "n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (invoke
                                                   (case
                                                    "%1 < 16 * M * (1 / 5) ^ (3 + 5 * n)")
                                                   (! 1 1))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide
                                                     (-1 -2 -3 -4 -5))
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "cos_term")
                                                        (("2"
                                                          (case
                                                           "(-1)^(1+2*n) = -1")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "(2) ^ (2 + 4 * n) / factorial(2 + 4 * n) < 16 * ((1 / 5) ^ (3 + 5 * n) * M)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "(pi_ubn(n) / 2) ^ (2 + 4 * n) < (2) ^ (2 + 4 * n)")
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "1/factorial(2+4*n)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_expt_pos_lt_aux")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "1+4*n"
                                                                           "pi_ubn(n)/2"
                                                                           "2")
                                                                          (("2"
                                                                            (expand
                                                                             "^")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "FORALL (nn:nat): pi_ubn(nn+10) < 4")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "n-10")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (induct
                                                                                     "nn")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (eval-formula)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pi_ub_dec")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "11+j"
                                                                                             "10+j")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "FORALL (kk:nat): (2) ^ (2 + 4 * (kk+10)) / factorial(2 + 4 * (kk+10)) <
                                                     16 * ((1 / 5) ^ (3 + 5 * (kk+10)) * M)")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "n-10")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (induct
                                                                         "kk")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (eval-formula)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (name
                                                                                 "eg3"
                                                                                 "43+4*j")
                                                                                (("2"
                                                                                  (name
                                                                                   "eg4"
                                                                                   "44+4*j")
                                                                                  (("2"
                                                                                    (name
                                                                                     "eg5"
                                                                                     "45+4*j")
                                                                                    (("2"
                                                                                      (name
                                                                                       "eg6"
                                                                                       "46+4*j")
                                                                                      (("2"
                                                                                        (case
                                                                                         "factorial(46+4*j) = eg6*eg5*eg4*eg3*factorial(42+4*j)")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt"
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "expt"
                                                                                               +)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "expt"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "expt"
                                                                                                       +
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT 16/(eg3*eg4*eg5*eg6) < (1/3125)")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "eg3")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "eg4")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "eg5")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "eg6")
                                                                                                                    (("1"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (mult-ineq
                                                                                                             -1
                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (real-props)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl
                                                                                                             :hide?
                                                                                                             t)
                                                                                                            (("3"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               :dir
                                                                                                               rl
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("3"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 :dir
                                                                                                                 rl
                                                                                                                 :hide?
                                                                                                                 t)
                                                                                                                (("3"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   :dir
                                                                                                                   rl
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           (-5
                                                                                            2))
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               +
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "eg5 = eg6-1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "factorial"
                                                                                                       +
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "eg4 = eg5-1")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "factorial"
                                                                                                               +
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "eg3 = eg4-1")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "factorial"
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (case
                                                                 "FORALL (kk:nat): (-1)^(2*kk+1)=-1")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (induct
                                                                     "kk")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "^")
                                                                        (("2"
                                                                          (expand
                                                                           "expt"
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             +)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "pi_bounds")
                                        (("2"
                                          (inst - "n+1")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "pi_ubn(n)/2 - pi_lbn(20)/2 < 1/500")
                                  (("1"
                                    (lemma "pi_bounds")
                                    (("1"
                                      (inst - "20")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "FORALL (nn:nat): pi_ubn(nn+10) / 2 - pi_lbn(20) / 2 < 1 / 500")
                                    (("1"
                                      (inst - "n-10")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (induct "nn")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (eval-formula)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "pi_ub_dec")
                                              (("2"
                                                (inst - "11+j" "10+j")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "pi_bounds")
                          (("2" (inst - "n") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_term_pi_ub-2 nil 3555153977
   (""
    (case "FORALL (n:nat):
                     n>=10 IMPLIES -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos(pi_ubn(n) / 2)")
    (("1" (skeep)
      (("1"
        (case "NOT FORALL (n: subrange(5,10)):
                  -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos_ub(pi_ubn(n) / 2,n+4)")
        (("1" (hide 2) (("1" (eval-formula) nil nil)) nil)
         ("2" (case "n >= 10")
          (("1" (inst -3 "n") (("1" (assert) nil nil)) nil)
           ("2" (inst - "n")
            (("1" (lemma "cos_bounds")
              (("1" (inst - "pi_ubn(n)/2" "n+4")
                (("1" (ground) nil nil)) nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (lemma "sin_cos")
          (("2" (inst - "pi_ubn(n)/2-pi/2")
            (("2" (assert)
              (("2" (replace -1 :dir rl)
                (("2" (hide -1)
                  (("2" (lemma "sin_px")
                    (("2" (inst?)
                      (("1" (name "M" "1-1 / 1500000")
                        (("1" (replace -1)
                          (("1" (name "pd" "pi_ubn(n) / 2 - pi / 2")
                            (("1" (replace -1)
                              (("1"
                                (split -)
                                (("1"
                                  (invoke (case "%1 < pd*M") (! 1 1))
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide (2 -1))
                                    (("2"
                                      (case
                                       "pd >= pi_ubn(n)/2 - pi_ubn(n+1)/2")
                                      (("1"
                                        (mult-by -1 "M")
                                        (("1"
                                          (lemma "pi_ub_diff_bounds")
                                          (("1"
                                            (inst - "n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (invoke
                                                   (case
                                                    "%1 < 16 * M * (1 / 5) ^ (3 + 5 * n)")
                                                   (! 1 1))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide
                                                     (-1 -2 -3 -4 -5))
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (expand
                                                         "cos_term")
                                                        (("2"
                                                          (case
                                                           "(-1)^(1+2*n) = -1")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "(2) ^ (2 + 4 * n) / factorial(2 + 4 * n) < 16 * ((1 / 5) ^ (3 + 5 * n) * M)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "(pi_ubn(n) / 2) ^ (2 + 4 * n) < (2) ^ (2 + 4 * n)")
                                                                    (("1"
                                                                      (mult-by
                                                                       -1
                                                                       "1/factorial(2+4*n)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "both_sides_expt_pos_lt_aux")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "1+4*n"
                                                                           "pi_ubn(n)/2"
                                                                           "2")
                                                                          (("2"
                                                                            (expand
                                                                             "^")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "FORALL (nn:nat): pi_ubn(nn+10) < 4")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "n-10")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (induct
                                                                                     "nn")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (eval-formula)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "pi_ub_dec")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -
                                                                                             "11+j"
                                                                                             "10+j")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "FORALL (kk:nat): (2) ^ (2 + 4 * (kk+10)) / factorial(2 + 4 * (kk+10)) <
                              16 * ((1 / 5) ^ (3 + 5 * (kk+10)) * M)")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "n-10")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (induct
                                                                         "kk")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (eval-formula)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (name
                                                                                 "eg3"
                                                                                 "43+4*j")
                                                                                (("2"
                                                                                  (name
                                                                                   "eg4"
                                                                                   "44+4*j")
                                                                                  (("2"
                                                                                    (name
                                                                                     "eg5"
                                                                                     "45+4*j")
                                                                                    (("2"
                                                                                      (name
                                                                                       "eg6"
                                                                                       "46+4*j")
                                                                                      (("2"
                                                                                        (case
                                                                                         "factorial(46+4*j) = eg6*eg5*eg4*eg3*factorial(42+4*j)")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt"
                                                                                             +)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "expt"
                                                                                               +)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "expt"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "expt"
                                                                                                       +
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT 16/(eg3*eg4*eg5*eg6) < (1/3125)")
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "eg3")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "eg4")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "eg5")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "eg6")
                                                                                                                    (("1"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (mult-ineq
                                                                                                             -1
                                                                                                             -6)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (real-props)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           (-5
                                                                                            2))
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               +
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "eg5 = eg6-1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "factorial"
                                                                                                       +
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "eg4 = eg5-1")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "factorial"
                                                                                                               +
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "eg3 = eg4-1")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "factorial"
                                                                                                                       +
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (case
                                                                 "FORALL (kk:nat): (-1)^(2*kk+1)=-1")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "n")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (induct
                                                                     "kk")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "^")
                                                                        (("2"
                                                                          (expand
                                                                           "expt"
                                                                           +)
                                                                          (("2"
                                                                            (expand
                                                                             "expt"
                                                                             +)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "pi_bounds")
                                        (("2"
                                          (inst - "n+1")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "pi_ubn(n)/2 - pi_lbn(20)/2 < 1/500")
                                  (("1"
                                    (lemma "pi_bounds")
                                    (("1"
                                      (inst - "20")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "FORALL (nn:nat): pi_ubn(nn+10) / 2 - pi_lbn(20) / 2 < 1 / 500")
                                    (("1"
                                      (inst - "n-10")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (induct "nn")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (eval-formula)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "pi_ub_dec")
                                              (("2"
                                                (inst - "11+j" "10+j")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "pi_bounds")
                          (("2" (inst - "n") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_cos formula-decl nil sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (pi_ub_diff_bounds formula-decl nil atan_approx nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (eg3 skolem-const-decl "odd_int" trig_approx nil)
    (eg5 skolem-const-decl "odd_int" trig_approx nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (eg6 skolem-const-decl "even_int" trig_approx nil)
    (eg4 skolem-const-decl "even_int" trig_approx nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (times_div1 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt2 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (pi_ub_dec formula-decl nil atan_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (factorial def-decl "posnat" factorial "ints/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (M skolem-const-decl "rat" trig_approx nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (sin_px formula-decl nil trig_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_bounds formula-decl nil trig_approx nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (cos_ub const-decl "real" trig_approx nil)
    (subrange type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_term const-decl "real" trig_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def nil))
   nil)
  (cos_term_pi_ub-1 nil 3555153841 ("" (postpone) nil nil) nil
   shostak))
 (cos_ub_pi2_neg 0
  (cos_ub_pi2_neg-3 nil 3555164747
   ("" (skeep)
    (("" (lemma "cos_approx_cos")
      (("" (expand "cos_ub")
        (("" (inst?)
          (("" (case "cos_term(pi_ubn(n) / 2)(2 * n + 1) < 0")
            (("1" (expand "abs" - 2)
              (("1" (assert)
                (("1" (lemma "cos_term_pi_ub")
                  (("1" (inst - "n") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide (-1 2))
              (("2" (expand "cos_term")
                (("2" (cross-mult 1)
                  (("2" (assert)
                    (("2" (case "FORALL (nn:nat): (-1)^(2*nn+1) = -1")
                      (("1" (inst - "n") (("1" (assert) nil nil)) nil)
                       ("2" (hide-all-but 1)
                        (("2" (induct "nn")
                          (("1" (grind) nil nil)
                           ("2" (skeep)
                            (("2" (expand "^")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "expt" +)
                                  (("2"
                                    (expand "expt" +)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_approx_cos formula-decl nil trig_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cos_term_pi_ub formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_term const-decl "real" trig_approx nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_ub const-decl "real" trig_approx nil))
   nil)
  (cos_ub_pi2_neg-2 nil 3555164653
   ("" (skeep)
    (("" (lemma "sin_lb_pi_pos")
      (("" (inst - "n")
        (("" (case "n>=12")
          (("1" (assert)
            (("1" (expand "pi_lb_est") (("1" (propax) nil)))))
           ("2"
            (case "FORALL (nn:below(12)): sin_lb(pi_lb_est(nn + 1), nn) > 0")
            (("1" (inst - "n") (("1" (assert) nil)))
             ("2" (hide-all-but 1) (("2" (eval-formula) nil))))))))))))
    nil)
   nil nil)
  (cos_ub_pi2_neg-1 nil 3555076643
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (pi_ub_est_TCC1 0
  (pi_ub_est_TCC1-1 nil 3555166679 ("" (subtype-tcc) nil nil) nil nil
   (pi_ub_est subtype "4"
              "{i: integers.int | booleans.OR(, reals.>=(i, 0))}")))
 (pi_ub_est_TCC2 0
  (pi_ub_est_TCC2-1 nil 3555166679
   ("" (skeep)
    (("" (lemma "pi_bounds")
      (("" (inst - "10")
        (("" (case "n = 0 OR n = 1 OR n=2 OR n=3 OR n=4")
          (("1"
            (case "pi_ubn(n) + 1 / (n + 1) ^ 4 > pi_ubn(10) AND pi_ubn(n) + 1 / (n + 1) ^ 4 < 3 * pi_lbn(10) / 2")
            (("1" (hide -2) (("1" (ground) nil nil)) nil)
             ("2" (hide -2)
              (("2" (hide 2)
                (("2" (split -)
                  (("1" (replaces -1) (("1" (eval-formula) nil nil))
                    nil)
                   ("2" (replaces -1) (("2" (eval-formula) nil nil))
                    nil)
                   ("3" (replaces -1) (("3" (eval-formula) nil nil))
                    nil)
                   ("4" (replaces -1) (("4" (eval-formula) nil nil))
                    nil)
                   ("5" (replaces -1) (("5" (eval-formula) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bounds formula-decl nil atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (pi_ub_est subtype
              "(number_fields.+)(atan_approx.pi_ubn(trig_approx.n), number_fields./(1, exponentiation.^(((number_fields.+)(trig_approx.n, 1)), 4)))"
              "{rr: real_types.nnreal | booleans.AND(reals.<(pi_def.pi, rr), reals.<(rr, number_fields./(number_fields.*(3, pi_def.pi), 2)))}")))
 (pi_ub_est_TCC3 0
  (pi_ub_est_TCC3-1 nil 3555167332
   ("" (case "FORALL (n: nat): pi_ubn(n+5) < 3 * pi_lbn(10) / 2")
    (("1" (skeep)
      (("1" (split)
        (("1" (lemma "pi_bounds")
          (("1" (inst - "n") (("1" (ground) nil nil)) nil)) nil)
         ("2" (inst - "n-5")
          (("1" (assert)
            (("1" (lemma "pi_bounds")
              (("1" (inst - "10") (("1" (ground) nil nil)) nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (assert) (("1" (eval-formula) nil nil)) nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (lemma "pi_ub_dec")
              (("2" (inst - "6+j" "5+j") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_ub_dec formula-decl nil atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lbn const-decl "real" atan_approx nil))
   nil
   (pi_ub_est subtype "atan_approx.pi_ubn(trig_approx.n)"
              "{rr: real_types.nnreal | booleans.AND(reals.<(pi_def.pi, rr), reals.<(rr, number_fields./(number_fields.*(3, pi_def.pi), 2)))}")))
 (sin_ub_nn_decreasing 0
  (sin_ub_nn_decreasing-2 nil 3555167426
   ("" (skosimp*)
    (("" (expand "strict_decreasing?")
      (("" (skosimp*)
        (("" (lemma "sin_ub_deriv")
          (("" (inst - "n!1")
            (("" (assert)
              (("" (flatten)
                (("" (lemma "mean_value[nnreal]")
                  (("1"
                    (inst - "x!1" "y!1"
                     "LAMBDA (xnn:nnreal): sin_ub(xnn,n!1)")
                    (("1" (assert)
                      (("1" (skeep -1)
                        (("1" (decompose-equality -5)
                          (("1" (inst - "c")
                            (("1" (assert)
                              (("1"
                                (expand "deriv" -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (case "cos_ub(c,n!1) < 0")
                                    (("1"
                                      (mult-by -1 "y!1-x!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "x!1")
                                      (("2"
                                        (lemma
                                         "cos_ub_nn_strict_decreasing")
                                        (("2"
                                          (inst - "n!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "strict_decreasing?")
                                              (("2"
                                                (inst
                                                 -
                                                 "pi_ub_est(n!1)/2"
                                                 "c")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case "n!1 >= 5")
                                                    (("1"
                                                      (lemma
                                                       "cos_ub_pi2_neg")
                                                      (("1"
                                                        (inst - "n!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "pi_ub_est")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "FORALL (nn:subrange(1,5)): cos_ub(pi_ub_est(nn) / 2, nn)<0")
                                                      (("1"
                                                        (inst - "n!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (eval-formula)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "x!1")
                        (("2" (expand "pi_ub_est")
                          (("2" (lift-if) (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (typepred "x!1")
                        (("3" (expand "pi_ub_est")
                          (("3" (lift-if) (("3" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "connected_nnreal")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_decreasing? const-decl "bool" real_fun_preds "reals/")
    (sin_ub_deriv formula-decl nil trig_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mean_value formula-decl nil derivative_props "analysis/")
    (nnreal type-eq-decl nil real_types nil)
    (connected? const-decl "bool" deriv_domain_def "analysis/")
    (not_one_element? const-decl "bool" deriv_domain_def "analysis/")
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_ub const-decl "real" trig_approx nil)
    (deriv const-decl "[T -> real]" derivatives "analysis/")
    (deriv_fun type-eq-decl nil derivatives "analysis/")
    (derivable? const-decl "bool" derivatives "analysis/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cos_ub_pi2_neg formula-decl nil trig_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_ub_nn_strict_decreasing formula-decl nil trig_approx nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_ub const-decl "real" trig_approx nil)
    (y!1 skolem-const-decl
     "{x: real | pi_ub_est(n!1) / 2 <= x AND x <= pi_lb_est(n!1)}"
     trig_approx nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_ub_est const-decl "{rr: nnreal | pi < rr AND rr < 3 * pi / 2}"
               trig_approx nil)
    (n!1 skolem-const-decl "nat" trig_approx nil)
    (pi_lb_est const-decl "{rr: nnreal | rr < pi}" trig_approx nil)
    (x!1 skolem-const-decl
     "{x: real | pi_ub_est(n!1) / 2 <= x AND x <= pi_lb_est(n!1)}"
     trig_approx nil)
    (connected_nnreal formula-decl nil deriv_domain "analysis/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (sin_ub_nn_decreasing-1 nil 3555167399 ("" (postpone) nil nil) nil
   shostak)))


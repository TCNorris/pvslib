(acos (acos_TCC1 0
       (acos_TCC1-2 "" 3790092318
        ("" (skolem 1 ("x"))
         (("" (typepred "asin(x)")
           (("" (case "asin(x) < 0")
             (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
           nil))
         nil)
        nil shostak
        (acos subtype
              "(number_fields.-)(number_fields./(pi_def.pi, 2), asin.asin(acos.x))"
              "nnreal_le_pi"))
       (acos_TCC1-1 nil 3262275879
        ("" (skolem 1 ("x"))
         (("" (typepred "asin(x)")
           (("" (expand "abs" -1)
             (("" (case "asin(x) < 0")
               (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
             nil))
           nil))
         nil)
        ((asin const-decl "real_abs_le_pi2" asin nil)
         (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types nil)
         (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
         (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
          pi_def nil)
         (cos const-decl "real" sincos_def nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/= const-decl "boolean" notequal nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (<= const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        shostak
        (acos subtype
              "(number_fields.-)(number_fields./(pi_def.pi, 2), asin.asin(acos.x))"
              "nnreal_le_pi")))
      (acos_neg_TCC1 0
       (acos_neg_TCC1-1 nil 3262871574 ("" (grind) nil nil) nil shostak
        (acos_neg subtype "(number_fields.-)(acos.x)" "real_abs_le1")))
      (acos_neg 0
       (acos_neg-1 nil 3262871521
        ("" (skolem 1 ("x"))
         (("" (expand "acos")
           (("" (rewrite "asin_neg") (("" (assert) nil nil)) nil)) nil))
         nil)
        ((pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (real_plus_real_is_real application-judgement "real" reals nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (<= const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (asin_neg formula-decl nil asin nil))
        shostak))
      (acos_0 0
       (acos_0-1 nil 3262276429
        ("" (expand "acos")
         (("" (rewrite "asin_0") (("" (assert) nil nil)) nil)) nil)
        ((asin_0 formula-decl nil asin nil)
         (int_times_even_is_even application-judgement "even_int" integers
          nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
        shostak))
      (acos_sqrt_half_TCC1 0
       (acos_sqrt_half_TCC1-2 "" 3790092319
        ("" (typepred "sqrt(1/2)")
         (("" (assert)
           (("" (lemma "sq_le" ("nna" "sqrt(1/2)" "nnb" "1"))
             (("" (rewrite "sq_sqrt")
               (("" (expand "sq" -1) (("" (propax) nil nil)) nil)) nil))
             nil))
           nil))
         nil)
        nil shostak
        (acos_sqrt_half subtype "sqrt.sqrt(number_fields./(1, 2))"
         "real_abs_le1"))
       (acos_sqrt_half_TCC1-1 nil 3263920337
        ("" (expand "abs")
         (("" (typepred "sqrt(1/2)")
           (("" (assert)
             (("" (lemma "sq_le" ("nna" "sqrt(1/2)" "nnb" "1"))
               (("" (rewrite "sq_sqrt")
                 (("" (expand "sq" -1) (("" (propax) nil nil)) nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (posreal_times_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (sq_sqrt formula-decl nil sqrt reals)
         (sq const-decl "nonneg_real" sq reals)
         (sq_le formula-decl nil sq reals)
         (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
          nil)
         (sqrt_pos application-judgement "posreal" sqrt reals)
         (boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (nnreal type-eq-decl nil real_types nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (> const-decl "bool" reals nil))
        shostak
        (acos_sqrt_half subtype "sqrt.sqrt(number_fields./(1, 2))"
         "real_abs_le1")))
      (acos_sqrt_half 0
       (acos_sqrt_half-1 nil 3263920536
        ("" (expand "acos")
         (("" (rewrite "asin_sqrt_half") (("" (assert) nil nil)) nil)) nil)
        ((asin_sqrt_half formula-decl nil asin nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
        shostak))
      (acos_1 0
       (acos_1-1 nil 3262276459
        ("" (expand "acos")
         (("" (rewrite "asin_1") (("" (assert) nil nil)) nil)) nil)
        ((asin_1 formula-decl nil asin nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
        shostak))
      (acos_minus1 0
       (acos_minus1-1 nil 3262276496
        ("" (expand "acos")
         (("" (rewrite "asin_minus1") (("" (assert) nil nil)) nil)) nil)
        ((asin_minus1 formula-decl nil asin nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
        shostak))
      (acos_minus_sqrt_half_TCC1 0
       (acos_minus_sqrt_half_TCC1-1 nil 3263920463
        ("" (lemma "acos_sqrt_half_TCC1")
         (("" (assert) (("" (mult-by 1 "-1" -) (("" (assert) nil nil)) nil))
           nil))
         nil)
        ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
          nil)
         (sqrt_pos application-judgement "posreal" sqrt reals)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
         (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (<= const-decl "bool" reals nil)
         (nonpos_real nonempty-type-eq-decl nil real_types nil)
         (< const-decl "bool" reals nil)
         (negreal nonempty-type-eq-decl nil real_types nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (both_sides_times_neg_le1 formula-decl nil real_props nil)
         (acos_sqrt_half_TCC1 subtype-tcc nil acos nil))
        shostak
        (acos_minus_sqrt_half subtype
         "(number_fields.-)(sqrt.sqrt(number_fields./(1, 2)))"
         "real_abs_le1")))
      (acos_minus_sqrt_half 0
       (acos_minus_sqrt_half-1 nil 3263920585
        ("" (expand "acos")
         (("" (rewrite "asin_minus_sqrt_half") (("" (assert) nil nil)) nil))
         nil)
        ((asin_minus_sqrt_half formula-decl nil asin nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (posreal_times_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (sqrt_pos application-judgement "posreal" sqrt reals))
        shostak))
      (acos_strict_decreasing 0
       (acos_strict_decreasing-1 nil 3262276758
        ("" (expand "strict_decreasing?")
         (("" (skolem 1 ("x" "y"))
           (("" (flatten)
             (("" (expand "acos")
               (("" (lemma "asin_strict_increasing")
                 (("" (expand "strict_increasing?")
                   (("" (inst - "x" "y") (("" (assert) nil nil)) nil)) nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (strict_increasing? const-decl "bool" real_fun_preds reals)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (<= const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (asin_strict_increasing formula-decl nil asin nil)
         (strict_decreasing? const-decl "bool" real_fun_preds reals))
        shostak))
      (acos_bij 0
       (acos_bij-2 "" 3790092320
        ("" (lemma "asin_bij")
         (("" (expand "bijective?")
           (("" (expand "injective?")
             (("" (expand "surjective?")
               (("" (expand "acos")
                 (("" (flatten)
                   (("" (split 1)
                     (("1" (skolem 1 ("x" "y"))
                       (("1" (inst -1 "x" "y")
                         (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                       nil)
                      ("2" (hide -1)
                       (("2" (skolem 1 ("y"))
                         (("2" (inst - "pi/2-y")
                           (("2" (skolem - ("x"))
                             (("2" (inst + "x") (("2" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        nil shostak)
       (acos_bij-1 nil 3262277267
        ("" (lemma "asin_bij")
         (("" (expand "bijective?")
           (("" (expand "injective?")
             (("" (expand "surjective?")
               (("" (expand "acos")
                 (("" (flatten)
                   (("" (split 1)
                     (("1" (skolem 1 ("x" "y"))
                       (("1" (inst -1 "x" "y")
                         (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                       nil)
                      ("2" (hide -1)
                       (("2" (skolem 1 ("y"))
                         (("2" (inst - "pi/2-y")
                           (("1" (skolem - ("x"))
                             (("1" (inst + "x") (("1" (assert) nil nil)) nil))
                             nil)
                            ("2" (hide 2)
                             (("2" (typepred "y")
                               (("2" (expand "abs")
                                 (("2" (case "pi/2-y<0")
                                   (("1" (assert) nil nil)
                                    ("2" (assert) nil nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((bijective? const-decl "bool" functions nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (surjective? const-decl "bool" functions nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (cos const-decl "real" sincos_def nil)
         (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
          pi_def nil)
         (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types nil)
         (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (>= const-decl "bool" reals nil)
         (nnreal type-eq-decl nil real_types nil)
         (nnreal_le_pi nonempty-type-eq-decl nil trig_types nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (<= const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (injective? const-decl "bool" functions nil)
         (asin_bij formula-decl nil asin nil))
        shostak))
      (acos_derivable_TCC1 0
       (acos_derivable_TCC1-2 "" 3790092320
        ("" (skosimp*)
         (("" (typepred "x!1")
           (("" (case "x!1<0") (("1" (assert) nil nil) ("2" (assert) nil nil))
             nil))
           nil))
         nil)
        nil shostak (acos_derivable subtype "acos.x" "real_abs_le1"))
       (acos_derivable_TCC1-1 nil 3262873061
        ("" (skosimp*)
         (("" (typepred "x!1")
           (("" (expand "abs")
             (("" (case "x!1<0")
               (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
             nil))
           nil))
         nil)
        ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (< const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil))
        shostak (acos_derivable subtype "acos.x" "real_abs_le1")))
      (acos_derivable_TCC2 0
       (acos_derivable_TCC2-2 "" 3790092320
        ("" (lemma deriv_domain_open) (("" (inst - "-1" "1") nil nil)) nil)
        nil shostak
        (acos_derivable assuming
         "analysis@derivatives_def[real_abs_lt1].derivatives_def"
         "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))
       (acos_derivable_TCC2-1 nil 3262873116
        ("" (lemma deriv_domain_open)
         (("" (inst - "-1" "1")
           (("" (expand "deriv_domain?") (("" (propax) nil nil)) nil)) nil))
         nil)
        ((minus_odd_is_odd application-judgement "odd_int" integers nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (deriv_domain_open formula-decl nil deriv_domain analysis))
        shostak
        (acos_derivable assuming
         "analysis@derivatives_def[real_abs_lt1].derivatives_def"
         "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
      (acos_derivable_TCC3 0
       (acos_derivable_TCC3-1 nil 3262873369
        ("" (expand "not_one_element?")
         (("" (skosimp*)
           (("" (case "x!1=0")
             (("1" (inst + "1/2") (("1" (assert) nil nil)) nil)
              ("2" (assert) (("2" (inst + "0") (("2" (assert) nil nil)) nil))
               nil))
             nil))
           nil))
         nil)
        ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals
          nil)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (< const-decl "bool" reals nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
         (not_one_element? const-decl "bool" deriv_domain_def analysis))
        shostak
        (acos_derivable assuming
         "analysis@derivatives_def[real_abs_lt1].derivatives_def"
         "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
      (acos_derivable 0
       (acos_derivable-4 "" 3790092320
        ("" (skolem 1 ("z"))
         (("" (expand "acos")
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "asin_derivable_fun")
               ((""
                 (lemma "diff_derivable_fun[real_abs_lt1]"
                  ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                   "LAMBDA (x: real_abs_lt1): asin(x)"))
                 (("" (assert)
                   (("" (expand "-" -1)
                     (("" (expand "derivable?" -1) (("" (inst - "z") nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        nil shostak)
       (acos_derivable-3 nil 3425656783
        ("" (skolem 1 ("z"))
         (("" (expand "acos")
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "asin_derivable_fun")
               (("" (expand "const_fun")
                 ((""
                   (lemma "diff_derivable_fun[real_abs_lt1]"
                    ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                     "LAMBDA (x: real_abs_lt1): asin(x)"))
                   (("" (assert)
                     (("" (expand "-" -1)
                       (("" (expand "derivable?" -1)
                         (("" (inst - "z") nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (asin_derivable_fun formula-decl nil asin nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (derivable? const-decl "bool" derivatives analysis)
         (- const-decl "[T -> real]" real_fun_ops reals)
         (diff_derivable_fun formula-decl nil derivatives analysis)
         (<= const-decl "bool" reals nil)
         (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
         (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types nil)
         (asin const-decl "real_abs_le_pi2" asin nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (const_derivable_fun formula-decl nil derivatives analysis)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (> const-decl "bool" reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (cos const-decl "real" sincos_def nil)
         (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
          pi_def nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (< const-decl "bool" reals nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil))
        nil)
       (acos_derivable-2 nil 3352188947
        ("" (skolem 1 ("z"))
         (("" (expand "acos")
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "asin_derivable2")
               (("" (expand "const_fun")
                 ((""
                   (lemma "diff_derivable_fun[real_abs_lt1]"
                    ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                     "LAMBDA (x: real_abs_lt1): asin(x)"))
                   (("" (assert)
                     (("" (expand "-" -1)
                       (("" (expand "derivable?" -1)
                         (("" (inst - "z") nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((diff_derivable_fun formula-decl nil derivatives analysis)
         (asin const-decl "real_abs_le_pi2" asin nil)
         (const_fun const-decl "[T -> real]" real_fun_ops reals)
         (const_derivable_fun formula-decl nil derivatives analysis))
        nil)
       (acos_derivable-1 nil 3262871716
        ("" (skolem 1 ("z"))
         (("" (expand "acos")
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "asin_derivable2")
               (("" (expand "const_fun")
                 ((""
                   (lemma "diff_derivable_fun"
                    ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                     "LAMBDA (x: real_abs_lt1): asin(x)"))
                   (("" (assert)
                     (("" (expand "-" -1)
                       (("" (expand "derivable?" -1)
                         (("" (inst - "z") nil nil)) nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((asin const-decl "real_abs_le_pi2" asin nil)
         (diff_derivable_fun formula-decl nil derivatives analysis)
         (const_fun const-decl "[T -> real]" real_fun_ops reals)
         (const_derivable_fun formula-decl nil derivatives analysis))
        shostak))
      (acos_derivable_fun 0
       (acos_derivable_fun-1 nil 3425654686
        ("" (lemma "acos_derivable")
         (("" (expand "derivable?" 1) (("" (propax) nil nil)) nil)) nil)
        ((derivable? const-decl "bool" derivatives analysis)
         (acos_derivable formula-decl nil acos nil))
        nil))
      (deriv_acos_fun_TCC1 0
       (deriv_acos_fun_TCC1-2 nil 3425656832
        ("" (lemma "acos_derivable_fun") (("" (propax) nil nil)) nil)
        ((acos_derivable_fun formula-decl nil acos nil)) nil
        (deriv_acos_fun subtype
         "LAMBDA (x: trig_types.real_abs_lt1): acos.acos(x)"
         "deriv_fun[real_abs_lt1]"))
       (deriv_acos_fun_TCC1-1 nil 3262873446
        ("" (lemma "acos_derivable2") (("" (propax) nil nil)) nil) nil shostak
        (deriv_acos_fun subtype
         "LAMBDA (x: trig_types.real_abs_lt1): acos.acos(x)"
         "deriv_fun[real_abs_lt1]")))
      (deriv_acos_fun_TCC2 0
       (deriv_acos_fun_TCC2-2 nil 3425656848
        ("" (lemma "asin_derivable_fun") (("" (propax) nil nil)) nil)
        ((asin_derivable_fun formula-decl nil asin nil)) nil
        (deriv_acos_fun subtype
         "LAMBDA (x: trig_types.real_abs_lt1): asin.asin(x)"
         "deriv_fun[real_abs_lt1]"))
       (deriv_acos_fun_TCC2-1 nil 3262873481
        ("" (lemma "asin_derivable2") (("" (propax) nil nil)) nil) nil shostak
        (deriv_acos_fun subtype
         "LAMBDA (x: trig_types.real_abs_lt1): asin.asin(x)"
         "deriv_fun[real_abs_lt1]")))
      (deriv_acos_fun 0
       (deriv_acos_fun-4 "" 3790092321
        ("" (lemma "asin_derivable_fun")
         (("" (expand "acos" 1)
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "deriv_const_fun[real_abs_lt1]" ("b" "pi/2"))
               ((""
                 (lemma "diff_derivable_fun[real_abs_lt1]"
                  ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                   "LAMBDA (x: real_abs_lt1): asin(x)"))
                 (("" (assert)
                   (("" (expand "-")
                     ((""
                       (lemma "deriv_diff_fun[real_abs_lt1]"
                        ("ff1" "LAMBDA (x: real_abs_lt1): pi / 2" "ff2"
                         "LAMBDA (x: real_abs_lt1): asin(x)"))
                       (("" (expand "-")
                         (("" (replace -3 -1)
                           (("" (simplify -1)
                             (("" (replace -1 1) (("" (assert) nil nil)) nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        nil shostak)
       (deriv_acos_fun-3 nil 3425656808
        ("" (lemma "asin_derivable_fun")
         (("" (expand "acos" 1)
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "deriv_const_fun[real_abs_lt1]" ("b" "pi/2"))
               (("" (expand "const_fun")
                 ((""
                   (lemma "diff_derivable_fun[real_abs_lt1]"
                    ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                     "LAMBDA (x: real_abs_lt1): asin(x)"))
                   (("" (assert)
                     (("" (expand "-")
                       ((""
                         (lemma "deriv_diff_fun[real_abs_lt1]"
                          ("ff1" "LAMBDA (x: real_abs_lt1): pi / 2" "ff2"
                           "LAMBDA (x: real_abs_lt1): asin(x)"))
                         (("" (expand "-")
                           (("" (replace -3 -1)
                             (("" (simplify -1)
                               (("" (replace -1 1) (("" (assert) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
         (acos const-decl "nnreal_le_pi" acos nil)
         (deriv_const_fun formula-decl nil derivatives analysis)
         (minus_real_is_real application-judgement "real" reals nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (deriv_diff_fun formula-decl nil derivatives analysis)
         (derivable? const-decl "bool" derivatives analysis)
         (deriv_fun type-eq-decl nil derivatives analysis)
         (real_times_real_is_real application-judgement "real" reals nil)
         (- const-decl "[T -> real]" real_fun_ops reals)
         (asin const-decl "real_abs_le_pi2" asin nil)
         (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types nil)
         (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
         (<= const-decl "bool" reals nil)
         (diff_derivable_fun formula-decl nil derivatives analysis)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (const_derivable_fun formula-decl nil derivatives analysis)
         (/= const-decl "boolean" notequal nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (> const-decl "bool" reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (cos const-decl "real" sincos_def nil)
         (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
          pi_def nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (< const-decl "bool" reals nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
         (asin_derivable_fun formula-decl nil asin nil))
        nil)
       (deriv_acos_fun-2 nil 3352188982
        ("" (lemma "asin_derivable2")
         (("" (expand "acos" 1)
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "deriv_const_fun[real_abs_lt1]" ("b" "pi/2"))
               (("" (expand "const_fun")
                 ((""
                   (lemma "diff_derivable_fun[real_abs_lt1]"
                    ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                     "LAMBDA (x: real_abs_lt1): asin(x)"))
                   (("" (assert)
                     (("" (expand "-")
                       ((""
                         (lemma "deriv_diff_fun[real_abs_lt1]"
                          ("ff1" "LAMBDA (x: real_abs_lt1): pi / 2" "ff2"
                           "LAMBDA (x: real_abs_lt1): asin(x)"))
                         (("" (expand "-")
                           (("" (replace -3 -1)
                             (("" (simplify -1)
                               (("" (replace -1 1)
                                 (("" (assert)
                                   (("" (apply-extensionality 1 :hide? t)
                                     ((""
                                       (expand "deriv")
                                       (("" (assert) nil nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((const_derivable_fun formula-decl nil derivatives analysis)
         (const_fun const-decl "[T -> real]" real_fun_ops reals)
         (deriv_diff_fun formula-decl nil derivatives analysis)
         (deriv_fun type-eq-decl nil derivatives analysis)
         (deriv const-decl "[T -> real]" derivatives analysis)
         (asin const-decl "real_abs_le_pi2" asin nil)
         (diff_derivable_fun formula-decl nil derivatives analysis)
         (deriv_const_fun formula-decl nil derivatives analysis))
        nil)
       (deriv_acos_fun-1 nil 3262871928
        ("" (lemma "asin_derivable2")
         (("" (expand "acos" 1)
           (("" (lemma "const_derivable_fun[real_abs_lt1]" ("b" "pi/2"))
             (("" (lemma "deriv_const_fun[real_abs_lt1]" ("b" "pi/2"))
               (("" (expand "const_fun")
                 ((""
                   (lemma "diff_derivable_fun"
                    ("f1" "LAMBDA (x: real_abs_lt1): pi / 2" "f2"
                     "LAMBDA (x: real_abs_lt1): asin(x)"))
                   (("" (assert)
                     (("" (expand "-")
                       ((""
                         (lemma "deriv_diff_fun"
                          ("ff1" "LAMBDA (x: real_abs_lt1): pi / 2" "ff2"
                           "LAMBDA (x: real_abs_lt1): asin(x)"))
                         (("" (expand "-")
                           (("" (replace -3 -1)
                             (("" (simplify -1)
                               (("" (replace -1 1) (("" (assert) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((deriv_const_fun formula-decl nil derivatives analysis)
         (asin const-decl "real_abs_le_pi2" asin nil)
         (diff_derivable_fun formula-decl nil derivatives analysis)
         (deriv_fun type-eq-decl nil derivatives analysis)
         (deriv_diff_fun formula-decl nil derivatives analysis)
         (const_fun const-decl "[T -> real]" real_fun_ops reals)
         (const_derivable_fun formula-decl nil derivatives analysis))
        shostak))
      (deriv_acos_prep 0
       (deriv_acos_prep-1 nil 3707228907
        ("" (skosimp*)
         (("" (typepred "x!1")
           (("" (mult-ineq -2 -2)
             (("1" (assert) (("1" (expand "sq") (("1" (assert) nil nil)) nil))
               nil)
              ("2" (grind) nil nil))
             nil))
           nil))
         nil)
        ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (< const-decl "bool" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (number nonempty-type-decl nil numbers nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (boolean nonempty-type-decl nil booleans nil)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (sq const-decl "nonneg_real" sq reals)
         (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
          real_defs nil)
         (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
          real_defs nil)
         (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
          real_defs nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (lt_times_lt_any1 formula-decl nil extra_real_props nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (minus_odd_is_odd application-judgement "odd_int" integers nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
         (posint_times_posint_is_posint application-judgement "posint"
          integers nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
        nil))
      (deriv_acos_TCC1 0
       (deriv_acos_TCC1-2 nil 3707228614
        ("" (skosimp*)
         (("" (lemma "deriv_acos_prep")
           (("" (inst?) (("" (assert) nil nil)) nil)) nil))
         nil)
        ((deriv_acos_prep formula-decl nil acos nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (< const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        nil
        (deriv_acos subtype "(number_fields.-)(1, sq.sq(acos.x))"
         "nonneg_real"))
       (deriv_acos_TCC1-1 nil 3707226427
        ("" (skosimp*) (("" (postpone) nil nil)) nil) nil nil
        (deriv_acos subtype "(number_fields.-)(1, sq.sq(acos.x))"
         "nonneg_real")))
      (deriv_acos_TCC2 0
       (deriv_acos_TCC2-1 nil 3707226427
        ("" (skosimp*)
         (("" (lemma "deriv_acos_prep")
           (("" (inst?) (("" (assert) nil nil)) nil)) nil))
         nil)
        ((deriv_acos_prep formula-decl nil acos nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (< const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        nil
        (deriv_acos subtype "sqrt.sqrt((number_fields.-)(1, sq.sq(acos.x)))"
         "nznum")))
      (deriv_acos 0
       (deriv_acos-1 nil 3707226427
        ("" (lemma "deriv_acos_fun")
         (("" (lemma "deriv_asin_fun")
           (("" (replace -1)
             (("" (hide -1)
               (("" (replace -1) (("" (hide -1) (("" (assert) nil nil)) nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((deriv_asin_fun formula-decl nil asin nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (deriv_acos_fun formula-decl nil acos nil))
        shostak))
      (cos_atan 0
       (cos_atan-1 nil 3707555638
        ("" (skosimp*)
         (("" (name "Y" "atan(x!1)")
           (("" (case "tan(Y) = x!1")
             (("1" (expand "tan")
               (("1" (cross-mult -1)
                 (("1" (case "sq(cos(Y))*sq(x!1) = 1-sq(cos(Y))")
                   (("1" (cross-mult 1)
                     (("1" (assert)
                       (("1" (replace -3)
                         (("1" (case "sq(cos(Y))*(1+sq(x!1)) = 1")
                           (("1" (hide -2)
                             (("1"
                               (case "sqrt(sq(cos(Y)) * (1 + sq(x!1))) = sqrt(1)")
                               (("1" (rewrite "sqrt_times")
                                 (("1" (rewrite "sqrt_sq_abs")
                                   (("1" (expand "abs")
                                     (("1"
                                       (lift-if)
                                       (("1"
                                         (ground)
                                         (("1"
                                           (lemma "atan_gt_0")
                                           (("1"
                                             (inst?)
                                             (("1"
                                               (assert)
                                               (("1"
                                                 (lemma "cos_gt_0")
                                                 (("1"
                                                   (inst?)
                                                   (("1" (assert) nil nil))
                                                   nil))
                                                 nil))
                                               nil))
                                             nil))
                                           nil))
                                         nil))
                                       nil))
                                     nil))
                                   nil))
                                 nil)
                                ("2" (replace -1) (("2" (propax) nil nil))
                                 nil))
                               nil))
                             nil)
                            ("2" (assert) nil nil))
                           nil))
                         nil))
                       nil))
                     nil)
                    ("2" (assert)
                     (("2" (hide 2)
                       (("2" (lemma "sin2_cos2")
                         (("2" (inst?)
                           (("2" (assert)
                             (("2" (replace -2 -)
                               (("2" (rewrite "sq_times")
                                 (("2" (assert) nil nil)) nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("2" (assert)
               (("2" (hide 2)
                 (("2" (typepred "atan(x!1)")
                   (("2" (expand "tan_restrict") (("2" (assert) nil nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("3" (lemma "tan_prep") (("3" (inst?) nil nil)) nil))
             nil))
           nil))
         nil)
        ((atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
               nil)
         (tan_restrict const-decl "real" trig_basic nil)
         (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
         (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
          pi_def nil)
         (cos const-decl "real" sincos_def nil)
         (> const-decl "bool" reals nil)
         (- const-decl "[numfield -> numfield]" number_fields nil)
         (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
         (nznum nonempty-type-eq-decl nil number_fields nil)
         (/= const-decl "boolean" notequal nil)
         (numfield nonempty-type-eq-decl nil number_fields nil)
         (< const-decl "bool" reals nil)
         (AND const-decl "[bool, bool -> bool]" booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]" number_fields
          nil)
         (real nonempty-type-from-decl nil reals nil)
         (= const-decl "[T, T -> boolean]" equalities nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (tan_prep formula-decl nil trig_basic nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (real_minus_real_is_real application-judgement "real" reals nil)
         (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (>= const-decl "bool" reals nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (sq const-decl "nonneg_real" sq reals)
         (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (sqrt_sq_abs formula-decl nil sqrt reals)
         (atan_gt_0 formula-decl nil atan nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
          real_types nil)
         (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
          real_types nil)
         (posreal_div_posreal_is_posreal application-judgement "posreal"
          real_types nil)
         (cos_gt_0 formula-decl nil trig_basic nil)
         (minus_real_is_real application-judgement "real" reals nil)
         (sqrt_1 formula-decl nil sqrt reals)
         (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
              nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (sqrt_times formula-decl nil sqrt reals)
         (sqrt_pos application-judgement "posreal" sqrt reals)
         (posreal_plus_nnreal_is_posreal application-judgement "posreal"
          real_types nil)
         (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
         (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
         (nnreal type-eq-decl nil real_types nil)
         (div_cancel4 formula-decl nil real_props nil)
         (sq_times formula-decl nil sq reals)
         (sin2_cos2 formula-decl nil sincos_def nil)
         (real_times_real_is_real application-judgement "real" reals nil)
         (sin_range application-judgement "real_abs_le1" sincos nil)
         (cos_range application-judgement "real_abs_le1" sincos nil)
         (sin const-decl "real" sincos_def nil)
         (nonzero_real nonempty-type-eq-decl nil reals nil)
         (div_cancel3 formula-decl nil real_props nil)
         (real_div_nzreal_is_real application-judgement "real" reals nil)
         (tan const-decl "real" trig_basic nil)
         (Tan? const-decl "bool" trig_basic nil)
         (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
          nil)
         (pi_bound name-judgement
          "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
        nil)))


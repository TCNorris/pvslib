(trig_inverses
 (IMP_derivative_props_TCC1 0
  (IMP_derivative_props_TCC1-1 nil 3708362117 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (IMP_derivative_props assuming
    "analysis@derivative_props[real_abs_lt1].derivative_props"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_derivative_props_TCC2 0
  (IMP_derivative_props_TCC2-1 nil 3708362117
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (inst-cp + "1/2")
        (("" (inst-cp + "1/3") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (IMP_derivative_props assuming
    "analysis@derivative_props[real_abs_lt1].derivative_props"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (arcsin_eq_asin 0
  (arcsin_eq_asin-2 "" 3790092566
   ("" (apply-extensionality 1 :hide? t)
    (("" (case-replace "x!1 = 1")
      (("1" (grind) nil nil)
       ("2" (case-replace "x!1 = -1")
        (("1" (grind) nil nil)
         ("2" (lemma "derivs_funs_equal[real_abs_lt1]")
          (("2"
            (inst - "0" "1/2" "arc_sin" "(LAMBDA (a: real_abs_lt1): asin(a))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "arcsin")
                  (("1" (expand "asin")
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (lemma "deriv_arc_sin_fun")
                    (("2" (flatten)
                      (("2" (replace -2)
                        (("2" (lemma "deriv_asin_fun")
                          (("2" (replace -1) (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst + "0")
                  (("3" (rewrite "asin_0")
                    (("3" (rewrite "arc_sin_0") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "asin_derivable_fun") (("2" (propax) nil nil)) nil)
             ("3" (lemma "arc_sin_derivable") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (arcsin_eq_asin-1 nil 3707131625
   ("" (apply-extensionality 1 :hide? t)
    (("" (case-replace "x!1 = 1")
      (("1" (grind) nil nil)
       ("2" (case-replace "x!1 = -1")
        (("1" (grind) nil nil)
         ("2" (lemma "derivs_funs_equal[real_abs_lt1]")
          (("1"
            (inst - "0" "1/2" "arc_sin" "(LAMBDA (a: real_abs_lt1): asin(a))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "arcsin")
                  (("1" (expand "asin")
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (lemma "deriv_arc_sin_fun")
                    (("2" (flatten)
                      (("2" (replace -2)
                        (("2" (lemma "deriv_asin_fun")
                          (("2" (replace -1) (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst + "0")
                  (("3" (rewrite "asin_0")
                    (("3" (rewrite "arc_sin_0") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "asin_derivable_fun") (("2" (propax) nil nil)) nil)
             ("3" (lemma "arc_sin_derivable") (("3" (propax) nil nil)) nil))
            nil)
           ("2" (expand "connected?")
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (arc_sin_derivable formula-decl nil arcsin nil)
    (asin_derivable_fun formula-decl nil asin nil)
    (arc_sin_0 formula-decl nil arcsin nil) (asin_0 formula-decl nil asin nil)
    (deriv_asin_fun formula-decl nil asin nil)
    (deriv_arc_sin_fun formula-decl nil arcsin nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (derivable? const-decl "bool" derivatives analysis)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (arcsin const-decl "real_abs_le_pi2" arcsin nil)
    (asin const-decl "real_abs_le_pi2" asin nil)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (arccos_eq_acos 0
  (arccos_eq_acos-4 "" 3790092566
   ("" (apply-extensionality 1 :hide? t)
    (("" (case-replace "x!1 = 1")
      (("1" (grind) nil nil)
       ("2" (case-replace "x!1 = -1")
        (("1" (grind) nil nil)
         ("2" (lemma "derivs_funs_equal[real_abs_lt1]")
          (("2"
            (inst - "0" "1/2" "arc_cos" "(LAMBDA (a: real_abs_lt1): acos(a))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "arccos")
                  (("1" (expand "acos")
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (lemma "deriv_arc_cos_fun")
                    (("2" (flatten)
                      (("2" (replace -2)
                        (("2" (lemma "deriv_acos")
                          (("2" (replace -1) (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst + "0")
                  (("3" (rewrite "acos_0")
                    (("3" (lemma "arc_cos_0") (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "acos_derivable_fun") (("2" (propax) nil nil)) nil)
             ("3" (lemma "arc_cos_derivable") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (arccos_eq_acos-3 nil 3707226624
   ("" (apply-extensionality 1 :hide? t)
    (("" (case-replace "x!1 = 1")
      (("1" (grind) nil nil)
       ("2" (case-replace "x!1 = -1")
        (("1" (grind) nil nil)
         ("2" (lemma "derivs_funs_equal[real_abs_lt1]")
          (("1"
            (inst - "0" "1/2" "arc_cos" "(LAMBDA (a: real_abs_lt1): acos(a))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "arccos")
                  (("1" (expand "acos")
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (lemma "deriv_arc_cos_fun")
                    (("2" (flatten)
                      (("2" (replace -2)
                        (("2" (lemma "deriv_acos")
                          (("2" (replace -1) (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst + "0")
                  (("3" (rewrite "acos_0")
                    (("3" (lemma "arc_cos_0") (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "acos_derivable_fun") (("2" (propax) nil nil)) nil)
             ("3" (lemma "arc_cos_derivable") (("3" (propax) nil nil)) nil))
            nil)
           ("2" (expand "connected?")
            (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (asin const-decl "real_abs_le_pi2" asin nil)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (arc_cos_derivable formula-decl nil arccos nil)
    (acos_derivable_fun formula-decl nil acos nil)
    (arc_cos_0 formula-decl nil arccos nil) (acos_0 formula-decl nil acos nil)
    (deriv_acos formula-decl nil acos nil)
    (deriv_arc_cos_fun formula-decl nil arccos nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (derivable? const-decl "bool" derivatives analysis)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (arccos const-decl "nnreal_le_pi" arccos nil)
    (acos const-decl "nnreal_le_pi" acos nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (arccos_eq_acos-2 nil 3707226521
   ("" (apply-extensionality 1 :hide? t)
    (("" (case-replace "x!1 = 1")
      (("1" (grind) nil)
       ("2" (case-replace "x!1 = -1")
        (("1" (grind) nil)
         ("2" (lemma "derivs_funs_equal[real_abs_lt1]")
          (("1"
            (inst - "0" "1/2" "arc_cos" "(LAMBDA (a: real_abs_lt1): acos(a))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "arccos")
                  (("1" (expand "acos")
                    (("1" (replace -1) (("1" (assert) nil)))))))
                 ("2" (skosimp*)
                  (("2" (lemma "deriv_arc_cos_fun")
                    (("2" (flatten)
                      (("2" (replace -2)
                        (("2" (lemma "deriv_acos")
                          (("2" (replace -1) (("2" (propax) nil)))))))))))))
                 ("3" (inst + "0")
                  (("3" (rewrite "acos_0")
                    (("3" (rewrite "arc_cos_0") nil)))))))))
             ("2" (lemma "acos_derivable_fun") (("2" (propax) nil)))
             ("3" (lemma "arc_cos_derivable") (("3" (propax) nil)))))
           ("2" (expand "connected?")
            (("2" (skosimp*) (("2" (assert) nil))))))))))))
    nil)
   nil nil)
  (arccos_eq_acos-1 nil 3707226135
   ("" (apply-extensionality 1 :hide? t)
    (("" (case-replace "x!1 = 1")
      (("1" (grind) nil)
       ("2" (case-replace "x!1 = -1")
        (("1" (grind) nil)
         ("2" (lemma "derivs_funs_equal[real_abs_lt1]")
          (("1"
            (inst - "0" "1/2" "arc_cos" "(LAMBDA (a: real_abs_lt1): acos(a))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "arccos")
                  (("1" (expand "acos")
                    (("1" (replace -1) (("1" (assert) nil)))))))
                 ("2" (skosimp*)
                  (("2" (lemma "deriv_arc_cos_fun")
                    (("2" (flatten)
                      (("2" (replace -2)
                        (("2" (lemma "deriv_acos_fun")
                          (("2" (replace -1) (("2" (propax) nil)))))))))))))
                 ("3" (inst + "0")
                  (("3" (rewrite "acos_0")
                    (("3" (rewrite "arc_cos_0") nil)))))))))
             ("2" (lemma "acos_derivable_fun") (("2" (propax) nil)))
             ("3" (lemma "arc_cos_derivable") (("3" (propax) nil)))))
           ("2" (expand "connected?")
            (("2" (skosimp*) (("2" (assert) nil))))))))))))
    nil)
   nil nil))
 (arccos_arcsin 0
  (arccos_arcsin-1 nil 3707470711
   ("" (skosimp*)
    (("" (case "y!1 = 1")
      (("1" (expand "arccos")
        (("1" (expand "arcsin") (("1" (lift-if) (("1" (ground) nil nil)) nil))
          nil))
        nil)
       ("2" (case "y!1 = -1")
        (("1" (expand "arccos")
          (("1" (assert)
            (("1" (replace -1)
              (("1" (expand "arcsin") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (expand "arccos")
          (("2" (expand "arcsin")
            (("2" (assert)
              (("2" (name "X" "arc_cos(y!1)")
                (("2" (case "cos(X) = y!1")
                  (("1" (lemma "sin_shift")
                    (("1" (inst - "X")
                      (("1" (replace -2)
                        (("1" (replace - * rl)
                          (("1" (rewrite "arc_sin_sin")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (arcsin const-decl "real_abs_le_pi2" arcsin nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (arccos const-decl "nnreal_le_pi" arccos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (arc_sin_sin formula-decl nil arcsin nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_shift formula-decl nil sincos nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil))
   nil))
 (arctan_prep 0
  (arctan_prep-1 nil 3408971369
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (typepred "x!1")
        (("" (lemma "cos_eq_0_2pi")
          (("" (inst?)
            (("" (assert)
              (("" (lemma "cos_period")
                (("" (inst?)
                  (("" (inst -1 "1")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (lemma "cos_eq_0_2pi")
                          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (cos_eq_0_2pi formula-decl nil sincos nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cos_period formula-decl nil sincos nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil))
 (arctan_TCC1 0
  (arctan_TCC1-1 nil 3705850384
   ("" (skosimp*) (("" (lemma "tan_prep") (("" (inst?) nil nil)) nil)) nil)
   ((tan_prep formula-decl nil trig_basic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil (arctan subtype "trig_inverses.x" "(trig_basic.Tan?)")))
 (arctan_TCC2 0
  (arctan_TCC2-1 nil 3706514856
   ("" (skosimp*) (("" (rewrite "tan_atan") nil nil)) nil)
   ((tan_atan formula-decl nil atan nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil
   (arctan subtype "atan.atan(trig_inverses.y)"
    "{x: trig_types.real_abs_lt_pi2 | trig_inverses.y = trig_basic.tan(x)}")))
 (tan_arctan_TCC1 0
  (tan_arctan_TCC1-1 nil 3408970754
   ("" (skosimp*)
    (("" (expand "arctan")
      (("" (assert)
        (("" (typepred "atan(y!1)")
          (("" (lemma "arctan_prep") (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((arctan const-decl "{x: real_abs_lt_pi2 | y = tan(x)}" trig_inverses nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (arctan_prep formula-decl nil trig_inverses nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil
   (tan_arctan subtype "trig_inverses.arctan(trig_inverses.y)"
    "(trig_basic.Tan?)")))
 (tan_arctan 0
  (tan_arctan-1 nil 3408971181
   ("" (skosimp*)
    (("" (expand "arctan") (("" (rewrite "tan_atan") nil nil)) nil)) nil)
   ((arctan const-decl "{x: real_abs_lt_pi2 | y = tan(x)}" trig_inverses nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tan_atan formula-decl nil atan nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (arctan_tan 0
  (arctan_tan-2 "" 3790092567
   ("" (skosimp*)
    (("" (expand "arctan") (("" (rewrite "atan_tan") nil nil)) nil)) nil)
   nil shostak)
  (arctan_tan-1 nil 3408971195
   ("" (skosimp*)
    (("" (expand "arctan")
      (("" (rewrite "atan_tan") (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((arctan const-decl "{x: real_abs_lt_pi2 | y = tan(x)}" trig_inverses nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_tan formula-decl nil atan nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (sin_asin 0
  (sin_asin-1 nil 3706521139
   ("" (skosimp*)
    (("" (lemma "arcsin_eq_asin")
      (("" (replace -1 * rl)
        (("" (hide -1)
          (("" (case-replace "x!1 = 1")
            (("1" (expand "arcsin") (("1" (rewrite "sin_pi2") nil nil)) nil)
             ("2" (case-replace "x!1 = -1")
              (("1" (expand "arcsin")
                (("1" (lemma "sin_pi2")
                  (("1" (lemma "sin_neg")
                    (("1" (inst - "pi/2") (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (lemma "sin_arc_sin")
                (("2" (inst?)
                  (("1" (expand "arcsin") (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arcsin_eq_asin formula-decl nil trig_inverses nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_neg formula-decl nil sincos_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "real_abs_le1" trig_inverses nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (sin_arc_sin formula-decl nil arcsin nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (arcsin const-decl "real_abs_le_pi2" arcsin nil)
    (sin_pi2 formula-decl nil sincos nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cos_acos 0
  (cos_acos-2 nil 3707227522
   ("" (skosimp*)
    (("" (lemma "arccos_eq_acos")
      (("" (replace -1 * rl)
        (("" (hide -1)
          (("" (case-replace "x!1 = 1")
            (("1" (expand "arccos") (("1" (rewrite "cos_0") nil nil)) nil)
             ("2" (case-replace "x!1 = -1")
              (("1" (expand "arccos")
                (("1" (lemma "cos_pi2")
                  (("1" (lemma "cos_neg")
                    (("1" (inst - "pi/2")
                      (("1" (assert) (("1" (rewrite "cos_pi") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "cos_arc_cos")
                (("2" (inst?)
                  (("1" (expand "arccos") (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arccos_eq_acos formula-decl nil trig_inverses nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi2 formula-decl nil sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos_pi formula-decl nil sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (cos_neg formula-decl nil sincos_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "real_abs_le1" trig_inverses nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (cos_arc_cos formula-decl nil arccos nil)
    (arccos const-decl "nnreal_le_pi" arccos nil)
    (cos_0 formula-decl nil sincos_def nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (cos_acos-1 nil 3707144562 ("" (skosimp*) (("" (postpone) nil nil)) nil) nil
   shostak))
 (tan_atan_TCC1 0
  (tan_atan_TCC1-1 nil 3704810503
   ("" (skosimp*) (("" (lemma "atan_prep") (("" (inst?) nil nil)) nil)) nil)
   ((atan_prep formula-decl nil atan nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil (tan_atan subtype "atan.atan(trig_inverses.a)" "(trig_basic.Tan?)")))
 (tan_atan 0
  (tan_atan-1 nil 3705134411
   ("" (skosimp*)
    (("" (lemma "atan_def") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((atan_def formula-decl nil atan nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil))
 (asin_sin 0
  (asin_sin-1 nil 3705134448
   ("" (skosimp*)
    (("" (lemma "arcsin_eq_asin")
      (("" (replace -1 * rl)
        (("" (hide -1)
          (("" (typepred "x!1")
            (("" (case-replace "x!1 = pi/2")
              (("1" (rewrite "sin_pi2")
                (("1" (expand "arcsin") (("1" (propax) nil nil)) nil)) nil)
               ("2" (case-replace "x!1 = -pi/2")
                (("1" (lemma "sin_pi2")
                  (("1" (lemma "sin_neg")
                    (("1" (inst - "pi/2")
                      (("1" (assert)
                        (("1" (replace -1)
                          (("1" (expand "arcsin") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "arc_sin_sin")
                  (("2" (inst?)
                    (("1" (assert)
                      (("1" (expand "arcsin")
                        (("1" (case "sin(x!1) = -1 IMPLIES x!1 = -pi/2")
                          (("1" (case "sin(x!1) = 1 IMPLIES x!1 = pi/2")
                            (("1" (ground) nil nil)
                             ("2" (hide -1)
                              (("2" (flatten)
                                (("2" (hide 4)
                                  (("2" (lemma "sin_eq_1")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (case "i!1 = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case "i!1 >= 1")
                                              (("1"
                                                (mult-by -1 "2*pi")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "i!1 <= -1")
                                                (("1"
                                                  (mult-by -1 "2*pi")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 4)
                            (("2" (flatten)
                              (("2" (lemma "sin_eq_m1")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (skosimp*)
                                      (("2"
                                        (case "i!1 = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "i!1 >= 1")
                                          (("1"
                                            (mult-by -1 "2*pi")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case "i!1 <= -1")
                                            (("1"
                                              (mult-by -1 "2*pi")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arcsin_eq_asin formula-decl nil trig_inverses nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (arcsin const-decl "real_abs_le_pi2" arcsin nil)
    (sin_pi2 formula-decl nil sincos nil)
    (arc_sin_sin formula-decl nil arcsin nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sin const-decl "real" sincos_def nil) (>= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_eq_1 formula-decl nil trig_basic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_eq_m1 formula-decl nil trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (x!1 skolem-const-decl "real_abs_le_pi2" trig_inverses nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_neg formula-decl nil sincos_def nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_le_pi2 nonempty-type-eq-decl nil trig_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil))
 (acos_cos 0
  (acos_cos-3 nil 3707227635
   ("" (skosimp*)
    (("" (lemma "arccos_eq_acos")
      (("" (replace -1 * rl)
        (("" (hide -1)
          (("" (typepred "x!1")
            (("" (case-replace "x!1 = pi")
              (("1" (expand "arccos") (("1" (rewrite "cos_pi") nil nil)) nil)
               ("2" (case-replace "x!1 = 0")
                (("1" (rewrite "cos_0")
                  (("1" (assert)
                    (("1" (expand "arccos") (("1" (propax) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "arc_cos_cos")
                  (("2" (inst?)
                    (("1" (assert)
                      (("1" (expand "arccos")
                        (("1" (case "cos(x!1) = -1 IMPLIES x!1 = pi")
                          (("1" (case "cos(x!1) = 1 IMPLIES x!1 = 0")
                            (("1" (ground) nil nil)
                             ("2" (hide -1)
                              (("2" (flatten)
                                (("2" (hide 4)
                                  (("2" (lemma "cos_eq_1")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (case "i!1 = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case "i!1 >= 1")
                                              (("1"
                                                (mult-by -1 "2*pi")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "i!1 <= -1")
                                                (("1"
                                                  (mult-by -1 "2*pi")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 4)
                            (("2" (flatten)
                              (("2" (lemma "cos_eq_m1")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (skosimp*)
                                      (("2"
                                        (case "i!1 = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "i!1 >= 1")
                                          (("1"
                                            (mult-by -1 "2*pi")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case "i!1 <= -1")
                                            (("1"
                                              (mult-by -1 "2*pi")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arccos_eq_acos formula-decl nil trig_inverses nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi formula-decl nil sincos nil)
    (arccos const-decl "nnreal_le_pi" arccos nil)
    (arc_cos_cos formula-decl nil arccos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_eq_1 formula-decl nil trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_eq_m1 formula-decl nil trig_basic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (x!1 skolem-const-decl "nnreal_le_pi" trig_inverses nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_0 formula-decl nil sincos_def nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types nil))
   nil)
  (acos_cos-2 nil 3707227575
   ("" (skosimp*)
    (("" (lemma "arccos_eq_acos")
      (("" (replace -1 * rl)
        (("" (hide -1)
          (("" (typepred "x!1")
            (("" (case-replace "x!1 = pi/2")
              (("1" (rewrite "cos_pi2")
                (("1" (expand "arccos") (("1" (rewrite "arc_cos_0") nil nil))
                  nil))
                nil)
               ("2" (case-replace "x!1 = -pi/2")
                (("1" (lemma "cos_pi2")
                  (("1" (lemma "cos_neg")
                    (("1" (inst - "pi/2") (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (lemma "arc_cos_cos")
                  (("2" (inst?)
                    (("1" (assert)
                      (("1" (expand "arccos")
                        (("1" (case "cos(x!1) = -1 IMPLIES x!1 = -pi/2")
                          (("1" (case "cos(x!1) = 1 IMPLIES x!1 = pi/2")
                            (("1" (ground) nil nil)
                             ("2" (hide -1)
                              (("2" (flatten)
                                (("2" (hide 4)
                                  (("2" (lemma "cos_eq_1")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (case "i!1 = 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (case "i!1 >= 1")
                                              (("1"
                                                (mult-by -1 "2*pi")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (case "i!1 <= -1")
                                                (("1"
                                                  (mult-by -1 "2*pi")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 4)
                            (("2" (flatten)
                              (("2" (lemma "cos_eq_m1")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (skosimp*)
                                      (("2"
                                        (case "i!1 = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "i!1 >= 1")
                                          (("1"
                                            (mult-by -1 "2*pi")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (case "i!1 <= -1")
                                            (("1"
                                              (mult-by -1 "2*pi")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) (("2" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (acos_cos-1 nil 3707144573 ("" (skosimp*) (("" (postpone) nil nil)) nil) nil
   shostak))
 (atan_tan 0
  (atan_tan-1 nil 3705909340
   ("" (skosimp*)
    (("" (lemma "atan_def") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((atan_def formula-decl nil atan nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (tan const-decl "real" trig_basic nil)
    (Tan? const-decl "bool" trig_basic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (arc_sin_cos 0
  (arc_sin_cos-1 nil 3707558496
   ("" (skosimp*)
    (("" (case "c!1=0")
      (("1" (replace -1)
        (("1" (inst + "0")
          (("1" (rewrite "zero_times1" 1)
            (("1" (lemma "sq_eq_0" ("a" "a!1"))
              (("1" (lemma "sq_eq_0" ("a" "b!1"))
                (("1" (rewrite "sq_0") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "sq(b!1)")
        (("2" (typepred "sq(a!1)")
          (("2" (lemma "sq_nz_pos" ("nz" "c!1"))
            (("1" (case "sq(a!1)<=sq(c!1)")
              (("1"
                (lemma "div_mult_pos_le1"
                 ("z" "sq(a!1)" "py" "sq(c!1)" "x" "1"))
                (("1" (lemma "sq_div" ("a" "a!1" "d" "c!1"))
                  (("1" (assert)
                    (("1" (replace -1 -2 rl)
                      (("1" (hide -1)
                        (("1" (lemma "sq_le_abs" ("a" "a!1/c!1" "b" "1"))
                          (("1" (rewrite "sq_1")
                            (("1" (replace -2 -1)
                              (("1" (flatten -1)
                                (("1" (expand "abs" -1 2)
                                  (("1" (case "sq(b!1) <= sq(c!1)")
                                    (("1"
                                      (lemma
                                       "div_mult_pos_le1"
                                       ("z" "sq(b!1)" "py" "sq(c!1)" "x" "1"))
                                      (("1"
                                        (replace -2 -1)
                                        (("1"
                                          (flatten -1)
                                          (("1"
                                            (lemma
                                             "sq_le_abs"
                                             ("a" "b!1/c!1" "b" "1"))
                                            (("1"
                                              (rewrite "sq_div" -1)
                                              (("1"
                                                (rewrite "sq_1" -1)
                                                (("1"
                                                  (replace -2 -1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand "abs" -1 2)
                                                      (("1"
                                                        (case
                                                         "sq(a!1/c!1)+sq(b!1/c!1) =1")
                                                        (("1"
                                                          (case
                                                           "FORALL (x,y: {x: nnreal | x <= 1}): sq(x) + sq(y) = 1 => (EXISTS (z: {z: nnreal | z <= pi / 2}): x = cos(z) & y = sin(z))")
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             (-3 -6))
                                                            (("1"
                                                              (case
                                                               "b!1 / c!1 < 0")
                                                              (("1"
                                                                (case
                                                                 "a!1 / c!1 < 0")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "-(a!1/c!1)"
                                                                   "-(b!1/c!1)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_neg")
                                                                    (("1"
                                                                      (rewrite
                                                                       "sq_neg")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "z!1+pi")
                                                                            (("1"
                                                                              (lemma
                                                                               "neg_cos"
                                                                               ("a"
                                                                                "z!1"))
                                                                              (("1"
                                                                                (lemma
                                                                                 "neg_sin"
                                                                                 ("a"
                                                                                  "z!1"))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "-(b!1/c!1)"
                                                                   "a!1/c!1")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_neg")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (lemma
                                                                           "cos_sin"
                                                                           ("a"
                                                                            "z!1-pi/2"))
                                                                          (("1"
                                                                            (lemma
                                                                             "sin_cos"
                                                                             ("a"
                                                                              "z!1-pi/2"))
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "z!1-pi/2")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "a!1 / c!1 < 0")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "b!1/c!1"
                                                                   "-(a!1/c!1)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_neg")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skosimp*)
                                                                        (("1"
                                                                          (rewrite
                                                                           "cos_sin"
                                                                           -2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "sin_cos"
                                                                             -3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "pi/2+z!1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "a!1/c!1"
                                                                   "b!1/c!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skosimp*)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "z!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (typepred
                                                                 "x!1")
                                                                (("2"
                                                                  (typepred
                                                                   "y!1")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "acos(x!1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "cos_acos")
                                                                      (("1"
                                                                        (lemma
                                                                         "sin2_cos2")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (rewrite
                                                                             "cos_acos")
                                                                            (("1"
                                                                              (case
                                                                               "sq(sin(acos(x!1))) = sq(y!1)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sq_eq_abs")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "abs")
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sin_lt")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "acos(x!1)"
                                                                                                     "0")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sin_0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "acos_strict_decreasing")
                                                                      (("2"
                                                                        (expand
                                                                         "strict_decreasing?")
                                                                        (("2"
                                                                          (expand
                                                                           ">="
                                                                           -4)
                                                                          (("2"
                                                                            (expand
                                                                             "<="
                                                                             -4)
                                                                            (("2"
                                                                              (split
                                                                               -4)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "0"
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "acos_0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1
                                                                                 *
                                                                                 rl)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "acos_0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (rewrite "sq_div")
                                                            (("2"
                                                              (rewrite
                                                               "sq_div")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_eq_0 formula-decl nil sq reals) (sq_0 formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (zero_times1 formula-decl nil real_props nil)
    (cos const-decl "real" sincos_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (<= const-decl "bool" reals nil) (sq_div formula-decl nil sq reals)
    (sq_le_abs formula-decl nil sq reals)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin const-decl "real" sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_sin formula-decl nil sincos nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_cos formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (a!1 skolem-const-decl "real" trig_inverses nil)
    (c!1 skolem-const-decl "real" trig_inverses nil)
    (b!1 skolem-const-decl "real" trig_inverses nil)
    (neg_cos formula-decl nil sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (neg_sin formula-decl nil sincos nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_neg formula-decl nil sq reals)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (acos_strict_decreasing formula-decl nil acos nil)
    (acos_0 formula-decl nil acos nil)
    (strict_decreasing? const-decl "bool" real_fun_preds reals)
    (cos_acos formula-decl nil trig_inverses nil)
    (sin_lt formula-decl nil trig_ineq nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_0 formula-decl nil sincos_def nil)
    (sq_eq_abs formula-decl nil sq reals)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (x!1 skolem-const-decl "{x: nnreal | x <= 1}" trig_inverses nil)
    (acos const-decl "nnreal_le_pi" acos nil)
    (nnreal_le_pi nonempty-type-eq-decl nil trig_types nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_1 formula-decl nil sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (sq_nz_pos judgement-tcc nil sq reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals))
   nil))
 (pythagorean 0
  (pythagorean-1 nil 3707564466
   ("" (skosimp*)
    (("" (lemma "arc_sin_cos" ("a" "a!1" "b" "b!1" "c" "nnc!1"))
      (("" (assert)
        (("" (skosimp*)
          (("" (inst + "d!1")
            (("" (lemma "sin2_cos2" ("a" "d!1"))
              (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (arc_sin_cos formula-decl nil trig_inverses nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)))


(sincos_def
 (useful_prep_TCC1 0
  (useful_prep_TCC1-1 nil 3298132328 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (useful_prep subtype "sincos_def.n"
    "{i: integers.int | booleans.OR((real_defs.abs(sincos_def.x)) /= 0, reals.>=(i, 0))}")))
 (useful_prep 0
  (useful_prep-1 nil 3298132328
   ("" (skosimp*)
    (("" (lemma "simple_conv[real]")
      (("" (expand "simple") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_conv formula-decl nil power_series_conv series)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple const-decl "sequence[real]" power_series_conv series))
   nil))
 (altsign_prep 0
  (altsign_prep-1 nil 3298132328
   ("" (induct "n")
    (("1" (grind) nil nil)
     ("2" (skosimp*)
      (("2" (expand "^")
        (("2" (expand "expt" 1)
          (("2" (expand "expt" 2) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (altsign_TCC1 0
  (altsign_TCC1-1 nil 3298132328
   ("" (skosimp*) (("" (rewrite "even_div2") nil nil)) nil)
   ((even_div2 formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil
   (altsign subtype "(number_fields./(sincos_def.n, 2))"
    "{i: integers.int | booleans.TRUE}")))
 (altsign_TCC2 0
  (altsign_TCC2-1 nil 3298132328
   ("" (case "(FORALL n: integer_pred((-1)^n))")
    (("1" (skosimp*)
      (("1" (inst?)
        (("1" (assert)
          (("1" (case "(FORALL n: (-1) ^ (n) = -1 OR (-1) ^ (n) = 1)")
            (("1" (inst -1 "n!1/2")
              (("1" (rewrite "even_div2") nil nil)) nil)
             ("2" (hide 2)
              (("2" (induct "n")
                (("1" (expand "^")
                  (("1" (expand "expt") (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (expand "^")
                    (("2" (expand "expt" 1)
                      (("2" (expand "expt" 2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (assert) (("2" (rewrite "even_div2") nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (even_div2 formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (altsign subtype
    "exponentiation.^(((number_fields.-)(1)), (number_fields./(sincos_def.n, 2)))"
    "{i: integers.int | booleans.OR(i = (number_fields.-)(1), i = 1)}")))
 (altsign_TCC3 0
  (altsign_TCC3-1 nil 3298132328
   ("" (skosimp*)
    (("" (rewrite "odd_div2")
      (("" (lemma "even_iff_not_odd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((odd_div2 formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil))
   nil
   (altsign subtype
    "(number_fields./(((number_fields.-)(sincos_def.n, 1)), 2))"
    "{i: integers.int | booleans.TRUE}")))
 (altsign_TCC4 0
  (altsign_TCC4-1 nil 3298132328
   ("" (skosimp*)
    (("" (case "(n!1 - 1) / 2 >= 0")
      (("1" (lemma "even_iff_not_odd")
        (("1" (inst?)
          (("1" (assert)
            (("1" (lemma "odd_div2")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (case "integer_pred((-1) ^ ((n!1 - 1) / 2))")
                    (("1" (lemma "altsign_prep")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (hide 3)
                      (("2" (lemma "altsign_prep")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_div2 formula-decl nil naturalnumbers nil)
    (altsign_prep formula-decl nil sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil))
   nil
   (altsign subtype
    "exponentiation.^(((number_fields.-)(1)), (number_fields./(((number_fields.-)(sincos_def.n, 1)), 2)))"
    "{i: integers.int | booleans.OR(i = (number_fields.-)(1), i = 1)}")))
 (abs_altsign 0
  (abs_altsign-1 nil 3298132884
   ("" (skosimp*)
    (("" (expand "altsign")
      (("" (lift-if)
        (("" (ground)
          (("1" (rewrite "abs_hat")
            (("1" (expand "abs")
              (("1" (lemma "expt_1i")
                (("1" (inst?)
                  (("1" (assert) nil nil)
                   ("2" (expand "even?")
                    (("2" (skosimp*)
                      (("2" (replace -1) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "even?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (lemma "odd_iff_not_even")
            (("2" (inst?)
              (("2" (assert)
                (("2" (rewrite "abs_hat")
                  (("1" (expand "abs")
                    (("1" (rewrite "expt_1i")
                      (("1" (lemma "odd_div2")
                        (("1" (inst?) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "odd_div2")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rat_exp application-judgement "rat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    nil
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (even? const-decl "bool" integers nil)
    (expt_1i formula-decl nil exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (abs_hat formula-decl nil exponent_props reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_div2 formula-decl nil naturalnumbers nil)
    (odd_iff_not_even formula-decl nil naturalnumbers nil))
   shostak))
 (sin_conv_TCC1 0
  (sin_conv_TCC1-1 nil 3298204091
   ("" (expand "not_one_element?")
    (("" (skosimp*) (("" (inst + "x!1+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   shostak
   (sin_conv assuming
    "series@power_series_conv[real].power_series_conv"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (sin_conv_TCC2 0
  (sin_conv_TCC2-1 nil 3298204091
   ("" (lemma "deriv_domain_real") (("" (propax) nil nil)) nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)) shostak
   (sin_conv assuming
    "series@power_series_conv[real].power_series_conv"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (sin_conv_TCC3 0
  (sin_conv_TCC3-1 nil 3298204091
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil shostak
   (sin_conv assuming
    "series@power_series_conv[real].power_series_conv"
    "open: ASSUMPTION FORALL (x: power_series_conv.T): EXISTS (delta: real_types.posreal): FORALL (y: reals.real): booleans.IMPLIES(reals.<(real_defs.abs((number_fields.-)(x, y)), delta), power_series_conv.T_pred(y))")))
 (sin_conv 0
  (sin_conv-3 nil 3352095508
   ("" (expand "conv_powerseries?")
    (("" (skosimp*)
      (("" (lemma "useful_prep")
        (("" (inst?)
          (("" (lemma "comparison_test")
            (("" (assert)
              ((""
                (inst -1 "powerseq(sin_coef, x!1)"
                 "(LAMBDA n:  (abs(x!1)) ^ n / factorial(n))")
                (("" (expand "powerseries")
                  (("" (assert)
                    (("" (hide -1 2)
                      (("" (skosimp*)
                        (("" (rewrite "apow_rew")
                          (("" (expand "apowerseq")
                            (("" (expand "sin_coef")
                              ((""
                                (lift-if)
                                ((""
                                  (ground)
                                  (("1"
                                    (expand "abs" 1 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "abs_mult")
                                    (("2"
                                      (rewrite "abs_0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "abs_mult")
                                    (("3"
                                      (rewrite "abs_div")
                                      (("3"
                                        (expand "abs" 2 2)
                                        (("3"
                                          (rewrite "abs_altsign")
                                          (("3"
                                            (rewrite "abs_hat")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite "abs_0")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_exp application-judgement "nnreal" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    nil (apow_rew formula-decl nil power_series series)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs_0 formula-decl nil abs_lems reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (abs_altsign formula-decl nil sincos_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (hat_02n formula-decl nil power_series series)
    (nat_exp application-judgement "nat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (abs_hat formula-decl nil exponent_props reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (apowerseq const-decl "sequence[real]" power_series series)
    (real_times_real_is_real application-judgement "real" reals nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sin_coef const-decl "real" sincos_def nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (comparison_test formula-decl nil series series)
    (useful_prep formula-decl nil sincos_def nil) nil)
   nil)
  (sin_conv-2 nil 3320063019
   ("" (stop-rewrite "abs_0")
    (("" (expand "conv_powerseries?")
      (("" (skosimp*)
        (("" (lemma "useful_prep")
          (("" (inst?)
            (("" (lemma "comparison_test")
              (("" (assert)
                ((""
                  (inst -1 "powerseq(sin_coef, x!1)"
                   "(LAMBDA n:  (abs(x!1)) ^ n / factorial(n))")
                  (("" (expand "powerseries")
                    (("" (assert)
                      (("" (hide -1 2)
                        (("" (skosimp*)
                          (("" (expand "powerseq")
                            (("" (expand "sin_coef")
                              ((""
                                (lift-if)
                                ((""
                                  (ground)
                                  (("1"
                                    (expand "abs" 1 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "abs_mult")
                                    (("2"
                                      (rewrite "abs_0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "abs_mult")
                                    (("3"
                                      (rewrite "abs_div")
                                      (("3"
                                        (expand "abs" 2 2)
                                        (("3"
                                          (rewrite "abs_altsign")
                                          (("3"
                                            (rewrite "abs_hat")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "zero_hat")
                                                    (("2"
                                                      (rewrite "abs_0")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_hat formula-decl nil exponent_props reals)
    (zero_hat formula-decl nil exponent_props reals)
    (powerseq const-decl "sequence[real]" power_series series)
    (comparison_test formula-decl nil series series))
   nil)
  (sin_conv-1 nil 3298132328
   ("" (expand "conv_powerseries?")
    (("" (skosimp*)
      (("" (lemma "useful_prep")
        (("" (inst?)
          (("" (lemma "comparison_test")
            (("" (assert)
              ((""
                (inst -1 "powerseq(sin_coef, x!1)"
                 "(LAMBDA n:  (abs(x!1)) ^ n / factorial(n))")
                (("" (expand "powerseries")
                  (("" (assert)
                    (("" (hide -1 2)
                      (("" (skosimp*)
                        (("" (expand "powerseq")
                          (("" (expand "sin_coef")
                            (("" (lift-if)
                              ((""
                                (ground)
                                (("1"
                                  (expand "abs" 1 1)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (rewrite "abs_mult")
                                  (("2"
                                    (rewrite "abs_0")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "abs_mult")
                                  (("3"
                                    (rewrite "abs_div")
                                    (("3"
                                      (expand "abs" 2 2)
                                      (("3"
                                        (rewrite "abs_altsign")
                                        (("3"
                                          (rewrite "abs_hat")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "zero_hat")
                                                  (("2"
                                                    (rewrite "abs_0")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs_hat formula-decl nil exponent_props reals)
    (zero_hat formula-decl nil exponent_props reals)
    (powerseq const-decl "sequence[real]" power_series series)
    (comparison_test formula-decl nil series series))
   nil))
 (sin_TCC1 0
  (sin_TCC1-1 nil 3298132328
   ("" (skosimp*)
    (("" (lemma "sin_conv")
      (("" (expand "conv_powerseries?")
        (("" (inst?)
          (("" (expand "powerseries")
            (("" (expand "conv_series?") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_conv formula-decl nil sincos_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil nil nil)
   nil
   (sin subtype
        "power_series.powerseq(sincos_def.sin_coef, sincos_def.x)"
        "(series.conv_series?)")))
 (cos_conv 0
  (cos_conv-2 nil 3352095538
   ("" (expand "conv_powerseries?")
    (("" (skosimp*)
      (("" (lemma "useful_prep")
        (("" (inst?)
          (("" (lemma "comparison_test")
            (("" (assert)
              ((""
                (inst -1 "powerseq(cos_coef, x!1)"
                 "(LAMBDA n:  (abs(x!1)) ^ n / factorial(n))")
                (("" (expand "powerseries")
                  (("" (assert)
                    (("" (hide -1 2)
                      (("" (skosimp*)
                        (("" (rewrite "apow_rew")
                          (("" (expand "apowerseq")
                            (("" (expand "cos_coef")
                              ((""
                                (lift-if)
                                ((""
                                  (ground)
                                  (("1"
                                    (rewrite "abs_div")
                                    (("1"
                                      (case-replace
                                       "abs(altsign(n!1)) = 1")
                                      (("1"
                                        (expand "abs" 1 1)
                                        (("1"
                                          (rewrite "abs_hat_nat")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (expand "altsign")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "factorial")
                                                    (("1"
                                                      (expand
                                                       "abs"
                                                       1
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "x!1")
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "altsign")
                                          (("2"
                                            (lemma "altsign_prep")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "abs_mult")
                                    (("2"
                                      (rewrite "abs_hat_nat")
                                      (("2"
                                        (case-replace
                                         "abs(altsign(n!1)) = 1")
                                        (("1"
                                          (rewrite "abs_div")
                                          (("1"
                                            (rewrite "abs_altsign")
                                            (("1"
                                              (expand "abs" 1 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2 3)
                                          (("2"
                                            (lemma "altsign_prep")
                                            (("2"
                                              (expand "altsign")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "abs_div")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "abs_altsign")
                                                          (("2"
                                                            (expand
                                                             "abs"
                                                             1
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (rewrite "abs_0")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_exp application-judgement "nnreal" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    nil (apow_rew formula-decl nil power_series series)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (factorial_0 formula-decl nil factorial ints)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (abs_hat_nat formula-decl nil exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (altsign_prep formula-decl nil sincos_def nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    nil
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (abs_altsign formula-decl nil sincos_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_mult formula-decl nil real_props nil)
    (abs_0 formula-decl nil abs_lems reals)
    (apowerseq const-decl "sequence[real]" power_series series)
    (real_times_real_is_real application-judgement "real" reals nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos_coef const-decl "real" sincos_def nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (comparison_test formula-decl nil series series)
    (useful_prep formula-decl nil sincos_def nil) nil)
   nil)
  (cos_conv-1 nil 3298132328
   ("" (expand "conv_powerseries?")
    (("" (skosimp*)
      (("" (lemma "useful_prep")
        (("" (inst?)
          (("" (lemma "comparison_test")
            (("" (assert)
              ((""
                (inst -1 "powerseq(cos_coef, x!1)"
                 "(LAMBDA n:  (abs(x!1)) ^ n / factorial(n))")
                (("" (expand "powerseries")
                  (("" (assert)
                    (("" (hide -1 2)
                      (("" (skosimp*)
                        (("" (expand "powerseq")
                          (("" (expand "cos_coef")
                            (("" (lift-if)
                              ((""
                                (ground)
                                (("1"
                                  (rewrite "abs_div")
                                  (("1"
                                    (case-replace
                                     "abs(altsign(n!1)) = 1")
                                    (("1"
                                      (expand "abs" 1 1)
                                      (("1"
                                        (rewrite "abs_hat_nat")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (expand "altsign")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "factorial")
                                                  (("1"
                                                    (expand "abs" 1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "x!1")
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "altsign")
                                        (("2"
                                          (lemma "altsign_prep")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "abs_mult")
                                  (("2"
                                    (rewrite "abs_hat_nat")
                                    (("2"
                                      (case-replace
                                       "abs(altsign(n!1)) = 1")
                                      (("1"
                                        (rewrite "abs_div")
                                        (("1"
                                          (rewrite "abs_altsign")
                                          (("1"
                                            (expand "abs" 1 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2 3)
                                        (("2"
                                          (lemma "altsign_prep")
                                          (("2"
                                            (expand "altsign")
                                            (("2"
                                              (inst?)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal 1)
                                                (("2"
                                                  (lemma
                                                   "not_even_int")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "abs_div")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (rewrite
                                                             "abs_altsign")
                                                            (("2"
                                                              (expand
                                                               "abs"
                                                               1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "abs_0")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powerseq const-decl "sequence[real]" power_series series)
    (comparison_test formula-decl nil series series))
   nil))
 (cos_TCC1 0
  (cos_TCC1-1 nil 3298132328
   ("" (skosimp*)
    (("" (expand "conv_series?")
      (("" (lemma "cos_conv")
        (("" (expand "conv_powerseries?")
          (("" (inst?)
            (("" (expand "powerseries") (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_conv formula-decl nil sincos_def nil))
   nil
   (cos subtype
        "power_series.powerseq(sincos_def.cos_coef, sincos_def.x)"
        "(series.conv_series?)")))
 (sin_0 0
  (sin_0-1 nil 3298132328
   ("" (expand "sin")
    (("" (expand "inf_sum")
      (("" (lemma "limit_series_shift")
        (("" (inst?)
          (("" (inst -1 "1")
            (("" (split -1)
              (("1" (assert)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "sigma")
                      (("1" (expand "powerseq")
                        (("1" (case-replace "sin_coef(0) * 0 ^ 0 = 0")
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "(LAMBDA n: sin_coef(1 + n) * 0 ^ (1 + n)) = (LAMBDA n: 0)")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite "zero_series_limit")
                                    (("1"
                                      (expand "sin_coef")
                                      (("1"
                                        (expand "sigma")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (apply-extensionality 1 :hide? t)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "sin_coef")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sin_conv")
                  (("2" (expand "conv_powerseries?")
                    (("2" (expand "powerseries")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (sin_coef const-decl "real" sincos_def nil)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (hat_02n formula-decl nil power_series series)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (zero_series_limit formula-decl nil series series)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_conv formula-decl nil sincos_def nil) nil nil
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (limit_series_shift formula-decl nil series series)
    (sin const-decl "real" sincos_def nil))
   nil))
 (cos_0 0
  (cos_0-1 nil 3298132328
   ("" (expand "cos")
    (("" (expand "inf_sum")
      (("" (lemma "limit_series_shift")
        (("" (inst?)
          (("" (inst -1 "1")
            (("" (split -1)
              (("1" (assert)
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (expand "sigma")
                      (("1" (expand "powerseq")
                        (("1" (case-replace "cos_coef(0) * 0 ^ 0 = 1")
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "(LAMBDA n: cos_coef(1 + n) * 0 ^ (1 + n)) = (LAMBDA n: 0)")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite "zero_series_limit")
                                    (("1"
                                      (expand "cos_coef")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (apply-extensionality 1 :hide? t)
                                    (("2"
                                      (typepred "x!1")
                                      (("2"
                                        (expand "cos_coef")
                                        (("2"
                                          (case-replace
                                           "0 ^ (1 + x!1) = 0")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "cos_coef")
                              (("2"
                                (expand "factorial")
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (expand "expt")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "altsign")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "cos_conv")
                  (("2" (expand "conv_powerseries?")
                    (("2" (expand "powerseries")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (cos_coef const-decl "real" sincos_def nil)
    (sigma def-decl "real" sigma reals)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (hat_02n formula-decl nil power_series series)
    (sigma_0_neg formula-decl nil sigma_nat reals)
    (zero_series_limit formula-decl nil series series)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (expt def-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial ints)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos_conv formula-decl nil sincos_def nil) nil nil
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (limit_series_shift formula-decl nil series series)
    (cos const-decl "real" sincos_def nil))
   nil))
 (IMP_power_series_deriv_TCC1 0
  (IMP_power_series_deriv_TCC1-1 nil 3704791044
   ("" (assuming-tcc) nil nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)) nil
   (IMP_power_series_deriv assuming
    "series@power_series_deriv[real].power_series_deriv"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_power_series_deriv_TCC2 0
  (IMP_power_series_deriv_TCC2-1 nil 3704791044
   ("" (assuming-tcc) nil nil) nil nil
   (IMP_power_series_deriv assuming
    "series@power_series_deriv[real].power_series_deriv"
    "ball: ASSUMPTION FORALL (x: power_series_deriv.T): booleans.IMPLIES(power_series_deriv.T_pred(x), power_series_deriv.T_pred((number_fields.-)(x)))")))
 (derivable_sin 0
  (derivable_sin-1 nil 3705135861
   ("" (lemma "sin_conv")
    (("" (lemma "powerseries_derivable[real]")
      (("" (expand "sin")
        (("" (expand "inf_sum")
          (("" (inst?)
            (("" (assert)
              (("" (expand "powerseries") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (powerseries_derivable formula-decl nil power_series_deriv series)
    nil nil (sin_coef const-decl "real" sincos_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin const-decl "real" sincos_def nil)
    (sin_conv formula-decl nil sincos_def nil))
   nil))
 (deriv_sin_TCC1 0
  (deriv_sin_TCC1-1 nil 3249311628
   ("" (lemma "derivable_sin") (("" (propax) nil nil)) nil)
   ((derivable_sin formula-decl nil sincos_def nil)) nil
   (deriv_sin subtype "sincos_def.sin" "deriv_fun[real]")))
 (deriv_sin 0
  (deriv_sin-2 nil 3352090315
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "sin_coef")
        (("" (rewrite "sin_conv")
          (("" (expand "sin")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "cos")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](sin_coef),x!1)) = series(powerseq(cos_coef, x!1))")
                              ((""
                                (hide 2)
                                ((""
                                  (expand "series")
                                  ((""
                                    (apply-extensionality 1 :hide? t)
                                    ((""
                                      (case-replace
                                       "powerseq(derivseq[real](sin_coef), x!1) = powerseq(cos_coef, x!1)")
                                      ((""
                                        (hide 2)
                                        ((""
                                          (rewrite "apow_rew")
                                          ((""
                                            (rewrite "apow_rew")
                                            ((""
                                              (expand "apowerseq")
                                              ((""
                                                (expand "derivseq")
                                                ((""
                                                  (apply-extensionality
                                                   1
                                                   :hide?
                                                   t)
                                                  ((""
                                                    (lift-if)
                                                    ((""
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "sin_coef")
                                                        (("1"
                                                          (expand
                                                           "cos_coef")
                                                          (("1"
                                                            (expand
                                                             "factorial")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (expand
                                                                 "even?")
                                                                (("1"
                                                                  (expand
                                                                   "altsign")
                                                                  (("1"
                                                                    (expand
                                                                     "even?")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "sin_coef")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "cos_coef")
                                                              (("1"
                                                                (lemma
                                                                 "even_plus1")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "x!3")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "altsign")
                                                              (("2"
                                                                (expand
                                                                 "cos_coef")
                                                                (("2"
                                                                  (lemma
                                                                   "even_plus1")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "x!3")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "altsign")
                                                                        (("2"
                                                                          (expand
                                                                           "factorial"
                                                                           2
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (name-replace
                                                                                 "FF"
                                                                                 "factorial(x!3)")
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "M1"
                                                                                   "(-1) ^ (x!3 / 2)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "X23"
                                                                                     "x!1 ^ x!3 ")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (field
                                                                                         2)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "even?")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_Inf_sum formula-decl nil power_series_deriv series)
    (sin_conv formula-decl nil sincos_def nil) nil
    (cos const-decl "real" sincos_def nil)
    (cos_coef const-decl "real" sincos_def nil)
    (derivseq const-decl "sequence[real]" power_series_derivseq series)
    (powerseq const-decl "sequence[real]" power_series series) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (apow_rew formula-decl nil power_series series)
    (apowerseq const-decl "sequence[real]" power_series series)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (expt def-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even? const-decl "bool" integers nil)
    (factorial def-decl "posnat" factorial ints)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (even_plus1 formula-decl nil naturalnumbers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (sin const-decl "real" sincos_def nil)
    (sin_coef const-decl "real" sincos_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   nil)
  (deriv_sin-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "sin_coef")
        (("" (rewrite "sin_conv")
          (("" (expand "sin")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "cos")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](sin_coef),x!1)) = series(powerseq(cos_coef, x!1))")
                              ((""
                                (hide 2)
                                ((""
                                  (expand "series")
                                  ((""
                                    (apply-extensionality 1 :hide? t)
                                    ((""
                                      (case-replace
                                       "powerseq(derivseq[real](sin_coef), x!1) = powerseq(cos_coef, x!1)")
                                      ((""
                                        (hide 2)
                                        ((""
                                          (expand "powerseq")
                                          ((""
                                            (expand "derivseq")
                                            ((""
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              ((""
                                                (lift-if)
                                                ((""
                                                  (ground)
                                                  (("1"
                                                    (expand "sin_coef")
                                                    (("1"
                                                      (expand
                                                       "cos_coef")
                                                      (("1"
                                                        (expand
                                                         "factorial")
                                                        (("1"
                                                          (expand
                                                           "factorial")
                                                          (("1"
                                                            (expand
                                                             "even?")
                                                            (("1"
                                                              (expand
                                                               "altsign")
                                                              (("1"
                                                                (expand
                                                                 "even?")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "sin_coef")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "cos_coef")
                                                          (("1"
                                                            (lemma
                                                             "even_plus1")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "x!3")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "altsign")
                                                          (("2"
                                                            (expand
                                                             "cos_coef")
                                                            (("2"
                                                              (lemma
                                                               "even_plus1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!3")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "altsign")
                                                                    (("2"
                                                                      (expand
                                                                       "factorial"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "factorial"
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (name-replace
                                                                             "FF"
                                                                             "factorial(x!3)")
                                                                            (("2"
                                                                              (name-replace
                                                                               "M1"
                                                                               "(-1) ^ (x!3 / 2)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "X23"
                                                                                 "x!1 ^ x!3 ")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (field
                                                                                     2)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "even?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_Inf_sum formula-decl nil power_series_deriv series)
    (derivseq const-decl "sequence[real]" power_series_derivseq series)
    (powerseq const-decl "sequence[real]" power_series series)
    (sigma def-decl "real" sigma reals))
   nil))
 (derivative_sin 0
  (derivative_sin-1 nil 3782648114
   ("" (decompose-equality) (("" (rewrite "deriv_sin") nil nil)) nil)
   ((deriv_sin formula-decl nil sincos_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cos const-decl "real" sincos_def nil)
    (sin const-decl "real" sincos_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (derivable_cos 0
  (derivable_cos-1 nil 3705135892
   ("" (lemma "cos_conv")
    (("" (lemma "powerseries_derivable[real]")
      (("" (expand "cos")
        (("" (inst?)
          (("" (assert)
            (("" (expand "inf_sum")
              (("" (assert)
                (("" (expand "powerseries") (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (powerseries_derivable formula-decl nil power_series_deriv series)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (cos_coef const-decl "real" sincos_def nil) nil nil
    (cos const-decl "real" sincos_def nil)
    (cos_conv formula-decl nil sincos_def nil))
   nil))
 (deriv_cos_TCC1 0
  (deriv_cos_TCC1-1 nil 3249311628
   ("" (rewrite "derivable_cos") nil nil)
   ((derivable_cos formula-decl nil sincos_def nil)) nil
   (deriv_cos subtype "sincos_def.cos" "deriv_fun[real]")))
 (deriv_cos 0
  (deriv_cos-3 nil 3352090481
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "cos_coef")
        (("" (rewrite "cos_conv")
          (("" (expand "cos")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "sin")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](cos_coef),x!1)) = -series(powerseq(sin_coef, x!1))")
                              (("1"
                                (hide -1)
                                (("1" (rewrite "limit_neg") nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "series")
                                  (("2"
                                    (apply-extensionality 1 :hide? t)
                                    (("2"
                                      (case-replace
                                       "powerseq(derivseq[real](cos_coef), x!1) = -powerseq(sin_coef, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (lemma "sigma_scal")
                                            (("1"
                                              (inst
                                               -
                                               "LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)"
                                               "-1"
                                               "x!2"
                                               "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case-replace
                                                     "(LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)) =powerseq(sin_coef, x!1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "apow_rew")
                                          (("2"
                                            (rewrite "apow_rew")
                                            (("2"
                                              (expand "apowerseq")
                                              (("2"
                                                (expand "derivseq")
                                                (("2"
                                                  (expand "-")
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "cos_coef")
                                                          (("1"
                                                            (expand
                                                             "sin_coef")
                                                            (("1"
                                                              (expand
                                                               "even?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cos_coef")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (expand
                                                               "sin_coef")
                                                              (("2"
                                                                (lemma
                                                                 "even_plus1")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "x!3")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (prop)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (case-replace
                                                                             "altsign(1 + x!3) = -altsign(x!3)")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (name
                                                                                 "FF"
                                                                                 "factorial(x!3)")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "AA"
                                                                                   "altsign(x!3)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "X23"
                                                                                     "x!1 ^ x!3 ")
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       l)
                                                                                      (("1"
                                                                                        (name
                                                                                         "XP1"
                                                                                         "(1 + x!3)")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "factorial(XP1) = XP1*factorial(x!3)")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "F1"
                                                                                               "factorial(x!3)")
                                                                                              (("1"
                                                                                                (field
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 *
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "altsign")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "even?")
                                                                                    (("2"
                                                                                      (skosimp*)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (case-replace
                                                                                           "x!3 - 1 = 2 * j!1 - 2")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "2 * j!1 / 2 = j!1")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "(2 * j!1 -2)/ 2 = j!1-1")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "expt_plus")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "j!1-1"
                                                                                                     "1"
                                                                                                     "-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_Inf_sum formula-decl nil power_series_deriv series)
    (cos_conv formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil) nil
    (sin const-decl "real" sincos_def nil)
    (sin_coef const-decl "real" sincos_def nil) nil
    (derivseq const-decl "sequence[real]" power_series_derivseq series)
    (powerseq const-decl "sequence[real]" power_series series) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (limit_neg formula-decl nil convergence_ops analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_scal formula-decl nil sigma reals)
    (apow_rew formula-decl nil power_series series)
    (apowerseq const-decl "sequence[real]" power_series series)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus1 formula-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sigma def-decl "real" sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil nil
    (cos const-decl "real" sincos_def nil)
    (cos_coef const-decl "real" sincos_def nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil))
   nil)
  (deriv_cos-2 nil 3298209019
   ("" (skosimp*)
    (("" (lemma "deriv_Inf_sum[real]")
      (("" (inst -1 "cos_coef")
        (("" (rewrite "cos_conv")
          (("" (expand "cos")
            (("" (assert)
              (("" (expand "Inf_sum")
                (("" (expand "inf_sum")
                  (("" (expand "powerseries")
                    (("" (replace -1)
                      (("" (hide -1)
                        (("" (expand "sin")
                          (("" (expand "inf_sum")
                            ((""
                              (case-replace
                               "series(powerseq(derivseq[real](cos_coef),x!1)) = -series(powerseq(sin_coef, x!1))")
                              (("1"
                                (hide -1)
                                (("1"
                                  (rewrite "limit_neg")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma "sin_conv")
                                      (("1"
                                        (expand "conv_powerseries?")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand "powerseries")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand "series")
                                  (("2"
                                    (apply-extensionality 1 :hide? t)
                                    (("2"
                                      (case-replace
                                       "powerseq(derivseq[real](cos_coef), x!1) = -powerseq(sin_coef, x!1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-")
                                          (("1"
                                            (lemma "sigma_scal")
                                            (("1"
                                              (inst
                                               -
                                               "LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)"
                                               "-1"
                                               "x!2"
                                               "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case-replace
                                                     "(LAMBDA (x: nat): powerseq(sin_coef, x!1)(x)) =powerseq(sin_coef, x!1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (apply-extensionality
                                                         1
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "powerseq")
                                          (("2"
                                            (expand "derivseq")
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (apply-extensionality
                                                 1
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "cos_coef")
                                                      (("1"
                                                        (expand
                                                         "sin_coef")
                                                        (("1"
                                                          (expand
                                                           "even?")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "cos_coef")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (expand
                                                           "sin_coef")
                                                          (("2"
                                                            (lemma
                                                             "even_plus1")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!3")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (prop)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case-replace
                                                                         "altsign(1 + x!3) = -altsign(x!3)")
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (name
                                                                             "FF"
                                                                             "factorial(x!3)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "AA"
                                                                               "altsign(x!3)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "X23"
                                                                                 "x!1 ^ x!3 ")
                                                                                (("1"
                                                                                  (factor
                                                                                   1
                                                                                   l)
                                                                                  (("1"
                                                                                    (name
                                                                                     "XP1"
                                                                                     "(1 + x!3)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "factorial(XP1) = XP1*factorial(x!3)")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "F1"
                                                                                           "factorial(x!3)")
                                                                                          (("1"
                                                                                            (field
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             *
                                                                                             rl)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "altsign")
                                                                              (("2"
                                                                                (expand
                                                                                 "even?")
                                                                                (("2"
                                                                                  (skosimp*)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case-replace
                                                                                       "x!3 - 1 = 2 * j!1 - 2")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "2 * j!1 / 2 = j!1")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "(2 * j!1 -2)/ 2 = j!1-1")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "expt_plus")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "j!1-1"
                                                                                                 "1"
                                                                                                 "-1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_Inf_sum formula-decl nil power_series_deriv series)
    (derivseq const-decl "sequence[real]" power_series_derivseq series)
    (powerseq const-decl "sequence[real]" power_series series)
    (limit_neg formula-decl nil convergence_ops analysis)
    (sigma_scal formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals))
   nil)
  (deriv_cos-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "deriv_inf_series")
      (("" (inst -1 "cos_coef")
        (("" (split -1)
          (("1" (assert)
            (("1" (expand "cos")
              (("1" (expand "inf_sum")
                (("1" (expand "powerseries")
                  (("1" (replace -1 * rl)
                    (("1" (hide -1)
                      (("1" (assert)
                        (("1" (expand "sin")
                          (("1" (expand "deriv_powerseq")
                            (("1" (expand "inf_sum")
                              (("1"
                                (lemma "limit_series_shift")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst -1 "1")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (lemma "limit_neg")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1 * rl)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case-replace
                                                         "series(LAMBDA n:                                                                 cos_coef(1 + n) * x!1 ^ n +                                                                  n * cos_coef(1 + n) * x!1 ^ n)                                                   = -series(powerseq(sin_coef, x!1))")
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (case-replace
                                                             "-series(powerseq(sin_coef, x!1)) = series(-powerseq(sin_coef, x!1))")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (rewrite
                                                                 "congruence")
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (apply-extensionality
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (expand
                                                                       "-")
                                                                      (("1"
                                                                        (expand
                                                                         "powerseq")
                                                                        (("1"
                                                                          (expand
                                                                           "sin_coef")
                                                                          (("1"
                                                                            (expand
                                                                             "cos_coef")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "even_plus1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (name-replace
                                                                                     "Y"
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "X"
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (name-replace
                                                                                     "Y"
                                                                                     "x!2")
                                                                                    (("3"
                                                                                      (name-replace
                                                                                       "X"
                                                                                       "x!1")
                                                                                      (("3"
                                                                                        (case-replace
                                                                                         "factorial(1 + Y) = factorial(Y)* (1+Y)")
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "FF"
                                                                                             "factorial(Y)")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "altsign(1+Y) = - altsign(Y)")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "AA"
                                                                                                 "altsign(Y)")
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "EE"
                                                                                                   "X^Y")
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "-AA / (FF * (1 + Y)) * EE + EE * (-AA / (FF * (1 + Y))) * Y =                                                         -AA * EE * (1 / (FF * (1 + Y)) + Y/ (FF * (1 + Y)))")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "(1 / (FF * (1 + Y)) + Y / (FF * (1 + Y))) =                                                                     (1 + Y)/ (FF * (1 + Y))")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (name-replace
                                                                                                             "DD"
                                                                                                             "(1+Y)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "altsign")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "expt"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "factorial"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide
                                                                                     2)
                                                                                    (("4"
                                                                                      (lemma
                                                                                       "even_plus1")
                                                                                      (("4"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (apply-extensionality
                                                                 1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (expand
                                                                   "-")
                                                                  (("2"
                                                                    (expand
                                                                     "powerseq")
                                                                    (("2"
                                                                      (expand
                                                                       "series")
                                                                      (("2"
                                                                        (lemma
                                                                         "sigma_scal")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "-1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "sin_conv")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (expand
                                                         "powerseries")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "deriv_powerseries_conv")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1" (inst?) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (expand
                                                       "powerseries")
                                                      (("2"
                                                        (lemma
                                                         "cos_conv")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (expand
                                                             "powerseries")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (skosimp*)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp*) (("2" (rewrite "cos_conv") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (powerseq const-decl "sequence[real]" power_series series)
    (sigma_scal formula-decl nil sigma reals)
    (limit_neg formula-decl nil convergence_ops analysis)
    (limit_series_shift formula-decl nil series series))
   nil))
 (derivative_cos 0
  (derivative_cos-1 nil 3782648133
   ("" (decompose-equality) (("" (rewrite "deriv_cos") nil nil)) nil)
   ((deriv_cos formula-decl nil sincos_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sin2_cos2_derivable 0
  (sin2_cos2_derivable-1 nil 3249311628
   ("" (lemma "derivable_cos")
    (("" (lemma "derivable_sin")
      (("" (expand "derivable?")
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?)
              (("" (lemma "sum_derivable[real]")
                (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (lemma "prod_derivable[real]")
                        (("1" (inst -1 "sin" "sin" "x!1")
                          (("1" (assert)
                            (("1" (lemma "prod_derivable[real]")
                              (("1"
                                (inst -1 "cos" "cos" "x!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "not_one_element?")
                    (("2" (skosimp*)
                      (("2" (inst + "x!2+1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "deriv_domain_real")
                    (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_sin formula-decl nil sincos_def nil)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos const-decl "real" sincos_def nil)
    (sin const-decl "real" sincos_def nil) nil
    (prod_derivable formula-decl nil derivatives_def analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_cos formula-decl nil sincos_def nil))
   nil))
 (sin2_cos2_fun 0
  (sin2_cos2_fun-1 nil 3704714971
   ("" (expand "const_fun")
    (("" (lemma "derivable_cos")
      (("" (lemma "derivable_sin")
        (("" (case "derivable?[real](cos * cos)")
          (("1" (case "derivable?[real](sin * sin)")
            (("1"
              (case-replace "derivable?[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (hide -2)
                              (("1"
                                (case "(sin * sin + cos * cos)(0) = 1")
                                (("1"
                                  (expand "constant?")
                                  (("1"
                                    (apply-extensionality 1 :hide? t)
                                    (("1"
                                      (inst -2 "x!1" "0")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -1 2)
                                  (("2"
                                    (lemma "sin_0")
                                    (("2"
                                      (lemma "cos_0")
                                      (("2"
                                        (expand "+ ")
                                        (("2"
                                          (expand "*")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case
                                 "deriv(sin * sin + cos * cos)(x!1) = const_fun(0)(x!1)")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (expand "deriv" -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (assert)
                      (("2" (expand "not_one_element?")
                        (("2" (skosimp*)
                          (("2" (inst + "x!1+1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "connected?") (("3" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv" 1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "derivable?"
                                                 -4)
                                                (("1"
                                                  (expand
                                                   "derivable?"
                                                   -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "not_one_element?")
                        (("2" (skosimp*)
                          (("2" (inst + "x!1+1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (lemma "deriv_domain_real")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!1")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "not_one_element?")
                      (("2" (skosimp*)
                        (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (lemma "deriv_domain_real")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "not_one_element?")
                    (("2" (skosimp*)
                      (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (lemma "deriv_domain_real")
                    (("3" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "not_one_element?")
                  (("2" (skosimp*)
                    (("2" (inst + "x!1+1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (lemma "deriv_domain_real")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_cos formula-decl nil sincos_def nil)
    (cos const-decl "real" sincos_def nil) nil
    (derivable? const-decl "bool" derivatives analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (prod_derivable formula-decl nil derivatives_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (deriv_sin formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv_cos formula-decl nil sincos_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (null_derivative formula-decl nil derivative_props analysis)
    (cos_0 formula-decl nil sincos_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_0 formula-decl nil sincos_def nil)
    (constant? const-decl "bool" real_fun_preds reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (derivable_const application-judgement "deriv_fun" derivatives
     analysis)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (sin const-decl "real" sincos_def nil)
    (derivable_sin formula-decl nil sincos_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals))
   nil))
 (sin_cos_one 0
  (sin_cos_one-2 nil 3445341870
   ("" (skosimp*)
    (("" (lemma "sin2_cos2_fun")
      (("" (lemma "congruence[real,real]")
        ((""
          (inst - " sin * sin + cos * cos" "const_fun(1)" "x!1" "x!1")
          (("" (split -1)
            (("1" (hide -2)
              (("1" (expand "*")
                (("1" (expand "const_fun")
                  (("1" (assert)
                    (("1"
                      (expand "+
")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin2_cos2_fun formula-decl nil sincos_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals) nil
    (sin const-decl "real" sincos_def nil)
    (cos const-decl "real" sincos_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (congruence formula-decl nil functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (sin_cos_one-1 nil 3249311628
   ("" (skosimp*)
    (("" (lemma "derivable_cos")
      (("" (lemma "derivable_sin")
        (("" (case "derivable[real](cos * cos)")
          (("1" (case "derivable[real](sin * sin)")
            (("1"
              (case-replace "derivable[real](sin * sin + cos * cos)")
              (("1" (case "deriv(sin*sin+cos*cos) = const_fun(0)")
                (("1" (lemma "null_derivative[real]")
                  (("1" (inst -1 "sin*sin+cos*cos")
                    (("1" (flatten)
                      (("1" (hide -1)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1"
                              (case "(sin * sin + cos * cos)(0) = 1")
                              (("1"
                                (expand "constant?")
                                (("1"
                                  (inst -2 "x!1" "0")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 2)
                                (("2"
                                  (lemma "sin_0")
                                  (("2"
                                    (lemma "cos_0")
                                    (("2"
                                      (expand "+ ")
                                      (("2"
                                        (expand "*")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (hide 2)
                              (("2"
                                (case-replace
                                 "deriv(sin * sin + cos * cos)(x!2) = const_fun(0)(x!2)")
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (expand "deriv" -1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "const_fun")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst 1 "x!2+1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "deriv_sum[real]")
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("1" (expand "derivable?" -3)
                          (("1" (expand "derivable?" -4)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "deriv" 1)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (lemma "deriv_prod[real]")
                                          (("1"
                                            (inst -1 "sin" "sin" "x!2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "derivable?"
                                                 -4)
                                                (("1"
                                                  (expand
                                                   "derivable"
                                                   -5)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (lemma
                                                               "deriv_prod[real]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "cos"
                                                                 "cos"
                                                                 "x!2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_cos")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "deriv"
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "deriv_sin")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "deriv"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "const_fun")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (inst-cp + "0")
                        (("2" (inst + "1") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (propax) nil nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "sum_derivable[real]")
                  (("1" (expand "derivable?" 1)
                    (("1" (skosimp*)
                      (("1" (inst -1 "sin*sin" "cos*cos" "x!2")
                        (("1" (expand "derivable?" -2)
                          (("1" (expand "derivable?" -3)
                            (("1" (inst?)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (inst-cp + "0")
                      (("2" (inst + "1") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "prod_derivable[real]")
                (("1" (expand "derivable?" 1)
                  (("1" (skosimp*)
                    (("1" (inst?)
                      (("1" (expand "derivable?" -3)
                        (("1" (expand "derivable?" -4)
                          (("1" (inst?)
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skosimp*)
                  (("2" (inst-cp + "0")
                    (("2" (inst + "1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (lemma "prod_derivable[real]")
              (("1" (expand "derivable?" 1)
                (("1" (skosimp*)
                  (("1" (inst?)
                    (("1" (expand "derivable?" -3)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst-cp + "0")
                  (("2" (inst + "1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod_derivable formula-decl nil derivatives_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_prod formula-decl nil derivatives_def analysis)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (null_derivative formula-decl nil derivative_props analysis)
    (constant? const-decl "bool" real_fun_preds reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (sum_derivable formula-decl nil derivatives_def analysis))
   nil))
 (sin_le_1 0
  (sin_le_1-1 nil 3704707439
   ("" (skosimp*)
    (("" (lemma "sin_cos_one")
      (("" (inst?)
        (("" (case "sin(x!1) * sin(x!1) <= 1")
          (("1" (hide -2)
            (("1" (lemma "sqrt_1_le")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2" (case "cos(x!1) * cos(x!1) >= 0")
                (("1" (assert) nil nil)
                 ("2" (hide -1 2)
                  (("2" (assert)
                    (("2" (rewrite "abs_square" :dir rl)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_cos_one formula-decl nil sincos_def nil)
    (sin const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sqrt_1_le formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_square formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cos const-decl "real" sincos_def nil)
    (>= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (cos_le_1 0
  (cos_le_1-1 nil 3704791076
   ("" (skosimp*)
    (("" (lemma "sin_cos_one")
      (("" (inst?)
        (("" (assert)
          (("" (expand "abs")
            (("" (case "cos(x!1) * cos(x!1) <= 1")
              (("1" (assert)
                (("1" (hide -2)
                  (("1" (lemma "sqrt_1_le")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_cos_one formula-decl nil sincos_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sqrt_1_le formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (sin2_cos2 0
  (sin2_cos2-1 nil 3704794120
   ("" (skosimp*)
    (("" (lemma "sin2_cos2_fun")
      (("" (lemma "congruence[real,real]")
        ((""
          (inst - " sin * sin + cos * cos" "const_fun(1)" "a!1" "a!1")
          (("" (split -1)
            (("1" (hide -2)
              (("1" (expand "*")
                (("1" (expand "const_fun")
                  (("1" (expand "+")
                    (("1" (expand "sq") (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin2_cos2_fun formula-decl nil sincos_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals) nil
    (sin const-decl "real" sincos_def nil)
    (cos const-decl "real" sincos_def nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (sq const-decl "nonneg_real" sq reals)
    (congruence formula-decl nil functions nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (cos2 0
  (cos2-1 nil 3704794129
   ("" (skosimp*)
    (("" (lemma "sin2_cos2" ("a" "a!1")) (("" (assert) nil nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sin2 0
  (sin2-1 nil 3704794170
   ("" (skosimp*)
    (("" (lemma "sin2_cos2" ("a" "a!1")) (("" (assert) nil nil)) nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (pow_neg_prep_TCC1 0
  (pow_neg_prep_TCC1-1 nil 3708689113 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pow_neg_prep subtype "sincos_def.n"
    "{i: integers.int | booleans.OR(((number_fields.-)(sincos_def.x)) /= 0, reals.>=(i, 0))}")))
 (pow_neg_prep_TCC2 0
  (pow_neg_prep_TCC2-1 nil 3708689113 ("" (subtype-tcc) nil nil)
   ((even? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pow_neg_prep subtype "sincos_def.n"
    "{i: integers.int | booleans.OR(sincos_def.x /= 0, reals.>=(i, 0))}")))
 (pow_neg_prep 0
  (pow_neg_prep-1 nil 3708689057
   ("" (skeep)
    (("" (expand "even?")
      (("" (skeep -1)
        (("" (case "j>=0")
          (("1" (replaces -2)
            (("1" (case "x=0")
              (("1" (grind) nil nil)
               ("2" (rewrite "expt_times")
                (("2" (rewrite "expt_times")
                  (("2" (case-replace "(-x) ^ 2 = sq(x)")
                    (("1" (case-replace "x ^ 2 = sq(x)")
                      (("1" (hide-all-but 1) (("1" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (expt_times formula-decl nil exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (sin_neg 0
  (sin_neg-1 nil 3265008367
   ("" (skosimp*)
    (("" (expand "sin")
      (("" (lemma "inf_sum_neg")
        (("" (inst?)
          (("" (assert)
            (("" (hide 2)
              (("" (lemma "sin_conv")
                (("" (expand "conv_powerseries?")
                  (("" (expand "conv_series?")
                    (("" (inst?)
                      (("" (assert)
                        (("" (expand "powerseries")
                          (("" (assert)
                            (("" (hide -1)
                              ((""
                                (expand "powerseq")
                                ((""
                                  (expand "-")
                                  ((""
                                    (expand "sin_coef")
                                    ((""
                                      (apply-extensionality 1 :hide? t)
                                      ((""
                                        (lift-if)
                                        ((""
                                          (ground)
                                          ((""
                                            (case-replace
                                             "(-a!1) ^ x!1 = -(a!1) ^ x!1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (lemma
                                                 "not_even_m1_pow")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "mult_expt")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "x!1"
                                                         "a!1"
                                                         "-1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (expand
                                                                 "expt")
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (sin_coef const-decl "real" sincos_def nil) nil nil nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (even? const-decl "bool" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (mult_expt formula-decl nil exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil) nil
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (powerseq const-decl "sequence[real]" power_series series) nil
    (sin_conv formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (inf_sum_neg formula-decl nil power_series series))
   shostak))
 (cos_neg 0
  (cos_neg-2 nil 3708689120
   ("" (skosimp*)
    (("" (expand "cos")
      (("" (case "powerseq(cos_coef, -a!1) = powerseq(cos_coef, a!1)")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (lemma "pow_neg_prep")
            (("2" (expand "cos_coef")
              (("2" (expand "powerseq")
                (("2" (apply-extensionality)
                  (("2" (hide 2)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (inst -2 "x!1" "a!1")
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos const-decl "real" sincos_def nil)
    (^ const-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (altsign const-decl "{i: int | i = -1 OR i = 1}" sincos_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (even? const-decl "bool" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (pow_neg_prep formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (powerseq const-decl "sequence[real]" power_series series)
    (cos_coef const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil)
  (cos_neg-1 nil 3265009425
   ("" (skosimp*)
    (("" (expand "cos")
      (("" (case "powerseq(cos_coef, -a!1) = powerseq(cos_coef, a!1)")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (lemma "pow_neg_even")
            (("2" (expand "cos_coef")
              (("2" (expand "powerseq")
                (("2" (apply-extensionality)
                  (("2" (hide 2)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (inst -2 "x!1" "a!1")
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((factorial def-decl "posnat" factorial ints)
    (powerseq const-decl "sequence[real]" power_series series))
   shostak)))


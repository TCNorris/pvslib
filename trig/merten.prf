(merten
 (IMP_sigma_swap_TCC1 0
  (IMP_sigma_swap_TCC1-1 nil 3707812098 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (IMP_sigma_swap assuming "reals@sigma_swap[nat].sigma_swap"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma_swap.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma_swap.T_pred(z)))")))
 (series_prod_TCC1 0
  (series_prod_TCC1-1 nil 3707740136 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (series_prod subtype "(number_fields.-)(merten.i, merten.j)" "nat")))
 (merten_init1_TCC1 0
  (merten_init1_TCC1-1 nil 3707740136 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (merten_init1 subtype "(number_fields.-)(merten.n, merten.i)" "nat")))
 (merten_init1 0
  (merten_init1-1 nil 3707740207
   ("" (skeep)
    (("" (lemma "sigma_swap_triangle")
      (("" (expand "series_prod")
        (("" (expand "series")
          ((""
            (inst - "LAMBDA (j,i:nat): (
                        IF j <= i THEN a(j) * b(i - j) ELSE 0 ENDIF)" "n" "n"
             "0")
            (("1" (assert)
              (("1" (replaces -1 :dir rl)
                (("1" (rewrite "sigma_reverse")
                  (("1" (rewrite "sigma_eq")
                    (("1" (hide 2)
                      (("1" (skeep*)
                        (("1" (typepred "n_1")
                          (("1" (lemma "sigma_shift")
                            (("1" (invoke (inst - "%1" _ _ _) (! 1 1 3))
                              (("1" (inst - "n_1" "0" "n-n_1")
                                (("1" (assert)
                                  (("1" (replaces -1)
                                    (("1" (rewrite "sigma_scal") nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (skosimp*) (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)
                     ("3" (hide 2)
                      (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil)
                     ("4" (hide 2)
                      (("4" (skosimp*) (("4" (assert) nil nil)) nil)) nil)
                     ("5" (hide 2)
                      (("5" (skosimp*) (("5" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_swap_triangle formula-decl nil sigma_swap reals)
    (series const-decl "sequence[real]" series series)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma def-decl "real" sigma reals)
    (sigma_reverse formula-decl nil sigma_nat reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (n_1 skolem-const-decl "subrange(0, n)" merten nil)
    (n skolem-const-decl "nat" merten nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_scal formula-decl nil sigma reals)
    (sigma_shift formula-decl nil sigma_nat reals)
    (sigma_eq formula-decl nil sigma reals) (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (series_prod const-decl "real" merten nil))
   shostak))
 (merten_init2 0
  (merten_init2-1 nil 3707741491
   ("" (skeep*)
    (("" (expand "series" 1 2)
      (("" (lemma "sigma_reverse")
        (("" (inst - "a" "n" "0")
          (("" (replaces -1)
            (("" (rewrite "sigma_scal_right" :dir rl)
              (("1" (rewrite "sigma_sum")
                (("1" (expand "series" 1 1)
                  (("1" (lemma "merten_init1")
                    (("1" (insteep)
                      (("1" (expand "series" -1 1)
                        (("1" (replaces -1)
                          (("1" (rewrite "sigma_eq")
                            (("1" (hide 2)
                              (("1" (skosimp*) (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                  nil)
                 ("3" (hide 2) (("3" (skosimp*) (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide 2) (("2" (skosimp*) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (series const-decl "sequence[real]" series series)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma_scal_right formula-decl nil sigma reals)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_eq formula-decl nil sigma reals)
    (merten_init1 formula-decl nil merten nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sigma_sum formula-decl nil sigma reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_reverse formula-decl nil sigma_nat reals)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (merten_init3_TCC1 0
  (merten_init3_TCC1-1 nil 3707742067
   ("" (skeep*)
    (("" (expand "inf_sum")
      (("" (expand "conv_series?")
        (("" (lemma "limit_lemma")
          (("" (inst?)
            (("" (assert)
              (("" (expand "convergence")
                (("" (inst - "-limit(series(abs(a)))/2")
                  (("" (skosimp*)
                    (("" (inst - "n!1")
                      (("" (assert)
                        (("" (case "series(abs(a))(n!1)>=0")
                          (("1" (expand "abs")
                            (("1" (lift-if) (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (hide -)
                            (("2" (expand "series")
                              (("2" (rewrite "sigma_ge_0")
                                (("2" (skosimp*)
                                  (("2" (expand "abs")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inf_sum const-decl "real" series series)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (limit const-decl "real" convergence_sequences analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_ge_0 formula-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "sequence[real]" series series)
    (series const-decl "sequence[real]" series series)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (conv_series? const-decl "bool" series series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (merten_init3 subtype
    "(number_fields.*(3, ((number_fields.+)(series.inf_sum(series.abs(merten.a)), 1))))"
    "nznum")))
 (merten_init3 0
  (merten_init3-1 nil 3707742069
   ("" (skeep)
    (("" (case "inf_sum(abs(a))>=0")
      (("1" (expand "inf_sum" -1)
        (("1" (lemma "limit_lemma")
          (("1" (expand "inf_sum" + 1)
            (("1" (inst - "series(b)")
              (("1" (expand "convergence")
                (("1" (inst - "epsil / (3 + 3 * inf_sum(abs(a)))")
                  (("1" (skeep)
                    (("1" (inst + "n+1")
                      (("1" (skosimp*)
                        (("1" (inst - "n!1") (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "epsil / (3 + 3 * inf_sum(abs(a)))>0")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (expand "inf_sum") (("2" (cross-mult 1) nil nil))
                        nil))
                      nil)
                     ("3" (expand "inf_sum") (("3" (assert) nil nil)) nil))
                    nil)
                   ("3" (expand "inf_sum") (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "conv_series?") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "conv_series?")
        (("2" (expand "inf_sum")
          (("2" (lemma "limit_lemma")
            (("2" (inst?)
              (("2" (assert)
                (("2" (expand "convergence")
                  (("2" (inst - "-limit(series(abs(a)))/2")
                    (("2" (skeep)
                      (("2" (inst - "n")
                        (("2" (assert)
                          (("2" (case "series(abs(a))(n)>=0")
                            (("1" (expand "abs")
                              (("1" (lift-if) (("1" (ground) nil nil)) nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (expand "series")
                                (("2" (expand "abs")
                                  (("2" (rewrite "sigma_ge_0") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (propax) nil nil))
      nil))
    nil)
   ((abs const-decl "sequence[real]" series series)
    (inf_sum const-decl "real" series series)
    (conv_series? const-decl "bool" series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (b skolem-const-decl "sequence[real]" merten nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (a skolem-const-decl "sequence[real]" merten nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (epsil skolem-const-decl "posreal" merten nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (limit const-decl "real" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sigma_ge_0 formula-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (merten_init4 0
  (merten_init4-1 nil 3707748164
   ("" (skeep*)
    (("" (lemma "series_limit_0")
      (("" (inst - "abs(a)")
        (("" (assert)
          (("" (expand "conv_series?")
            (("" (assert)
              (("" (lemma "limit_lemma")
                (("" (inst?)
                  (("" (replace -2)
                    (("" (expand "convergence")
                      ((""
                        (case "EXISTS (ee:posreal): FORaLL (i:nat): i<=Np IMPLIES abs(series(b)(i) - inf_sum(b))<ee")
                        (("1" (skeep -)
                          (("1" (inst -2 "epsil/(3*Np+3*Np*ee)")
                            (("1" (skeep -2)
                              (("1" (inst + "n" "ee")
                                (("1" (skosimp*)
                                  (("1" (inst - "i!1")
                                    (("1" (assert)
                                      (("1"
                                        (inst - "n!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "abs" -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-4 1))
                          (("2"
                            (case "FORALL (NN:nat): EXISTS (ee: posreal):
                 FORALL (i: nat):
                   i <= NN IMPLIES abs(series(b)(i) - inf_sum(b)) < ee")
                            (("1" (inst - "Np") nil nil)
                             ("2" (hide 2)
                              (("2" (induct "NN")
                                (("1"
                                  (inst + "abs(series(b)(0) - inf_sum(b))+1")
                                  (("1" (skosimp*) (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (skeep)
                                    (("2"
                                      (inst
                                       +
                                       "max(abs(series(b)(j+1) - inf_sum(b)),ee)+5")
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (case "i=j+1")
                                          (("1"
                                            (expand "max")
                                            (("1"
                                              (lift-if)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst - "i")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((series_limit_0 formula-decl nil series series)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (convergence const-decl "bool" convergence_sequences analysis)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (series const-decl "sequence[real]" series series)
    (inf_sum const-decl "real" series series)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (conv_series? const-decl "bool" series series)
    (abs const-decl "sequence[real]" series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (merten_init5_TCC1 0
  (merten_init5_TCC1-1 nil 3707749141
   ("" (skeep*)
    (("" (lemma "series.convergent_abs")
      (("" (inst - "a")
        (("" (expand "conv_series?") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((convergent_abs formula-decl nil series series)
    (conv_series? const-decl "bool" series series)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (merten_init5 subtype "merten.a" "(series.conv_series?)")))
 (merten_init5 0
  (merten_init5-1 nil 3707749200
   ("" (skeep*)
    (("" (lemma "series.convergent_abs")
      (("" (inst - "a")
        (("" (expand "conv_series?")
          (("" (assert)
            (("" (lemma "limit_lemma")
              (("" (inst - "series(a)")
                (("" (assert)
                  (("" (expand "convergence")
                    (("" (inst - "epsil / (3 + 3 * abs(inf_sum(b)))")
                      (("1" (skeep)
                        (("1" (inst + "n+1")
                          (("1" (skeep)
                            (("1" (inst - "n_1")
                              (("1" (assert)
                                (("1" (assert)
                                  (("1" (expand "inf_sum")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "conv_series_terms_to_0")
                        (("2" (inst - "b")
                          (("2" (assert)
                            (("2" (expand "conv_series?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergent_abs formula-decl nil series series)
    (conv_series? const-decl "bool" series series)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (b skolem-const-decl "sequence[real]" merten nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (inf_sum const-decl "real" series series)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (conv_series_terms_to_0 formula-decl nil series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (series const-decl "sequence[real]" series series)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (merten1_TCC1 0
  (merten1_TCC1-1 nil 3707750569
   ("" (skeep*)
    (("" (lemma "series.convergent_abs")
      (("" (inst - "a")
        (("" (expand "conv_series?") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((convergent_abs formula-decl nil series series)
    (conv_series? const-decl "bool" series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (merten1 subtype "merten.a" "(series.conv_series?)")))
 (merten1 0
  (merten1-2 nil 3707753619
   ("" (skeep*)
    (("" (case "conv_series?(a)")
      (("1" (case "inf_sum(abs(a))>=0")
        (("1"
          (case "convergence(series(series_prod(a,b)),inf_sum(a) * inf_sum(b))")
          (("1" (split)
            (("1" (expand "conv_series?")
              (("1" (expand "convergent?") (("1" (inst?) nil nil)) nil)) nil)
             ("2" (expand "inf_sum")
              (("2" (lemma "limit_lemma")
                (("2" (inst?)
                  (("2" (name "g1" "limit(series(series_prod(a, b)))")
                    (("2" (replaces -1)
                      (("2" (name "g2" "limit(series(a)) * limit(series(b))")
                        (("2" (replaces -1)
                          (("2" (name "ab" "series(series_prod(a, b))")
                            (("2" (replaces -1)
                              (("2" (hide (-3 -4 -5))
                                (("2" (expand "convergence")
                                  (("2" (inst - "abs(g1-g2)/10")
                                    (("1" (inst - "abs(g1-g2)/10")
                                      (("1"
                                        (skosimp*)
                                        (("1"
                                          (inst - "max(n!1,n!2)+2")
                                          (("1"
                                            (inst - "max(n!1,n!2)+2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide -) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "convergence")
              (("2" (skeep*)
                (("2" (lemma "merten_init3")
                  (("2" (inst - "a" "b" "epsilon/2")
                    (("2" (assert)
                      (("2" (skeep -)
                        (("2" (lemma "merten_init4")
                          (("2" (inst - "a" "b" "epsilon/2")
                            (("2" (assert)
                              (("2" (inst - "N")
                                (("2" (skeep -)
                                  (("2" (lemma "merten_init5")
                                    (("2" (inst - "a" "b" "epsilon/2")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst + "max(L,M+N)+10")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "merten_init2")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "a"
                                                     "b"
                                                     "i"
                                                     "inf_sum(b)")
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (name
                                                         "F"
                                                         "(LAMBDA (i_1: nat):
                                                                                                 IF i_1 <= i
                                                                                                   THEN a(i - i_1) * (series(b)(i_1) - inf_sum(b))
                                                                                                 ELSE 0
                                                                                                 ENDIF)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (case
                                                             "abs((series(a)(i)-inf_sum(a))*inf_sum(b))<epsilon/3 AND abs(sigma(0,i,F))<2*epsilon/3")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind
                                                                 :exclude
                                                                 ("sigma"
                                                                  "inf_sum"
                                                                  "series"))
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (rewrite
                                                                   "abs_mult")
                                                                  (("1"
                                                                    (case
                                                                     "abs(inf_sum(b))=0")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (div-by
                                                                       2
                                                                       "abs(inf_sum(b))")
                                                                      (("2"
                                                                        (case
                                                                         "(1/3)/abs(inf_sum(b))>1 / 2 / (3 + 3 * abs(inf_sum(b)))")
                                                                        (("1"
                                                                          (mult-by
                                                                           -1
                                                                           "epsilon")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -5
                                                                               "i")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "i")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "sigma_split")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "N-1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (case
                                                                             "abs(sigma(0, N - 1, F))<epsilon/3 AND abs( sigma(N, i, F))<epsilon/3")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (grind
                                                                                 :exclude
                                                                                 "sigma")
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sigma_triangle")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (case
                                                                                         "sigma(0, N - 1, LAMBDA (n: nat): abs(F(n)))<epsilon/3")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           (-1
                                                                                            2))
                                                                                          (("2"
                                                                                            (name
                                                                                             "G"
                                                                                             "((epsilon / 2) / (3 * N + 3 * (N * X)))")
                                                                                            (("2"
                                                                                              (case
                                                                                               "NOT sigma(0, N - 1, LAMBDA (n: nat): abs(F(n)))<=sigma(0,N-1,LAMBDA (n:nat): G*X)")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sigma_le")
                                                                                                (("1"
                                                                                                  (skolem
                                                                                                   1
                                                                                                   "j")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "F"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "abs_mult")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "a(i-j)"
                                                                                                         "series(b)(j)-inf_sum(b)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -4
                                                                                                               "i-j")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -4
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (mult-ineq
                                                                                                                           -4
                                                                                                                           -5)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "abs_abs")
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "abs_abs")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "FORALL (kz:nat): kz<=N-1 IMPLIES sigma(0, kz, LAMBDA (n: nat): G * X) = (kz+1)*G*X")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "N-1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "G*N*X<epsilon/3")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "G"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (cross-mult
                                                                                                               1)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (induct
                                                                                                   "kz")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skolem
                                                                                                     1
                                                                                                     "kz")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "sigma"
                                                                                                           +)
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "sigma_triangle")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (case
                                                                                         "sigma(N,i, LAMBDA (n: nat): abs(F(n)))<epsilon/3")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           (-1
                                                                                            2))
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "sigma_le")
                                                                                            (("2"
                                                                                              (name
                                                                                               "Q"
                                                                                               "epsilon / 2 / (3 + 3 * inf_sum(abs(a)))")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (name
                                                                                                     "G"
                                                                                                     "(LAMBDA (i_1: nat):
                                                             IF i_1 <= i
                                                               THEN abs(a(i-i_1))*Q
                                                             ELSE 0
                                                             ENDIF)")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "G")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "sigma(N,i,G)<epsilon/3")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               (-1
                                                                                                                2))
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "sigma_scal")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "(LAMBDA (i_1: nat):
                                                            IF i_1 <= i
                                                              THEN abs(a(i-i_1))
                                                            ELSE 0
                                                            ENDIF)"
                                                                                                                   "Q"
                                                                                                                   "i"
                                                                                                                   "N")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (invoke
                                                                                                                       (case
                                                                                                                        "NOT %1 = %2")
                                                                                                                       (!
                                                                                                                        -1
                                                                                                                        1)
                                                                                                                       (!
                                                                                                                        1
                                                                                                                        1))
                                                                                                                      (("1"
                                                                                                                        (hide-all-but
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "sigma_eq")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "G"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "Q"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (cross-mult
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "sigma(N, i,
              (LAMBDA (i_1: nat):
                 IF i_1 <= i THEN abs(a(i - i_1)) ELSE 0 ENDIF))<=inf_sum(abs(a))")
                                                                                                                                (("1"
                                                                                                                                  (mult-by
                                                                                                                                   -1
                                                                                                                                   "epsilon")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "sigma(N, i,
            (LAMBDA (i_1: nat):
               IF i_1 <= i THEN abs(a(i - i_1)) ELSE 0 ENDIF))
       * epsilon>=0")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "nnreal_times_nnreal_is_nnreal")
                                                                                                                                          (("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "sigma_ge_0")
                                                                                                                                              (("2"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (skosimp*)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "sigma_reverse"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "sigma_shift_neg")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "abs(a)"
                                                                                                                                           "i"
                                                                                                                                           "N"
                                                                                                                                           "N")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "NOT FORALL (k:nat): N+k<=i IMPLIES sigma(N, N+k, LAMBDA n: IF n - N < 0 THEN 0 ELSE abs(a)(n - N) ENDIF) = sigma(N, N+k,
            LAMBDA (n: nat):
              IF n > N + i THEN 0
              ELSE IF N - n + i <= i THEN abs(a(n - N)) ELSE 0 ENDIF
              ENDIF)")
                                                                                                                                              (("1"
                                                                                                                                                (induct
                                                                                                                                                 "k")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "sigma"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "sigma"
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "abs"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "abs"
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "sigma"
                                                                                                                                                       +)
                                                                                                                                                      (("2"
                                                                                                                                                        (replaces
                                                                                                                                                         -1
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "abs"
                                                                                                                                                           1)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "abs"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("3"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("3"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("4"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("4"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("5"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("5"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("6"
                                                                                                                                                  (skosimp*)
                                                                                                                                                  (("6"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (inst
                                                                                                                                                 -
                                                                                                                                                 "i-N")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replaces
                                                                                                                                                     -1
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("2"
                                                                                                                                                      (replaces
                                                                                                                                                       -1
                                                                                                                                                       :dir
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (hide
                                                                                                                                                         (-1
                                                                                                                                                          -2
                                                                                                                                                          -3
                                                                                                                                                          -4
                                                                                                                                                          -5))
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "inf_sum")
                                                                                                                                                          (("2"
                                                                                                                                                            (lemma
                                                                                                                                                             "limit_lemma")
                                                                                                                                                            (("2"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "convergence")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -
                                                                                                                                                                     "sigma(0, i - N, abs(a)) - limit(series(abs(a)))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (skosimp*)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -
                                                                                                                                                                         "max(i-N,n!1)+10")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (case
                                                                                                                                                                               "sigma(0, i - N, abs(a))<=series(abs(a))(10 + max(i - N, n!1))")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (grind
                                                                                                                                                                                 :exclude
                                                                                                                                                                                 ("limit"
                                                                                                                                                                                  "series"
                                                                                                                                                                                  "sigma"
                                                                                                                                                                                  "conv_series"))
                                                                                                                                                                                nil
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide
                                                                                                                                                                                 2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "series")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (lemma
                                                                                                                                                                                     "sigma_split")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -
                                                                                                                                                                                       "abs(a)"
                                                                                                                                                                                       "10+max(i-N,n!1)"
                                                                                                                                                                                       "0"
                                                                                                                                                                                       "i-N")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (lemma
                                                                                                                                                                                           "sigma_ge_0")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             -
                                                                                                                                                                                             "abs(a)"
                                                                                                                                                                                             "10+max(i-N,n!1)"
                                                                                                                                                                                             "1-N+i")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (skosimp*)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "abs"
                                                                                                                                                                                                   1)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("3"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("4"
                                                                                                                                                (skosimp*)
                                                                                                                                                (("4"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skosimp*)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skosimp*)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skosimp*)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "G"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "F"
                                                                                                                   1
                                                                                                                   :assert?
                                                                                                                   none)
                                                                                                                  (("2"
                                                                                                                    (lift-if
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "abs_mult")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -7
                                                                                                                             "n!1")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (mult-by
                                                                                                                                 -7
                                                                                                                                 "abs(a(i-n!1))")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (propax) nil nil) ("4" (propax) nil nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "inf_sum")
            (("2" (lemma "limit_lemma")
              (("2" (inst?)
                (("2" (expand "convergence")
                  (("2" (inst - "-limit(series(abs(a)))")
                    (("1" (skosimp*)
                      (("1" (inst - "n!1")
                        (("1" (assert)
                          (("1" (expand "series" -1 1)
                            (("1" (lemma "sigma_ge_0")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (skosimp*)
                                    (("1" (expand "abs")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (propax) nil nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "series.convergent_abs")
          (("2" (inst?)
            (("2" (assert)
              (("2" (expand "conv_series?") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conv_series? const-decl "bool" series series)
    (sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (a skolem-const-decl "sequence[real]" merten nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (series_prod const-decl "real" merten nil)
    (series const-decl "sequence[real]" series series)
    (convergence const-decl "bool" convergence_sequences analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sigma def-decl "real" sigma reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (l!1 skolem-const-decl "real" merten nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (g2 skolem-const-decl "real" merten nil)
    (g1 skolem-const-decl "real" merten nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (> const-decl "bool" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (limit const-decl "real" convergence_sequences analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (limit_lemma formula-decl nil convergence_sequences analysis)
    (convergent? const-decl "bool" convergence_sequences analysis)
    (merten_init3 formula-decl nil merten nil)
    (merten_init4 formula-decl nil merten nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (merten_init2 formula-decl nil merten nil)
    (sigma_split formula-decl nil sigma reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (i skolem-const-decl "nat" merten nil)
    (sigma_eq formula-decl nil sigma reals)
    (G skolem-const-decl "[nat -> real]" merten nil)
    (div_mult_pos_neg_lt1 formula-decl nil extra_real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (N skolem-const-decl "posnat" merten nil)
    (l!3 skolem-const-decl "real" merten nil)
    (n!1 skolem-const-decl "nat" merten nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}" real_defs
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}" real_defs
     nil)
    (sigma_shift_neg formula-decl nil sigma_nat reals)
    (sigma_reverse formula-decl nil sigma_nat reals)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal judgement-tcc nil real_types nil)
    (sigma_ge_0 formula-decl nil sigma reals)
    (Q skolem-const-decl "nzreal" merten nil)
    (sigma_scal formula-decl nil sigma reals)
    (sigma_triangle formula-decl nil sigma reals)
    (sigma_nnreal application-judgement "nnreal" sigma_nat reals)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_abs formula-decl nil real_props nil)
    (subrange type-eq-decl nil integers nil)
    (F skolem-const-decl "[nat -> real]" merten nil)
    (sigma_le formula-decl nil sigma reals)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (G skolem-const-decl "posreal" merten nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs_mult formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (b skolem-const-decl "sequence[real]" merten nil)
    (abs_nat formula-decl nil abs_lems reals)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (merten_init5 formula-decl nil merten nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (inf_sum const-decl "real" series series)
    (abs const-decl "sequence[real]" series series)
    (convergent_abs formula-decl nil series series)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil)
  (merten1-1 nil 3707750662
   ("" (skeep*)
    (("" (case "conv_series?(a)")
      (("1"
        (case "convergence(series(series_prod(a,b)),inf_sum(a) * inf_sum(b))")
        (("1" (split)
          (("1" (expand "conv_series?")
            (("1" (expand "convergent?") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (expand "inf_sum")
            (("2" (lemma "limit_lemma")
              (("2" (inst?)
                (("2" (name "g1" "limit(series(series_prod(a, b)))")
                  (("2" (replaces -1)
                    (("2" (name "g2" "limit(series(a)) * limit(series(b))")
                      (("2" (replaces -1)
                        (("2" (name "ab" "series(series_prod(a, b))")
                          (("2" (replaces -1)
                            (("2" (hide (-3 -4 -5))
                              (("2" (expand "convergence")
                                (("2" (inst - "abs(g1-g2)/10")
                                  (("1" (inst - "abs(g1-g2)/10")
                                    (("1" (skosimp*)
                                      (("1"
                                        (inst - "max(n!1,n!2)+2")
                                        (("1"
                                          (inst - "max(n!1,n!2)+2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide -) (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (hide -) (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "convergence")
            (("2" (skeep*)
              (("2" (lemma "merten_init3")
                (("2" (inst - "a" "b" "epsilon/2")
                  (("2" (assert)
                    (("2" (skeep -)
                      (("2" (lemma "merten_init4")
                        (("2" (inst - "a" "b" "epsilon/2")
                          (("2" (assert)
                            (("2" (inst - "N")
                              (("1" (skeep -)
                                (("1" (lemma "merten_init5")
                                  (("1" (inst - "a" "b" "epsilon/2")
                                    (("1" (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst + "max(N,max(M,L))+10")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "i")
                                              (("1"
                                                (inst - "i")
                                                (("1"
                                                  (inst - "i")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma "merten_init2")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "a"
                                                         "b"
                                                         "i"
                                                         "inf_sum(b)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (name
                                                             "F"
                                                             "(LAMBDA (i_1: nat):
                                             IF i_1 <= i
                                               THEN a(i - i_1) * (series(b)(i_1) - inf_sum(b))
                                             ELSE 0
                                             ENDIF)")
                                                            (("1"
                                                              (replace -1)
                                                              (("1"
                                                                (case
                                                                 "abs((series(a)(i)-inf_sum(a))*inf_sum(b))<epsilon/3 AND abs(sigma(0,i,F))<2*epsilon/3")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1 1))
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     ("sigma"
                                                                      "inf_sum"
                                                                      "series"))
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (rewrite
                                                                       "abs_mult")
                                                                      (("1"
                                                                        (case
                                                                         "abs(inf_sum(b))=0")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (div-by
                                                                           2
                                                                           "abs(inf_sum(b))")
                                                                          (("2"
                                                                            (case
                                                                             "(1/3)/abs(inf_sum(b))>1 / 2 / (3 + 3 * abs(inf_sum(b)))")
                                                                            (("1"
                                                                              (mult-by
                                                                               -1
                                                                               "epsilon")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (cross-mult
                                                                                   1)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "sigma_split")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "N-1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (case
                                                                                 "abs(sigma(0, N - 1, F))<epsilon/3 AND abs( sigma(N, i, F))<epsilon/3")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (grind
                                                                                     :exclude
                                                                                     "sigma")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "sigma_triangle")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "sigma(0, N - 1, LAMBDA (n: nat): abs(F(n)))<epsilon/3")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               (-1
                                                                                                2))
                                                                                              (("2"
                                                                                                (case
                                                                                                 "NOT sigma(0, N - 1, LAMBDA (n: nat): abs(F(n)))<=2")
                                                                                                (("1"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (propax) nil nil) ("4" (propax) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (merten 0
  (merten-1 nil 3707812129
   ("" (skeep*)
    (("" (split)
      (("1" (lemma "merten1") (("1" (insteep) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "merten1")
        (("2" (inst - "b" "a")
          (("2" (assert)
            (("2" (flatten)
              (("2" (case "series_prod(b,a)=series_prod(a,b)")
                (("1" (assert) nil nil)
                 ("2" (hide-all-but 1)
                  (("2" (decompose-equality)
                    (("2" (expand "series_prod")
                      (("2" (rewrite "sigma_reverse")
                        (("1" (assert)
                          (("1" (rewrite "sigma_eq")
                            (("1" (skosimp*) (("1" (assert) nil nil)) nil)
                             ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (skosimp*) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sequence type-eq-decl nil sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (merten1 formula-decl nil merten nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sigma_eq formula-decl nil sigma reals) (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma_reverse formula-decl nil sigma_nat reals)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (series_prod const-decl "real" merten nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))


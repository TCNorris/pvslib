(arcsin
 (IMP_derivative_props_TCC1 0
  (IMP_derivative_props_TCC1-1 nil 3708362116 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil
   (IMP_derivative_props assuming
    "derivative_props[real_abs_lt_pi2].derivative_props"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_derivative_props_TCC2 0
  (IMP_derivative_props_TCC2-1 nil 3708362116
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (inst-cp + "pi/3")
        (("" (assert) (("" (inst-cp + "pi/4") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil
   (IMP_derivative_props assuming
    "derivative_props[real_abs_lt_pi2].derivative_props"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (sin_restrict_range 0
  (sin_restrict_range-1 nil 3706536774
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (case "sin(x!1) = 1 IMPLIES x!1 = pi/2")
        (("1" (case "sin(x!1) = -1 IMPLIES x!1 = -pi/2")
          (("1" (ground) nil nil)
           ("2" (hide -1 2)
            (("2" (flatten)
              (("2" (lemma "sin_eq_m1")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (skosimp*)
                      (("2" (case "i!1 = 0")
                        (("1" (assert) nil nil)
                         ("2" (case "i!1 >= 1")
                          (("1" (assert)
                            (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "i!1 <= -1")
                            (("1" (assert)
                              (("1" (mult-by -1 "2*pi")
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (hide 2)
            (("2" (lemma "sin_eq_1")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (hide -2)
                      (("2" (case "i!1 = 0")
                        (("1" (assert) nil nil)
                         ("2" (case "i!1 >= 1")
                          (("1" (assert)
                            (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "i!1 <= -1")
                            (("1" (assert)
                              (("1" (mult-by -1 "2*pi")
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_eq_1 formula-decl nil trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (>= const-decl "bool" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_eq_m1 formula-decl nil trig_basic nil)
    (sin const-decl "real" sincos_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (sin_restrict_TCC1 0
  (sin_restrict_TCC1-1 nil 3706537677
   ("" (skosimp*)
    (("" (lemma "sin_restrict_range") (("" (inst?) nil nil)) nil)) nil)
   ((sin_restrict_range formula-decl nil arcsin nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil (sin_restrict subtype "sincos_def.sin(arcsin.x)" "real_abs_lt1")))
 (sin_restrict_inj 0
  (sin_restrict_inj-1 nil 3706537706
   ("" (expand "injective?")
    (("" (skosimp*)
      (("" (case "x1!1 <= x2!1")
        (("1" (lemma "sin_increasing")
          (("1" (inst - "x2!1" "x1!1") (("1" (assert) nil nil)) nil)) nil)
         ("2" (typepred "x2!1")
          (("2" (lemma "sin_increasing")
            (("2" (inst - "x1!1" "x2!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_increasing formula-decl nil trig_ineq nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (injective? const-decl "bool" functions nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil))
 (sin_restrict_surj 0
  (sin_restrict_surj-2 nil 3707049070
   ("" (expand "surjective?")
    (("" (skosimp*)
      (("" (case "y!1 = 0")
        (("1" (inst + "0")
          (("1" (rewrite "sin_0") (("1" (assert) nil nil)) nil)
           ("2" (assert) (("2" (typepred "pi") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "y!1")
          (("2" (case "y!1 > 0")
            (("1" (lemma "intermediate_value2[0,pi/2]")
              (("1" (inst - "sin" "y!1")
                (("1" (assert)
                  (("1" (expand "restrict")
                    (("1" (rewrite "sin_pi2")
                      (("1" (rewrite "sin_0")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (skosimp*)
                              (("1" (inst + "c!1")
                                (("1" (assert)
                                  (("1" (typepred "c!1")
                                    (("1" (case-replace "c!1 = pi/2")
                                      (("1"
                                        (rewrite "sin_pi2")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (expand "continuous?")
                                (("2" (skosimp*)
                                  (("2" (lemma "sin_continuous")
                                    (("2" (inst?)
                                      (("2"
                                        (expand "continuous?")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst - "epsilon!1")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst + "delta!1")
                                                (("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (inst?)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (lemma "intermediate_value2[-pi/2,0]")
              (("1" (inst - "sin" "y!1")
                (("1" (expand "restrict")
                  (("1" (rewrite "sin_0")
                    (("1" (lemma "sin_pi2")
                      (("1" (lemma "sin_neg")
                        (("1" (inst - "pi/2")
                          (("1" (assert)
                            (("1" (split -3)
                              (("1" (skosimp*)
                                (("1" (inst + "c!1") (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (hide 4)
                                (("2" (expand "continuous?")
                                  (("2" (skosimp*)
                                    (("2" (lemma "sin_continuous")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (expand "continuous?")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "epsilon!1")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst + "delta!1")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (inst?)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (hide 4)
                (("2" (typepred "pi") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((c!1 skolem-const-decl "J[-pi / 2, 0]" arcsin nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_neg formula-decl nil sincos_def nil)
    (intermediate_value2 formula-decl nil continuity_interval analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_pi2 formula-decl nil sincos nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_continuous formula-decl nil sincos nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (c!1 skolem-const-decl "J[0, pi / 2]" arcsin nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (J nonempty-type-eq-decl nil continuity_interval analysis)
    (restrict const-decl "R" restrict nil)
    (sin const-decl "real" sincos_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (sin_0 formula-decl nil sincos_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_lb_new const-decl "posreal" pi_def nil)
    (pi_ub_new const-decl "posreal" pi_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (surjective? const-decl "bool" functions nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil)
  (sin_restrict_surj-1 nil 3707047899
   ("" (expand "surjective?")
    (("" (skosimp*)
      (("" (case "y!1 = 0")
        (("1" (inst + "0")
          (("1" (rewrite "sin_0") (("1" (assert) nil nil)) nil)
           ("2" (assert) (("2" (typepred "pi") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (typepred "y!1")
          (("2" (case "y!1 > 0")
            (("1" (name "XX" "(y!1+1)/2")
              (("1" (lemma "intermediate_value2[0,XX]")
                (("1" (inst - "(LAMBDA (x:J[0,XX]): sin(x))" "y!1")
                  (("1" (rewrite "sin_0")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (skosimp*)
                          (("1" (inst + "c!1")
                            (("1" (assert) (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 3)
                          (("2" (expand "continuous?")
                            (("2" (skosimp*)
                              (("2" (lemma "sin_continuous")
                                (("2" (inst?)
                                  (("2" (expand "continuous?")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst - "epsilon!1")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (inst + "delta!1")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (inst?)
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 3) (("3" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide 3) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sin_restrict_bij 0
  (sin_restrict_bij-1 nil 3706539040
   ("" (expand "bijective?")
    (("" (lemma "sin_restrict_surj")
      (("" (assert)
        (("" (lemma "sin_restrict_inj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin_restrict_surj formula-decl nil arcsin nil)
    (sin_restrict_inj formula-decl nil arcsin nil)
    (bijective? const-decl "bool" functions nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (del_neigh_lem 0
  (del_neigh_lem-1 nil 3706605371
   ("" (expand "del_neigh_all?")
    (("" (skosimp*)
      (("" (inst + "min((pi/2-a!1)/2,(a!1+pi/2)/2.0)")
        (("1" (skosimp*) (("1" (grind) nil nil)) nil)
         ("2" (grind :exclude "pi") nil nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (a!1 skolem-const-decl "real_abs_lt_pi2" arcsin nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_sin_restrict_TCC1 0
  (deriv_sin_restrict_TCC1-1 nil 3706515994
   ("" (lemma deriv_domain_real_abs_lt_pi2) (("" (propax) nil nil)) nil)
   ((deriv_domain_real_abs_lt_pi2 formula-decl nil sincos nil)) nil
   (deriv_sin_restrict assuming
    "analysis@derivatives[real_abs_lt_pi2].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_sin_restrict 0
  (deriv_sin_restrict-1 nil 3706515998
   ("" (lemma "derivable_sin")
    (("" (lemma "derivable_subtype[real,real_abs_lt_pi2]")
      (("" (inst?)
        (("" (assert)
          (("" (expand "restrict")
            (("" (assert)
              (("" (lemma "deriv_subtype[real,real_abs_lt_pi2]")
                (("" (inst?)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (expand "restrict")
                        (("1" (assert)
                          (("1" (lemma "deriv_sin_fun")
                            (("1" (replace -1) (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2 2)
                        (("2" (lemma "del_neigh_lem") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (deriv_domain_real_abs_lt_pi2 formula-decl nil sincos nil)
    (noa_real_lt_pi2 formula-decl nil sincos nil)
    (deriv_sin_fun formula-decl nil sincos nil)
    (del_neigh_lem formula-decl nil arcsin nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (restrict const-decl "R" restrict nil)
    (sin const-decl "real" sincos_def nil)
    (derivable_sin formula-decl nil sincos_def nil))
   shostak))
 (arc_sin_exists 0
  (arc_sin_exists-2 "" 3790092576
   ("" (lemma "sin_restrict_range")
    (("" (inst + "inverse[real_abs_lt_pi2,real_abs_lt1](sin_restrict)")
      (("" (skosimp*)
        (("" (lemma "inverse_surjective[real_abs_lt_pi2,real_abs_lt1]")
          (("" (inst?)
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (lemma "sin_restrict_surj") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (arc_sin_exists-1 nil 3706538326
   ("" (lemma "sin_restrict_range")
    (("" (inst + "inverse[real_abs_lt_pi2,real_abs_lt1](sin_restrict)")
      (("1" (skosimp*)
        (("1" (lemma "inverse_surjective[real_abs_lt_pi2,real_abs_lt1]")
          (("1" (inst?)
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (lemma "sin_restrict_surj") (("2" (propax) nil nil)) nil))
              nil)
             ("3" (assert)
              (("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (inst?) (("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (inst?) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (sin_restrict_surj formula-decl nil arcsin nil)
    (surjective? const-decl "bool" functions nil)
    (sin_restrict_range formula-decl nil arcsin nil))
   nil))
 (arc_sin_TCC1 0
  (arc_sin_TCC1-1 nil 3408970754
   ("" (lemma "arc_sin_exists") (("" (propax) nil nil)) nil)
   ((arc_sin_exists formula-decl nil arcsin nil)) nil
   (arc_sin existence ""
    "[y: trig_types.real_abs_lt1 -> {x: trig_types.real_abs_lt_pi2 | y = sincos_def.sin(x)}]")))
 (arc_sin_inverse 0
  (arc_sin_inverse-3 "" 3790092576
   ("" (apply-extensionality 1 :hide? t)
    (("1" (lemma "inverse_injective[real_abs_lt_pi2,real_abs_lt1]")
      (("1" (inst - "arc_sin(x!1)" "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (lemma "sin_restrict_inj") (("2" (propax) nil nil)) nil)) nil)
         ("3" (hide -1 -2 2)
          (("3" (skosimp*)
            (("3" (lemma "sin_restrict_range") (("3" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (lemma "sin_restrict")
        (("2" (replace -1 * RL)
          (("2" (hide -1)
            (("2" (lemma "inverse_surjective[real_abs_lt_pi2, real_abs_lt1]")
              (("2" (inst?)
                (("1" (expand "sin_restrict") (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma sin_restrict_surj)
                    (("2" (assert)
                      (("2" (expand "sin_restrict") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "sin_restrict_range") (("3" (propax) nil nil)) nil))
    nil)
   nil shostak)
  (arc_sin_inverse-2 nil 3706880677
   ("" (apply-extensionality 1 :hide? t)
    (("1" (lemma "inverse_injective[real_abs_lt_pi2,real_abs_lt1]")
      (("1" (inst - "arc_sin(x!1)" "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (lemma "sin_restrict_inj") (("2" (propax) nil nil)) nil)) nil)
         ("3" (hide -1 -2 2)
          (("3" (skosimp*)
            (("3" (lemma "sin_restrict_range")
              (("3" (inst?)
                (("3" (assert) (("3" (flatten) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (lemma "sin_restrict")
        (("2" (replace -1 * RL)
          (("2" (hide -1)
            (("2" (lemma "inverse_surjective[real_abs_lt_pi2, real_abs_lt1]")
              (("2" (inst?)
                (("1" (expand "sin_restrict") (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma sin_restrict_surj)
                    (("2" (assert)
                      (("2" (expand "sin_restrict") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "sin_restrict_range")
      (("3" (assert)
        (("3" (skosimp*)
          (("3" (inst?) (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse_surjective formula-decl nil function_inverse nil)
    (sin_restrict_surj formula-decl nil arcsin nil)
    (surjective? const-decl "bool" functions nil)
    (sin_restrict macro-decl "real_abs_lt1" arcsin nil)
    (inverse_injective formula-decl nil function_inverse nil)
    (sin_restrict_range formula-decl nil arcsin nil)
    (sin_restrict_inj formula-decl nil arcsin nil)
    (injective? const-decl "bool" functions nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (inverse const-decl "D" function_inverse nil)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil)
  (arc_sin_inverse-1 nil 3706871906
   ("" (lemma "bijective_inverse_is_bijective[real_abs_lt_pi2,real_abs_lt1]")
    (("" (inst?)
      (("1" (expand "bijective?")
        (("1" (flatten)
          (("1" (apply-extensionality 1 :hide? t)
            (("1" (postpone) nil nil)
             ("2" (skosimp*) (("2" (assert) (("2" (postpone) nil nil)) nil))
              nil)
             ("3" (postpone) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "bijective?")
          (("2" (lemma sin_restrict_inj)
            (("2" (assert)
              (("2" (lemma sin_restrict_surj) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (skosimp*)
          (("3" (lemma "sin_restrict_range")
            (("3" (inst?)
              (("3" (assert) (("3" (flatten) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sin_arc_sin 0
  (sin_arc_sin-1 nil 3408970763
   ("" (skosimp*) (("" (typepred "arc_sin(y!1)") (("" (assert) nil nil)) nil))
    nil)
   ((arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (arc_sin_sin 0
  (arc_sin_sin-1 nil 3408970777
   ("" (skosimp*)
    (("" (typepred "arc_sin(sin(x!1))")
      (("" (lemma "sin_restrict_inj")
        (("" (expand "injective?")
          (("" (inst - "x!1" "arc_sin(sin(x!1))") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (injective? const-decl "bool" functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_restrict_inj formula-decl nil arcsin nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (arc_sin_0 0
  (arc_sin_0-1 nil 3707141879
   ("" (typepred "arc_sin(0)")
    (("" (lemma "sin_eq_0")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp*)
            (("" (case "i!1 = 0")
              (("1" (assert) nil nil)
               ("2" (case "i!1 >= 1")
                (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil)) nil)
                 ("2" (case "i!1 <= -1")
                  (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_eq_0 formula-decl nil sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (>= const-decl "bool" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (sin const-decl "real" sincos_def nil)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil))
   shostak))
 (arc_sin_derivable_TCC1 0
  (arc_sin_derivable_TCC1-1 nil 3706514856
   ("" (lemma "deriv_domain_open") (("" (inst - "-1" "1") nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis))
   nil
   (arc_sin_derivable assuming
    "analysis@derivatives[real_abs_lt1].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (arc_sin_derivable_TCC2 0
  (arc_sin_derivable_TCC2-1 nil 3706524005
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (inst-cp + 0) (("" (inst-cp + 1/2) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (arc_sin_derivable assuming
    "analysis@derivatives[real_abs_lt1].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (arc_sin_derivable 0
  (arc_sin_derivable-8 "" 3790092578
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]")
    (("1"
      (inst - "(LAMBDA (x: real_abs_lt_pi2): sin(x))"
       "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
       "deriv[real_abs_lt_pi2](LAMBDA (x: real_abs_lt_pi2): sin(x))")
      (("1" (split -1)
        (("1"
          (case-replace "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
          (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "deriv_sin_restrict") (("2" (flatten) nil nil)) nil))
          nil)
         ("3" (lemma "sin_restrict_bij") (("3" (propax) nil nil)) nil)
         ("4" (hide 2)
          (("4" (expand "inverse?")
            (("4" (skosimp*)
              (("4" (typepred "arc_sin(r!1)") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (lemma "deriv_sin")
          (("2" (inst?)
            (("2" (lemma "deriv_subtype[real,real_abs_lt_pi2]")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (expand "restrict")
                      (("1" (assert)
                        (("1" (decompose-equality -1)
                          (("1" (inst?)
                            (("1" (replace -2)
                              (("1" (replace -1)
                                (("1" (hide -1 -2 1)
                                  (("1" (lemma "cos_gt_0")
                                    (("1" (inst?) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 1 2)
                            (("2" (lemma "cos_gt_0")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "sin_derivable_fun") (("2" (propax) nil nil))
                      nil)
                     ("3" (hide -1 -2 2)
                      (("3" (lemma del_neigh_lem) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil nil)) nil)
       ("4" (skosimp*)
        (("4" (assert)
          (("4" (typepred "x!1")
            (("4" (lemma "sin_restrict_range") (("4" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "connected?")
        (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (arc_sin_derivable-7 "" 3706870451
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]")
    (("1"
      (inst - "(LAMBDA (x: real_abs_lt_pi2): sin(x))"
       "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
       "deriv[real_abs_lt_pi2](LAMBDA (x: real_abs_lt_pi2): sin(x))")
      (("1" (split -1)
        (("1"
          (case-replace "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
          (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "deriv_sin_restrict") (("2" (flatten) nil nil)) nil))
          nil)
         ("3" (lemma "sin_restrict_bij") (("3" (propax) nil nil)) nil)
         ("4" (hide 2)
          (("4" (expand "inverse?")
            (("4" (skosimp*)
              (("4" (typepred "arc_sin(r!1)") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (lemma "deriv_sin")
          (("2" (inst?)
            (("2" (lemma "deriv_subtype[real,real_abs_lt_pi2]")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (expand "restrict")
                      (("1" (assert)
                        (("1" (decompose-equality -1)
                          (("1" (inst?)
                            (("1" (replace -2)
                              (("1" (replace -1)
                                (("1" (hide -1 -2 1)
                                  (("1" (lemma "cos_gt_0")
                                    (("1" (inst?) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 1 2)
                            (("2" (lemma "cos_gt_0")
                              (("2" (inst?) (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "sin_derivable_fun") (("2" (propax) nil nil))
                      nil)
                     ("3" (hide -1 -2 2)
                      (("3" (lemma del_neigh_lem) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil nil)) nil)
       ("4" (skosimp*)
        (("4" (assert)
          (("4" (typepred "x!1")
            (("4" (lemma "sin_restrict_range")
              (("4" (inst?)
                (("4" (assert) (("4" (flatten) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "connected?")
        (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sin const-decl "real" sincos_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_domain_real_abs_lt_pi2 formula-decl nil sincos nil)
    (noa_real_lt_pi2 formula-decl nil sincos nil)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (sin_restrict_bij formula-decl nil arcsin nil)
    (deriv_sin_restrict formula-decl nil arcsin nil)
    (deriv_sin formula-decl nil sincos_def nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (del_neigh_lem formula-decl nil arcsin nil)
    (sin_derivable_fun formula-decl nil sincos nil)
    (restrict const-decl "R" restrict nil)
    (cos_gt_0 formula-decl nil trig_basic nil)
    (sin_restrict_range formula-decl nil arcsin nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (inverse_derivable_fun formula-decl nil derivative_inverse analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil))
   shostak)
  (arc_sin_derivable-6 nil 3706539890
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]")
    (("1"
      (inst - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)")
      (("1" (assert)
        (("1" (lemma "sin_restrict_bij")
          (("1" (expand "sin_restrict")
            (("1" (assert)
              (("1" (lemma "deriv_sin_restrict")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sin_restrict")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (lemma "arc_sin_inverse")
                            (("1" (replace -1 +)
                              (("1" (hide -1 -2)
                                (("1" (rewrite right_inverse_is_inverse)
                                  (("1" (hide 2)
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "surj_right[real_abs_lt_pi2,real_abs_lt1]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "sin_restrict")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "sin_prep")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (lemma "sin_prep")
                                    (("2" (propax)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (lemma "arc_sin_inverse")
        (("2" (replace -1)
          (("2" (replace -1 + rl)
            (("2" (skosimp*)
              (("2" (hide 1)
                (("2" (lemma "deriv_sin_restrict")
                  (("2" (flatten)
                    (("2" (expand "sin_restrict")
                      (("2" (assert) nil)))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))))
     ("2" (expand "connected?") (("2" (propax) nil)))
     ("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))
    nil)
   nil nil)
  (arc_sin_derivable-5 nil 3706539813
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]")
    (("1"
      (inst - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)")
      (("1" (assert)
        (("1" (lemma "sin_restrict_bij")
          (("1" (expand "sin_restrict")
            (("1" (assert)
              (("1" (lemma "deriv_sin_restrict")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sin_restrict")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (lemma "arc_sin_inverse")
                            (("1" (replace -1 +)
                              (("1" (hide -1 -2)
                                (("1" (rewrite right_inverse_is_inverse)
                                  (("1" (hide 2)
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "surj_right[real_abs_lt_pi2,real]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "sin_restrict")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "sin_prep")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (lemma "sin_prep")
                                    (("2" (propax)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (lemma "arc_sin_inverse")
        (("2" (replace -1)
          (("2" (replace -1 + rl)
            (("2" (skosimp*)
              (("2" (hide 1)
                (("2" (lemma "deriv_sin_restrict")
                  (("2" (flatten)
                    (("2" (expand "sin_restrict")
                      (("2" (assert) nil)))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))))
     ("2" (expand "connected?") (("2" (propax) nil)))
     ("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))
    nil)
   nil nil)
  (arc_sin_derivable-4 nil 3706539461
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]")
    (("1"
      (inst - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)")
      (("1" (assert)
        (("1" (lemma "sin_restrict_bij")
          (("1" (expand "sin_restrict")
            (("1" (assert)
              (("1" (lemma "deriv_sin_restrict")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sin_restrict")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (lemma "asin_inverse")
                            (("1" (replace -1 +)
                              (("1" (hide -1 -2)
                                (("1" (rewrite right_inverse_is_inverse)
                                  (("1" (hide 2)
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "surj_right[real_abs_lt_pi2,real]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "sin_restrict")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "sin_prep")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (lemma "sin_prep")
                                    (("2" (propax)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (lemma "asin_inverse")
        (("2" (replace -1)
          (("2" (replace -1 + rl)
            (("2" (skosimp*)
              (("2" (hide 1)
                (("2" (lemma "deriv_sin_restrict")
                  (("2" (flatten)
                    (("2" (expand "sin_restrict")
                      (("2" (assert) nil)))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))))
     ("2" (expand "connected?") (("2" (propax) nil)))
     ("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))
    nil)
   nil nil)
  (arc_sin_derivable-3 nil 3706539226
   ("" (lemma "inverse_derivable_fun[real_abs_lt1,real_abs_lt_pi2]")
    (("1"
      (inst - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)")
      (("1" (assert)
        (("1" (lemma "sin_restrict_bij")
          (("1" (expand "sin_restrict")
            (("1" (assert)
              (("1" (lemma "deriv_sin_restrict")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sin_restrict")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (lemma "asin_inverse")
                            (("1" (replace -1 +)
                              (("1" (hide -1 -2)
                                (("1" (rewrite right_inverse_is_inverse)
                                  (("1" (hide 2)
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "surj_right[real_abs_lt_pi2,real]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "sin_restrict")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "sin_prep")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (lemma "sin_prep")
                                    (("2" (propax)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (lemma "asin_inverse")
        (("2" (replace -1)
          (("2" (replace -1 + rl)
            (("2" (skosimp*)
              (("2" (hide 1)
                (("2" (lemma "deriv_sin_restrict")
                  (("2" (flatten)
                    (("2" (expand "sin_restrict")
                      (("2" (assert) nil)))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))))
     ("2" (expand "connected?") (("2" (propax) nil)))
     ("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))
    nil)
   nil nil)
  (arc_sin_derivable-2 nil 3706537151
   ("" (lemma "inverse_derivable_fun[real_abs_lt_1,real_abs_lt_pi2]")
    (("1"
      (inst - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)")
      (("1" (assert)
        (("1" (lemma "sin_restrict_bij")
          (("1" (expand "sin_restrict")
            (("1" (assert)
              (("1" (lemma "deriv_sin_restrict")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sin_restrict")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (lemma "asin_inverse")
                            (("1" (replace -1 +)
                              (("1" (hide -1 -2)
                                (("1" (rewrite right_inverse_is_inverse)
                                  (("1" (hide 2)
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "surj_right[real_abs_lt_pi2,real]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "sin_restrict")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "sin_prep")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (lemma "sin_prep")
                                    (("2" (propax)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (lemma "asin_inverse")
        (("2" (replace -1)
          (("2" (replace -1 + rl)
            (("2" (skosimp*)
              (("2" (hide 1)
                (("2" (lemma "deriv_sin_restrict")
                  (("2" (flatten)
                    (("2" (expand "sin_restrict")
                      (("2" (assert) nil)))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))))
     ("2" (expand "connected?") (("2" (propax) nil)))
     ("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))
    nil)
   nil nil)
  (arc_sin_derivable-1 nil 3706537021
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real]")
    (("1"
      (inst - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)")
      (("1" (assert)
        (("1" (lemma "sin_restrict_bij")
          (("1" (expand "sin_restrict")
            (("1" (assert)
              (("1" (lemma "deriv_sin_restrict")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "sin_restrict")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (lemma "asin_inverse")
                            (("1" (replace -1 +)
                              (("1" (hide -1 -2)
                                (("1" (rewrite right_inverse_is_inverse)
                                  (("1" (hide 2)
                                    (("1" (expand "bijective?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "surj_right[real_abs_lt_pi2,real]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "sin_restrict")
                                                (("1" (propax) nil)))))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma "sin_prep")
                                                (("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2" (lemma "sin_prep")
                                    (("2" (propax)
                                      nil)))))))))))))))))))))))))))))))
       ("2" (lemma "asin_inverse")
        (("2" (replace -1)
          (("2" (replace -1 + rl)
            (("2" (skosimp*)
              (("2" (hide 1)
                (("2" (lemma "deriv_sin_restrict")
                  (("2" (flatten)
                    (("2" (expand "sin_restrict")
                      (("2" (assert) nil)))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))))
     ("2" (expand "connected?") (("2" (propax) nil)))
     ("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))
    nil)
   nil nil))
 (arc_sin_range_lt 0
  (arc_sin_range_lt-1 nil 3706529468
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (case "arc_sin(x!1) = pi/2 IMPLIES x!1 = 1")
        (("1" (case "arc_sin(x!1) = -pi/2 IMPLIES x!1 = -1")
          (("1" (assert) nil nil)
           ("2" (hide -1 2)
            (("2" (flatten)
              (("2" (case "sin(-pi/2) = -1")
                (("1" (assert) nil nil)
                 ("2" (hide -1)
                  (("2" (lemma "sin_pi2")
                    (("2" (lemma "sin_neg")
                      (("2" (inst - "pi/2") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (flatten)
            (("2" (lemma "sin_pi2") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_neg formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_pi2 formula-decl nil sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (sin const-decl "real" sincos_def nil)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (deriv_arc_sin_prep 0
  (deriv_arc_sin_prep-1 nil 3706535745
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (mult-ineq -2 -2)
        (("1" (assert) (("1" (expand "sq") (("1" (assert) nil nil)) nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sq const-decl "nonneg_real" sq reals)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   shostak))
 (deriv_arc_sin_fun_TCC1 0
  (deriv_arc_sin_fun_TCC1-1 nil 3706514856
   ("" (flatten)
    (("" (skosimp*)
      (("" (lemma "deriv_arc_sin_prep")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (deriv_arc_sin_prep formula-decl nil arcsin nil))
   nil
   (deriv_arc_sin_fun subtype "(number_fields.-)(1, sq.sq(arcsin.x))"
    "nonneg_real")))
 (deriv_arc_sin_fun_TCC2 0
  (deriv_arc_sin_fun_TCC2-1 nil 3706515994
   ("" (skosimp*)
    (("" (lemma "deriv_arc_sin_prep")
      (("" (inst?)
        (("" (lemma "sqrt_eq_0")
          (("" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_arc_sin_prep formula-decl nil arcsin nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (x!1 skolem-const-decl "real_abs_lt1" arcsin nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_arc_sin_fun subtype
    "sqrt.sqrt((number_fields.-)(1, sq.sq(arcsin.x)))" "nznum")))
 (deriv_arc_sin_fun 0
  (deriv_arc_sin_fun-6 nil 3706536306
   ("" (lemma "arc_sin_derivable")
    (("" (assert)
      (("" (lemma "deriv_sin_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,real_abs_lt_pi2]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
               "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (case
                                           "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (lemma "sqrt_lem")
                                                (("1"
                                                  (inst
                                                   -
                                                   "1-sq(x!1)"
                                                   "cos(arc_sin(x!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (replace -1 + rl)
                                                            (("1"
                                                              (lemma
                                                               "sin2_cos2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "sq")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (lemma "cos_ge_0")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (apply-extensionality 1 :hide? t) nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                          (("2" (apply-extensionality 1 :hide? t) nil nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3"
                            (case-replace
                             "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                            (("1" (hide -1)
                              (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                                (("1" (inst - "1" "0")
                                  (("1" (assert) (("1" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality 1 :hide? t) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "deriv_arc_sin_prep")
                          (("2" (inst?)
                            (("2" (lemma "sqrt_eq_0")
                              (("2" (inst?)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1")
                                (("1" (assert) nil nil)) nil)
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 2)
                (("2"
                  (case-replace
                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                  (("2" (apply-extensionality 1 :hide? t) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (derivable? const-decl "bool" derivatives analysis)
    (sin const-decl "real" sincos_def nil)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (x!1 skolem-const-decl "real_abs_lt1" arcsin nil)
    (sq_neg formula-decl nil sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (sq_le formula-decl nil sq reals)
    (deriv_arc_sin_prep formula-decl nil arcsin nil)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "real_abs_lt1" arcsin nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (derivable_const application-judgement "deriv_fun" pi_def nil)
    (constant_seq2 application-judgement "(convergent_nz?)" convergence_ops
     analysis)
    (derivable_const application-judgement "deriv_fun" derivatives analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (x!1 skolem-const-decl "real_abs_lt1" arcsin nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_ge_0 formula-decl nil trig_ineq nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_lem formula-decl nil sqrt reals)
    (deriv_linear_fun formula-decl nil derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (chain_rule formula-decl nil chain_rule analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (deriv_sin_restrict formula-decl nil arcsin nil)
    (arc_sin_derivable formula-decl nil arcsin nil))
   nil)
  (deriv_arc_sin_fun-5 nil 3706529432
   ("" (lemma "arc_sin_derivable")
    (("" (assert)
      (("" (lemma "deriv_sin_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,real_abs_lt_pi2]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
               "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (case
                                           "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (lemma "sqrt_lem")
                                                (("1"
                                                  (inst
                                                   -
                                                   "1-sq(x!1)"
                                                   "cos(arc_sin(x!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (replace -1 + rl)
                                                            (("1"
                                                              (lemma
                                                               "sin2_cos2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "sq")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (lemma "cos_ge_0")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (apply-extensionality 1 :hide? t) nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                          (("2" (apply-extensionality 1 :hide? t) nil nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3"
                            (case-replace
                             "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                            (("1" (hide -1)
                              (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                                (("1" (inst - "1" "0")
                                  (("1" (assert) (("1" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality 1 :hide? t) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "sqrt_eq_0")
                          (("2" (inst - "1-sq(x!1)")
                            (("1" (replace -2)
                              (("1" (hide -2)
                                (("1" (assert)
                                  (("1" (typepred "x!1")
                                    (("1" (lemma "real_props.sqrt_1")
                                      (("1"
                                        (inst - "x!1")
                                        (("1"
                                          (expand "sq")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "real_props.sqrt_1")
                              (("2" (expand "sq")
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1")
                                (("1" (assert) nil nil)) nil)
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 2)
                (("2"
                  (case-replace
                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                  (("2" (apply-extensionality 1 :hide? t) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (derivable? const-decl "bool" derivatives analysis)
    (sin const-decl "real" sincos_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_neg formula-decl nil sq reals) (sq_le formula-decl nil sq reals)
    (sqrt_eq_0 formula-decl nil sqrt reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (constant_seq2 application-judgement "(convergent_nz?)" convergence_ops
     analysis)
    (derivable_const application-judgement "deriv_fun" derivatives analysis)
    (cos const-decl "real" sincos_def nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (cos_ge_0 formula-decl nil trig_ineq nil)
    (sqrt_lem formula-decl nil sqrt reals)
    (deriv_linear_fun formula-decl nil derivatives analysis)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (chain_rule formula-decl nil chain_rule analysis)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil))
   nil)
  (deriv_arc_sin_fun-4 nil 3706528368
   ("" (lemma "arc_sin_derivable")
    (("" (assert)
      (("" (lemma "deriv_sin_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,real_abs_lt_pi2]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
               "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (case
                                           "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (name-replace
                                                 "AA"
                                                 "arc_sin(x!1)")
                                                (("1"
                                                  (lemma "sin2_cos2")
                                                  (("1"
                                                    (inst?)
                                                    (("1" (postpone) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (apply-extensionality 1 :hide? t) nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                          (("2" (apply-extensionality 1 :hide? t) nil nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3" (typepred "x1!1")
                            (("3" (typepred "arc_sin(x1!1)")
                              (("3" (lemma "arc_sin_range_lt")
                                (("3" (inst?) (("3" (flatten) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide - 2)
                        (("4" (lemma "arc_sin_range_lt")
                          (("4" (inst?) (("4" (flatten) nil nil)) nil)) nil))
                        nil)
                       ("5" (hide -1 -3 -4 2)
                        (("5"
                          (case-replace
                           "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                          (("1" (hide -)
                            (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                              (("1" (inst - "1" "0")
                                (("1" (assert) (("1" (flatten) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (apply-extensionality 1 :hide? t) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "sqrt_eq_0")
                          (("2" (inst - "1-sq(x!1)")
                            (("1" (replace -2)
                              (("1" (hide -2)
                                (("1" (assert)
                                  (("1" (typepred "x!1")
                                    (("1" (lemma "real_props.sqrt_1")
                                      (("1"
                                        (inst - "x!1")
                                        (("1"
                                          (expand "sq")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "real_props.sqrt_1")
                              (("2" (expand "sq")
                                (("2" (inst - "x!1") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1")
                                (("1" (assert) nil nil)) nil)
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -1 -2)
                  (("2"
                    (case-replace
                     "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                    (("2" (apply-extensionality 1 :hide? t) nil nil)) nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (assert)
                    (("3" (hide -)
                      (("3" (lemma "arc_sin_range_lt") (("3" (inst?) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (deriv_arc_sin_fun-3 nil 3706525850
   ("" (lemma "arc_sin_derivable")
    (("" (assert)
      (("" (lemma "deriv_sin_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,real_abs_lt_pi2]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
               "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil)))))))))))))))
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (case
                                           "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst?)
                                              (("1" (postpone) nil)))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil)))))))))))))))))))
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1" (postpone) nil)))))
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t)
                                  nil)))))))
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (postpone) nil)))))))))
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                          (("2" (apply-extensionality 1 :hide? t) nil)))))
                       ("3" (hide 2) (("3" (postpone) nil)))
                       ("4" (postpone) nil)
                       ("5" (hide -1 -3 -4 2) (("5" (postpone) nil)))))
                     ("2" (hide -) (("2" (skosimp*) (("2" (postpone) nil)))))
                     ("3" (hide -)
                      (("3" (skosimp*) (("3" (postpone) nil)))))))))))
               ("2" (hide 2) (("2" (postpone) nil)))
               ("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (assert) (("3" (postpone) nil))))))))))))))))))
    nil)
   nil nil)
  (deriv_arc_sin_fun-2 nil 3706514948
   ("" (lemma "arc_sin_derivable")
    (("" (assert)
      (("" (lemma "deriv_sin_restrict")
        (("" (flatten)
          (("" (name "Y" "(LAMBDA (x: real_abs_le1): arc_sin(x))")
            (("" (lemma "chain_rule[real_abs_le1,real_abs_lt_pi2]")
              (("1" (inst - "Y" "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
                (("1" (expand "*")
                  (("1" (assert)
                    (("1" (apply-extensionality 1 :hide? t)
                      (("1" (decompose-equality -1)
                        (("1" (inst?)
                          (("1"
                            (case-replace
                             "deriv[real_abs_lt_pi2](LAMBDA (x_1: real_abs_lt_pi2): sin(Y(x_1))) = const_fun(1)")
                            (("1" (assert)
                              (("1" (hide -1)
                                (("1" (replace -4)
                                  (("1" (hide -4)
                                    (("1" (assert)
                                      (("1"
                                        (case-replace
                                         "cos(Y(x!1)) = sqrt(1-sq(x!1))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (case-replace
                                               "deriv[real_abs_le1](LAMBDA (x_1: real_abs_le1): sin(Y(x_1))) = (LAMBDA (x_1: real_abs_le1): 1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2 -1 rl)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (case-replace
                                                         "(LAMBDA (x: real_abs_le1): arc_sin(x)) =  arc_sin")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1 -3 -4 -5)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           1
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -3 -4 2)
                                                (("2"
                                                  (replace -2 + rl)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case-replace
                                                       "(LAMBDA (x_1: real_abs_le1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_le1): x_1)")
                                                      (("1"
                                                        (hide -1 -2 -3)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (apply-extensionality
                                                           1
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (postpone) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (case
                                               "(LAMBDA (x: real_abs_le1): sin(Y(x))) = (LAMBDA (x: real_abs_le1): x)")
                                              (("1"
                                                (hide -2 -3 -4)
                                                (("1"
                                                  (decompose-equality -1)
                                                  (("1"
                                                    (inst?)
                                                    (("1" (postpone) nil nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (replace -1 * rl)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -4 -5)
                              (("2" (replace -1 * rl)
                                (("2" (assert)
                                  (("2"
                                    (case-replace
                                     "(LAMBDA (x_1: real_abs_lt_pi2): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt_pi2): x_1)")
                                    (("1" (hide -1 -2 2)
                                      (("1" (postpone) nil nil)) nil)
                                     ("2" (hide 2 3)
                                      (("2"
                                        (apply-extensionality 1 :hide? t)
                                        (("2" (postpone) nil nil))
                                        nil))
                                      nil)
                                     ("3" (hide 2 3)
                                      (("3" (postpone) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (postpone) nil nil)
                             ("4" (postpone) nil nil))
                            nil)
                           ("2" (assert) (("2" (postpone) nil nil)) nil))
                          nil)
                         ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                         ("4" (postpone) nil nil) ("5" (postpone) nil nil)
                         ("6" (postpone) nil nil) ("7" (postpone) nil nil))
                        nil)
                       ("2" (skosimp*)
                        (("2" (assert)
                          (("2" (hide -2 -3 -4 -5 -6)
                            (("2" (postpone) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (skosimp*)
                        (("3" (assert) (("3" (postpone) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (deriv_arc_sin_fun-1 nil 3706514920
   ("" (lemma "asin_derivable")
    (("" (assert)
      (("" (lemma "asin_prep")
        (("" (lemma "deriv_sin_restrict")
          (("" (flatten)
            (("" (expand "restrict")
              (("" (name "Y" "(LAMBDA x: asin(x))")
                (("" (lemma "chain_rule[real,real_abs_lt_pi2]")
                  (("" (inst - "Y" "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
                    (("1" (expand "*")
                      (("1" (assert)
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (decompose-equality -1)
                            (("1" (inst?)
                              (("1"
                                (case-replace
                                 "deriv(LAMBDA (x_1: real): sin(Y(x_1))) = const_fun(1)")
                                (("1" (assert)
                                  (("1" (hide -1)
                                    (("1" (expand "sin_restrict")
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (case-replace
                                               "(LAMBDA (x_1: real): 1 / sq(cos(Y(x_1)))) = (LAMBDA x: 1 +x*x)")
                                              (("1"
                                                (case-replace
                                                 "deriv(asin) = deriv(Y)")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (decompose-equality -1)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (cross-mult 1)
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))
                                                     ("2"
                                                      (hide -4 1)
                                                      (("2"
                                                        (inst - "Y(x1!1)")
                                                        (("2"
                                                          (expand "Sin?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (lemma
                                                               "sq_eq_0")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (case
                                                   "asin = (LAMBDA x: asin(x))")
                                                  (("1"
                                                    (replace -1)
                                                    (("1" (assert) nil)))
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil)))))))
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case
                                                   "(LAMBDA x: sin(Y(x))) = (LAMBDA x: x)")
                                                  (("1"
                                                    (hide -3 -4 -5)
                                                    (("1"
                                                      (case
                                                       "(LAMBDA x: sin(Y(x))*sin(Y(x))) = (LAMBDA x: x*x)")
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (expand "sin")
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (apply-extensionality
                                                               1
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (cross-mult 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (cross-mult
                                                                       -1)
                                                                      (("1"
                                                                        (lemma
                                                                         "sin2_cos2")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (expand
                                                                             "sq")
                                                                            (("1"
                                                                              (assert)
                                                                              nil)))))))))))
                                                                   ("2"
                                                                    (hide
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (reveal
                                                                       -9)
                                                                      (("2"
                                                                        (hide
                                                                         -2
                                                                         -3
                                                                         -5)
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "Y(x1!1)")
                                                                          (("2"
                                                                            (expand
                                                                             "Sin?")
                                                                            (("2"
                                                                              (flatten)
                                                                              nil)))))))))))))))
                                                               ("2"
                                                                (hide -1)
                                                                (("2"
                                                                  (lemma
                                                                   "sin_prep")
                                                                  (("2"
                                                                    (skosimp*)
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "Y(x!2)")
                                                                      (("2"
                                                                        (expand
                                                                         "Sin?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "sq_eq_0")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))))))))))))))))))))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -2 -3)
                                                          (("2"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (decompose-equality
                                                               -1)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))
                                                               ("2"
                                                                (lemma
                                                                 "sin_prep")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "Y(x1!1)")
                                                                  nil)))))
                                                             ("2"
                                                              (skosimp*)
                                                              (("2"
                                                                (lemma
                                                                 "sin_prep")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "Y(x!2)")
                                                                  nil)))))))))))))))
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -2 * RL)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (apply-extensionality
                                                             1
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (rewrite
                                                               "sin_asin")
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3
                                                               -5)
                                                              (("2"
                                                                (skosimp*)
                                                                (("2"
                                                                  (inst?)
                                                                  nil)))))))))))))))
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (inst -4 "Y(x!2)")
                                                        nil)))))))))
                                               ("3"
                                                (hide -)
                                                (("3"
                                                  (lemma "sin_prep")
                                                  (("3"
                                                    (skosimp*)
                                                    (("3"
                                                      (inst - "Y(x!2)")
                                                      (("3"
                                                        (expand "Sin?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (lemma "sq_eq_0")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil)))))))))))))))))))))))))))))))
                                 ("2" (hide 2)
                                  (("2" (hide -1)
                                    (("2" (replace -1 + rl)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace
                                           "(LAMBDA (x_1: real): sin(asin(x_1))) = (LAMBDA x: x)")
                                          (("1"
                                            (hide -1 -2 -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "const_fun")
                                                (("1"
                                                  (lemma
                                                   "deriv_linear_fun[real]")
                                                  (("1"
                                                    (inst - "1" "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        nil)))))))))))))
                                           ("2"
                                            (apply-extensionality 1 :hide? t)
                                            (("1" (rewrite "sin_asin") nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (inst - "asin(x!2)")
                                                nil)))))
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (inst - "asin(x!2)")
                                              nil)))))))))))))
                                 ("3" (hide 2)
                                  (("3" (replace -2 + rl)
                                    (("3" (assert)
                                      (("3"
                                        (case-replace
                                         "(LAMBDA (x_1: real): sin(asin(x_1))) = (LAMBDA x: x)")
                                        (("1"
                                          (lemma "deriv_linear_fun[real]")
                                          (("1"
                                            (inst - "1" "0")
                                            (("1"
                                              (assert)
                                              (("1" (flatten) nil)))))))
                                         ("2"
                                          (apply-extensionality 1 :hide? t)
                                          (("1" (rewrite "sin_asin") nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (inst - "asin(x!2)")
                                              nil)))))
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (inst - "asin(x!2)")
                                            nil)))))))))))
                                 ("4" (skosimp*)
                                  (("4" (hide -1 -2 -4)
                                    (("4" (inst?) nil)))))))))
                             ("2" (replace -4 + rl)
                              (("2" (hide -1 -2 -3 -4 -5 2)
                                (("2"
                                  (case-replace "(LAMBDA x: asin(x)) = asin")
                                  (("2" (apply-extensionality 1 :hide? t)
                                    nil)))))))
                             ("3" (hide 2)
                              (("3" (lemma "deriv_sin_restrict")
                                (("3" (flatten)
                                  (("3" (expand "sin_restrict")
                                    (("3" (propax) nil)))))))))
                             ("4" (hide 2)
                              (("4" (replace -2 + rl)
                                (("4" (assert)
                                  (("4"
                                    (case-replace
                                     "(LAMBDA (x_1: real): sin(asin(x_1))) = (LAMBDA x: x)")
                                    (("1" (lemma "deriv_linear_fun[real]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil)))))))
                                     ("2" (apply-extensionality 1 :hide? t)
                                      (("1" (rewrite "sin_asin") nil)
                                       ("2"
                                        (skosimp*)
                                        (("2" (inst - "asin(x!2)") nil)))))
                                     ("3" (skosimp*)
                                      (("3"
                                        (inst - "asin(x!2)")
                                        nil)))))))))))
                             ("5" (inst - "Y(x!2)") nil)))
                           ("2" (skosimp*)
                            (("2" (rewrite "sq_rew")
                              (("2" (assert) nil)))))))))))
                     ("2" (expand "sin_restrict") (("2" (propax) nil)))
                     ("3" (expand "sin_restrict")
                      (("3" (replace -1 + rl)
                        (("3" (lemma "asin_derivable")
                          (("3" (assert)
                            (("3" (case-replace "(LAMBDA x: asin(x))  = asin")
                              (("3" (apply-extensionality 1 :hide? t)
                                nil))))))))))))))))))))))))))))
    nil)
   nil nil))
 (arc_sin_continuous 0
  (arc_sin_continuous-1 nil 3706883356
   ("" (lemma "arc_sin_derivable")
    (("" (lemma "derivable_cont_fun[real_abs_lt1]")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_cont_fun formula-decl nil derivatives analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (arc_sin const-decl "{x: real_abs_lt_pi2 | y = sin(x)}" arcsin nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (arc_sin_derivable formula-decl nil arcsin nil))
   nil))
 (arc_sin_bij 0
  (arc_sin_bij-1 nil 3706883482
   ("" (lemma "bij_inv_is_bij[real_abs_lt_pi2,real_abs_lt1]")
    (("" (inst - "sin_restrict")
      (("" (assert)
        (("" (split -1)
          (("1" (lemma "arc_sin_inverse") (("1" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (lemma "sin_restrict_bij") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def nil)
    (arc_sin_inverse formula-decl nil arcsin nil)
    (sin_restrict_bij formula-decl nil arcsin nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil))
   shostak))
 (arcsin_TCC1 0
  (arcsin_TCC1-1 nil 3707131618 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil
   (arcsin subtype "number_fields./((number_fields.-)(pi_def.pi), 2)"
    "real_abs_le_pi2")))
 (arcsin_TCC2 0
  (arcsin_TCC2-1 nil 3707131618 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (arcsin subtype "arcsin.y" "real_abs_lt1")))
 (arcsin_TCC3 0
  (arcsin_TCC3-1 nil 3707131618 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil (arcsin subtype "arcsin.arc_sin(arcsin.y)" "real_abs_le_pi2")))
 (arcsin_TCC4 0
  (arcsin_TCC4-1 nil 3707132718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil (arcsin subtype "number_fields./(pi_def.pi, 2)" "real_abs_le_pi2"))))


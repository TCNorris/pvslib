(atan_approx
 (IMP_restriction_cont_fun_TCC1 0
  (IMP_restriction_cont_fun_TCC1-1 nil 3708353000 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (IMP_restriction_cont_fun assuming
    "analysis@restriction_cont_fun[posreal, nnreal].restriction_cont_fun"
    "sub_domain: ASSUMPTION FORALL (x: restriction_cont_fun.T1): EXISTS (y: restriction_cont_fun.T2): x = y")))
 (reduce_fun_TCC1 0
  (reduce_fun_TCC1-1 nil 3626517439 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)) nil
   (reduce_fun subtype
    "(number_fields.+)(1, number_fields.*(atan_approx.x, atan_approx.x))"
    "nonneg_real")))
 (reduce_pos 0
  (reduce_pos-1 nil 3626534901 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (reduce_pos subtype "atan_approx.reduce_fun(atan_approx.px)" "posreal")))
 (reduce_n_TCC1 0
  (reduce_n_TCC1-1 nil 3626793191 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (reduce_n subtype "(number_fields.-)(atan_approx.n, 1)" "nat")))
 (reduce_n_TCC2 0
  (reduce_n_TCC2-1 nil 3626793191 ("" (termination-tcc) nil nil) nil nil
   (reduce_n termination
    "atan_approx.reduce_n(atan_approx.reduce_fun(atan_approx.x), (number_fields.-)(atan_approx.n, 1))"
    "nil")))
 (reduce_alt_TCC1 0
  (reduce_alt_TCC1-1 nil 3626540014
   ("" (skeep)
    (("" (expand "reduce_fun")
      (("" (grind-reals)
        (("" (lemma "sqrt_sq")
          (("" (inst -1 px)
            (("" (split -1)
              (("1"
                (case "sqrt(1+1/sq(px))*px =sqrt(1+1/sq(px))*sqrt(sq(px)) ")
                (("1" (replaces -1)
                  (("1" (lemma "sqrt_times")
                    (("1" (inst -1 "1 + 1 / sq(px)" "sq(px)")
                      (("1" (replaces -1 :dir rl)
                        (("1" (grind-reals)
                          (("1" (expand "sq") (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground) nil nil))
                nil)
               ("2" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_cancel1 formula-decl nil real_props nil)
    (sqrt_times formula-decl nil sqrt reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cross_mult formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (reduce_alt subtype
    "number_fields./(1, ((number_fields.+)(number_fields./(1, atan_approx.px), sqrt.sqrt((number_fields.+)(number_fields./(1, sq.sq(atan_approx.px)), 1)))))"
    "{x: real_types.posreal | x = atan_approx.reduce_fun(atan_approx.px)}")))
 (reduce_n_increasing 0
  (reduce_n_increasing-1 nil 3626794755
   ("" (induct "n")
    (("1" (skeep) (("1" (expand "reduce_n") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "reduce_n" 1)
          (("2" (inst?)
            (("2" (ground)
              (("2" (hide 2)
                (("2" (case "reduce_alt(px)<=reduce_alt(py)")
                  (("1" (ground) nil nil)
                   ("2" (hide 2)
                    (("2" (case "1/px>=1/py")
                      (("1" (case "1/sq(px)>=1/sq(py)")
                        (("1" (both-sides "+" "1" -1)
                          (("1"
                            (case "sqrt(1 / sq(px) + 1) >= sqrt(1 / sq(py) + 1)")
                            (("1" (add-formulas -1 -3)
                              (("1" (expand "reduce_alt")
                                (("1" (cross-mult 1) nil nil)) nil))
                              nil)
                             ("2" (flip-ineq 1)
                              (("2" (mult-ineq -1 -1)
                                (("2" (lemma "sq_sqrt")
                                  (("2" (inst-cp -1 "(1 / sq(px) + 1)")
                                    (("2" (split -2)
                                      (("1"
                                        (inst -2 "(1 / sq(py) + 1)")
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (expand "sq")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (replaces -1)
                                                (("1" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (mult-ineq -1 -1)
                          (("2" (ground)
                            (("2" (expand "sq") (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cross-mult) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd? const-decl "bool" integers nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil) (sq_sqrt formula-decl nil sqrt reals)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (reduce_pos application-judgement "posreal" atan_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (reduce_n def-decl "real" atan_approx nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (reduce_ub_TCC1 0
  (reduce_ub_TCC1-1 nil 3626540729
   ("" (skeep)
    (("" (expand "reduce_alt")
      (("" (lemma "sqrt_bounds")
        (("" (inst?) (("" (flatten) (("" (grind-reals) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals) (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (le_div_le_pos formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (sqrt_bounds formula-decl nil sqrt_approx reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (reduce_ub subtype
    "number_fields./(1, ((number_fields.+)(number_fields./(1, atan_approx.px), sqrt_approx.sqrt_lb((number_fields.+)(number_fields./(1, sq.sq(atan_approx.px)), 1), atan_approx.n))))"
    "{x: real_types.posreal | reals.<=(atan_approx.reduce_alt(atan_approx.px), x)}")))
 (reduce_ub_increasing 0
  (reduce_ub_increasing-1 nil 3626541367
   ("" (skeep)
    (("" (case "1/px>=1/py")
      (("1" (copy -1)
        (("1" (mult-ineq -1 -1)
          (("1" (case "1/sq(px)>=1/sq(py)")
            (("1" (hide (-2 -3))
              (("1" (both-sides "+" "1" -1)
                (("1" (lemma "sqrt_lb_increasing")
                  (("1" (expand "reduce_ub")
                    (("1" (cross-mult 1)
                      (("1" (inst -1 "n" "1 / sq(py) + 1" "1 / sq(px) + 1")
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sq") (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (cross-mult 1) (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (sqrt_lb_increasing formula-decl nil sqrt_approx reals)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   shostak))
 (reduce_ub_n_TCC1 0
  (reduce_ub_n_TCC1-1 nil 3626793191
   ("" (skeep) (("" (expand "reduce_n") (("" (ground) nil nil)) nil)) nil)
   ((reduce_n def-decl "real" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (reduce_ub_n subtype "atan_approx.px"
    "{x: real_types.posreal | reals.<=(atan_approx.reduce_n(atan_approx.px, atan_approx.n), x)}")))
 (reduce_ub_n_TCC2 0
  (reduce_ub_n_TCC2-1 nil 3626793191
   ("" (skeep)
    (("" (ground)
      (("" (expand "reduce_n")
        (("" (typepred " v(reduce_ub(px, m), n - 1, m)")
          ((""
            (case " reduce_n(reduce_fun(px), n - 1) <=reduce_n(reduce_ub(px, m), n - 1)")
            (("1" (ground) nil nil)
             ("2" (lemma "reduce_n_increasing")
              (("2" (inst -1 "n-1" "reduce_fun(px)" "reduce_ub(px,m)")
                (("2" (ground)
                  (("2" (typepred "reduce_ub(px,n)")
                    (("2" (typepred "reduce_alt(px)") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (reduce_n_increasing formula-decl nil atan_approx nil)
    (reduce_pos application-judgement "posreal" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_n def-decl "real" atan_approx nil))
   nil
   (reduce_ub_n subtype
    "atan_approx.reduce_ub_n(atan_approx.reduce_ub(atan_approx.px, atan_approx.m), (number_fields.-)(atan_approx.n, 1), atan_approx.m)"
    "{x: real_types.posreal | reals.<=(atan_approx.reduce_n(atan_approx.px, atan_approx.n), x)}")))
 (reduce_ub_n_increasing 0
  (reduce_ub_n_increasing-1 nil 3626793614
   ("" (skolem 1 ("m" "_" "_" "_"))
    (("" (induct "n")
      (("1" (skeep)
        (("1" (expand "reduce_ub_n") (("1" (propax) nil nil)) nil)) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "reduce_ub_n" 1)
            (("2" (inst?)
              (("2" (ground)
                (("2" (hide 2)
                  (("2" (rewrite "reduce_ub_increasing") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (reduce_n def-decl "real" atan_approx nil)
    (reduce_ub_n def-decl "{x: posreal | reduce_n(px, n) <= x}" atan_approx
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce_ub_increasing formula-decl nil atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (reduce_lb_TCC1 0
  (reduce_lb_TCC1-1 nil 3626540729
   ("" (skeep)
    (("" (expand "reduce_alt")
      (("" (lemma "sqrt_bounds")
        (("" (inst?) (("" (flatten) (("" (grind-reals) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals) (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_div_ge_pos formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (sqrt_bounds formula-decl nil sqrt_approx reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (reduce_lb subtype
    "number_fields./(1, ((number_fields.+)(number_fields./(1, atan_approx.px), sqrt_approx.sqrt_ub((number_fields.+)(number_fields./(1, sq.sq(atan_approx.px)), 1), atan_approx.n))))"
    "{x: real_types.posreal | reals.>=(atan_approx.reduce_alt(atan_approx.px), x)}")))
 (reduce_lb_increasing 0
  (reduce_lb_increasing-2 nil 3626789908
   ("" (skeep)
    (("" (case "1/px>=1/py")
      (("1" (copy -1)
        (("1" (mult-ineq -1 -1)
          (("1" (case "1/sq(px)>=1/sq(py)")
            (("1" (hide (-2 -3))
              (("1" (both-sides "+" "1" -1)
                (("1" (lemma "sqrt_ub_increasing")
                  (("1" (expand "reduce_lb")
                    (("1" (cross-mult 1)
                      (("1" (inst -1 "n" "1 / sq(py) + 1" "1 / sq(px) + 1")
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sq") (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (cross-mult 1) (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (sqrt_ub_increasing formula-decl nil sqrt_approx reals)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_ge2 formula-decl nil real_props nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   nil)
  (reduce_lb_increasing-1 nil 3626775792 ("" (postpone) nil nil) nil shostak))
 (reduce_lb_n_TCC1 0
  (reduce_lb_n_TCC1-1 nil 3626796255
   ("" (skeep) (("" (expand "reduce_n") (("" (ground) nil nil)) nil)) nil)
   ((reduce_n def-decl "real" atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (reduce_lb_n subtype "atan_approx.px"
    "{x: real_types.posreal | reals.>=(atan_approx.reduce_n(atan_approx.px, atan_approx.n), x)}")))
 (reduce_lb_n_TCC2 0
  (reduce_lb_n_TCC2-2 nil 3626798609
   ("" (skeep)
    (("" (ground)
      (("" (expand "reduce_n")
        (("" (typepred " v(reduce_lb(px, m), n - 1, m)")
          ((""
            (case " reduce_n(reduce_fun(px), n - 1) >=reduce_n(reduce_lb(px, m), n - 1)")
            (("1" (ground) nil nil)
             ("2" (lemma "reduce_n_increasing")
              (("2" (inst -1 "n-1" "reduce_lb(px,m)" "reduce_fun(px)")
                (("2" (ground)
                  (("2" (typepred "reduce_lb(px,n)")
                    (("2" (typepred "reduce_alt(px)") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reduce_n_increasing formula-decl nil atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (reduce_pos application-judgement "posreal" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_n def-decl "real" atan_approx nil))
   nil
   (reduce_lb_n subtype
    "atan_approx.reduce_lb_n(atan_approx.reduce_lb(atan_approx.px, atan_approx.m), (number_fields.-)(atan_approx.n, 1), atan_approx.m)"
    "{x: real_types.posreal | reals.>=(atan_approx.reduce_n(atan_approx.px, atan_approx.n), x)}"))
  (reduce_lb_n_TCC2-1 nil 3626796255 ("" (subtype-tcc) nil nil) nil nil
   (reduce_lb_n subtype
    "atan_approx.reduce_lb_n(atan_approx.reduce_lb(atan_approx.px, atan_approx.m), (number_fields.-)(atan_approx.n, 1), atan_approx.m)"
    "{x: real_types.posreal | reals.>=(atan_approx.reduce_n(atan_approx.px, atan_approx.n), x)}")))
 (reduce_lb_n_increasing 0
  (reduce_lb_n_increasing-2 nil 3626796534
   ("" (skolem 1 ("m" "_" "_" "_"))
    (("" (induct "n")
      (("1" (skeep)
        (("1" (expand "reduce_lb_n") (("1" (propax) nil nil)) nil)) nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (expand "reduce_lb_n" 1)
            (("2" (inst?)
              (("2" (ground)
                (("2" (hide 2)
                  (("2" (rewrite "reduce_lb_increasing") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (reduce_n def-decl "real" atan_approx nil)
    (reduce_lb_n def-decl "{x: posreal | reduce_n(px, n) >= x}" atan_approx
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce_lb_increasing formula-decl nil atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil)
  (reduce_lb_n_increasing-1 nil 3626796456 ("" (postpone) nil nil) nil
   shostak))
 (reduce_deriv_TCC1 0
  (reduce_deriv_TCC1-1 nil 3626520026
   ("" (skeep)
    (("" (case "1+x*x>0")
      (("1" (case "sqrt(1+x*x)>0")
        (("1" (case "1+sqrt(1+x*x)>0")
          (("1" (mult-ineq -1 -2) (("1" (ground) nil nil)) nil)
           ("2" (ground) nil nil))
          nil)
         ("2" (flip-ineq 1)
          (("2" (mult-ineq -1 -1)
            (("2" (lemma "sq_sqrt")
              (("2" (inst -1 "1+x*x")
                (("2" (split -1)
                  (("1" (expand "sq") (("1" (ground) nil nil)) nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (reduce_deriv subtype
    "(number_fields.*(((number_fields.+)(1, sqrt.sqrt((number_fields.+)(1, number_fields.*(atan_approx.x, atan_approx.x))))), sqrt.sqrt((number_fields.+)(1, number_fields.*(atan_approx.x, atan_approx.x)))))"
    "nznum")))
 (reduce_fun_prep 0
  (reduce_fun_prep-2 nil 3626775550
   ("" (name "F" "lambda x:x")
    (("" (case "continuous?[real](F)")
      (("1" (case "derivable?(F) AND deriv(F) = const_fun(1)")
        (("1" (flatten)
          (("1" (name "mysqrt" "restrict[nonneg_real, posreal, real](sqrt)")
            (("1" (case "continuous?[posreal](mysqrt)")
              (("1"
                (case "NOT reduce_fun = F/(const_fun(1)+mysqrt o (const_fun(1)+(F*F)))")
                (("1" (hide 2)
                  (("1" (decompose-equality)
                    (("1" (expand "F")
                      (("1" (expand "const_fun")
                        (("1" (expand "mysqrt")
                          (("1" (hide -)
                            (("1" (expand "reduce_fun")
                              (("1" (grind :exclude "sqrt") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (case "derivable?(F) AND deriv(F) = const_fun(1)")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (rewrite "div_derivable_fun[real]")
                            (("1" (hide 2)
                              (("1" (rewrite "sum_derivable_fun[real]")
                                (("1" (hide 2)
                                  (("1"
                                    (lemma
                                     "composition_derivable_fun[real,posreal]")
                                    (("1"
                                      (inst
                                       -
                                       "const_fun(1) + (F * F)"
                                       "mysqrt")
                                      (("1"
                                        (split -1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "o")
                                            (("2"
                                              (rewrite
                                               "sum_derivable_fun[real]")
                                              (("2"
                                                (rewrite
                                                 "prod_derivable_fun[real]")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "mysqrt" 1)
                                          (("3"
                                            (lemma "sqrt_derivable_fun")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "deriv_div_fun[real]")
                            (("1" (assert)
                              (("1" (rewrite "deriv_sum_fun[real]" +)
                                (("1" (rewrite "deriv_comp_fun[real,posreal]")
                                  (("1" (expand "mysqrt" + 2)
                                    (("1" (lemma "deriv_sqrt")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "deriv_sum_fun[real]"
                                                 +)
                                                (("1"
                                                  (rewrite
                                                   "deriv_prod_fun[real]"
                                                   +)
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (expand "const_fun" +)
                                                      (("1"
                                                        (rewrite
                                                         "deriv_const_fun[real]")
                                                        (("1"
                                                          (label "igz" -)
                                                          (("1"
                                                            (hide "igz")
                                                            (("1"
                                                              (decompose-equality)
                                                              (("1"
                                                                (grind)
                                                                (("1"
                                                                  (expand
                                                                   "mysqrt")
                                                                  (("1"
                                                                    (expand
                                                                     "restrict")
                                                                    (("1"
                                                                      (expand
                                                                       "F")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "prod_derivable_fun[real]")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "mysqrt" 1)
                                    (("2" (rewrite "sqrt_derivable_fun") nil
                                      nil))
                                    nil)
                                   ("3" (rewrite "sum_derivable_fun[real]")
                                    (("3" (rewrite "prod_derivable_fun[real]")
                                      nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "composition_derivable_fun[real,posreal]")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (split +)
                                        (("1"
                                          (rewrite "sum_derivable_fun[real]")
                                          (("1"
                                            (rewrite
                                             "prod_derivable_fun[real]")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "mysqrt" 1)
                                          (("2"
                                            (rewrite "sqrt_derivable_fun")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "sum_derivable_fun[real]")
                              (("2" (hide 2)
                                (("2"
                                  (lemma
                                   "composition_derivable_fun[real,posreal]")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (rewrite "sum_derivable_fun[real]")
                                          (("1"
                                            (expand "mysqrt" 1)
                                            (("1"
                                              (rewrite "sqrt_derivable_fun")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "prod_derivable_fun[real]")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3"
                            (case "NOT reduce_deriv = const_fun(1)/((mysqrt o (const_fun(1)+(F*F)))+(mysqrt o (const_fun(1)+(F*F)))*(mysqrt o (const_fun(1)+(F*F))))")
                            (("1" (decompose-equality 1)
                              (("1" (hide-all-but 1)
                                (("1" (expand "mysqrt")
                                  (("1" (expand "F") (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replaces -1)
                              (("2" (rewrite "div_fun_continuous[real]")
                                (("2" (hide 2)
                                  (("2" (rewrite "sum_fun_continuous[real]")
                                    (("1" (hide 2)
                                      (("1"
                                        (rewrite "prod_fun_continuous[real]")
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (lemma
                                             "composition_cont_fun[real,posreal]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2)
                                                  (("1"
                                                    (rewrite
                                                     "sum_fun_continuous[real]")
                                                    (("1"
                                                      (rewrite
                                                       "prod_fun_continuous[real]")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide 2)
                                      (("2"
                                        (lemma
                                         "composition_cont_fun[real,posreal]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (rewrite
                                                 "sum_fun_continuous[real]")
                                                (("2"
                                                  (rewrite
                                                   "prod_fun_continuous[real]")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skosimp*)
                              (("3" (expand "+")
                                (("3" (expand "*")
                                  (("3" (expand "o")
                                    (("3" (expand "mysqrt")
                                      (("3"
                                        (expand "restrict")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (lemma "sqrt_pos")
                                            (("3"
                                              (case
                                               "const_fun[real](1)(x1!1) + F(x1!1) * F(x1!1) > 0")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "F" 1)
                                                (("2"
                                                  (expand "const_fun" 1)
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "derivable_id[real]")
                          (("2" (case "I[real] = F")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2" (decompose-equality)
                                (("2" (expand "F")
                                  (("2" (expand "I") (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skosimp*)
                  (("3" (expand "+")
                    (("3" (expand "const_fun" -1)
                      (("3" (expand "o" -1)
                        (("3" (expand "*" -1)
                          (("3" (expand "mysqrt" -1)
                            (("3" (expand "restrict" -1)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (assert)
                  (("4" (skosimp*)
                    (("4" (expand "+" 1)
                      (("4" (expand "const_fun" 1)
                        (("4" (expand "*" 1) (("4" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "mysqrt" 1)
                (("2" (lemma "restrict_cont_fun")
                  (("2" (inst - "sqrt")
                    (("2" (expand "restrict2")
                      (("2" (expand "restrict")
                        (("2" (assert)
                          (("2" (lemma "sqrt_continuous")
                            (("2" (expand "restrict") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "derivable_id[real]")
            (("2" (case "F = I[real]")
              (("1" (assert)
                (("1" (lemma "deriv_I_fun[real]")
                  (("1" (expand "const_fun") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (decompose-equality)
                  (("2" (expand "F")
                    (("2" (expand "I") (("2" (propax) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "id_fun_continuous[real]")
          (("2" (case "F = I[real]")
            (("1" (assert) nil nil)
             ("2" (hide-all-but 1)
              (("2" (decompose-equality)
                (("2" (expand "F") (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" continuous_functions analysis)
    (bool nonempty-type-eq-decl nil booleans nil)
    (deriv_I_fun formula-decl nil derivatives analysis)
    (sqrt_derivable_fun formula-decl nil sqrt_derivative analysis)
    (prod_derivable_fun formula-decl nil derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (composition_derivable_fun formula-decl nil chain_rule analysis)
    (sum_derivable_fun formula-decl nil derivatives analysis)
    (div_derivable_fun formula-decl nil derivatives analysis)
    (not_one_element_posreal formula-decl nil deriv_domain analysis)
    (deriv_domain_posreal formula-decl nil deriv_domain analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (deriv_comp_fun formula-decl nil chain_rule analysis)
    (deriv_sqrt formula-decl nil sqrt_derivative analysis)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (deriv_prod_fun formula-decl nil derivatives analysis)
    (reduce_deriv const-decl "real" atan_approx nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (deriv_const_fun formula-decl nil derivatives analysis)
    (TRUE const-decl "bool" booleans nil)
    (deriv_sum_fun formula-decl nil derivatives analysis)
    (deriv_div_fun formula-decl nil derivatives analysis)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_pos judgement-tcc nil sqrt reals)
    (composition_cont_fun formula-decl nil composition_continuous analysis)
    (prod_fun_continuous judgement-tcc nil continuous_functions analysis)
    (sum_fun_continuous judgement-tcc nil continuous_functions analysis)
    (div_fun_continuous judgement-tcc nil continuous_functions analysis)
    (continuous_fun nonempty-type-eq-decl nil continuous_functions analysis)
    (nz_continuous_fun type-eq-decl nil continuous_functions analysis)
    (derivable_id judgement-tcc nil derivatives analysis)
    (derivable_id name-judgement "deriv_fun[real]" pi_def nil)
    (derivable_id name-judgement "deriv_fun" derivatives analysis)
    (id_fun_continuous name-judgement "continuous_fun" continuous_functions
     analysis)
    (derivable_id name-judgement "deriv_fun[T]" derivatives_subtype analysis)
    (id_fun_continuous name-judgement "continuous_fun[T2]" lim_of_composition
     analysis)
    (I const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (F skolem-const-decl "[real -> real]" atan_approx nil)
    (mysqrt skolem-const-decl "[posreal -> real]" atan_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (O const-decl "T3" function_props nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict_cont_fun formula-decl nil restriction_cont_fun analysis)
    (restrict2 const-decl "[T1 -> real]" restriction_cont_fun analysis)
    (sqrt_continuous formula-decl nil sqrt_derivative analysis)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (restrict const-decl "R" restrict nil)
    (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (derivable_const application-judgement "deriv_fun" pi_def nil)
    (constant_seq2 application-judgement "(convergent_nz?)" convergence_ops
     analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (id_fun_continuous judgement-tcc nil continuous_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   nil)
  (reduce_fun_prep-1 nil 3626520027 ("" (postpone) nil nil) nil shostak))
 (reduce_is_equal 0
  (reduce_is_equal-2 nil 3708338833
   ("" (skeep)
    ((""
      (case-replace
       "2 * atan(reduce_fun(px)) = atan(reduce_fun(px)) + atan(reduce_fun(px))")
      (("1" (hide -1)
        (("1" (both-sides-f 1 "tan")
          (("1" (rewrite "tan_plus")
            (("1" (rewrite "tan_atan")
              (("1" (rewrite "tan_atan")
                (("1" (cross-mult 1)
                  (("1" (factor 1 r)
                    (("1" (expand "reduce_fun")
                      (("1" (factor 1 r)
                        (("1"
                          (case-replace
                           "(px / (1 + sqrt(1 + px * px))) * (px / (1 + sqrt(1 + px * px))) = (px*px)/(2+px*px+2*sqrt(1+px*px))")
                          (("1"
                            (case "1 = (2 + px * px + 2 * sqrt(1 + px * px))/(2 + px * px + 2 * sqrt(1 + px * px))")
                            (("1"
                              (name-replace "LHS"
                               "2 * (px / (1 + sqrt(1 + px * px)))")
                              (("1"
                                (name-replace "FRAC"
                                 "(px * px) / (2 + px * px + 2 * sqrt(1 + px * px))")
                                (("1" (replaces -1 1)
                                  (("1" (hide -1)
                                    (("1" (expand "FRAC")
                                      (("1"
                                        (factor 1 r)
                                        (("1"
                                          (case-replace
                                           "(((2 + 2 * sqrt(1 + px * px) + px * px) /
                       (2 + 2 * sqrt(1 + px * px) + px * px))
                      - ((px * px) / (2 + 2 * sqrt(1 + px * px) + px * px))) = (2+2*sqrt(1+px*px))/((1+sqrt(1+px*px))*(1+sqrt(1+px*px)))")
                                          (("1"
                                            (case-replace
                                             "px *
                      ((2 + 2 * sqrt(1 + px * px)) /
                        ((1 + sqrt(1 + px * px)) * (1 + sqrt(1 + px * px))))
               = 2*px *
                      ((1 + sqrt(1 + px * px)) /
                        ((1 + sqrt(1 + px * px)) * (1 + sqrt(1 + px * px))))")
                                            (("1"
                                              (case-replace
                                               "((1 + sqrt(1 + px * px)) /
                          ((1 + sqrt(1 + px * px)) * (1 + sqrt(1 + px * px)))) = 1/(1+sqrt(1+px*px))")
                                              (("1"
                                                (expand "LHS")
                                                (("1" (assert) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (name-replace
                                                   "J"
                                                   "1 + sqrt(1 + px * px)")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case-replace
                                               "(((2 + 2 * sqrt(1 + px * px) + px * px) /
                       (2 + 2 * sqrt(1 + px * px) + px * px))
                      - ((px * px) / (2 + 2 * sqrt(1 + px * px) + px * px))) = ((2 + 2 * sqrt(1 + px * px) + px * px) - (px*px)) * 1/((1 + sqrt(1 + px * px)) * (1 + sqrt(1 + px * px)))")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (name-replace "X"
                                 "(2 + px * px + 2 * sqrt(1 + px * px))")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (cross-mult 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "Tan?")
                (("2" (typepred "atan(reduce_fun(px))")
                  (("2" (name-replace "A" "atan(reduce_fun(px))")
                    (("2" (lemma "cos_eq_0_2pi")
                      (("2" (case "A > 0")
                        (("1" (inst -2 "A") (("1" (assert) nil nil)) nil)
                         ("2" (lemma "cos_neg")
                          (("2" (inst -1 "A")
                            (("2" (flip-ineq 1)
                              (("2" (neg-formula -1)
                                (("2" (neg-formula -4)
                                  (("2" (replaces -2 1 :dir rl)
                                    (("2" (inst -2 "-A")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (expand "Tan?")
                (("3" (typepred "atan(reduce_fun(px))")
                  (("3" (name-replace "A" "atan(reduce_fun(px))")
                    (("3" (lemma "cos_eq_0_2pi")
                      (("3" (case "A>0")
                        (("1" (inst -2 "A") (("1" (assert) nil nil)) nil)
                         ("2" (flip-ineq 1)
                          (("2" (neg-formula -1)
                            (("2" (neg-formula -3)
                              (("2" (lemma "cos_neg")
                                (("2" (inst -1 "A")
                                  (("2" (inst -3 "-A")
                                    (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (expand "Tan?")
                (("4" (case "atan(reduce_fun(px)) < pi/4")
                  (("1" (case "atan(reduce_fun(px)) > 0")
                    (("1" (lemma "cos_eq_0_2pi")
                      (("1" (inst -1 "2*atan(reduce_fun(px))")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (case "reduce_fun(px) > 0")
                        (("1" (lemma "atan_gt_0")
                          (("1" (inst -1 "reduce_fun(px)")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (expand "reduce_fun")
                            (("2" (cross-mult 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (case "reduce_fun(px) < 1")
                      (("1" (lemma "atan_strict_increasing")
                        (("1" (expand "strict_increasing?")
                          (("1" (inst -1 "reduce_fun(px)" "1")
                            (("1" (case "atan(1)=pi/4")
                              (("1" (assert) nil nil)
                               ("2" (hide-all-but 1)
                                (("2" (lemma "atan_def")
                                  (("2" (inst -1 "1" "pi/4")
                                    (("2" (lemma "tan_pi4")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "reduce_fun")
                          (("2" (cross-mult 1)
                            (("2" (case "px < 1 + px")
                              (("1" (case "1 + px < 1 + sqrt(1 + px*px)")
                                (("1" (assert) nil nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (move-terms 1 l 1)
                                    (("2" (assert)
                                      (("2"
                                        (mult-ineq 1 1)
                                        (("2"
                                          (lemma "sq_sqrt")
                                          (("2"
                                            (inst -1 "1 + px*px")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (expand "sq")
                                                (("1"
                                                  (replaces -1 -2)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "px")
                                                (("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide 2)
              (("5" (rewrite "tan_atan")
                (("5" (expand "reduce_fun")
                  (("5" (expand "/=") (("5" (cross-mult -1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "atan(reduce_fun(px)) < pi/4")
            (("1" (case "atan(reduce_fun(px)) > 0")
              (("1" (lemma "tan_restrict_bij")
                (("1" (expand "bijective?")
                  (("1" (expand "injective?")
                    (("1" (flatten)
                      (("1"
                        (inst -1 "atan(reduce_fun(px)) + atan(reduce_fun(px))"
                         "atan(px)")
                        (("1" (assert) nil nil)
                         ("2" (hide -1 2)
                          (("2" (split)
                            (("1" (assert) nil nil) ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (case "reduce_fun(px) > 0")
                  (("1" (lemma "atan_gt_0")
                    (("1" (inst -1 "reduce_fun(px)") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "reduce_fun") (("2" (cross-mult 1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (case "reduce_fun(px) < 1")
                (("1" (lemma "atan_strict_increasing")
                  (("1" (expand "strict_increasing?")
                    (("1" (inst -1 "reduce_fun(px)" "1")
                      (("1" (case "atan(1) = pi/4")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (lemma "atan_def")
                            (("2" (inst -1 "1" "pi/4")
                              (("1" (lemma "tan_pi4") (("1" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "reduce_fun")
                    (("2" (cross-mult 1)
                      (("2" (case "px < 1+px")
                        (("1" (case "1+px < 1 + sqrt(1+px*px)")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but 1)
                            (("2" (move-terms 1 l 1)
                              (("2" (assert)
                                (("2" (mult-ineq 1 1)
                                  (("2" (lemma "sq_sqrt")
                                    (("2" (inst -1 "1 + px*px")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (expand "sq")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "Tan?")
            (("3" (typepred "atan(px)")
              (("3" (name-replace "A" "atan(px)")
                (("3" (lemma "cos_eq_0_2pi")
                  (("3" (case "A>0")
                    (("1" (inst -2 "A") (("1" (assert) nil nil)) nil)
                     ("2" (flip-ineq 1)
                      (("2" (neg-formula -1)
                        (("2" (neg-formula -3)
                          (("2" (lemma "cos_neg")
                            (("2" (inst -1 "A")
                              (("2" (inst -3 "-A") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (expand "Tan?")
            (("4" (case "atan(reduce_fun(px)) < pi/4")
              (("1" (case "atan(reduce_fun(px)) > 0")
                (("1" (lemma "cos_eq_0_2pi")
                  (("1" (inst -1 "2*atan(reduce_fun(px))")
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (case "reduce_fun(px) > 0")
                    (("1" (lemma "atan_gt_0")
                      (("1" (inst -1 "reduce_fun(px)")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "reduce_fun")
                        (("2" (cross-mult 1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (case "reduce_fun(px) < 1")
                  (("1" (lemma "atan_strict_increasing")
                    (("1" (expand "strict_increasing?")
                      (("1" (case "atan(1) = pi/4")
                        (("1" (inst -2 "reduce_fun(px)" "1")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide-all-but 1)
                          (("2" (lemma "atan_def")
                            (("2" (inst -1 "1" "pi/4")
                              (("1" (lemma "tan_pi4") (("1" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "reduce_fun")
                      (("2" (cross-mult 1)
                        (("2" (case "px < 1 + px")
                          (("1" (case "1 + px < 1 + sqrt(1 + px * px)")
                            (("1" (assert) nil nil)
                             ("2" (hide-all-but 1)
                              (("2" (move-terms 1 l 1)
                                (("2" (assert)
                                  (("2" (mult-ineq 1 1)
                                    (("2" (lemma "sq_sqrt")
                                      (("2"
                                        (inst -1 "1 + px*px")
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (expand "sq")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (reduce_pos application-judgement "posreal" atan_approx nil)
    (tan const-decl "real" trig_basic nil)
    (Tan? const-decl "bool" trig_basic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (atan_gt_0 formula-decl nil atan nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (atan_def formula-decl nil atan nil)
    (tan_pi4 formula-decl nil trig_values nil)
    (atan_strict_increasing formula-decl nil atan nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cos_eq_0_2pi formula-decl nil sincos nil)
    (cos_neg formula-decl nil sincos_def nil) (<= const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_div formula-decl nil extra_tegies nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_le1_imp formula-decl nil extra_real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (tan_atan formula-decl nil atan nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (FRAC skolem-const-decl "posreal" atan_approx nil)
    (LHS skolem-const-decl "posreal" atan_approx nil)
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (tan_plus formula-decl nil trig_basic nil)
    (px skolem-const-decl "posreal" atan_approx nil)
    (injective? const-decl "bool" functions nil)
    (tan_restrict_bij formula-decl nil trig_basic nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   nil)
  (reduce_is_equal-1 nil 3626459135
   ("" (skeep)
    (("" (expand "atan")
      (("" (expand "atan_value")
        (("" (lemma "Int_chg_var[real,real]")
          (("1" (inst -1 "0" "px" "atan_deriv_fn" "reduce_fun")
            (("1"
              (case "derivable?(reduce_fun) AND
                continuous?(deriv(reduce_fun)) AND continuous?(atan_deriv_fn)")
              (("1" (ground)
                (("1" (case-replace "reduce_fun(0) = 0")
                  (("1" (hide -1)
                    (("1"
                      (case-replace "(LAMBDA (u: real):
                                  atan_deriv_fn(reduce_fun(u)) * deriv(reduce_fun)(u)) = 1/2*atan_deriv_fn")
                      (("1" (lemma "Integral_scal[real]")
                        (("1" (inst -1 "1/2" "0" "px" "atan_deriv_fn")
                          (("1" (ground)
                            (("1" (lemma "cont_fun_integrable[real]")
                              (("1" (expand "Integrable?")
                                (("1" (inst -1 "0" "px" "atan_deriv_fn")
                                  (("1" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality 1)
                        (("2" (hide-all-but 1)
                          (("2" (lemma "reduce_fun_prep")
                            (("2" (flatten)
                              (("2" (hide -1)
                                (("2" (decompose-equality -1)
                                  (("2" (inst -1 "x!1")
                                    (("2" (replaces -1)
                                      (("2"
                                        (expand "reduce_deriv")
                                        (("2"
                                          (expand "reduce_fun")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (name-replace
                                               "RTX"
                                               "sqrt(1+x!1*x!1)")
                                              (("2"
                                                (expand "atan_deriv_fn")
                                                (("2"
                                                  (simplify)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (grind)
                                                      (("2"
                                                        (case-replace
                                                         "(1 + x!1 / (1 + RTX) * (x!1 / (1 + RTX))) = (sq(1+RTX)+sq(x!1))/(sq(1 + RTX))")
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (case-replace
                                                             "1 / ((sq(1 + RTX) + sq(x!1)) / (sq(1 + RTX))) =  (sq(1 + RTX))/ (sq(1 + RTX) + sq(x!1))")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (case-replace
                                                                 " (1 / (RTX + RTX * RTX)) = 1/(1+RTX)*1/RTX")
                                                                (("1"
                                                                  (case
                                                                   "(sq(1 + RTX)) / (sq(1 + RTX) + sq(x!1)) * (1 / (1 + RTX) * 1 / RTX) =
                      ((sq(1 + RTX)) / (sq(1 + RTX) + sq(x!1))*1/(1+RTX))* 1 / RTX")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (case-replace
                                                                       "((sq(1 + RTX)) / (sq(1 + RTX) + sq(x!1)) * 1 / (1 + RTX)) = ((1 + RTX) / (sq(1 + RTX) + sq(x!1)))")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "sq")
                                                                          (("1"
                                                                            (case
                                                                             "RTX*RTX = 1+ x!1*x!1")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (simplify
                                                                                 1)
                                                                                (("1"
                                                                                  (case
                                                                                   "2 + 2 * RTX + 2 * (x!1 * x!1) = 2*(1 + RTX + (x!1 * x!1))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "((1 + RTX) / (2 * (1 + RTX + (x!1 * x!1)))) = 1/2*((1 + RTX) /(1 + RTX + (x!1 * x!1)))")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "RTX")
                                                                                          (("1"
                                                                                            (grind-reals)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (grind-reals)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (grind-reals)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "RTX")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sq_sqrt")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "1+x!1*x!1")
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sq")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "sq_pos")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sq")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "sq")
                                                                          (("2"
                                                                            (grind-reals)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (grind-reals)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (expand
                                                                   "RTX")
                                                                  (("3"
                                                                    (ground)
                                                                    (("3"
                                                                      (hide 1)
                                                                      (("3"
                                                                        (grind-reals)
                                                                        (("3"
                                                                          (both-sides
                                                                           "*"
                                                                           "sqrt(1 + x!1 * x!1)"
                                                                           -1)
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (lemma
                                                                               "sq_sqrt")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sq")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "sq_pos")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sq")
                                                                                            (("1"
                                                                                              (both-sides
                                                                                               "+"
                                                                                               "1"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "sq_pos")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (grind-reals)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (grind)
                                                            (("2"
                                                              (grind-reals)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "reduce_fun")
                    (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (hide -)
                (("2" (hide 2)
                  (("2" (lemma "reduce_fun_prep")
                    (("2" (lemma "one_over_one_plus_t_sq_cont")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (sq_sqrt formula-decl nil sqrt reals) (sq_pos formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sqrt_1 formula-decl nil sqrt reals))
   shostak))
 (reduce_n_is_equal 0
  (reduce_n_is_equal-2 "" 3790092470
   ("" (induct "n")
    (("1" (skeep) (("1" (expand "reduce_n") (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "reduce_n" 1)
          (("2" (inst -1 "reduce_fun(px)")
            (("2" (rewrite "expt_plus")
              (("2"
                (case " 2 * 2 ^ j * atan(reduce_n(reduce_fun(px), j)) =  2 *( 2 ^ j * atan(reduce_n(reduce_fun(px), j)))")
                (("1" (replaces -1)
                  (("1" (replaces -1)
                    (("1" (rewrite "reduce_is_equal") nil nil)) nil))
                  nil)
                 ("2" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (reduce_n_is_equal-1 nil 3626796651
   ("" (induct "n")
    (("1" (skeep) (("1" (expand "reduce_n") (("1" (grind) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "reduce_n" 1)
          (("2" (inst -1 "reduce_fun(px)")
            (("2" (rewrite "expt_plus")
              (("2" (rewrite "expt_x1")
                (("2"
                  (case " 2 * 2 ^ j * atan(reduce_n(reduce_fun(px), j)) =  2 *( 2 ^ j * atan(reduce_n(reduce_fun(px), j)))")
                  (("1" (replaces -1)
                    (("1" (replaces -1)
                      (("1" (rewrite "reduce_is_equal") nil nil)) nil))
                    nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (reduce_is_equal formula-decl nil atan_approx nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (reduce_pos application-judgement "posreal" atan_approx nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (reduce_n def-decl "real" atan_approx nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   shostak))
 (atan_series_eq 0
  (atan_series_eq-1 nil 3630146872
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "atan_series_it")
        (("1" (expand "atan_series_n")
          (("1" (expand "atan_series_iter")
            (("1" (expand "sigma")
              (("1" (expand "sigma")
                (("1" (expand "atan_series_term")
                  (("1" (expand "atan_series_coef")
                    (("1" (expand "^")
                      (("1" (expand "expt")
                        (("1" (expand "expt") (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "atan_series_n")
          (("2" (rewrite "sigma_last" 1)
            (("2" (expand "atan_series_it" 1)
              (("2" (expand "atan_series_iter")
                (("2" (move-terms 1 r 1)
                  (("2" (inst?)
                    (("2" (replaces -1 :dir rl)
                      (("2" (expand "atan_series_it")
                        (("2"
                          (case "FORALL (y:real, m:nat, a,b:real): atan_series_iter(y,m,1+a)-atan_series_term(y)(m)*a = atan_series_iter(y,m,1+b)-atan_series_term(y)(m)*b")
                          (("1"
                            (inst -1 "x" "j"
                             "- (2 * (j * x * x) + x * x) / (3 + 2 * j)" "0")
                            (("1" (simplify -1)
                              (("1" (replaces -1 :dir rl)
                                (("1"
                                  (case "1 + -(2 * (j * x * x) + x * x) / (3 + 2 * j) = 1 -(2 * (j * x * x) + x * x) / (3 + 2 * j)")
                                  (("1" (replaces -1)
                                    (("1" (simplify)
                                      (("1"
                                        (expand "atan_series_term")
                                        (("1"
                                          (expand "atan_series_coef")
                                          (("1"
                                            (rewrite "expt_plus")
                                            (("1"
                                              (rewrite "expt_plus")
                                              (("1"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (name-replace
                                                   "X2"
                                                   "x^(2*j)")
                                                  (("1"
                                                    (name-replace
                                                     "Mj"
                                                     "(-1)^j")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (grind-reals)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (ground)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("2"
                                                (replaces -1)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (induct "m")
                              (("1" (skeep) (("1" (grind) nil nil)) nil)
                               ("2" (skeep)
                                (("2" (skeep)
                                  (("2" (expand "atan_series_iter" 1)
                                    (("2"
                                      (inst
                                       -1
                                       "y"
                                       "-
                                (2 * (a * j!1 * y * y) + 2 * (j!1 * y * y) +
                                  (a * y * y + y * y))
                                 / (3 + 2 * j!1)"
                                       " -
                                 (2 * (b * j!1 * y * y) + 2 * (j!1 * y * y) +
                                   (b * y * y + y * y))
                                  / (3 + 2 * j!1)")
                                      (("2"
                                        (expand "atan_series_term")
                                        (("2"
                                          (move-terms -1 l 2)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (simplify 1)
                                              (("2"
                                                (move-terms 1 r 1)
                                                (("2"
                                                  (simplify)
                                                  (("2"
                                                    (case
                                                     "1 -
                                      (2 * (b * j!1 * y * y) + b * y * y +
                                        2 * (j!1 * y * y)
                                        + y * y)
                                       / (3 + 2 * j!1) = 1 +
                                     -(2 * (b * j!1 * y * y) + b * y * y +
                                        2 * (j!1 * y * y)
                                        + y * y)
                                      / (3 + 2 * j!1)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (simplify)
                                                        (("1"
                                                          (move-terms 1 l 2)
                                                          (("1"
                                                            (rewrite
                                                             "expt_plus")
                                                            (("1"
                                                              (rewrite
                                                               "expt_plus")
                                                              (("1"
                                                                (cancel-by
                                                                 1
                                                                 " y ^ (2 * j!1)")
                                                                (("1"
                                                                  (hide 1)
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "expt")
                                                                            (("1"
                                                                              (case
                                                                               "(-2 * (atan_series_coef(j!1) * j!1 * y * y * y) -
                            2 * (atan_series_coef(j!1) * a * j!1 * y * y * y)
                            - atan_series_coef(j!1) * y * y * y
                            - atan_series_coef(j!1) * a * y * y * y)
                           / (3 + 2 * j!1) = atan_series_coef(j!1)*y^3*((-2 * ( j!1) -
                            2 * ( a * j!1 )
                            - 1
                            -  a)
                           / (3 + 2 * j!1))")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (case
                                                                                   "(-2 * (atan_series_coef(j!1) * j!1 * y * y * y) -
                              2 * (atan_series_coef(j!1) * b * j!1 * y * y * y)
                              - atan_series_coef(j!1) * y * y * y
                              - atan_series_coef(j!1) * b * y * y * y)
                             / (3 + 2 * j!1) = atan_series_coef(j!1)*y^3*((-2 * ( j!1) -
                              2 * ( b * j!1 )
                              - 1
                              -  b)
                             / (3 + 2 * j!1))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       " atan_series_coef(1 + j!1) * a * y * y * y =  atan_series_coef(1 + j!1) * a *y^3 AND  atan_series_coef(1 + j!1) * b * y * y * y =  atan_series_coef(1 + j!1) * b * y^3")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "A"
                                                                                               "(-2 * (j!1) - 2 * (a * j!1) - 1 - a)")
                                                                                              (("1"
                                                                                                (name-replace
                                                                                                 "B"
                                                                                                 "(-2 * (j!1) - 2 * (b * j!1) - 1 - b)")
                                                                                                (("1"
                                                                                                  (cancel-by
                                                                                                   1
                                                                                                   "y^3")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "B = -((2*j!1+1)*(1+b))")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "atan_series_coef"
                                                                                                       2
                                                                                                       3)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "(-((2 * j!1 + 1) * (1 + b)) * (((-1) ^ j!1) / (1 + 2 * j!1))) /
                                    (3 + 2 * j!1) = (-(1 + b) * (-1) ^ j!1) /
                                    (3 + 2 * j!1)")
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "A = -((2*j!1+1)*(1+a))")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "atan_series_coef"
                                                                                                                 2
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "(-((2 * j!1 + 1) * (1 + a)) * (((-1) ^ j!1) / (1 + 2 * j!1))) /
                                        (3 + 2 * j!1) = (-(1 + a) * (-1) ^ j!1) /
                                        (3 + 2 * j!1)")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "atan_series_coef")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "expt_plus")
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (cross-mult)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "A")
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             (2
                                                                                                              3))
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              (("2"
                                                                                                                (cross-mult)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "B")
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "expt")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "expt")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "expt")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "expt")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "expt")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "expt")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("2"
                                                                (replaces -1)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (hat_02n formula-decl nil power_series series)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (cross_mult formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (div_74 skolem-const-decl "real" atan_approx nil)
    (B skolem-const-decl "real" atan_approx nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (A skolem-const-decl "real" atan_approx nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_73 skolem-const-decl "real" atan_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T_low type-eq-decl nil sigma reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (T_high type-eq-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_last formula-decl nil sigma reals)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (^ const-decl "real" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (atan_series_coef const-decl "rat" atan nil)
    (atan_series_iter def-decl "real" atan_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (atan_series_n const-decl "real" atan nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (atan_pos_le1_ub_lt 0
  (atan_pos_le1_ub_lt-1 nil 3392566953
   ("" (skeep)
    (("" (expand "atan_pos_le1_ub")
      (("" (rewrite "atan_series_eq")
        (("" (rewrite "atan_series_eq")
          (("" (expand "atan_series_n")
            (("" (expand "sigma" 1 1)
              (("" (expand "sigma" 1 1)
                (("" (move-terms 1 r 1)
                  (("" (assert)
                    (("" (expand "atan_series_term")
                      (("" (expand "atan_series_coef")
                        (("" (lemma "not_even_m1_pow")
                          (("" (inst?)
                            (("" (split -1)
                              (("1" (replaces -1)
                                (("1" (lemma "even_m1_pow")
                                  (("1" (inst?)
                                    (("1" (split -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "(x ^ (5 + 4 * n)) * (1 / (5 + 4 * n)) < (x ^ (5 + 4 * n)) / (3 + 4 * n)")
                                          (("1"
                                            (case
                                             "(x ^ (5 + 4 * n)) / (3 + 4 * n) <= (x ^ (3 + 4 * n)) / (3 + 4 * n)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (grind-reals)
                                                (("2"
                                                  (rewrite
                                                   "both_sides_expt_lt1_le")
                                                  (("2"
                                                    (case "x=1")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1" (grind) nil nil))
                                                      nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case "x ^ (5+4 *n) > 0")
                                              (("1"
                                                (name-replace
                                                 "aa"
                                                 "x^(5+4*n)")
                                                (("1" (grind-reals) nil nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite "expt_pos")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but -1) (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_pos_le1_ub const-decl "real" atan_approx nil)
    (sigma def-decl "real" sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_lt1_le formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (nonzero_times1 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (lt_div_lt_pos1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (expt_pos formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even? const-decl "bool" integers nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (atan_series_n const-decl "real" atan nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (atan_pos_le1_lb_lt 0
  (atan_pos_le1_lb_lt-4 nil 3630155426
   ("" (skeep)
    (("" (expand "atan_pos_le1_lb")
      (("" (rewrite "atan_series_eq")
        (("" (rewrite "atan_series_eq")
          (("" (expand "atan_series_n")
            (("" (expand "sigma" 1 2)
              (("" (expand "sigma" 1 2)
                (("" (move-terms 1 r 3)
                  (("" (assert)
                    (("" (expand "atan_series_term")
                      (("" (expand "atan_series_coef")
                        (("" (lemma "not_even_m1_pow")
                          (("" (inst -1 "3+2*n")
                            (("" (split -1)
                              (("1" (replaces -1)
                                (("1" (lemma "even_m1_pow")
                                  (("1" (inst?)
                                    (("1" (split -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "(x ^ (5 + 4 * n))/(7 + 4 * n) < (x ^ (5 + 4 * n)) * (1 / (5 + 4 * n))")
                                          (("1"
                                            (case
                                             "(x ^ (7 + 4 * n))/(7+4*n) <=  (x ^ (5 + 4 * n))/(7+4*n)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (grind-reals)
                                                (("2"
                                                  (rewrite
                                                   "both_sides_expt_lt1_le")
                                                  (("2"
                                                    (case-replace "x=1")
                                                    (("1" (grind) nil nil)
                                                     ("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case "x ^ (5+4*n) > 0")
                                              (("1"
                                                (name-replace
                                                 "aa"
                                                 "x^(5+4*n)")
                                                (("1" (grind-reals) nil nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite "expt_pos")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but -1) (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_pos_le1_lb const-decl "real" atan_approx nil)
    (sigma def-decl "real" sigma reals)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt_lt1_le formula-decl nil exponentiation nil)
    (nonzero_times1 formula-decl nil real_props nil)
    (expt def-decl "real" exponentiation nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (lt_div_lt_pos1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (expt_pos formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (even? const-decl "bool" integers nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (atan_series_n const-decl "real" atan nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil))
   nil)
  (atan_pos_le1_lb_lt-3 nil 3630155386
   ("" (skeep)
    (("" (expand "atan_pos_le1_lb")
      (("" (expand "atan_series_n")
        (("" (rewrite "atan_series_eq")
          (("" (rewrite "atan_series_eq")
            (("" (expand "sigma" 1 2)
              (("" (expand "sigma" 1 2)
                (("" (move-terms 1 r 3)
                  (("" (assert)
                    (("" (expand "atan_series_term")
                      (("" (expand "atan_series_coef")
                        (("" (lemma "not_even_m1_pow")
                          (("" (inst -1 "3+2*n")
                            (("" (split -1)
                              (("1" (replaces -1)
                                (("1" (lemma "even_m1_pow")
                                  (("1" (inst?)
                                    (("1" (split -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "(x ^ (5 + 4 * n))/(7 + 4 * n) < (x ^ (5 + 4 * n)) * (1 / (5 + 4 * n))")
                                          (("1"
                                            (case
                                             "(x ^ (7 + 4 * n))/(7+4*n) <=  (x ^ (5 + 4 * n))/(7+4*n)")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (grind-reals)
                                                (("2"
                                                  (rewrite
                                                   "both_sides_expt_lt1_le")
                                                  (("2"
                                                    (case-replace "x=1")
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case "x ^ (5+4*n) > 0")
                                              (("1"
                                                (name-replace
                                                 "aa"
                                                 "x^(5+4*n)")
                                                (("1" (grind-reals) nil)))
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite "expt_pos")
                                                  nil)))))))))))
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil)))))))))))
                               ("2" (hide-all-but -1)
                                (("2" (grind)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (atan_pos_le1_lb_lt-2 nil 3630155333
   ("" (skeep)
    (("" (expand "atan_pos_le1_lb")
      (("" (expand "atan_series_n")
        (("" (rewrite "atan_sreies_eq")
          (("" (rewrite "atan_sreies_eq")
            (("" (expand "sigma" 1 2)
              (("" (expand "sigma" 1 2)
                (("" (move-terms 1 r 3)
                  (("" (assert)
                    (("" (expand "atan_series_term")
                      (("" (expand "atan_series_coef")
                        (("" (lemma "not_even_m1_pow")
                          (("" (inst -1 "3+2*n")
                            (("" (split -1)
                              (("1" (replaces -1)
                                (("1" (lemma "even_m1_pow")
                                  (("1" (inst?)
                                    (("1" (split -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case
                                           "(x ^ (5 + 4 * n))/(7 + 4 * n) < (x ^ (5 + 4 * n)) * (1 / (5 + 4 * n))")
                                          (("1"
                                            (case
                                             "(x ^ (7 + 4 * n))/(7+4*n) <=  (x ^ (5 + 4 * n))/(7+4*n)")
                                            (("1" (assert) nil)
                                             ("2"
                                              (hide -1 2)
                                              (("2"
                                                (grind-reals)
                                                (("2"
                                                  (rewrite
                                                   "both_sides_expt_lt1_le")
                                                  (("2"
                                                    (case-replace "x=1")
                                                    (("1" (grind) nil)
                                                     ("2"
                                                      (assert)
                                                      nil)))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (case "x ^ (5+4*n) > 0")
                                              (("1"
                                                (name-replace
                                                 "aa"
                                                 "x^(5+4*n)")
                                                (("1" (grind-reals) nil)))
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite "expt_pos")
                                                  nil)))))))))))
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil)))))))))))
                               ("2" (hide-all-but -1)
                                (("2" (grind)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (atan_pos_le1_lb_lt-1 nil 3392570203
   ("" (skeep)
    (("" (expand "atan_pos_le1_lb")
      (("" (expand "atan_series_n")
        (("" (expand "sigma" 1 2)
          (("" (expand "sigma" 1 2)
            (("" (move-terms 1 r 3)
              (("" (assert)
                (("" (expand "atan_series_term")
                  (("" (expand "atan_series_coef")
                    (("" (lemma "not_even_m1_pow")
                      (("" (inst -1 "3+2*n")
                        (("" (split -1)
                          (("1" (replaces -1)
                            (("1" (lemma "even_m1_pow")
                              (("1" (inst?)
                                (("1" (split -1)
                                  (("1" (replaces -1)
                                    (("1"
                                      (case
                                       "(x ^ (5 + 4 * n))/(7 + 4 * n) < (x ^ (5 + 4 * n)) * (1 / (5 + 4 * n))")
                                      (("1"
                                        (case
                                         "(x ^ (7 + 4 * n))/(7+4*n) <=  (x ^ (5 + 4 * n))/(7+4*n)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide -1 2)
                                          (("2"
                                            (grind-reals)
                                            (("2"
                                              (rewrite
                                               "both_sides_expt_lt1_le")
                                              (("2"
                                                (case-replace "x=1")
                                                (("1" (grind) nil nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (case "x ^ (5+4*n) > 0")
                                          (("1"
                                            (name-replace "aa" "x^(5+4*n)")
                                            (("1" (grind-reals) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite "expt_pos")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but -1) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (atan_series_coef const-decl "rat" atan nil)
    (atan_series_n const-decl "real" atan nil))
   shostak))
 (atan_pos_le1_bounds 0
  (atan_pos_le1_bounds-2 nil 3630155477
   ("" (skosimp)
    (("" (expand "atan_pos_le1_lb")
      (("" (expand "atan_pos_le1_ub")
        (("" (rewrite "atan_series_eq")
          (("" (rewrite "atan_series_eq")
            (("" (case "FORALL (n:posnat): 0 < x!1^n/n")
              (("1" (case "FORALL (n,m:posnat): n < m => x!1^m/m < x!1^n/n")
                (("1"
                  (case-replace "atan_series_n(x!1, 1 + 2 * n!1) < atan(x!1)")
                  (("1" (lemma "atan_series" ("x" "x!1" "n" "1+2*n!1"))
                    (("1" (expand "abs" -1)
                      (("1" (assert)
                        (("1" (expand "atan_series_n")
                          (("1" (expand "sigma" -1)
                            (("1"
                              (name-replace "UB"
                               "sigma(0, 2 * n!1, atan_series_term(x!1))")
                              (("1" (hide -2)
                                (("1" (expand "atan_series_term")
                                  (("1" (expand "atan_series_coef")
                                    (("1"
                                      (lemma
                                       "not_even_m1_pow"
                                       ("i" "1+2*n!1"))
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (lift-if -2)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (typepred "n!1")
                                                (("1"
                                                  (case
                                                   "FORALL (r:real, n:nat): r > 0 IMPLIES r^n > 0")
                                                  (("1"
                                                    (inst -1 "x!1" "5+4*n!1")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skolem 1 ("r" "_"))
                                                      (("2"
                                                        (induct "n")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand "^")
                                                              (("2"
                                                                (expand
                                                                 "expt"
                                                                 1)
                                                                (("2"
                                                                  (cancel-by
                                                                   1
                                                                   "r")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (flip-ineq 1)
                                                (("2"
                                                  (move-terms -2 l 3)
                                                  (("2"
                                                    (move-terms -2 r 1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "UB" 1)
                                                        (("2"
                                                          (case
                                                           "atan(x!1) < atan(x!1) - (x!1 ^ (5 + 4 * n!1)) / (5 + 4 * n!1) -
       (x!1 ^ (3 + 4 * n!1)) * (((-1) ^ (1 + 2 * n!1)) / (3 + 4 * n!1))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but 1)
                                                            (("2"
                                                              (move-terms 1 l)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (move-terms
                                                                   1
                                                                   r
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "not_even_m1_pow")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "1+2*n!1")
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (replaces
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^")
                                                                                (("1"
                                                                                  (expand
                                                                                   "expt"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "expt"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       r)
                                                                                      (("1"
                                                                                        (mult-by
                                                                                         1
                                                                                         "1/expt(x!1, 3 + 4 * n!1)")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "x!1 * (x!1 * expt(x!1, 3 + 4 * n!1)) * (1 / expt(x!1, 3 + 4 * n!1)) = x!1*x!1")
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "-((expt(x!1, (3 + 4 * n!1)) * -1) / (3 + 4 * n!1)) * (5 + 4 * n!1) *
        (1 / expt(x!1, 3 + 4 * n!1)) = (5 + 4 * n!1)/(3 + 4 * n!1)")
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (reveal
                                                                                                 -16
                                                                                                 -17)
                                                                                                (("1"
                                                                                                  (mult-ineq
                                                                                                   -1
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (mult-ineq
                                                                                                     -3
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "1 < (5 + 4 * n!1) / (3 + 4 * n!1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            (("2"
                                                                                              (split)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "FORALL (r:real,n:nat): r > 0 IMPLIES expt(r,n) > 0")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!1"
                                                                                                   "3+4*n!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (skolem
                                                                                                     1
                                                                                                     ("r"
                                                                                                      "_"))
                                                                                                    (("2"
                                                                                                      (induct
                                                                                                       "n")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "expt")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "expt"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (cancel-by
                                                                                                               1
                                                                                                               "r")
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           2)
                                                                                          (("3"
                                                                                            (case
                                                                                             "FORALL (r: real, n: nat): r > 0 IMPLIES expt(r, n) > 0")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!1"
                                                                                               "3+4*n!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 1
                                                                                                 ("r"
                                                                                                  "_"))
                                                                                                (("2"
                                                                                                  (induct
                                                                                                   "n")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "expt"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (cancel-by
                                                                                                         1
                                                                                                         "r")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "even?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but -1)
                                          (("2"
                                            (expand "even?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "atan_series" ("x" "x!1" "n" "2+2*n!1"))
                      (("2" (expand "abs")
                        (("2" (assert)
                          (("2" (expand "atan_series_n")
                            (("2" (expand "sigma" -1)
                              (("2"
                                (name-replace "LB"
                                 "sigma(0, 1 + 2 * n!1, atan_series_term(x!1))")
                                (("2" (expand "atan_series_term")
                                  (("2" (expand "atan_series_coef")
                                    (("2"
                                      (lemma "even_m1_pow" ("i" "2+2*n!1"))
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (inst
                                               -
                                               "5 + 4 * n!1"
                                               "7 + 4 * n!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst-cp - "7 + 4 * n!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lift-if -1)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (neg-formula -2)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (neg-formula -1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "even?")
                                          (("2"
                                            (inst + "n!1+1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skosimp)
                    (("2" (case-replace "x!1=1")
                      (("1" (rewrite "expt_1i")
                        (("1" (rewrite "expt_1i")
                          (("1" (lemma "both_sides_div_pos_lt2")
                            (("1" (inst - "m!1" "n!2" "1")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (lemma "both_sides_expt_lt1_lt"
                         ("lt1x" "x!1" "i" "m!1" "j" "n!2"))
                        (("1" (assert)
                          (("1"
                            (lemma "lt_div_lt_pos1"
                             ("px" "x!1 ^ m!1" "y" "x!1 ^ n!2" "pz" "n!2" "w"
                              "m!1"))
                            (("1" (assert) nil nil)
                             ("2" (lemma "expt_pos" ("px" "x!1" "i" "m!1"))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skosimp)
                  (("2" (lemma "expt_pos" ("px" "x!1" "i" "n!2"))
                    (("1" (rewrite "div_mult_pos_lt2")
                      (("1" (assert) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (both_sides_div_pos_lt2 formula-decl nil real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (expt_pos formula-decl nil exponentiation nil)
    (lt_div_lt_pos1 formula-decl nil real_props nil)
    (both_sides_expt_lt1_lt formula-decl nil exponentiation nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (atan_series_n const-decl "real" atan nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (<= const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_77 skolem-const-decl "real" atan_approx nil)
    (div_76 skolem-const-decl "real" atan_approx nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (x!1 skolem-const-decl "real" atan_approx nil)
    (n!1 skolem-const-decl "nat" atan_approx nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (even? const-decl "bool" integers nil)
    (UB skolem-const-decl "real" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (zero_div formula-decl nil extra_tegies nil)
    (div_75 skolem-const-decl "real" atan_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (expt def-decl "real" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (atan_series formula-decl nil atan nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (both_sides_times_neg_le1_imp formula-decl nil extra_real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_div formula-decl nil extra_tegies nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil)
  (atan_pos_le1_bounds-1 nil 3295292840
   ("" (skosimp)
    (("" (expand "atan_pos_le1_lb")
      (("" (expand "atan_pos_le1_ub")
        (("" (case "FORALL (n:posnat): 0 < x!1^n/n")
          (("1" (case "FORALL (n,m:posnat): n < m => x!1^m/m < x!1^n/n")
            (("1" (case-replace "atan_series_n(x!1, 1 + 2 * n!1) < atan(x!1)")
              (("1" (lemma "atan_series" ("x" "x!1" "n" "1+2*n!1"))
                (("1" (rewrite "abs_expt" -1 :dir rl)
                  (("1" (expand "abs" -1)
                    (("1" (assert)
                      (("1" (expand "atan_series_n")
                        (("1" (expand "sigma" -1)
                          (("1"
                            (name-replace "UB"
                             "sigma(0, 2 * n!1, atan_series_term(x!1))")
                            (("1" (hide -2)
                              (("1" (expand "atan_series_term")
                                (("1" (expand "atan_series_coef")
                                  (("1"
                                    (lemma "not_even_m1_pow" ("i" "1+2*n!1"))
                                    (("1" (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (inst - "3+4*n!1" "5+4*n!1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but -1)
                                        (("2"
                                          (expand "even?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "atan_series" ("x" "x!1" "n" "2+2*n!1"))
                  (("2" (rewrite "abs_expt" -1 :dir rl)
                    (("2" (expand "abs")
                      (("2" (assert)
                        (("2" (expand "atan_series_n")
                          (("2" (expand "sigma" -1)
                            (("2"
                              (name-replace "LB"
                               "sigma(0, 1 + 2 * n!1, atan_series_term(x!1))")
                              (("2" (expand "atan_series_term")
                                (("2" (expand "atan_series_coef")
                                  (("2" (lemma "even_m1_pow" ("i" "2+2*n!1"))
                                    (("2" (split -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -
                                             "5 + 4 * n!1"
                                             "7 + 4 * n!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst-cp - "7 + 4 * n!1")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "even?")
                                        (("2"
                                          (inst + "n!1+1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skosimp)
                (("2" (case-replace "x!1=1")
                  (("1" (rewrite "expt_1i")
                    (("1" (rewrite "expt_1i")
                      (("1" (lemma "both_sides_div_pos_lt2")
                        (("1" (inst - "m!1" "n!2" "1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (lemma "both_sides_expt_lt1_lt"
                     ("lt1x" "x!1" "i" "m!1" "j" "n!2"))
                    (("1" (assert)
                      (("1"
                        (lemma "lt_div_lt_pos1"
                         ("px" "x!1 ^ m!1" "y" "x!1 ^ n!2" "pz" "n!2" "w"
                          "m!1"))
                        (("1" (assert) nil nil)
                         ("2" (lemma "expt_pos" ("px" "x!1" "i" "m!1"))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skosimp)
              (("2" (lemma "expt_pos" ("px" "x!1" "i" "n!2"))
                (("1" (rewrite "div_mult_pos_lt2") (("1" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (atan_series_n const-decl "real" atan nil)
    (sigma def-decl "real" sigma reals)
    (atan_series_coef const-decl "rat" atan nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (atan_series formula-decl nil atan nil))
   shostak))
 (atan_pos_le1_lb_inc 0
  (atan_pos_le1_lb_inc-4 "" 3790092497
   (""
    (case "FORALL (n: nat, px: posreal):
                             px <= 1 => atan_pos_le1_lb(n, px) < atan_pos_le1_lb(n+1, px)")
    (("1"
      (case "FORALL (n: nat,pn:posnat, px: posreal):
                                   px <= 1 => atan_pos_le1_lb(n, px) < atan_pos_le1_lb(n+pn, px)")
      (("1" (skosimp)
        (("1" (inst - "n!1" "m!1-n!1" "px!1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "pn")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skosimp*)
            (("3" (case-replace "j!1=0")
              (("1" (assert)
                (("1" (hide -1 -2 -3)
                  (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst - "n!1" "px!1")
                  (("2" (assert)
                    (("2" (inst - "j!1+n!1" "px!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "atan_pos_le1_lb")
          (("2" (rewrite "atan_series_eq")
            (("2" (rewrite "atan_series_eq")
              (("2" (expand "atan_series_n")
                (("2" (expand "sigma" 1 2)
                  (("2" (expand "sigma" 1 2)
                    (("2"
                      (name-replace "SUM"
                       "sigma(0, 1 + 2 * n!1, atan_series_term(px!1))")
                      (("2" (expand "atan_series_term")
                        (("2" (expand "atan_series_coef")
                          (("2" (expand "^")
                            (("2" (expand "expt" 1 3)
                              (("2" (expand "expt" 1 3)
                                (("2" (expand "expt" 1 4)
                                  (("2"
                                    (case-replace "expt((-1), 2 + 2 * n!1)=1")
                                    (("1" (typepred "expt(px!1, 5 + 4 * n!1)")
                                      (("1"
                                        (hide -1 -3)
                                        (("1"
                                          (name-replace
                                           "PX"
                                           "expt(px!1, 5 + 4 * n!1)")
                                          (("1"
                                            (lemma
                                             "posreal_times_posreal_is_posreal"
                                             ("px"
                                              "PX"
                                              "py"
                                              "1 / (5 + 4 * n!1)-sq(px!1)/(7 + 4 * n!1)"))
                                            (("1"
                                              (expand "sq")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "div_mult_pos_lt1"
                                                 ("py"
                                                  "7+4*n!1"
                                                  "z"
                                                  "sq(px!1)"
                                                  "x"
                                                  "1/(5+4*n!1)"))
                                                (("2"
                                                  (lemma
                                                   "sq_nz_pos"
                                                   ("nz" "px!1"))
                                                  (("2"
                                                    (lemma
                                                     "div_mult_pos_lt2"
                                                     ("py"
                                                      "5 + 4 * n!1"
                                                      "z"
                                                      "7 + 4 * n!1"
                                                      "x"
                                                      "1"))
                                                    (("2"
                                                      (lemma
                                                       "sq_le"
                                                       ("nna"
                                                        "px!1"
                                                        "nnb"
                                                        "1"))
                                                      (("2"
                                                        (rewrite "sq_1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (name-replace
                                                             "LHS"
                                                             "sq(px!1) / (7 + 4 * n!1)")
                                                            (("2"
                                                              (name-replace
                                                               "RHS"
                                                               "1 / (5 + 4 * n!1)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (lemma
                                         "expt_times"
                                         ("n0x" "-1" "i" "2" "j" "1+n!1"))
                                        (("2"
                                          (expand "^" -1 1)
                                          (("2"
                                            (expand "^" -1 1)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (expand "expt")
                                                  (("2"
                                                    (expand "expt")
                                                    (("2"
                                                      (expand "expt")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (atan_pos_le1_lb_inc-3 nil 3630155587
   (""
    (case "FORALL (n: nat, px: posreal):
                             px <= 1 => atan_pos_le1_lb(n, px) < atan_pos_le1_lb(n+1, px)")
    (("1"
      (case "FORALL (n: nat,pn:posnat, px: posreal):
                                   px <= 1 => atan_pos_le1_lb(n, px) < atan_pos_le1_lb(n+pn, px)")
      (("1" (skosimp)
        (("1" (inst - "n!1" "m!1-n!1" "px!1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "pn")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skosimp*)
            (("3" (case-replace "j!1=0")
              (("1" (assert)
                (("1" (hide -1 -2 -3)
                  (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst - "n!1" "px!1")
                  (("2" (assert)
                    (("2" (inst - "j!1+n!1" "px!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "atan_pos_le1_lb")
          (("2" (rewrite "atan_series_eq")
            (("2" (rewrite "atan_series_eq")
              (("2" (expand "atan_series_n")
                (("2" (expand "sigma" 1 2)
                  (("2" (expand "sigma" 1 2)
                    (("2"
                      (name-replace "SUM"
                       "sigma(0, 1 + 2 * n!1, atan_series_term(px!1))")
                      (("2" (expand "atan_series_term")
                        (("2" (expand "atan_series_coef")
                          (("2" (expand "^")
                            (("2" (expand "expt" 1 3)
                              (("2" (expand "expt" 1 3)
                                (("2" (expand "expt" 1 4)
                                  (("2"
                                    (case-replace "expt((-1), 2 + 2 * n!1)=1")
                                    (("1" (typepred "expt(px!1, 5 + 4 * n!1)")
                                      (("1"
                                        (hide -1 -3)
                                        (("1"
                                          (name-replace
                                           "PX"
                                           "expt(px!1, 5 + 4 * n!1)")
                                          (("1"
                                            (lemma
                                             "posreal_times_posreal_is_posreal"
                                             ("px"
                                              "PX"
                                              "py"
                                              "1 / (5 + 4 * n!1)-sq(px!1)/(7 + 4 * n!1)"))
                                            (("1"
                                              (expand "sq")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "div_mult_pos_lt1"
                                                 ("py"
                                                  "7+4*n!1"
                                                  "z"
                                                  "sq(px!1)"
                                                  "x"
                                                  "1/(5+4*n!1)"))
                                                (("2"
                                                  (lemma
                                                   "sq_nz_pos"
                                                   ("nz" "px!1"))
                                                  (("2"
                                                    (lemma
                                                     "div_mult_pos_lt2"
                                                     ("py"
                                                      "5 + 4 * n!1"
                                                      "z"
                                                      "7 + 4 * n!1"
                                                      "x"
                                                      "1"))
                                                    (("2"
                                                      (lemma
                                                       "sq_le"
                                                       ("nna"
                                                        "px!1"
                                                        "nnb"
                                                        "1"))
                                                      (("2"
                                                        (rewrite "sq_1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (name-replace
                                                             "LHS"
                                                             "sq(px!1) / (7 + 4 * n!1)")
                                                            (("2"
                                                              (name-replace
                                                               "RHS"
                                                               "1 / (5 + 4 * n!1)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (lemma
                                         "expt_times"
                                         ("n0x" "-1" "i" "2" "j" "1+n!1"))
                                        (("2"
                                          (expand "^" -1 1)
                                          (("2"
                                            (expand "^" -1 1)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (expand "expt")
                                                  (("2"
                                                    (expand "expt")
                                                    (("2"
                                                      (expand "expt")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite "expt_1i")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (expt_1i formula-decl nil exponentiation nil)
    (expt_times formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (sq_nz_pos judgement-tcc nil sq reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (sq_le formula-decl nil sq reals)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (sq_1 formula-decl nil sq reals)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq const-decl "nonneg_real" sq reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (atan_series_n const-decl "real" atan nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m!1 skolem-const-decl "nat" atan_approx nil)
    (n!1 skolem-const-decl "nat" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil)
  (atan_pos_le1_lb_inc-2 nil 3403980230
   (""
    (case "FORALL (n: nat, px: posreal):
                      px <= 1 => atan_pos_le1_lb(n, px) < atan_pos_le1_lb(n+1, px)")
    (("1"
      (case "FORALL (n: nat,pn:posnat, px: posreal):
                          px <= 1 => atan_pos_le1_lb(n, px) < atan_pos_le1_lb(n+pn, px)")
      (("1" (skosimp)
        (("1" (inst - "n!1" "m!1-n!1" "px!1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "pn")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skosimp*)
            (("3" (case-replace "j!1=0")
              (("1" (assert)
                (("1" (hide -1 -2 -3)
                  (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst - "n!1" "px!1")
                  (("2" (assert)
                    (("2" (inst - "j!1+n!1" "px!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "atan_pos_le1_lb")
          (("2" (expand "atan_series_n")
            (("2" (expand "sigma" 1 2)
              (("2" (expand "sigma" 1 2)
                (("2"
                  (name-replace "SUM"
                   "sigma(0, 1 + 2 * n!1, atan_series_term(px!1))")
                  (("2" (expand "atan_series_term")
                    (("2" (expand "atan_series_coef")
                      (("2" (expand "^")
                        (("2" (expand "expt" 1 3)
                          (("2" (expand "expt" 1 3)
                            (("2" (expand "expt" 1 4)
                              (("2" (case-replace "expt((-1), 2 + 2 * n!1)=1")
                                (("1" (typepred "expt(px!1, 5 + 4 * n!1)")
                                  (("1" (hide -1 -3)
                                    (("1"
                                      (name-replace
                                       "PX"
                                       "expt(px!1, 5 + 4 * n!1)")
                                      (("1"
                                        (lemma
                                         "posreal_times_posreal_is_posreal"
                                         ("px"
                                          "PX"
                                          "py"
                                          "1 / (5 + 4 * n!1)-sq(px!1)/(7 + 4 * n!1)"))
                                        (("1"
                                          (expand "sq")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "div_mult_pos_lt1"
                                             ("py"
                                              "7+4*n!1"
                                              "z"
                                              "sq(px!1)"
                                              "x"
                                              "1/(5+4*n!1)"))
                                            (("2"
                                              (lemma
                                               "sq_nz_pos"
                                               ("nz" "px!1"))
                                              (("2"
                                                (lemma
                                                 "div_mult_pos_lt2"
                                                 ("py"
                                                  "5 + 4 * n!1"
                                                  "z"
                                                  "7 + 4 * n!1"
                                                  "x"
                                                  "1"))
                                                (("2"
                                                  (lemma
                                                   "sq_le"
                                                   ("nna" "px!1" "nnb" "1"))
                                                  (("2"
                                                    (rewrite "sq_1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (name-replace
                                                         "LHS"
                                                         "sq(px!1) / (7 + 4 * n!1)")
                                                        (("2"
                                                          (name-replace
                                                           "RHS"
                                                           "1 / (5 + 4 * n!1)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2"
                                    (lemma "expt_times"
                                     ("n0x" "-1" "i" "2" "j" "1+n!1"))
                                    (("2" (expand "^" -1 1)
                                      (("2"
                                        (expand "^" -1 1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "expt")
                                              (("2"
                                                (expand "expt")
                                                (("2"
                                                  (expand "expt")
                                                  (("2"
                                                    (rewrite "sq_rew")
                                                    (("2"
                                                      (rewrite "sq_neg")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite "sq_1")
                                                          (("2"
                                                            (rewrite
                                                             "expt_1i")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (atan_series_coef const-decl "rat" atan nil)
    (sq_nz_pos judgement-tcc nil sq reals) (sq_le formula-decl nil sq reals)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq const-decl "nonneg_real" sq reals)
    (atan_series_n const-decl "real" atan nil))
   nil)
  (atan_pos_le1_lb_inc-1 nil 3403980073 ("" (postpone) nil nil) nil shostak))
 (atan_pos_le1_ub_dec 0
  (atan_pos_le1_ub_dec-2 nil 3630155627
   (""
    (case "FORALL (n: nat, px: posreal):
                                                                px <= 1 => atan_pos_le1_ub(n, px) > atan_pos_le1_ub(n+1, px)")
    (("1"
      (case "FORALL (n: nat,pn:posnat, px: posreal):
                                                                                px <= 1 => atan_pos_le1_ub(n, px) > atan_pos_le1_ub(n+pn, px)")
      (("1" (skosimp)
        (("1" (inst - "n!1" "m!1-n!1" "px!1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "pn")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skosimp*)
            (("3" (case-replace "j!1=0")
              (("1" (assert)
                (("1" (hide -1 -2 -3)
                  (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst - "n!1" "px!1")
                  (("2" (assert)
                    (("2" (inst - "j!1+n!1" "px!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "atan_pos_le1_ub")
          (("2" (rewrite "atan_series_eq")
            (("2" (rewrite "atan_series_eq")
              (("2" (expand "atan_series_n")
                (("2" (expand "sigma" 1 2)
                  (("2" (expand "sigma" 1 2)
                    (("2"
                      (name-replace "SUM"
                       "sigma(0, 2 * n!1, atan_series_term(px!1))")
                      (("2" (move-terms 1 l)
                        (("2" (assert)
                          (("2" (expand "atan_series_term")
                            (("2" (expand "atan_series_coef")
                              (("2" (expand "^")
                                (("2" (expand "expt" 1 3)
                                  (("2" (expand "expt" 1 3)
                                    (("2" (expand "expt" 1 4)
                                      (("2"
                                        (case-replace
                                         "expt((-1), 1 + 2 * n!1)= -1")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (cancel-by
                                             1
                                             "expt(px!1, 3 + 4 * n!1)")
                                            (("1"
                                              (hide -1 2)
                                              (("1"
                                                (case "5 > 3 * (px!1 * px!1)")
                                                (("1"
                                                  (case
                                                   "4 * n!1 >=  4 * (n!1 * px!1 * px!1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind-reals)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (cancel-by 1 "n!1")
                                                      (("2"
                                                        (cancel-by 2 "4")
                                                        (("2"
                                                          (rewrite
                                                           "sq"
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (lemma "sq_le")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (rewrite
                                                                 "sq_1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (rewrite "sq" :dir rl)
                                                    (("2"
                                                      (lemma "sq_le")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (lemma "not_even_m1_pow")
                                            (("2"
                                              (inst -1 "1+2*n!1")
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (expand "^" -1 1)
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (hide 1)
                                                  (("2" (grind) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers nil)
    (sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (expt def-decl "real" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (not_even_m1_pow formula-decl nil exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (neg_div_gt formula-decl nil real_props nil)
    (minus_div1 formula-decl nil real_props nil)
    (ge_times_ge_pos formula-decl nil real_props nil)
    (div_79 skolem-const-decl "nat" atan_approx nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_1 formula-decl nil sq reals) (sq_le formula-decl nil sq reals)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (even? const-decl "bool" integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (add_neg formula-decl nil extra_tegies nil)
    (neg_div formula-decl nil extra_tegies nil)
    (zero_div formula-decl nil extra_tegies nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (atan_series_n const-decl "real" atan nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m!1 skolem-const-decl "nat" atan_approx nil)
    (n!1 skolem-const-decl "nat" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil)
  (atan_pos_le1_ub_dec-1 nil 3403980306
   (""
    (case "FORALL (n: nat, px: posreal):
                                                         px <= 1 => atan_pos_le1_ub(n, px) > atan_pos_le1_ub(n+1, px)")
    (("1"
      (case "FORALL (n: nat,pn:posnat, px: posreal):
                                                                       px <= 1 => atan_pos_le1_ub(n, px) > atan_pos_le1_ub(n+pn, px)")
      (("1" (skosimp)
        (("1" (inst - "n!1" "m!1-n!1" "px!1")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "pn")
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (skosimp*)
            (("3" (case-replace "j!1=0")
              (("1" (assert)
                (("1" (hide -1 -2 -3)
                  (("1" (inst - "n!1" "px!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst - "n!1" "px!1")
                  (("2" (assert)
                    (("2" (inst - "j!1+n!1" "px!1") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp)
        (("2" (expand "atan_pos_le1_ub")
          (("2" (expand "atan_series_n")
            (("2" (expand "sigma" 1 2)
              (("2" (expand "sigma" 1 2)
                (("2"
                  (name-replace "SUM"
                   "sigma(0, 2 * n!1, atan_series_term(px!1))")
                  (("2" (move-terms 1 l)
                    (("2" (assert)
                      (("2" (expand "atan_series_term")
                        (("2" (expand "atan_series_coef")
                          (("2" (expand "^")
                            (("2" (expand "expt" 1 3)
                              (("2" (expand "expt" 1 3)
                                (("2" (expand "expt" 1 4)
                                  (("2"
                                    (case-replace
                                     "expt((-1), 1 + 2 * n!1)= -1")
                                    (("1" (hide -1)
                                      (("1"
                                        (cancel-by
                                         1
                                         "expt(px!1, 3 + 4 * n!1)")
                                        (("1"
                                          (hide -1 2)
                                          (("1"
                                            (case "5 > 3 * (px!1 * px!1)")
                                            (("1"
                                              (case
                                               "4 * n!1 >=  4 * (n!1 * px!1 * px!1)")
                                              (("1"
                                                (assert)
                                                (("1" (grind-reals) nil nil))
                                                nil)
                                               ("2"
                                                (hide -1 2)
                                                (("2"
                                                  (cancel-by 1 "n!1")
                                                  (("2"
                                                    (cancel-by 2 "4")
                                                    (("2"
                                                      (rewrite "sq" :dir rl)
                                                      (("2"
                                                        (lemma "sq_le")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (rewrite "sq_1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (rewrite "sq" :dir rl)
                                                (("2"
                                                  (lemma "sq_le")
                                                  (("2"
                                                    (inst?)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (lemma "not_even_m1_pow")
                                        (("2"
                                          (inst -1 "1+2*n!1")
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (expand "^" -1 1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (hide 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (atan_series_coef const-decl "rat" atan nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_1 formula-decl nil sq reals) (sq_le formula-decl nil sq reals)
    (atan_series_n const-decl "real" atan nil))
   nil))
 (pi_lbn_lt 0
  (pi_lbn_lt-1 nil 3392596237
   ("" (skeep)
    (("" (expand "pi_lbn" :assert? none)
      (("" (div-by 1 "4")
        (("" (lemma "atan_pos_le1_lb_lt")
          (("" (inst?)
            (("" (lemma "atan_pos_le1_ub_lt")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lbn const-decl "real" atan_approx nil)
    (atan_pos_le1_lb_lt formula-decl nil atan_approx nil)
    (atan_pos_le1_ub_lt formula-decl nil atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (pi_lbn_LT 0
  (pi_lbn_LT-1 nil 3404043396
   ("" (skeep)
    (("" (case "forall(i,n:nat):pi_lbn(n) < pi_lbn(n+1+i)")
      (("1" (inst -1 "k-n-1" "n") (("1" (assert) nil nil)) nil)
       ("2" (hide 2)
        (("2" (induct "i")
          (("1" (skosimp)
            (("1" (assert) (("1" (rewrite "pi_lbn_lt") nil nil)) nil)) nil)
           ("2" (skeep)
            (("2" (skosimp)
              (("2" (inst -1 "n!1+1")
                (("2" (lemma "pi_lbn_lt")
                  (("2" (inst -1 "n!1") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pi_lbn const-decl "real" atan_approx nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pi_lbn_lt formula-decl nil atan_approx nil))
   nil))
 (pi_bounds 0
  (pi_bounds-3 "closer bounds" 3307959333
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (expand "pi_ubn")
        (("" (lemma "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (rewrite "pi_value") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (atan_1 formula-decl nil atan nil) (pi_value formula-decl nil atan nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (atan_pos_le1_bounds formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi_ubn const-decl "real" atan_approx nil))
   shostak)
  (pi_bounds-2 nil 3307959315
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (expand "pi_ubn")
        (("" (lemma "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (expand "pi") (("" (assert) nil))))))))))))))))))
    nil)
   ((atan_1 formula-decl nil atan nil)) nil)
  (pi_bounds-1 nil 3295296628
   ("" (skosimp)
    (("" (expand "pi_lb")
      (("" (expand "pi_ub")
        (("" (lemma "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (expand "pi") (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_1 formula-decl nil atan nil)) shostak))
 (pi_lb_pos 0
  (pi_lb_pos-2 nil 3626799245
   ("" (skeep)
    (("" (case "pi_lbn(n) > 0")
      (("1" (assert) nil nil)
       ("2" (hide 2)
        (("2" (case "pi_lbn(0) > 0")
          (("1" (lemma "pi_lbn_LT")
            (("1" (inst -1 "0" "n")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lbn const-decl "real" atan_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (n skolem-const-decl "nat" atan_approx nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_lbn_LT formula-decl nil atan_approx nil)
    (atan_series_iter def-decl "real" atan_approx nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (pi_lb_pos subtype "atan_approx.pi_lbn(atan_approx.n)" "posreal"))
  (pi_lb_pos-1 nil 3626459114 ("" (judgement-tcc) nil nil) nil nil
   (pi_lb_pos subtype "atan_approx.pi_lbn(atan_approx.n)" "posreal")))
 (pi_ub_pos 0
  (pi_ub_pos-2 nil 3626799295
   ("" (skeep)
    (("" (case "pi_ubn(n) > 0")
      (("1" (assert) nil nil)
       ("2" (hide 2)
        (("2" (lemma "pi_bounds")
          (("2" (inst?)
            (("2" (flatten)
              (("2" (lemma "pi_lb_pos")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_ubn const-decl "real" atan_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_lb_pos judgement-tcc nil atan_approx nil))
   nil (pi_ub_pos subtype "atan_approx.pi_ubn(atan_approx.n)" "posreal"))
  (pi_ub_pos-1 nil 3626459114 ("" (judgement-tcc) nil nil) nil nil
   (pi_ub_pos subtype "atan_approx.pi_ubn(atan_approx.n)" "posreal")))
 (pi_bounds0 0
  (pi_bounds0-1 nil 3403980370 ("" (grind) nil nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (atan_series_iter def-decl "real" atan_approx nil))
   shostak))
 (pi_bounds2 0
  (pi_bounds2-1 nil 3295359235 ("" (grind) nil nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (pi_lb const-decl "posreal" atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (pi_ub const-decl "posreal" atan_approx nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (atan_series_it const-decl "real" atan_approx nil)
    (atan_series_iter def-decl "real" atan_approx nil))
   shostak))
 (pi_bound 0
  (pi_bound-2 nil 3626799344
   ("" (lemma "pi_bounds2")
    (("" (flatten)
      (("" (lemma "pi_bounds")
        (("" (inst?) (("" (flatten) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (pi_bounds2 formula-decl nil atan_approx nil))
   nil
   (pi_bound subtype "pi_def.pi"
    "{r: real_types.posreal | booleans.AND(reals.<(atan_approx.pi_lb, r), reals.<(r, atan_approx.pi_ub))}"))
  (pi_bound-1 nil 3626459114 ("" (judgement-tcc) nil nil) nil nil
   (pi_bound subtype "pi_def.pi"
    "{r: real_types.posreal | booleans.AND(reals.<(atan_approx.pi_lb, r), reals.<(r, atan_approx.pi_ub))}")))
 (pi_lb_inc 0
  (pi_lb_inc-1 nil 3403980535
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (lemma "atan_pos_le1_ub_dec" ("n" "n!1" "m" "m!1" "px" "1/239"))
        (("" (lemma "atan_pos_le1_lb_inc" ("n" "n!1" "m" "m!1" "px" "1/5"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((pi_lbn const-decl "real" atan_approx nil)
    (atan_pos_le1_lb_inc formula-decl nil atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (atan_pos_le1_ub_dec formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil))
   nil))
 (pi_ub_dec 0
  (pi_ub_dec-1 nil 3403980556
   ("" (skosimp)
    (("" (expand "pi_ubn")
      (("" (assert)
        (("" (lemma "atan_pos_le1_lb_inc" ("px" "1/239" "n" "n!1" "m" "m!1"))
          (("" (lemma "atan_pos_le1_ub_dec" ("px" "1/5" "n" "n!1" "m" "m!1"))
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_ubn const-decl "real" atan_approx nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_pos_le1_lb_inc formula-decl nil atan_approx nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_pos_le1_ub_dec formula-decl nil atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (atan_pos_le1__alt_bounds_TCC1 0
  (atan_pos_le1__alt_bounds_TCC1-1 nil 3628948800 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (atan_pos_le1__alt_bounds subtype "atan_approx.x" "posreal")))
 (atan_pos_le1__alt_bounds 0
  (atan_pos_le1__alt_bounds-2 "" 3790092504
   ("" (skeep)
    (("" (split)
      (("1" (expand "atan_pos_le1_alt_lb")
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten)
              (("1" (lemma "atan_pos_le1_bounds")
                (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (case "max(reduce_lb(x, n), 1/5)<= reduce_fun(x)")
                (("1" (lemma "atan_series_n_increasing")
                  (("1" (inst-cp -1 "2*n+1" "5/12" "x")
                    (("1"
                      (inst -1 "2*n+1" "max(reduce_lb(x, n), 1 / 5)"
                       "reduce_fun(x)")
                      (("1" (split -2)
                        (("1" (split -2)
                          (("1" (both-sides "*" "2" -1)
                            (("1" (lemma "atan_pos_le1_bounds")
                              (("1" (inst -1 "n" "reduce_fun(x)")
                                (("1" (split -1)
                                  (("1" (flatten)
                                    (("1" (hide -2)
                                      (("1"
                                        (both-sides "*" "2" -1)
                                        (("1"
                                          (lemma "reduce_is_equal")
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (expand "atan_pos_le1_lb")
                                              (("1"
                                                (rewrite "atan_series_eq")
                                                (("1"
                                                  (rewrite "atan_series_eq")
                                                  (("1"
                                                    (rewrite "atan_series_eq")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (lift-if 1)
                                                                  (("1"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (lemma
                                                                           "atan_pos_le1_bounds")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "x")
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "atan_pos_le1_lb")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "atan_series_eq")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lift-if 2)
                                                                (("2"
                                                                  (split 2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (lemma
                                                                         "atan_pos_le1_bounds")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "x")
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "atan_pos_le1_lb")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "atan_series_eq")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil)
                                   ("3" (ground)
                                    (("3" (expand "reduce_fun")
                                      (("3"
                                        (ground)
                                        (("3" (cross-mult 1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (expand "reduce_fun")
                            (("3" (hide 3)
                              (("3" (cross-mult 1) (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil) ("3" (propax) nil nil))
                        nil)
                       ("2" (expand "reduce_fun")
                        (("2" (cross-mult 1) (("2" (ground) nil nil)) nil))
                        nil)
                       ("3" (ground) nil nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "max")
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (case "1/5 = reduce_fun(5/12)")
                            (("1" (replaces -1)
                              (("1" (lemma "reduce_n_increasing")
                                (("1" (inst -1 "1" "5/12" "x")
                                  (("1" (split -1)
                                    (("1" (expand "reduce_n")
                                      (("1"
                                        (expand "reduce_n")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "reduce_fun")
                              (("2" (case "sqrt(169/144) = 13/12")
                                (("1" (replaces -1) (("1" (ground) nil nil))
                                  nil)
                                 ("2" (lemma "sqrt_sq")
                                  (("2" (case "sq(13/12) = 169/144")
                                    (("1" (inst -2 "13/12")
                                      (("1"
                                        (replaces -1)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "sq")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "reduce_lb(x,n)")
                            (("2" (typepred "reduce_alt(x)")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "atan_pos_le1_alt_ub")
        (("2" (lift-if 1)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (lemma "atan_pos_le1_bounds")
                (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "atan_series_n_increasing")
                (("2" (inst-cp -1 "2*n" "5/12" "x")
                  (("1" (inst -1 "2*n" "reduce_fun(x)" "reduce_ub(x, n)")
                    (("1" (split -2)
                      (("1" (split -2)
                        (("1" (both-sides "*" "2" -1)
                          (("1" (lemma "atan_pos_le1_bounds")
                            (("1" (inst -1 "n" "reduce_fun(x)")
                              (("1" (split -1)
                                (("1" (flatten)
                                  (("1" (hide -1)
                                    (("1" (both-sides "*" "2" -1)
                                      (("1"
                                        (lemma "reduce_is_equal")
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (expand "atan_pos_le1_ub")
                                            (("1"
                                              (rewrite "atan_series_eq")
                                              (("1"
                                                (rewrite "atan_series_eq")
                                                (("1"
                                                  (rewrite "atan_series_eq")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground)
                                  (("2" (expand "reduce_fun")
                                    (("2" (ground)
                                      (("2" (cross-mult 1) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (expand "reduce_fun")
                                  (("3" (cross-mult 1)
                                    (("3" (ground) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground) nil nil))
                          nil)
                         ("2" (typepred "reduce_ub(x,n)")
                          (("1" (typepred "reduce_alt(x)")
                            (("1" (ground) nil nil)) nil)
                           ("2" (ground) nil nil))
                          nil)
                         ("3" (lemma "reduce_ub_increasing")
                          (("3" (inst -1 "n" "x" "1")
                            (("1" (split -1)
                              (("1" (case "reduce_ub(1,n)<=1")
                                (("1" (ground) nil nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "reduce_ub")
                                    (("2" (cross-mult)
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil) ("3" (propax) nil nil))
                      nil)
                     ("2" (ground) nil nil)
                     ("3" (ground)
                      (("3" (lemma "reduce_pos")
                        (("3" (inst -1 "x") (("3" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (atan_pos_le1__alt_bounds-1 nil 3628949289
   ("" (skeep)
    (("" (split)
      (("1" (expand "atan_pos_le1_alt_lb")
        (("1" (lift-if)
          (("1" (split)
            (("1" (flatten)
              (("1" (lemma "atan_pos_le1_bounds")
                (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (case "max(reduce_lb(x, n), 1/5)<= reduce_fun(x)")
                (("1" (lemma "atan_series_n_increasing")
                  (("1" (inst-cp -1 "2*n+1" "5/12" "x")
                    (("1"
                      (inst -1 "2*n+1" "max(reduce_lb(x, n), 1 / 5)"
                       "reduce_fun(x)")
                      (("1" (split -2)
                        (("1" (split -2)
                          (("1" (both-sides "*" "2" -1)
                            (("1" (lemma "atan_pos_le1_bounds")
                              (("1" (inst -1 "n" "reduce_fun(x)")
                                (("1" (split -1)
                                  (("1" (flatten)
                                    (("1" (hide -2)
                                      (("1"
                                        (both-sides "*" "2" -1)
                                        (("1"
                                          (lemma "reduce_is_equal")
                                          (("1"
                                            (inst -1 "x")
                                            (("1"
                                              (expand "atan_pos_le1_lb")
                                              (("1"
                                                (rewrite "atan_series_eq")
                                                (("1"
                                                  (rewrite "atan_series_eq")
                                                  (("1"
                                                    (rewrite "atan_series_eq")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand "max")
                                                        (("1"
                                                          (lift-if 2)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (lift-if 1)
                                                                  (("1"
                                                                    (split 1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (lemma
                                                                           "atan_pos_le1_bounds")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "x")
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "atan_pos_le1_lb")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "atan_series_eq")
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lift-if 2)
                                                                (("2"
                                                                  (split 2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (lemma
                                                                         "atan_pos_le1_bounds")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "x")
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "atan_pos_le1_lb")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "atan_series_eq")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil)
                                   ("3" (ground)
                                    (("3" (expand "reduce_fun")
                                      (("3"
                                        (ground)
                                        (("3" (cross-mult 1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (expand "reduce_fun")
                            (("3" (hide 3)
                              (("3" (cross-mult 1) (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil) ("3" (propax) nil nil))
                        nil)
                       ("2" (expand "reduce_fun")
                        (("2" (cross-mult 1) (("2" (ground) nil nil)) nil))
                        nil)
                       ("3" (ground) nil nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (expand "max")
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (case "1/5 = reduce_fun(5/12)")
                            (("1" (replaces -1)
                              (("1" (lemma "reduce_n_increasing")
                                (("1" (inst -1 "1" "5/12" "x")
                                  (("1" (split -1)
                                    (("1" (expand "reduce_n")
                                      (("1"
                                        (expand "reduce_n")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "reduce_fun")
                              (("2" (case "sqrt(169/144) = 13/12")
                                (("1" (replaces -1) (("1" (ground) nil nil))
                                  nil)
                                 ("2" (lemma "sqrt_sq")
                                  (("2" (case "sq(13/12) = 169/144")
                                    (("1" (inst -2 "13/12")
                                      (("1"
                                        (replaces -1)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "sq")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "reduce_lb(x,n)")
                            (("2" (typepred "reduce_alt(x)")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "atan_pos_le1_alt_ub")
        (("2" (lift-if 1)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (lemma "atan_pos_le1_bounds")
                (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (flatten)
              (("2" (lemma "atan_series_n_increasing")
                (("2" (inst-cp -1 "2*n" "5/12" "x")
                  (("1" (inst -1 "2*n" "reduce_fun(x)" "reduce_ub(x, n)")
                    (("1" (split -2)
                      (("1" (split -2)
                        (("1" (both-sides "*" "2" -1)
                          (("1" (lemma "atan_pos_le1_bounds")
                            (("1" (inst -1 "n" "reduce_fun(x)")
                              (("1" (split -1)
                                (("1" (flatten)
                                  (("1" (hide -1)
                                    (("1" (both-sides "*" "2" -1)
                                      (("1"
                                        (lemma "reduce_is_equal")
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (expand "atan_pos_le1_ub")
                                            (("1"
                                              (rewrite "atan_series_eq")
                                              (("1"
                                                (rewrite "atan_series_eq")
                                                (("1"
                                                  (rewrite "atan_series_eq")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground)
                                  (("2" (ground)
                                    (("2" (expand "reduce_fun")
                                      (("2"
                                        (ground)
                                        (("2" (cross-mult 1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (expand "reduce_fun")
                                  (("3" (cross-mult 1)
                                    (("3" (ground) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground) nil nil))
                          nil)
                         ("2" (typepred "reduce_ub(x,n)")
                          (("1" (typepred "reduce_alt(x)")
                            (("1" (ground) nil nil)) nil)
                           ("2" (ground) nil nil))
                          nil)
                         ("3" (lemma "reduce_ub_increasing")
                          (("3" (inst -1 "n" "x" "1")
                            (("1" (split -1)
                              (("1" (case "reduce_ub(1,n)<=1")
                                (("1" (ground) nil nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "reduce_ub")
                                    (("2" (cross-mult)
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil) ("3" (propax) nil nil))
                      nil)
                     ("2" (ground) nil nil)
                     ("3" (ground)
                      (("3" (lemma "reduce_pos")
                        (("3" (inst -1 "x") (("3" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_sq formula-decl nil sqrt reals)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (TRUE const-decl "bool" booleans nil)
    (reduce_n def-decl "real" atan_approx nil)
    (reduce_n_increasing formula-decl nil atan_approx nil)
    (reduce_pos application-judgement "posreal" atan_approx nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil)
    (reduce_is_equal formula-decl nil atan_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (< const-decl "bool" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even? const-decl "bool" integers nil)
    (atan_series_n const-decl "real" atan nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (x skolem-const-decl "real" atan_approx nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (atan_pos_le1_bounds formula-decl nil atan_approx nil)
    (atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (reduce_pos judgement-tcc nil atan_approx nil)
    (reduce_ub_increasing formula-decl nil atan_approx nil)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (sq_1 formula-decl nil sq reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (atan_pos_le1_alt_ub const-decl "real" atan_approx nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil))
   shostak))
 (atan_pos_le1_alt_lb_inc 0
  (atan_pos_le1_alt_lb_inc-5 "" 3790092506
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_lb")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_lb_inc") nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_lb_inc")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " max(reduce_lb(px, m), 1/5)")
                  (("2" (ground)
                    (("1" (case "reduce_lb(px,n)<=reduce_lb(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n+1" "max(reduce_lb(px, n), 1/5)"
                           "max(reduce_lb(px, m), 1/5)")
                          (("1" (ground)
                            (("1"
                              (name-replace "mrlb"
                               "max(reduce_lb(px, m), 1/5)")
                              (("1"
                                (name-replace "nrlb"
                                 "max(reduce_lb(px, n), 1/5)")
                                (("1" (expand "atan_pos_le1_lb")
                                  (("1" (rewrite "atan_series_eq")
                                    (("1" (rewrite "atan_series_eq")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (rewrite "atan_series_eq")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 2)
                                                  (("1"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lift-if 2)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (expand "max")
                                  (("2" (lift-if 1)
                                    (("2" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 3)
                              (("3" (hide (-2 -3))
                                (("3" (expand "max")
                                  (("3" (lift-if 1)
                                    (("3" (ground)
                                      (("3"
                                        (typepred "reduce_lb(px,m)")
                                        (("3"
                                          (typepred "reduce_alt(px)")
                                          (("3"
                                            (expand "reduce_fun")
                                            (("3" (grind-reals) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -2 3))
                        (("2" (expand "reduce_lb")
                          (("2" (cross-mult)
                            (("2"
                              (case "FORALL (nn, mm:nat, xx:nnreal):
                                        nn<mm IMPLIES sqrt_ub(xx,mm)<=sqrt_ub(xx,nn)")
                              (("1" (inst -1 "n" "m" "1+1/sq(px)")
                                (("1" (split -1)
                                  (("1" (ground) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (skeep)
                                  (("2" (lemma "sqrt_ub_dec")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (expand "max")
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (ground) nil nil)) nil)
                             ("2" (flatten)
                              (("2" (typepred "reduce_lb(px,m)")
                                (("2" (typepred "reduce_alt(px)")
                                  (("2" (expand "reduce_fun")
                                    (("2" (grind-reals) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (atan_pos_le1_alt_lb_inc-4 nil 3630156497
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_lb")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_lb_inc") nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_lb_inc")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " max(reduce_lb(px, m), 1/5)")
                  (("2" (ground)
                    (("1" (case "reduce_lb(px,n)<=reduce_lb(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n+1" "max(reduce_lb(px, n), 1/5)"
                           "max(reduce_lb(px, m), 1/5)")
                          (("1" (ground)
                            (("1"
                              (name-replace "mrlb"
                               "max(reduce_lb(px, m), 1/5)")
                              (("1"
                                (name-replace "nrlb"
                                 "max(reduce_lb(px, n), 1/5)")
                                (("1" (expand "atan_pos_le1_lb")
                                  (("1" (rewrite "atan_series_eq")
                                    (("1" (rewrite "atan_series_eq")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (rewrite "atan_series_eq")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 2)
                                                  (("1"
                                                    (split 2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lift-if 2)
                                                        (("2"
                                                          (split 2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (expand "max")
                                  (("2" (lift-if 1)
                                    (("2" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 3)
                              (("3" (hide (-2 -3))
                                (("3" (expand "max")
                                  (("3" (ground)
                                    (("3" (lift-if 1)
                                      (("3"
                                        (ground)
                                        (("3"
                                          (typepred "reduce_lb(px,m)")
                                          (("3"
                                            (typepred "reduce_alt(px)")
                                            (("3"
                                              (expand "reduce_fun")
                                              (("3" (grind-reals) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -2 3))
                        (("2" (expand "reduce_lb")
                          (("2" (cross-mult)
                            (("2"
                              (case "FORALL (nn, mm:nat, xx:nnreal):
                                        nn<mm IMPLIES sqrt_ub(xx,mm)<=sqrt_ub(xx,nn)")
                              (("1" (inst -1 "n" "m" "1+1/sq(px)")
                                (("1" (split -1)
                                  (("1" (ground) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (skeep)
                                  (("2" (lemma "sqrt_ub_dec")
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (expand "max")
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (ground) nil nil)) nil)
                             ("2" (flatten)
                              (("2" (typepred "reduce_lb(px,m)")
                                (("2" (typepred "reduce_alt(px)")
                                  (("2" (expand "reduce_fun")
                                    (("2" (grind-reals) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_lb_inc formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (sqrt_ub_dec formula-decl nil sqrt_approx reals)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (sq const-decl "nonneg_real" sq reals)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   nil)
  (atan_pos_le1_alt_lb_inc-3 nil 3629195201
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_lb")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_lb_inc") nil)))
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_lb_inc")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " max(reduce_lb(px, m), 1/5)")
                  (("2" (ground)
                    (("1" (case "reduce_lb(px,n)<=reduce_lb(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n+1" "max(reduce_lb(px, n), 1/5)"
                           "max(reduce_lb(px, m), 1/5)")
                          (("1" (ground)
                            (("1"
                              (name-replace "mrlb"
                               "max(reduce_lb(px, m), 1/5)")
                              (("1"
                                (name-replace "nrlb"
                                 "max(reduce_lb(px, n), 1/5)")
                                (("1" (expand "atan_pos_le1_lb")
                                  (("1" (ground)
                                    (("1" (expand "max")
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1" (ground) nil)))
                                                 ("2"
                                                  (flatten)
                                                  (("2" (ground) nil)))))))))
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1" (ground) nil)))
                                                 ("2"
                                                  (flatten)
                                                  nil)))))))))))))))))))))
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (expand "max")
                                  (("2" (lift-if 1)
                                    (("2" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil)))
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil)))))))))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil)))
                                             ("2"
                                              (flatten)
                                              nil)))))))))))))))))
                             ("3" (hide 3)
                              (("3" (hide (-2 -3))
                                (("3" (expand "max")
                                  (("3" (ground)
                                    (("3" (lift-if 1)
                                      (("3"
                                        (ground)
                                        (("3"
                                          (typepred "reduce_lb(px,m)")
                                          (("3"
                                            (typepred "reduce_alt(px)")
                                            (("3"
                                              (expand "reduce_fun")
                                              (("3"
                                                (grind-reals)
                                                nil)))))))))))))))))))))))))
                       ("2" (hide (-1 -2 3))
                        (("2" (expand "reduce_lb")
                          (("2" (cross-mult)
                            (("2"
                              (case "FORALL (nn, mm:nat, xx:nnreal):
                           nn<mm IMPLIES sqrt_ub(xx,mm)<=sqrt_ub(xx,nn)")
                              (("1" (inst -1 "n" "m" "1+1/sq(px)")
                                (("1" (split -1)
                                  (("1" (ground) nil) ("2" (propax) nil)))))
                               ("2" (hide-all-but 1)
                                (("2" (skeep)
                                  (("2" (lemma "sqrt_ub_dec")
                                    (("2" (inst?)
                                      (("2" (assert) nil)))))))))))))))))))
                     ("2" (hide 3)
                      (("2" (expand "max")
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (ground) nil)))
                             ("2" (flatten)
                              (("2" (typepred "reduce_lb(px,m)")
                                (("2" (typepred "reduce_alt(px)")
                                  (("2" (expand "reduce_fun")
                                    (("2" (grind-reals)
                                      nil))))))))))))))))))))))))))))))))))
    nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (atan_series_n_increasing formula-decl nil atan nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqrt_ub_dec formula-decl nil sqrt_approx reals)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (sq const-decl "nonneg_real" sq reals))
   nil)
  (atan_pos_le1_alt_lb_inc-2 nil 3629195022
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_lb")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_lb_inc") nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_lb_inc")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " max(reduce_lb(px, m), 1/5)")
                  (("2" (ground)
                    (("1" (case "reduce_lb(px,n)<=reduce_lb(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n+1" "max(reduce_lb(px, n), 1/5)"
                           "max(reduce_lb(px, m), 1/5)")
                          (("1" (ground)
                            (("1"
                              (name-replace "mrlb"
                               "max(reduce_lb(px, m), 1/5)")
                              (("1"
                                (name-replace "nrlb"
                                 "max(reduce_lb(px, n), 1/5)")
                                (("1" (expand "atan_pos_le1_lb")
                                  (("1" (ground)
                                    (("1" (expand "max")
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2" (flatten) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (expand "max")
                                  (("2" (lift-if 1)
                                    (("2" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 3)
                              (("3" (hide (-2 -3))
                                (("3" (expand "max")
                                  (("3" (ground)
                                    (("3" (lift-if 1)
                                      (("3"
                                        (ground)
                                        (("3"
                                          (typepred "reduce_lb(px,m)")
                                          (("3"
                                            (typepred "reduce_alt(px)")
                                            (("3"
                                              (expand "reduce_fun")
                                              (("3" (grind-reals) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -2 3))
                        (("2" (expand "reduce_lb")
                          (("2" (cross-mult)
                            (("2"
                              (case "FORALL (nn, mm:nat, xx:nnreal):
              nn<mm IMPLIES sqrt_ub(xx,mm)<=sqrt_ub(xx,nn)")
                              (("1" (inst -1 "n" "m" "1+1/sq(px)")
                                (("1" (split -1)
                                  (("1" (ground) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (skeep)
                                  (("2" (assert) (("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (expand "max")
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (ground) nil nil)) nil)
                             ("2" (flatten)
                              (("2" (typepred "reduce_lb(px,m)")
                                (("2" (typepred "reduce_alt(px)")
                                  (("2" (expand "reduce_fun")
                                    (("2" (grind-reals) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (atan_pos_le1_alt_lb_inc-1 nil 3628954425
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_lb")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_lb_inc") nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_lb_inc")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " max(reduce_lb(px, m), 1/5)")
                  (("2" (ground)
                    (("1" (case "reduce_lb(px,n)<=reduce_lb(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n+1" "max(reduce_lb(px, n), 1/5)"
                           "max(reduce_lb(px, m), 1/5)")
                          (("1" (ground)
                            (("1"
                              (name-replace "mrlb"
                               "max(reduce_lb(px, m), 1/5)")
                              (("1"
                                (name-replace "nrlb"
                                 "max(reduce_lb(px, n), 1/5)")
                                (("1" (expand "atan_pos_le1_lb")
                                  (("1" (ground)
                                    (("1" (expand "max")
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lift-if 1)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1" (ground) nil nil))
                                                  nil)
                                                 ("2" (flatten) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (expand "max")
                                  (("2" (lift-if 1)
                                    (("2" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 3)
                              (("3" (hide (-2 -3))
                                (("3" (expand "max")
                                  (("3" (ground)
                                    (("3" (lift-if 1)
                                      (("3"
                                        (ground)
                                        (("3"
                                          (typepred "reduce_lb(px,m)")
                                          (("3"
                                            (typepred "reduce_alt(px)")
                                            (("3"
                                              (expand "reduce_fun")
                                              (("3" (grind-reals) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 -2 3))
                        (("2" (expand "reduce_lb")
                          (("2" (cross-mult)
                            (("2"
                              (case "FORALL (nn, mm:nat, xx:nnreal): 
nn<mm IMPLIES sqrt_ub(xx,mm)<=sqrt_ub(xx,nn)")
                              (("1" (inst -1 "n" "m" "1+1/sq(px)")
                                (("1" (split -1)
                                  (("1" (ground) nil nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (hide-all-but 1)
                                (("2" (skeep) (("2" (postpone) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (expand "max")
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (ground) nil nil)) nil)
                             ("2" (flatten)
                              (("2" (typepred "reduce_lb(px,m)")
                                (("2" (typepred "reduce_alt(px)")
                                  (("2" (expand "reduce_fun")
                                    (("2" (grind-reals) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (atan_pos_le1_alt_ub_dec 0
  (atan_pos_le1_alt_ub_dec-3 nil 3630156579
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_ub")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_ub_dec") nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_ub_dec")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " reduce_ub(px, m)")
                  (("2" (ground)
                    (("1" (case "reduce_ub(px,n)>=reduce_ub(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n" "reduce_ub(px, m)"
                           "reduce_ub(px, n)")
                          (("1" (ground)
                            (("1" (expand "atan_pos_le1_ub")
                              (("1" (rewrite "atan_series_eq")
                                (("1" (rewrite "atan_series_eq")
                                  (("1" (rewrite "atan_series_eq")
                                    (("1" (rewrite "atan_series_eq")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "max")
                                            (("1"
                                              (lift-if 2)
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lift-if 2)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (lemma "reduce_ub_increasing")
                                  (("2" (inst -1 "n" "px" "1")
                                    (("2" (ground)
                                      (("2"
                                        (case "reduce_ub(1,n)<=1")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (expand "reduce_ub")
                                          (("2"
                                            (cross-mult 1)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "reduce_ub")
                        (("2" (cross-mult 1)
                          (("2"
                            (case "FORALL (nn,mm:nat, xx:nnreal): nn<mm IMPLIES
                             sqrt_lb(xx,nn)<= sqrt_lb(xx,mm)")
                            (("1" (inst -1 "n" "m" " 1+1/sq(px)")
                              (("1" (ground) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep)
                                (("2" (lemma "sqrt_lb_inc")
                                  (("2" (inst?) (("2" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "reduce_ub_increasing")
                      (("2" (inst -1 "m" "px" "1")
                        (("2" (ground)
                          (("2" (case "reduce_ub(1,m)<=1")
                            (("1" (ground) nil nil)
                             ("2" (expand "reduce_ub")
                              (("2" (cross-mult 1) (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_pos_le1_alt_ub const-decl "real" atan_approx nil)
    (atan_pos_le1_ub_dec formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (<= const-decl "bool" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (reduce_ub_increasing formula-decl nil atan_approx nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sq_1 formula-decl nil sq reals)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (sqrt_lb_inc formula-decl nil sqrt_approx reals)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals
     nil))
   nil)
  (atan_pos_le1_alt_ub_dec-2 nil 3629195324
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_ub")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_ub_dec") nil)))
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_ub_dec")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " reduce_ub(px, m)")
                  (("2" (ground)
                    (("1" (case "reduce_ub(px,n)>=reduce_ub(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n" "reduce_ub(px, m)"
                           "reduce_ub(px, n)")
                          (("1" (ground)
                            (("1" (expand "atan_pos_le1_ub")
                              (("1" (ground)
                                (("1" (expand "max")
                                  (("1" (lift-if 2)
                                    (("1" (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil)))
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil)))))))))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil)))
                                             ("2"
                                              (flatten)
                                              nil)))))))))))))))))
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (lemma "reduce_ub_increasing")
                                  (("2" (inst -1 "n" "px" "1")
                                    (("2" (ground)
                                      (("2"
                                        (case "reduce_ub(1,n)<=1")
                                        (("1" (ground) nil)
                                         ("2"
                                          (expand "reduce_ub")
                                          (("2"
                                            (cross-mult 1)
                                            (("2"
                                              (ground)
                                              nil)))))))))))))))))))))))
                       ("2" (expand "reduce_ub")
                        (("2" (cross-mult 1)
                          (("2"
                            (case "FORALL (nn,mm:nat, xx:nnreal): nn<mm IMPLIES
                sqrt_lb(xx,nn)<= sqrt_lb(xx,mm)")
                            (("1" (inst -1 "n" "m" " 1+1/sq(px)")
                              (("1" (ground) nil)))
                             ("2" (hide-all-but 1)
                              (("2" (skeep)
                                (("2" (lemma "sqrt_lb_inc")
                                  (("2" (inst?)
                                    (("2" (assert) nil)))))))))))))))))
                     ("2" (lemma "reduce_ub_increasing")
                      (("2" (inst -1 "m" "px" "1")
                        (("2" (ground)
                          (("2" (case "reduce_ub(1,m)<=1")
                            (("1" (ground) nil)
                             ("2" (expand "reduce_ub")
                              (("2" (cross-mult 1)
                                (("2" (ground)
                                  nil))))))))))))))))))))))))))))))
    nil)
   ((sq_nz_pos application-judgement "posreal" sq reals)
    (sq_1 formula-decl nil sq reals)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (sq const-decl "nonneg_real" sq reals)
    (atan_series_n_increasing formula-decl nil atan nil)
    (sqrt_lb_inc formula-decl nil sqrt_approx reals))
   nil)
  (atan_pos_le1_alt_ub_dec-1 nil 3628957724
   ("" (skeep)
    (("" (expand "atan_pos_le1_alt_ub")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_pos_le1_ub_dec") nil nil)) nil)
           ("2" (flatten)
            (("2" (lemma "atan_pos_le1_ub_dec")
              (("2" (inst-cp -1 "m" "n" "5/12")
                (("2" (inst -1 "m" "n" " reduce_ub(px, m)")
                  (("2" (ground)
                    (("1" (case "reduce_ub(px,n)>=reduce_ub(px,m)")
                      (("1" (lemma "atan_series_n_increasing")
                        (("1"
                          (inst -1 "2*n" "reduce_ub(px, m)"
                           "reduce_ub(px, n)")
                          (("1" (ground)
                            (("1" (expand "atan_pos_le1_ub")
                              (("1" (ground)
                                (("1" (expand "max")
                                  (("1" (lift-if 2)
                                    (("1" (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 3)
                              (("2" (hide (-2 -3))
                                (("2" (lemma "reduce_ub_increasing")
                                  (("2" (inst -1 "n" "px" "1")
                                    (("2" (ground)
                                      (("2"
                                        (case "reduce_ub(1,n)<=1")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (expand "reduce_ub")
                                          (("2"
                                            (cross-mult 1)
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "reduce_ub")
                        (("2" (cross-mult 1)
                          (("2"
                            (case "FORALL (nn,mm:nat, xx:nnreal): nn<mm IMPLIES
   sqrt_lb(xx,nn)<= sqrt_lb(xx,mm)")
                            (("1" (inst -1 "n" "m" " 1+1/sq(px)")
                              (("1" (ground) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep) (("2" (postpone) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "reduce_ub_increasing")
                      (("2" (inst -1 "m" "px" "1")
                        (("2" (ground)
                          (("2" (case "reduce_ub(1,m)<=1")
                            (("1" (ground) nil nil)
                             ("2" (expand "reduce_ub")
                              (("2" (cross-mult 1) (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (atan_pos_le1_alt_lb_increasing 0
  (atan_pos_le1_alt_lb_increasing-2 nil 3630156753
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (case "y<5/12")
          (("1" (expand "atan_pos_le1_alt_lb")
            (("1" (assert)
              (("1" (expand "atan_pos_le1_lb")
                (("1" (rewrite "atan_series_eq")
                  (("1" (rewrite "atan_series_eq")
                    (("1" (rewrite "atan_series_n_increasing") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x_1>=5/12")
            (("1" (expand "atan_pos_le1_alt_lb")
              (("1" (assert)
                (("1" (expand "max" 2 1)
                  (("1" (expand "max" 2 3)
                    (("1" (lift-if 2)
                      (("1" (lift-if 2)
                        (("1" (assert)
                          (("1" (ground)
                            (("1"
                              (case "max(reduce_lb(x_1, n), 1/5)<= max(reduce_lb(y, n), 1/5)")
                              (("1" (expand "atan_pos_le1_lb")
                                (("1" (rewrite "atan_series_eq")
                                  (("1" (rewrite "atan_series_eq")
                                    (("1" (rewrite "atan_series_eq")
                                      (("1"
                                        (cancel 1)
                                        (("1"
                                          (rewrite "atan_series_n_increasing")
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand "max")
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "reduce_lb")
                                                    (("1"
                                                      (cross-mult)
                                                      (("1"
                                                        (typepred
                                                         " sqrt_ub(1 + 1 / sq(y), n)")
                                                        (("1"
                                                          (case
                                                           " 1 <= sqrt_ub(1 + 1 / sq(y), n)")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flip-ineq 1)
                                                            (("2"
                                                              (mult-ineq
                                                               -1
                                                               -1)
                                                              (("2"
                                                                (expand "sq")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (lemma "reduce_lb_increasing")
                                (("2" (inst -1 " n" "x_1" "y")
                                  (("2" (ground)
                                    (("2" (hide (-2 -3 2))
                                      (("2"
                                        (name-replace "ry" "reduce_lb(y, n)")
                                        (("2"
                                          (name-replace
                                           "rx"
                                           "reduce_lb(x_1, n)")
                                          (("2"
                                            (expand "max")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "max(reduce_lb(x_1, n), 1/5)<= max(reduce_lb(y, n), 1/5)")
                              (("1" (lemma "atan_series_n_increasing")
                                (("1"
                                  (inst -1 "1+2*n"
                                   "max(reduce_lb(x_1, n), 1 / 5)"
                                   " max(reduce_lb(y, n), 1 / 5)")
                                  (("1" (assert)
                                    (("1" (ground)
                                      (("1"
                                        (expand "atan_pos_le1_lb")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (rewrite "atan_series_eq")
                                            (("1"
                                              (rewrite "atan_series_eq")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (2 3))
                                        (("2"
                                          (expand "max")
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1" (ground) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "reduce_lb")
                                                  (("2"
                                                    (cross-mult)
                                                    (("2"
                                                      (typepred
                                                       "sqrt_ub(1 + 1 / sq(y), n)")
                                                      (("2"
                                                        (case
                                                         "1<=sqrt_ub(1+1/sq(y),n )")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide (2 3))
                                                          (("2"
                                                            (flip-ineq 1)
                                                            (("2"
                                                              (mult-ineq
                                                               -1
                                                               -1)
                                                              (("2"
                                                                (expand "sq")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide (-1 2))
                                (("2"
                                  (case "reduce_lb(x_1,n)<= reduce_lb(y,n)")
                                  (("1" (expand "max")
                                    (("1"
                                      (name-replace "rx" "reduce_lb(x_1, n)")
                                      (("1"
                                        (name-replace "ry" "reduce_lb(y, n)")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (rewrite "reduce_lb_increasing") nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lift-if 2) (("3" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "atan_pos_le1_alt_lb")
              (("2" (assert)
                (("2" (expand "atan_pos_le1_lb")
                  (("2" (rewrite "atan_series_eq")
                    (("2" (rewrite "atan_series_eq")
                      (("2" (rewrite "atan_series_eq")
                        (("2" (lemma "atan_series_n_increasing")
                          (("2" (inst -1 "1+2*n" "x_1" "5/12")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (atan_series_n const-decl "real" atan nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (reduce_lb_increasing formula-decl nil atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil))
   nil)
  (atan_pos_le1_alt_lb_increasing-1 nil 3628962352
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (case "y<5/12")
          (("1" (expand "atan_pos_le1_alt_lb")
            (("1" (assert)
              (("1" (expand "atan_pos_le1_lb")
                (("1" (rewrite "atan_series_n_increasing") nil nil)) nil))
              nil))
            nil)
           ("2" (case "x_1>=5/12")
            (("1" (expand "atan_pos_le1_alt_lb")
              (("1" (assert)
                (("1" (expand "max" 2 1)
                  (("1" (expand "max" 2 3)
                    (("1" (lift-if 2)
                      (("1" (lift-if 2)
                        (("1" (assert)
                          (("1" (ground)
                            (("1"
                              (case "max(reduce_lb(x_1, n), 1/5)<= max(reduce_lb(y, n), 1/5)")
                              (("1" (expand "atan_pos_le1_lb")
                                (("1" (cancel-by 1 "2")
                                  (("1" (rewrite "atan_series_n_increasing")
                                    (("1" (hide-all-but 1)
                                      (("1"
                                        (expand "max")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "reduce_lb")
                                              (("1"
                                                (cross-mult)
                                                (("1"
                                                  (typepred
                                                   " sqrt_ub(1 + 1 / sq(y), n)")
                                                  (("1"
                                                    (case
                                                     " 1 <= sqrt_ub(1 + 1 / sq(y), n)")
                                                    (("1" (ground) nil nil)
                                                     ("2"
                                                      (flip-ineq 1)
                                                      (("2"
                                                        (mult-ineq -1 -1)
                                                        (("2"
                                                          (expand "sq")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (lemma "reduce_lb_increasing")
                                (("2" (inst -1 " n" "x_1" "y")
                                  (("2" (ground)
                                    (("2" (hide (-2 -3 2))
                                      (("2"
                                        (name-replace "ry" "reduce_lb(y, n)")
                                        (("2"
                                          (name-replace
                                           "rx"
                                           "reduce_lb(x_1, n)")
                                          (("2"
                                            (expand "max")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "max(reduce_lb(x_1, n), 1/5)<= max(reduce_lb(y, n), 1/5)")
                              (("1" (lemma "atan_series_n_increasing")
                                (("1"
                                  (inst -1 "1+2*n"
                                   "max(reduce_lb(x_1, n), 1 / 5)"
                                   " max(reduce_lb(y, n), 1 / 5)")
                                  (("1" (assert)
                                    (("1" (ground)
                                      (("1"
                                        (expand "atan_pos_le1_lb")
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (hide (2 3))
                                        (("2"
                                          (expand "max")
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1" (ground) nil nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (expand "reduce_lb")
                                                  (("2"
                                                    (cross-mult)
                                                    (("2"
                                                      (typepred
                                                       "sqrt_ub(1 + 1 / sq(y), n)")
                                                      (("2"
                                                        (case
                                                         "1<=sqrt_ub(1+1/sq(y),n )")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide (2 3))
                                                          (("2"
                                                            (flip-ineq 1)
                                                            (("2"
                                                              (mult-ineq
                                                               -1
                                                               -1)
                                                              (("2"
                                                                (expand "sq")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide (-1 2))
                                (("2"
                                  (case "reduce_lb(x_1,n)<= reduce_lb(y,n)")
                                  (("1" (expand "max")
                                    (("1"
                                      (name-replace "rx" "reduce_lb(x_1, n)")
                                      (("1"
                                        (name-replace "ry" "reduce_lb(y, n)")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (rewrite "reduce_lb_increasing") nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lift-if 2) (("3" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "atan_pos_le1_alt_lb")
              (("2" (assert)
                (("2" (expand "atan_pos_le1_lb")
                  (("2" (lemma "atan_series_n_increasing")
                    (("2" (inst -1 "1+2*n" "x_1" "5/12")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (atan_series_n_increasing formula-decl nil atan nil)
    (atan_series_n const-decl "real" atan nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sqrt_ub const-decl "{zz | x <= sq(zz)}" sqrt_approx reals)
    (sq const-decl "nonneg_real" sq reals))
   shostak))
 (atan_pos_le1_alt_ub_increasing 0
  (atan_pos_le1_alt_ub_increasing-2 nil 3630157332
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (case "y<5/12")
          (("1" (assert)
            (("1" (expand "atan_pos_le1_alt_ub")
              (("1" (assert)
                (("1" (expand "atan_pos_le1_ub")
                  (("1" (rewrite "atan_series_eq")
                    (("1" (rewrite "atan_series_eq")
                      (("1" (rewrite "atan_series_n_increasing") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "x_1>=5/12")
            (("1" (expand "atan_pos_le1_alt_ub")
              (("1" (lemma "reduce_ub_increasing")
                (("1" (inst-cp -1 "n" "x_1" "y")
                  (("1" (lift-if 2)
                    (("1" (lift-if 2)
                      (("1" (ground)
                        (("1" (lemma "atan_series_n_increasing")
                          (("1"
                            (inst -1 "2*n" "reduce_ub(x_1,n)"
                             "reduce_ub(y,n)")
                            (("1" (inst -3 "n" "y" "1")
                              (("1" (case "reduce_ub(1,n)<=1")
                                (("1" (ground)
                                  (("1" (both-sides "*" "2" -2)
                                    (("1" (expand "atan_pos_le1_ub")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (rewrite "atan_series_eq")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "max")
                                                (("1"
                                                  (lift-if 2)
                                                  (("1"
                                                    (lift-if 2)
                                                    (("1"
                                                      (lift-if 2)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "reduce_ub")
                                    (("2" (cross-mult)
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "atan_pos_le1_alt_ub")
              (("2" (assert)
                (("2" (expand "atan_pos_le1_ub")
                  (("2" (rewrite "atan_series_eq")
                    (("2" (rewrite "atan_series_eq")
                      (("2" (rewrite "atan_series_eq")
                        (("2" (lemma "atan_series_n_increasing")
                          (("2" (inst -1 "2*n" "x_1" "5/12")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (atan_pos_le1_alt_ub const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (nnreal type-eq-decl nil real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq_1 formula-decl nil sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (atan_series_n const-decl "real" atan nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (reduce_ub_increasing formula-decl nil atan_approx nil))
   nil)
  (atan_pos_le1_alt_ub_increasing-1 nil 3628964221
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (case "y<5/12")
          (("1" (assert)
            (("1" (expand "atan_pos_le1_alt_ub")
              (("1" (assert)
                (("1" (expand "atan_pos_le1_ub")
                  (("1" (rewrite "atan_series_n_increasing") nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "x_1>=5/12")
            (("1" (expand "atan_pos_le1_alt_ub")
              (("1" (lemma "reduce_ub_increasing")
                (("1" (inst-cp -1 "n" "x_1" "y")
                  (("1" (lift-if 2)
                    (("1" (lift-if 2)
                      (("1" (ground)
                        (("1" (lemma "atan_series_n_increasing")
                          (("1"
                            (inst -1 "2*n" "reduce_ub(x_1,n)"
                             "reduce_ub(y,n)")
                            (("1" (inst -3 "n" "y" "1")
                              (("1" (case "reduce_ub(1,n)<=1")
                                (("1" (ground)
                                  (("1" (both-sides "*" "2" -2)
                                    (("1" (expand "atan_pos_le1_ub")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "max")
                                          (("1"
                                            (lift-if 2)
                                            (("1"
                                              (lift-if 2)
                                              (("1"
                                                (lift-if 2)
                                                (("1" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "reduce_ub")
                                    (("2" (cross-mult)
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "atan_pos_le1_alt_ub")
              (("2" (assert)
                (("2" (expand "atan_pos_le1_ub")
                  (("2" (lemma "atan_series_n_increasing")
                    (("2" (inst -1 "2*n" "x_1" "5/12")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (atan_series_n_increasing formula-decl nil atan nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt_lb const-decl "{zz | x >= sq(zz)}" sqrt_approx reals)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (atan_series_n const-decl "real" atan nil))
   shostak))
 (atan_pos_le1_alt_ge0 0
  (atan_pos_le1_alt_ge0-3 "" 3790092514
   ("" (skeep)
    (("" (case "FORALL (nn:nat): atan_series_n(0,nn) = 0")
      (("1" (lemma "atan_series_n_increasing")
        (("1" (inst-cp -2 "2*n")
          (("1" (inst -2 "1+2*n")
            (("1" (case "px<5/12")
              (("1" (expand "atan_pos_le1_alt_lb")
                (("1" (expand "atan_pos_le1_alt_ub")
                  (("1" (assert)
                    (("1" (expand "atan_pos_le1_lb")
                      (("1" (expand "atan_pos_le1_ub")
                        (("1" (rewrite "atan_series_eq")
                          (("1" (rewrite "atan_series_eq")
                            (("1" (inst-cp -2 "2*n" "0" "px")
                              (("1" (inst -2 "1+2*n" "0" "px")
                                (("1" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst-cp -1 "2*n" "0" "5/12")
                (("2" (inst -1 "1+2*n" "0" "5/12")
                  (("2" (expand "atan_pos_le1_alt_lb")
                    (("2" (expand "atan_pos_le1_alt_ub")
                      (("2" (ground)
                        (("1" (expand "max")
                          (("1" (lift-if 1)
                            (("1" (ground)
                              (("1" (lift-if 1)
                                (("1" (ground)
                                  (("1" (cancel-by 1 "2")
                                    (("1" (expand "atan_pos_le1_lb")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (replace -6 2 :dir rl)
                                            (("1"
                                              (lemma
                                               "atan_series_n_increasing")
                                              (("1"
                                                (inst -1 "1+2*n" "0" "1/5")
                                                (("1" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "atan_pos_le1_lb")
                                    (("2" (rewrite "atan_series_eq")
                                      (("2"
                                        (rewrite "atan_series_eq")
                                        (("2"
                                          (replace -4 2 :dir rl)
                                          (("2"
                                            (lemma "atan_series_n_increasing")
                                            (("2"
                                              (inst -1 "1+2*n" "0" "5/12")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (lift-if 2)
                                (("2" (ground)
                                  (("1" (expand "atan_pos_le1_lb")
                                    (("1" (rewrite "atan_series_eq")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (lemma "atan_series_n_increasing")
                                          (("1"
                                            (inst -1 "1+2*n" "0" "5/12")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "atan_pos_le1_lb")
                                    (("2" (rewrite "atan_series_eq")
                                      (("2"
                                        (rewrite "atan_series_eq")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "atan_pos_le1_ub")
                          (("2" (rewrite "atan_series_eq")
                            (("2" (rewrite "atan_series_eq")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (induct-and-simplify "nn") nil nil)) nil))
      nil))
    nil)
   nil shostak)
  (atan_pos_le1_alt_ge0-2 nil 3630157446
   ("" (skeep)
    (("" (case "FORALL (nn:nat): atan_series_n(0,nn) = 0")
      (("1" (lemma "atan_series_n_increasing")
        (("1" (inst-cp -2 "2*n")
          (("1" (inst -2 "1+2*n")
            (("1" (case "px<5/12")
              (("1" (expand "atan_pos_le1_alt_lb")
                (("1" (expand "atan_pos_le1_alt_ub")
                  (("1" (assert)
                    (("1" (expand "atan_pos_le1_lb")
                      (("1" (expand "atan_pos_le1_ub")
                        (("1" (rewrite "atan_series_eq")
                          (("1" (rewrite "atan_series_eq")
                            (("1" (inst-cp -2 "2*n" "0" "px")
                              (("1" (inst -2 "1+2*n" "0" "px")
                                (("1" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst-cp -1 "2*n" "0" "5/12")
                (("2" (inst -1 "1+2*n" "0" "5/12")
                  (("2" (expand "atan_pos_le1_alt_lb")
                    (("2" (expand "atan_pos_le1_alt_ub")
                      (("2" (ground)
                        (("1" (expand "max")
                          (("1" (ground)
                            (("1" (lift-if 1)
                              (("1" (ground)
                                (("1" (lift-if 1)
                                  (("1" (ground)
                                    (("1" (cancel-by 1 "2")
                                      (("1"
                                        (expand "atan_pos_le1_lb")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (rewrite "atan_series_eq")
                                            (("1"
                                              (replace -6 2 :dir rl)
                                              (("1"
                                                (lemma
                                                 "atan_series_n_increasing")
                                                (("1"
                                                  (inst -1 "1+2*n" "0" "1/5")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "atan_pos_le1_lb")
                                      (("2"
                                        (rewrite "atan_series_eq")
                                        (("2"
                                          (rewrite "atan_series_eq")
                                          (("2"
                                            (replace -4 2 :dir rl)
                                            (("2"
                                              (lemma
                                               "atan_series_n_increasing")
                                              (("2"
                                                (inst -1 "1+2*n" "0" "5/12")
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lift-if 2)
                                  (("2" (ground)
                                    (("1" (expand "atan_pos_le1_lb")
                                      (("1"
                                        (rewrite "atan_series_eq")
                                        (("1"
                                          (rewrite "atan_series_eq")
                                          (("1"
                                            (lemma "atan_series_n_increasing")
                                            (("1"
                                              (inst -1 "1+2*n" "0" "5/12")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "atan_pos_le1_lb")
                                      (("2"
                                        (rewrite "atan_series_eq")
                                        (("2"
                                          (rewrite "atan_series_eq")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "atan_pos_le1_ub")
                          (("2" (rewrite "atan_series_eq")
                            (("2" (rewrite "atan_series_eq")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (induct-and-simplify "nn") nil nil)) nil))
      nil))
    nil)
   ((atan_series_n const-decl "real" atan nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (atan_pos_le1_alt_ub const-decl "real" atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (reduce_ub const-decl "{x: posreal | reduce_alt(px) <= x}" atan_approx
     nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (reduce_fun const-decl "real" atan_approx nil)
    (reduce_alt const-decl "{x: posreal | x = reduce_fun(px)}" atan_approx
     nil)
    (reduce_lb const-decl "{x: posreal | reduce_alt(px) >= x}" atan_approx
     nil)
    (posreal_max application-judgement "{z: posreal | z >= x AND z >= y}"
     real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (atan_series_coef const-decl "rat" atan nil)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (sigma def-decl "real" sigma reals)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (atan_pos_le1_alt_ge0-1 nil 3629024086
   ("" (skeep)
    (("" (case "FORALL (nn:nat): atan_series_n(0,nn) = 0")
      (("1" (lemma "atan_series_n_increasing")
        (("1" (inst-cp -2 "2*n")
          (("1" (inst -2 "1+2*n")
            (("1" (case "px<5/12")
              (("1" (expand "atan_pos_le1_alt_lb")
                (("1" (expand "atan_pos_le1_alt_ub")
                  (("1" (assert)
                    (("1" (expand "atan_pos_le1_lb")
                      (("1" (expand "atan_pos_le1_ub")
                        (("1" (inst-cp -2 "2*n" "0" "px")
                          (("1" (inst -2 "1+2*n" "0" "px")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst-cp -1 "2*n" "0" "5/12")
                (("2" (inst -1 "1+2*n" "0" "5/12")
                  (("2" (expand "atan_pos_le1_alt_lb")
                    (("2" (expand "atan_pos_le1_alt_ub")
                      (("2" (ground)
                        (("1" (expand "max")
                          (("1" (ground)
                            (("1" (lift-if 1)
                              (("1" (ground)
                                (("1" (lift-if 1)
                                  (("1" (ground)
                                    (("1" (cancel-by 1 "2")
                                      (("1"
                                        (expand "atan_pos_le1_lb")
                                        (("1"
                                          (replace -6 2 :dir rl)
                                          (("1"
                                            (lemma "atan_series_n_increasing")
                                            (("1"
                                              (inst -1 "1+2*n" "0" "1/5")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "atan_pos_le1_lb")
                                      (("2"
                                        (replace -4 2 :dir rl)
                                        (("2"
                                          (lemma "atan_series_n_increasing")
                                          (("2"
                                            (inst -1 "1+2*n" "0" "5/12")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lift-if 2)
                                  (("2" (ground)
                                    (("1" (expand "atan_pos_le1_lb")
                                      (("1"
                                        (lemma "atan_series_n_increasing")
                                        (("1"
                                          (inst -1 "1+2*n" "0" "5/12")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "atan_pos_le1_lb")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "atan_pos_le1_ub")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (induct-and-simplify "nn") nil nil)) nil))
      nil))
    nil)
   ((atan_series_n const-decl "real" atan nil)
    (atan_series_n_increasing formula-decl nil atan nil)
    (atan_series_coef const-decl "rat" atan nil)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (sigma def-decl "real" sigma reals))
   shostak))
 (atan_pos_bounds_TCC1 0
  (atan_pos_bounds_TCC1-1 nil 3626459114 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (atan_pos_bounds subtype "atan_approx.x" "posreal")))
 (atan_pos_bounds 0
  (atan_pos_bounds-2 nil 3628959694
   ("" (skosimp)
    (("" (expand "atan_pos_lb")
      (("" (expand "atan_pos_ub")
        (("" (case-replace "x!1<=1")
          (("1" (lemma "atan_pos_le1__alt_bounds" ("x" "x!1" "n" "n!1"))
            (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (lemma "atan_inv" ("px" "x!1"))
              (("2" (lemma "pi_bounds" ("n" "n!1"))
                (("2"
                  (lemma "atan_pos_le1__alt_bounds" ("x" "1/x!1" "n" "n!1"))
                  (("2" (rewrite "div_mult_pos_lt2" -1)
                    (("2" (rewrite "div_mult_pos_le1" -1)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "max")
                            (("2" (lift-if)
                              (("2" (assert)
                                (("2" (lift-if)
                                  (("2" (assert)
                                    (("2" (ground)
                                      (("1"
                                        (lemma "atan_strict_increasing")
                                        (("1"
                                          (expand "strict_increasing?")
                                          (("1"
                                            (inst - "1" "x!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (invoke
                                                   (case "%1 <= %2")
                                                   (! 1 1)
                                                   (! -1 1))
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (lemma
                                                       "atan_pos_le1__alt_bounds")
                                                      (("2"
                                                        (inst - "n!1" "1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_lb_pos application-judgement "posreal" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan_pos_lb const-decl "real" atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (atan_pos_le1__alt_bounds formula-decl nil atan_approx nil)
    (atan_inv formula-decl nil atan nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (atan_strict_increasing formula-decl nil atan nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (atan_pos_ub const-decl "real" atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil))
   nil)
  (atan_pos_bounds-1 nil 3295360144
   ("" (skosimp)
    (("" (expand "atan_pos_lb")
      (("" (expand "atan_pos_ub")
        (("" (case-replace "x!1<=1")
          (("1" (lemma "atan_pos_le1_bounds" ("x" "x!1" "n" "n!1"))
            (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (lemma "atan_inv" ("px" "x!1"))
              (("2" (lemma "pi_bounds" ("n" "n!1"))
                (("2" (lemma "atan_pos_le1_bounds" ("x" "1/x!1" "n" "n!1"))
                  (("2" (rewrite "div_mult_pos_lt2" -1)
                    (("2" (rewrite "div_mult_pos_le1" -1)
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "max")
                            (("2" (lift-if)
                              (("2" (assert)
                                (("2" (lift-if)
                                  (("2" (assert)
                                    (("2" (ground)
                                      (("1"
                                        (expand "atan_pos_le1_lb")
                                        (("1"
                                          (lemma "atan_strict_increasing")
                                          (("1"
                                            (expand "strict_increasing?")
                                            (("1"
                                              (inst - "1" "x!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (invoke
                                                     (case "%1 <= %2")
                                                     (! 1 1)
                                                     (! -1 1))
                                                    (("1" (assert) nil nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (lemma
                                                         "atan_pos_le1_bounds")
                                                        (("2"
                                                          (expand
                                                           "atan_pos_le1_lb")
                                                          (("2"
                                                            (inst - "n!1" "1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_inv formula-decl nil atan nil)
    (atan_strict_increasing formula-decl nil atan nil)
    (atan_series_n const-decl "real" atan nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   shostak))
 (atan_pos_lb_increasing 0
  (atan_pos_lb_increasing-1 nil 3629025813
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (expand "atan_pos_lb")
          (("" (lift-if 1)
            (("" (lift-if 1)
              (("" (lift-if 1)
                (("" (assert)
                  (("" (ground)
                    (("1" (lemma "atan_pos_le1_alt_lb_increasing")
                      (("1" (inst -1 "n")
                        (("1" (expand "increasing?")
                          (("1" (inst -1 "x_1" "y") (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "atan_pos_le1_alt_lb_increasing")
                      (("2" (inst -1 "n")
                        (("2" (expand "increasing?")
                          (("2" (inst -1 "x_1" "1") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "atan_pos_le1_alt_ub_increasing")
                      (("3" (inst -1 "n")
                        (("3" (expand "increasing?")
                          (("3" (inst -1 "1/y" "1/x_1")
                            (("1" (ground)
                              (("1" (move-terms -1 l 1)
                                (("1" (move-terms -1 r 1)
                                  (("1" (both-sides "+" "pi_lbn(n)" -1)
                                    (("1" (expand "max")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (lift-if 2)
                                            (("1"
                                              (lift-if 2)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (cross-mult 1) nil nil))
                              nil)
                             ("2" (cross-mult 1) nil nil)
                             ("3" (cross-mult 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan_pos_lb const-decl "real" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_pos_le1_alt_ub_increasing formula-decl nil atan_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (atan_pos_le1_alt_ub const-decl "real" atan_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (x_1 skolem-const-decl "posreal" atan_approx nil)
    (y skolem-const-decl "posreal" atan_approx nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (atan_pos_le1_alt_lb_increasing formula-decl nil atan_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (atan_pos_ub_increasing 0
  (atan_pos_ub_increasing-2 nil 3629026495
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (expand "atan_pos_ub")
          (("" (lift-if 1)
            (("" (lift-if 1)
              (("" (lift-if 1)
                (("" (assert)
                  (("" (ground)
                    (("1" (lemma "atan_pos_le1_alt_ub_increasing")
                      (("1" (inst -1 "n")
                        (("1" (expand "increasing?")
                          (("1" (inst -1 "x_1" "y") (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "atan_pos_le1_alt_ub_increasing")
                      (("2" (inst -1 "n")
                        (("2" (expand "increasing?")
                          (("2" (inst -1 "x_1" "1") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (lemma "atan_pos_le1_alt_lb_increasing")
                      (("3" (inst -1 "n")
                        (("3" (expand "increasing?")
                          (("3" (inst -1 "1/y" "1/x_1")
                            (("1" (ground)
                              (("1" (move-terms -1 l 1)
                                (("1" (move-terms -1 r 1)
                                  (("1" (both-sides "+" "pi_lbn(n)" -1)
                                    (("1" (expand "max")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if 2)
                                          (("1"
                                            (lift-if 2)
                                            (("1"
                                              (lift-if 2)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (cross-mult 1) nil nil))
                              nil)
                             ("2" (cross-mult 1) nil nil)
                             ("3" (cross-mult 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (atan_pos_ub const-decl "real" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_pos_le1_alt_lb_increasing formula-decl nil atan_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (x_1 skolem-const-decl "posreal" atan_approx nil)
    (y skolem-const-decl "posreal" atan_approx nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (atan_pos_le1_alt_ub_increasing formula-decl nil atan_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)
  (atan_pos_ub_increasing-1 nil 3629026418 ("" (postpone) nil nil) nil
   shostak))
 (atan_pos_lb_inc 0
  (atan_pos_lb_inc-2 nil 3628960857
   ("" (skeep)
    (("" (case "px<=1")
      (("1" (expand "atan_pos_lb")
        (("1" (assert)
          (("1" (lemma "atan_pos_le1_alt_lb_inc")
            (("1" (ground)
              (("1" (inst -1 "m" "n" "px") (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "atan_pos_lb")
        (("2" (assert)
          (("2" (lemma "atan_pos_le1_alt_ub_dec")
            (("2" (inst -1 "m" "n" "1/px")
              (("2" (ground)
                (("1" (move-terms -1 l 1)
                  (("1" (move-terms -1 r 1)
                    (("1" (lemma "pi_lb_inc")
                      (("1" (inst -1 "m" "n")
                        (("1" (ground)
                          (("1" (both-sides "/" "2" -1)
                            (("1" (add-formulas -1 -2)
                              (("1" (expand "max")
                                (("1" (lift-if 2)
                                  (("1" (lift-if 2)
                                    (("1" (lift-if 2)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "atan_pos_le1_alt_lb_inc")
                                          (("1"
                                            (inst -1 "m" "n" "1")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "atan_pos_le1_alt_lb_inc")
                                          (("2"
                                            (inst -1 "m" "n" "1")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (cross-mult) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (atan_pos_le1_alt_lb_inc formula-decl nil atan_approx nil)
    (atan_pos_lb const-decl "real" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_pos_le1_alt_ub const-decl "real" atan_approx nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_lb_inc formula-decl nil atan_approx nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (add_neg formula-decl nil extra_tegies nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (atan_pos_le1_alt_ub_dec formula-decl nil atan_approx nil))
   nil)
  (atan_pos_lb_inc-1 nil 3403980658
   ("" (skosimp)
    (("" (expand "atan_pos_lb")
      (("" (case-replace "px!1 <= 1")
        (("1" (lemma "atan_pos_le1_lb_inc" ("px" "px!1" "n" "n!1" "m" "m!1"))
          (("1" (assert) nil nil)) nil)
         ("2" (assert)
          (("2" (case "1<px!1")
            (("1" (hide 1)
              (("1" (lemma "div_mult_pos_lt1" ("py" "px!1" "z" "1" "x" "1"))
                (("1" (assert)
                  (("1"
                    (lemma "atan_pos_le1_ub_dec"
                     ("px" "1/px!1" "n" "n!1" "m" "m!1"))
                    (("1" (assert)
                      (("1" (lemma "pi_lb_inc" ("n" "n!1" "m" "m!1"))
                        (("1" (assert)
                          (("1" (lemma "atan_pos_le1_lb_inc")
                            (("1" (inst - "m!1" "n!1" "1")
                              (("1" (assert)
                                (("1" (expand "max")
                                  (("1" (lift-if)
                                    (("1" (lift-if)
                                      (("1"
                                        (lift-if)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (atan_pos_ub_dec 0
  (atan_pos_ub_dec-3 nil 3629029669
   ("" (skeep)
    (("" (case "px<=1")
      (("1" (expand "atan_pos_ub")
        (("1" (assert)
          (("1" (lemma "atan_pos_le1_alt_ub_dec")
            (("1" (ground)
              (("1" (inst -1 "m" "n" "px") (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "atan_pos_ub")
        (("2" (assert)
          (("2" (lemma "atan_pos_le1_alt_lb_inc")
            (("2" (inst -1 "m" "n" "1/px")
              (("2" (ground)
                (("1" (move-terms -1 l 1)
                  (("1" (move-terms -1 r 1)
                    (("1" (lemma "pi_ub_dec")
                      (("1" (inst -1 "m" "n")
                        (("1" (ground)
                          (("1" (both-sides "/" "2" -1)
                            (("1" (add-formulas -1 -2)
                              (("1" (expand "max")
                                (("1" (lift-if 2)
                                  (("1" (lift-if 2)
                                    (("1" (lift-if 2)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "atan_pos_le1_alt_ub_dec")
                                          (("1"
                                            (inst -1 "m" "n" "1")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "atan_pos_le1_alt_ub_dec")
                                          (("2"
                                            (inst -1 "m" "n" "1")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (cross-mult) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (atan_pos_le1_alt_ub_dec formula-decl nil atan_approx nil)
    (atan_pos_ub const-decl "real" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_pos_le1_alt_lb const-decl "real" atan_approx nil)
    (< const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_ub_dec formula-decl nil atan_approx nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (add_neg formula-decl nil extra_tegies nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (atan_pos_le1_alt_lb_inc formula-decl nil atan_approx nil))
   nil)
  (atan_pos_ub_dec-2 nil 3628961103
   ("" (skosimp)
    (("" (expand "atan_pos_ub")
      (("" (case-replace "px!1 <= 1")
        ((""
          (lemma "atan_pos_le1_alt_ub_dec" ("px" "px!1" "n" "n!1" "m" "m!1"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil nil)
  (atan_pos_ub_dec-1 nil 3403980715
   ("" (skosimp)
    (("" (expand "atan_pos_ub")
      (("" (case-replace "px!1 <= 1")
        (("1" (lemma "atan_pos_le1_ub_dec" ("px" "px!1" "n" "n!1" "m" "m!1"))
          (("1" (assert) nil nil)) nil)
         ("2" (assert)
          (("2" (case "1<px!1")
            (("1" (hide 1)
              (("1" (lemma "div_mult_pos_lt1" ("py" "px!1" "z" "1" "x" "1"))
                (("1" (assert)
                  (("1"
                    (lemma "atan_pos_le1_lb_inc"
                     ("px" "1/px!1" "n" "n!1" "m" "m!1"))
                    (("1" (assert)
                      (("1" (lemma "pi_ub_dec" ("n" "n!1" "m" "m!1"))
                        (("1" (lemma "atan_pos_le1_ub_dec")
                          (("1" (inst - "m!1" "n!1" "1")
                            (("1" (assert)
                              (("1" (expand "max")
                                (("1" (lift-if)
                                  (("1" (lift-if)
                                    (("1" (lift-if) (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (atan_pos_ge0 0
  (atan_pos_ge0-1 nil 3629025329
   ("" (skeep)
    (("" (lemma "atan_pos_le1_alt_ge0")
      (("" (case "px<=1")
        (("1" (inst -2 "n" "px")
          (("1" (expand "atan_pos_lb")
            (("1" (assert)
              (("1" (expand "atan_pos_ub") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "n" "1")
          (("2" (flatten)
            (("2" (expand "atan_pos_lb")
              (("2" (expand "atan_pos_ub")
                (("2" (assert) (("2" (ground) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_pos_le1_alt_ge0 formula-decl nil atan_approx nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (atan_pos_ub const-decl "real" atan_approx nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (atan_pos_lb const-decl "real" atan_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil))
   shostak))
 (atan_lb_TCC1 0
  (atan_lb_TCC1-1 nil 3626459114 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (atan_lb subtype "atan_approx.x" "posreal")))
 (atan_lb_TCC2 0
  (atan_lb_TCC2-1 nil 3626459114 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (atan_lb subtype "(number_fields.-)(atan_approx.x)" "posreal")))
 (atan_bounds 0
  (atan_bounds-1 nil 3295360768
   ("" (skosimp)
    (("" (expand "atan_lb")
      (("" (expand "atan_ub")
        (("" (case-replace "x!1>0")
          (("1" (lemma "atan_pos_bounds" ("n" "n!1" "x" "x!1"))
            (("1" (assert) (("1" (flatten) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (case-replace "x!1=0")
            (("1" (rewrite "atan_0") (("1" (assert) nil nil)) nil)
             ("2" (lemma "atan_pos_bounds" ("n" "n!1" "x" "-x!1"))
              (("2" (assert)
                (("2" (rewrite "atan_neg")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_lb const-decl "real" atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan_pos_bounds formula-decl nil atan_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (atan_neg formula-decl nil atan nil) (atan_0 formula-decl nil atan nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (atan_ub const-decl "real" atan_approx nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil))
   shostak))
 (atan_lb_increasing 0
  (atan_lb_increasing-1 nil 3559564948
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (expand "atan_lb")
          (("" (lift-if 1)
            (("" (lift-if 1)
              (("" (lift-if 1)
                (("" (lift-if 1)
                  (("" (ground)
                    (("1" (lemma "atan_pos_lb_increasing")
                      (("1" (inst -1 "n")
                        (("1" (expand "increasing?")
                          (("1" (inst -1 "x_1" "y") (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "atan_pos_ge0")
                      (("2" (inst -1 "n" "y") (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (lemma "atan_pos_ge0")
                      (("3" (inst-cp -1 "n" "y")
                        (("3" (inst -1 "n" "-x_1")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3" (move-terms -2 l 1)
                                (("3" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (lemma "atan_pos_ge0")
                      (("4" (inst -1 "n" "-x_1") (("4" (ground) nil nil))
                        nil))
                      nil)
                     ("5" (lemma "atan_pos_ub_increasing")
                      (("5" (inst -1 "n")
                        (("5" (expand "increasing?")
                          (("5" (inst -1 "-y " "-x_1")
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (atan_lb const-decl "real" atan_approx nil)
    (atan_pos_ub_increasing formula-decl nil atan_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (atan_pos_ub const-decl "real" atan_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_pos_ge0 formula-decl nil atan_approx nil)
    (atan_pos_lb_increasing formula-decl nil atan_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (atan_ub_increasing 0
  (atan_ub_increasing-2 nil 3629027364
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skeep)
        (("" (expand "atan_ub")
          (("" (lift-if 1)
            (("" (lift-if 1)
              (("" (lift-if 1)
                (("" (lift-if 1)
                  (("" (ground)
                    (("1" (lemma "atan_pos_ub_increasing")
                      (("1" (inst -1 "n")
                        (("1" (expand "increasing?")
                          (("1" (inst -1 "x_1" "y") (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "atan_pos_ge0")
                      (("2" (inst -1 "n" "y") (("2" (assert) nil nil)) nil))
                      nil)
                     ("3" (lemma "atan_pos_ge0")
                      (("3" (inst-cp -1 "n" "y")
                        (("3" (inst -1 "n" "-x_1")
                          (("3" (assert)
                            (("3" (flatten)
                              (("3" (move-terms -1 l 1)
                                (("3" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (lemma "atan_pos_ge0")
                      (("4" (inst -1 "n" "-x_1") (("4" (ground) nil nil))
                        nil))
                      nil)
                     ("5" (lemma "atan_pos_lb_increasing")
                      (("5" (inst -1 "n")
                        (("5" (expand "increasing?")
                          (("5" (inst -1 "-y " "-x_1")
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (atan_ub const-decl "real" atan_approx nil)
    (atan_pos_lb_increasing formula-decl nil atan_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (atan_pos_lb const-decl "real" atan_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_pos_ge0 formula-decl nil atan_approx nil)
    (atan_pos_ub_increasing formula-decl nil atan_approx nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil)
  (atan_ub_increasing-1 nil 3559667287
   ("" (skeep)
    (("" (expand "increasing?")
      (("" (skolem 1 ("xx" "yy"))
        (("" (flatten)
          (("" (expand "atan_ub")
            (("" (assert)
              (("" (expand "atan_pos_ub")
                (("" (expand "atan_pos_le1_ub")
                  (("" (expand "atan_pos_le1_lb")
                    (("" (expand "atan_pos_lb")
                      (("" (expand "atan_pos_le1_ub")
                        (("" (expand "atan_pos_le1_lb")
                          (("" (lift-if)
                            (("" (lift-if)
                              (("" (lift-if)
                                (("" (lift-if)
                                  (("" (lift-if)
                                    (("" (lift-if)
                                      ((""
                                        (assert)
                                        ((""
                                          (ground)
                                          (("1"
                                            (lemma "atan_series_n_increasing")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "atan_series_n_increasing")
                                            (("2"
                                              (inst - "2*n" "xx" "1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "atan_series_n_increasing")
                                            (("3"
                                              (inst - "1+2*n" "1/yy" "1/xx")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "max")
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (cross-mult 1) nil nil)
                                                 ("3" (cross-mult 1) nil nil))
                                                nil)
                                               ("2" (cross-mult 1) nil nil)
                                               ("3" (cross-mult 1) nil nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (lemma "atan_series_n_increasing")
                                            (("4"
                                              (inst - "2*n" "xx" "yy")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (replace -4)
                                                  (("4"
                                                    (rewrite
                                                     "atan_series_n_a0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (lemma "atan_series_n_increasing")
                                            (("5"
                                              (inst - "2*n" "xx" "1")
                                              (("5"
                                                (assert)
                                                (("5"
                                                  (replace -3)
                                                  (("5"
                                                    (rewrite
                                                     "atan_series_n_a0")
                                                    (("5" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("6"
                                            (lemma "atan_series_n_increasing")
                                            (("6"
                                              (inst-cp - "1+2*n" "0" "-xx")
                                              (("6"
                                                (inst - "2*n" "0" "yy")
                                                (("6"
                                                  (assert)
                                                  (("6"
                                                    (rewrite
                                                     "atan_series_n_a0")
                                                    (("6"
                                                      (rewrite
                                                       "atan_series_n_a0")
                                                      (("6" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("7"
                                            (lemma "atan_series_n_increasing")
                                            (("7"
                                              (inst-cp - "1+2*n" "0" "-xx")
                                              (("7"
                                                (inst - "2*n" "0" "1")
                                                (("7"
                                                  (assert)
                                                  (("7"
                                                    (rewrite
                                                     "atan_series_n_a0")
                                                    (("7"
                                                      (rewrite
                                                       "atan_series_n_a0")
                                                      (("7" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("8"
                                            (lemma "atan_series_n_increasing")
                                            (("8"
                                              (inst-cp - "1+2*n" "0" "-xx")
                                              (("8"
                                                (assert)
                                                (("8"
                                                  (rewrite "atan_series_n_a0")
                                                  (("8" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("9"
                                            (lemma "atan_series_n_increasing")
                                            (("9"
                                              (inst - "1+2*n" "-yy" "-xx")
                                              (("9" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("10"
                                            (invoke
                                             (case "%1 >=0 AND %2 >= 0")
                                             (! 1 1 1 1)
                                             (! 1 2))
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (lemma
                                                   "atan_series_n_increasing")
                                                  (("1"
                                                    (inst - "1+2*n" "0" "1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "atan_series_n_a0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "atan_series_n_increasing")
                                                  (("2"
                                                    (inst - "2*n" "0" "yy")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "atan_series_n_a0")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("11"
                                            (invoke
                                             (case "%1 >= 0 AND %2 >= 0")
                                             (! 2 1 1)
                                             (! 2 2 1))
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 3)
                                              (("2"
                                                (split +)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "atan_series_n_increasing")
                                                    (("1"
                                                      (inst - "1+2*n" "0" "1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "atan_series_n_a0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "atan_series_n_increasing")
                                                  (("2"
                                                    (inst - "2*n" "0" "1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "atan_series_n_a0")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("12"
                                            (lemma "atan_series_n_increasing")
                                            (("12"
                                              (inst - "1+2*n" "0" "1")
                                              (("12"
                                                (assert)
                                                (("12"
                                                  (rewrite "atan_series_n_a0")
                                                  (("12" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("13"
                                            (lemma "atan_series_n_increasing")
                                            (("13"
                                              (inst - "1+2*n" "-yy" "1")
                                              (("13" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("14"
                                            (neg-formula 2)
                                            (("14"
                                              (lemma
                                               "atan_series_n_increasing")
                                              (("14"
                                                (inst - "2*n" "1/-xx" "1/-yy")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "max")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (cross-mult 1) nil nil)
                                                 ("3" (cross-mult 1) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((increasing? const-decl "bool" real_fun_preds reals)
    (atan_series_n_increasing formula-decl nil atan nil)
    (atan_series_n_a0 formula-decl nil atan nil)
    (atan_series_n const-decl "real" atan nil))
   nil))
 (atan_lb_inc 0
  (atan_lb_inc-1 nil 3629029703
   ("" (skeep)
    (("" (expand "atan_lb")
      (("" (case "x>0")
        (("1" (assert) (("1" (rewrite "atan_pos_lb_inc") nil nil)) nil)
         ("2" (case "x=0")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (lemma "atan_pos_ub_dec")
              (("2" (inst -1 "m" "n" "-x") (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_lb const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (atan_pos_ub_dec formula-decl nil atan_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (atan_pos_lb_inc formula-decl nil atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil))
   shostak))
 (atan_ub_dec 0
  (atan_ub_dec-1 nil 3629030256
   ("" (skeep)
    (("" (expand "atan_ub")
      (("" (case "x>0")
        (("1" (assert) (("1" (rewrite "atan_pos_ub_dec") nil nil)) nil)
         ("2" (case "x=0")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (lemma "atan_pos_lb_inc")
              (("2" (inst -1 "m" "n" "-x") (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_ub const-decl "real" atan_approx nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (atan_pos_lb_inc formula-decl nil atan_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (atan_pos_ub_dec formula-decl nil atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil))
   nil))
 (pi_lb_pi 0
  (pi_lb_pi-2 nil 3630157506
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (rewrite "pi_value")
        (("" (rewrite "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (hide -1 -4)
                    (("" (expand "atan_pos_le1_ub")
                      (("" (expand "atan_pos_le1_lb")
                        (("" (rewrite "atan_series_eq")
                          (("" (rewrite "atan_series_eq")
                            ((""
                              (lemma "atan_series" ("x" "1/5" "n" "2*n!1+1"))
                              (("" (expand "abs" -1 1)
                                (("" (assert)
                                  ((""
                                    (lemma "atan_series"
                                     ("x" "1/239" "n" "2*n!1"))
                                    (("" (expand "abs" -1 1)
                                      ((""
                                        (lemma
                                         "expt_pos"
                                         ("px" "1/5" "i" "5+4*n!1"))
                                        ((""
                                          (lemma
                                           "posreal_div_posreal_is_posreal"
                                           ("px"
                                            "(1 / 5) ^ (5 + 4 * n!1)"
                                            "py"
                                            "5 + 4 * n!1"))
                                          ((""
                                            (expand "abs" -4)
                                            ((""
                                              (lemma
                                               "expt_pos"
                                               ("px" "1/239" "i" "3+4*n!1"))
                                              ((""
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px"
                                                  "(1 / 239) ^ (3 + 4 * n!1)"
                                                  "py"
                                                  "3 + 4 * n!1"))
                                                ((""
                                                  (expand "abs" -5)
                                                  (("" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (atan_1 formula-decl nil atan nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (atan_series formula-decl nil atan nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_pos formula-decl nil exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan_pos_le1_bounds formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_value formula-decl nil atan nil))
   nil)
  (pi_lb_pi-1 nil 3403980748
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (rewrite "pi_value")
        (("" (rewrite "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (hide -1 -4)
                    (("" (expand "atan_pos_le1_ub")
                      (("" (expand "atan_pos_le1_lb")
                        (("" (lemma "atan_series" ("x" "1/5" "n" "2*n!1+1"))
                          (("" (expand "abs" -1 1)
                            (("" (assert)
                              ((""
                                (lemma "atan_series"
                                 ("x" "1/239" "n" "2*n!1"))
                                (("" (expand "abs" -1 1)
                                  ((""
                                    (lemma "expt_pos"
                                     ("px" "1/5" "i" "5+4*n!1"))
                                    ((""
                                      (lemma
                                       "posreal_div_posreal_is_posreal"
                                       ("px"
                                        "(1 / 5) ^ (5 + 4 * n!1)"
                                        "py"
                                        "5 + 4 * n!1"))
                                      ((""
                                        (expand "abs" -4)
                                        ((""
                                          (lemma
                                           "expt_pos"
                                           ("px" "1/239" "i" "3+4*n!1"))
                                          ((""
                                            (lemma
                                             "posreal_div_posreal_is_posreal"
                                             ("px"
                                              "(1 / 239) ^ (3 + 4 * n!1)"
                                              "py"
                                              "3 + 4 * n!1"))
                                            ((""
                                              (expand "abs" -5)
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_1 formula-decl nil atan nil) (atan_series formula-decl nil atan nil)
    (pi_value formula-decl nil atan nil))
   nil))
 (pi_ub_pi 0
  (pi_ub_pi-2 nil 3630157535
   ("" (skosimp)
    (("" (expand "pi_ubn")
      (("" (rewrite "pi_value")
        (("" (rewrite "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (hide -2 -3)
                    (("" (expand "atan_pos_le1_ub")
                      (("" (expand "atan_pos_le1_lb")
                        (("" (rewrite "atan_series_eq")
                          (("" (rewrite "atan_series_eq")
                            ((""
                              (lemma "atan_series"
                               ("x" "1/239" "n" "2*n!1+1"))
                              (("" (expand "abs" -1 1)
                                (("" (assert)
                                  ((""
                                    (lemma "atan_series"
                                     ("x" "1/5" "n" "2*n!1"))
                                    (("" (expand "abs" -1 1)
                                      ((""
                                        (lemma
                                         "expt_pos"
                                         ("px" "1/239" "i" "5+4*n!1"))
                                        ((""
                                          (lemma
                                           "posreal_div_posreal_is_posreal"
                                           ("px"
                                            "(1 / 239) ^ (5 + 4 * n!1)"
                                            "py"
                                            "5 + 4 * n!1"))
                                          ((""
                                            (expand "abs" -4)
                                            ((""
                                              (lemma
                                               "expt_pos"
                                               ("px" "1/5" "i" "3+4*n!1"))
                                              ((""
                                                (lemma
                                                 "posreal_div_posreal_is_posreal"
                                                 ("px"
                                                  "(1 / 5) ^ (3 + 4 * n!1)"
                                                  "py"
                                                  "3 + 4 * n!1"))
                                                ((""
                                                  (expand "abs" -5)
                                                  (("" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (atan_1 formula-decl nil atan nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (atan_series formula-decl nil atan nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal judgement-tcc nil real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_pos formula-decl nil exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan_pos_le1_bounds formula-decl nil atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_value formula-decl nil atan nil))
   nil)
  (pi_ub_pi-1 nil 3403980777
   ("" (skosimp)
    (("" (expand "pi_ubn")
      (("" (rewrite "pi_value")
        (("" (rewrite "atan_1")
          (("" (lemma "atan_pos_le1_bounds" ("x" "1/5" "n" "n!1"))
            (("" (lemma "atan_pos_le1_bounds" ("x" "1/239" "n" "n!1"))
              (("" (assert)
                (("" (flatten)
                  (("" (hide -2 -3)
                    (("" (expand "atan_pos_le1_ub")
                      (("" (expand "atan_pos_le1_lb")
                        (("" (lemma "atan_series" ("x" "1/239" "n" "2*n!1+1"))
                          (("" (expand "abs" -1 1)
                            (("" (assert)
                              ((""
                                (lemma "atan_series" ("x" "1/5" "n" "2*n!1"))
                                (("" (expand "abs" -1 1)
                                  ((""
                                    (lemma "expt_pos"
                                     ("px" "1/239" "i" "5+4*n!1"))
                                    ((""
                                      (lemma
                                       "posreal_div_posreal_is_posreal"
                                       ("px"
                                        "(1 / 239) ^ (5 + 4 * n!1)"
                                        "py"
                                        "5 + 4 * n!1"))
                                      ((""
                                        (expand "abs" -4)
                                        ((""
                                          (lemma
                                           "expt_pos"
                                           ("px" "1/5" "i" "3+4*n!1"))
                                          ((""
                                            (lemma
                                             "posreal_div_posreal_is_posreal"
                                             ("px"
                                              "(1 / 5) ^ (3 + 4 * n!1)"
                                              "py"
                                              "3 + 4 * n!1"))
                                            ((""
                                              (expand "abs" -5)
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_1 formula-decl nil atan nil) (atan_series formula-decl nil atan nil)
    (pi_value formula-decl nil atan nil))
   nil))
 (pi_lb_diff 0
  (pi_lb_diff-2 nil 3630157579
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (expand "atan_pos_le1_lb")
        (("" (expand "atan_pos_le1_ub")
          (("" (rewrite "atan_series_eq")
            (("" (rewrite "atan_series_eq")
              (("" (rewrite "atan_series_eq")
                (("" (rewrite "atan_series_eq")
                  (("" (expand "atan_series_n")
                    ((""
                      (name "SUM1"
                            "sigma(0, 1 + 2 * n!1, atan_series_term(1 / 5))")
                      (("" (replace -1)
                        ((""
                          (name "SUM2"
                                "sigma(0, 2 * n!1, atan_series_term(1 / 239))")
                          (("" (replace -1)
                            (("" (expand "sigma" 1)
                              (("" (expand "sigma" 1)
                                (("" (replace -1)
                                  (("" (replace -2)
                                    (("" (assert)
                                      ((""
                                        (expand "atan_series_term")
                                        ((""
                                          (expand "atan_series_coef")
                                          ((""
                                            (hide -1 -2)
                                            ((""
                                              (lemma
                                               "expt_times"
                                               ("n0x"
                                                "-1"
                                                "i"
                                                "2"
                                                "j"
                                                "n!1+1"))
                                              ((""
                                                (expand "^" -1 2)
                                                ((""
                                                  (expand "expt" -1)
                                                  ((""
                                                    (expand "expt" -1)
                                                    ((""
                                                      (expand "expt" -1)
                                                      ((""
                                                        (rewrite "expt_1i")
                                                        ((""
                                                          (replace -1)
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (lemma
                                                               "expt_plus"
                                                               ("n0x"
                                                                "-1"
                                                                "i"
                                                                "2+2*n!1"
                                                                "j"
                                                                "1"))
                                                              ((""
                                                                (replace -2)
                                                                ((""
                                                                  (rewrite
                                                                   "expt_x1")
                                                                  ((""
                                                                    (replace
                                                                     -1)
                                                                    ((""
                                                                      (lemma
                                                                       "expt_plus"
                                                                       ("n0x"
                                                                        "-1"
                                                                        "i"
                                                                        "1"
                                                                        "j"
                                                                        "2*n!1"))
                                                                      ((""
                                                                        (rewrite
                                                                         "expt_x1")
                                                                        ((""
                                                                          (lemma
                                                                           "expt_times"
                                                                           ("n0x"
                                                                            "-1"
                                                                            "i"
                                                                            "2"
                                                                            "j"
                                                                            "n!1"))
                                                                          ((""
                                                                            (expand
                                                                             "^"
                                                                             -1
                                                                             2)
                                                                            ((""
                                                                              (expand
                                                                               "expt"
                                                                               -1)
                                                                              ((""
                                                                                (expand
                                                                                 "expt"
                                                                                 -1)
                                                                                ((""
                                                                                  (expand
                                                                                   "expt"
                                                                                   -1)
                                                                                  ((""
                                                                                    (rewrite
                                                                                     "expt_1i")
                                                                                    ((""
                                                                                      (replace
                                                                                       -1)
                                                                                      ((""
                                                                                        (replace
                                                                                         -2)
                                                                                        ((""
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          ((""
                                                                                            (lemma
                                                                                             "expt_plus"
                                                                                             ("n0x"
                                                                                              "1/5"
                                                                                              "i"
                                                                                              "2"
                                                                                              "j"
                                                                                              "5+4*n!1"))
                                                                                            ((""
                                                                                              (lemma
                                                                                               "expt_plus"
                                                                                               ("n0x"
                                                                                                "1/239"
                                                                                                "i"
                                                                                                "2"
                                                                                                "j"
                                                                                                "3+4*n!1"))
                                                                                              ((""
                                                                                                (expand
                                                                                                 "^"
                                                                                                 -1
                                                                                                 2)
                                                                                                ((""
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   -2
                                                                                                   2)
                                                                                                  ((""
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    ((""
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      ((""
                                                                                                        (expand
                                                                                                         "expt")
                                                                                                        ((""
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          ((""
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            ((""
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2)
                                                                                                              ((""
                                                                                                                (assert)
                                                                                                                ((""
                                                                                                                  (name-replace
                                                                                                                   "DRL1"
                                                                                                                   "(1 / 239) ^ (3 + 4 * n!1)")
                                                                                                                  ((""
                                                                                                                    (name-replace
                                                                                                                     "DRL2"
                                                                                                                     "(1 / 5) ^ (5 + 4 * n!1)")
                                                                                                                    ((""
                                                                                                                      (assert)
                                                                                                                      ((""
                                                                                                                        (case-replace
                                                                                                                         "16 * ((1 / 5 * (1 / 5) * (-1 / (7 + 4 * n!1))) * DRL2) = -16*(DRL2 * (1 / (175 + 100 * n!1)))")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "-4 * (DRL1 * (-1 / (3 + 4 * n!1))) = 4 * (DRL1 * (1 / (3 + 4 * n!1)))")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "both_sides_times1"
                                                                                                                                       ("n0z"
                                                                                                                                        "DRL1"
                                                                                                                                        "x"
                                                                                                                                        "-4 * ((1 / 239 * (1 / 239) * (1 / (5 + 4 * n!1))))"
                                                                                                                                        "y"
                                                                                                                                        "-4*(1 / (285605 + 228484 * n!1))"))
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "both_sides_times1"
                                                                                                                                 ("n0z"
                                                                                                                                  "DRL2"
                                                                                                                                  "x"
                                                                                                                                  "16 * ((1 / 5 * (1 / 5) * (-1 / (7 + 4 * n!1))))"
                                                                                                                                  "y"
                                                                                                                                  "-16 *(1 / (175 + 100 * n!1))"))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (nprat_div_posrat_is_nprat application-judgement "nprat" rationals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (expt_1i formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (atan_series_n const-decl "real" atan nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil))
   nil)
  (pi_lb_diff-1 nil 3403980807
   ("" (skosimp)
    (("" (expand "pi_lbn")
      (("" (expand "atan_pos_le1_lb")
        (("" (expand "atan_pos_le1_ub")
          (("" (expand "atan_series_n")
            ((""
              (name "SUM1" "sigma(0, 1 + 2 * n!1, atan_series_term(1 / 5))")
              (("" (replace -1)
                ((""
                  (name "SUM2" "sigma(0, 2 * n!1, atan_series_term(1 / 239))")
                  (("" (replace -1)
                    (("" (expand "sigma" 1)
                      (("" (expand "sigma" 1)
                        (("" (replace -1)
                          (("" (replace -2)
                            (("" (assert)
                              (("" (expand "atan_series_term")
                                (("" (expand "atan_series_coef")
                                  (("" (hide -1 -2)
                                    ((""
                                      (lemma
                                       "expt_times"
                                       ("n0x" "-1" "i" "2" "j" "n!1+1"))
                                      ((""
                                        (expand "^" -1 2)
                                        ((""
                                          (expand "expt" -1)
                                          ((""
                                            (expand "expt" -1)
                                            ((""
                                              (expand "expt" -1)
                                              ((""
                                                (rewrite "sq_rew")
                                                ((""
                                                  (rewrite "sq_neg")
                                                  ((""
                                                    (rewrite "expt_1i")
                                                    ((""
                                                      (replace -1)
                                                      ((""
                                                        (assert)
                                                        ((""
                                                          (lemma
                                                           "expt_plus"
                                                           ("n0x"
                                                            "-1"
                                                            "i"
                                                            "2+2*n!1"
                                                            "j"
                                                            "1"))
                                                          ((""
                                                            (replace -2)
                                                            ((""
                                                              (rewrite
                                                               "expt_x1")
                                                              ((""
                                                                (replace -1)
                                                                ((""
                                                                  (lemma
                                                                   "expt_plus"
                                                                   ("n0x"
                                                                    "-1"
                                                                    "i"
                                                                    "1"
                                                                    "j"
                                                                    "2*n!1"))
                                                                  ((""
                                                                    (rewrite
                                                                     "expt_x1")
                                                                    ((""
                                                                      (lemma
                                                                       "expt_times"
                                                                       ("n0x"
                                                                        "-1"
                                                                        "i"
                                                                        "2"
                                                                        "j"
                                                                        "n!1"))
                                                                      ((""
                                                                        (expand
                                                                         "^"
                                                                         -1
                                                                         2)
                                                                        ((""
                                                                          (expand
                                                                           "expt"
                                                                           -1)
                                                                          ((""
                                                                            (expand
                                                                             "expt"
                                                                             -1)
                                                                            ((""
                                                                              (expand
                                                                               "expt"
                                                                               -1)
                                                                              ((""
                                                                                (rewrite
                                                                                 "sq_rew")
                                                                                ((""
                                                                                  (rewrite
                                                                                   "sq_neg")
                                                                                  ((""
                                                                                    (rewrite
                                                                                     "expt_1i")
                                                                                    ((""
                                                                                      (replace
                                                                                       -1)
                                                                                      ((""
                                                                                        (replace
                                                                                         -2)
                                                                                        ((""
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          ((""
                                                                                            (lemma
                                                                                             "expt_plus"
                                                                                             ("n0x"
                                                                                              "1/5"
                                                                                              "i"
                                                                                              "2"
                                                                                              "j"
                                                                                              "5+4*n!1"))
                                                                                            ((""
                                                                                              (lemma
                                                                                               "expt_plus"
                                                                                               ("n0x"
                                                                                                "1/239"
                                                                                                "i"
                                                                                                "2"
                                                                                                "j"
                                                                                                "3+4*n!1"))
                                                                                              ((""
                                                                                                (expand
                                                                                                 "^"
                                                                                                 -1
                                                                                                 2)
                                                                                                ((""
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   -2
                                                                                                   2)
                                                                                                  ((""
                                                                                                    (expand
                                                                                                     "expt")
                                                                                                    ((""
                                                                                                      (expand
                                                                                                       "expt")
                                                                                                      ((""
                                                                                                        (expand
                                                                                                         "expt")
                                                                                                        ((""
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          ((""
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            ((""
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2)
                                                                                                              ((""
                                                                                                                (assert)
                                                                                                                ((""
                                                                                                                  (name-replace
                                                                                                                   "DRL1"
                                                                                                                   "(1 / 239) ^ (3 + 4 * n!1)")
                                                                                                                  ((""
                                                                                                                    (name-replace
                                                                                                                     "DRL2"
                                                                                                                     "(1 / 5) ^ (5 + 4 * n!1)")
                                                                                                                    ((""
                                                                                                                      (assert)
                                                                                                                      ((""
                                                                                                                        (case-replace
                                                                                                                         "16 * ((1 / 5 * (1 / 5) * (-1 / (7 + 4 * n!1))) * DRL2) = -16*(DRL2 * (1 / (175 + 100 * n!1)))")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "-4 * (DRL1 * (-1 / (3 + 4 * n!1))) = 4 * (DRL1 * (1 / (3 + 4 * n!1)))")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "both_sides_times1"
                                                                                                                                       ("n0z"
                                                                                                                                        "DRL1"
                                                                                                                                        "x"
                                                                                                                                        "-4 * ((1 / 239 * (1 / 239) * (1 / (5 + 4 * n!1))))"
                                                                                                                                        "y"
                                                                                                                                        "-4*(1 / (285605 + 228484 * n!1))"))
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "both_sides_times1"
                                                                                                                                 ("n0z"
                                                                                                                                  "DRL2"
                                                                                                                                  "x"
                                                                                                                                  "16 * ((1 / 5 * (1 / 5) * (-1 / (7 + 4 * n!1))))"
                                                                                                                                  "y"
                                                                                                                                  "-16 *(1 / (175 + 100 * n!1))"))
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_series_term const-decl "[nat -> real]" atan nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (atan_series_coef const-decl "rat" atan nil)
    (atan_series_n const-decl "real" atan nil))
   nil))
 (pi_ub_diff 0
  (pi_ub_diff-3 "" 3790092527
   ("" (skeep)
    (("" (invoke (name "K1" "%1") (! 1 2))
      (("" (replaces -1)
        (("" (expand "pi_ubn")
          (("" (expand "atan_pos_le1_lb")
            (("" (expand "atan_pos_le1_ub")
              (("" (rewrite "atan_series_eq")
                (("" (rewrite "atan_series_eq")
                  (("" (rewrite "atan_series_eq")
                    (("" (rewrite "atan_series_eq")
                      (("" (expand "atan_series_n")
                        (("" (expand "sigma" + 1)
                          (("" (expand "sigma" + 1)
                            (("" (expand "sigma" + 2)
                              (("" (expand "sigma" + 2)
                                (("" (expand "atan_series_term")
                                  (("" (expand "atan_series_coef")
                                    ((""
                                      (case
                                       "FORALL (nn:nat): (-1)^(2*nn+1) = -1 AND (-1)^(2*nn)=1")
                                      (("1"
                                        (inst-cp - "n+1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (replaces -2)
                                                (("1"
                                                  (inst - "n")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand "K1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (induct "nn")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (expand "^")
                                              (("3"
                                                (expand "expt" +)
                                                (("3"
                                                  (expand "expt" +)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (pi_ub_diff-2 nil 3630157620
   ("" (skeep)
    (("" (invoke (name "K1" "%1") (! 1 2))
      (("" (replaces -1)
        (("" (expand "pi_ubn")
          (("" (expand "atan_pos_le1_lb")
            (("" (expand "atan_pos_le1_ub")
              (("" (rewrite "atan_series_eq")
                (("" (rewrite "atan_series_eq")
                  (("" (rewrite "atan_series_eq")
                    (("" (rewrite "atan_series_eq")
                      (("" (expand "atan_series_n")
                        (("" (expand "sigma" + 1)
                          (("" (expand "sigma" + 1)
                            (("" (expand "sigma" + 2)
                              (("" (expand "sigma" + 2)
                                (("" (expand "atan_series_term")
                                  (("" (expand "atan_series_coef")
                                    ((""
                                      (case
                                       "FORALL (nn:nat): (-1)^(2*nn+1) = -1 AND (-1)^(2*nn)=1")
                                      (("1"
                                        (inst-cp - "n+1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (replaces -2)
                                                (("1"
                                                  (inst - "n")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "K1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (induct "nn")
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3"
                                            (skeep)
                                            (("3"
                                              (expand "^")
                                              (("3"
                                                (expand "expt" +)
                                                (("3"
                                                  (expand "expt" +)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil) (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (atan_pos_le1_ub const-decl "real" atan_approx nil)
    (sigma def-decl "real" sigma reals)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (K1 skolem-const-decl "rat" atan_approx nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt def-decl "real" exponentiation nil)
    (atan_series_coef const-decl "rat" atan nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (atan_series_n const-decl "real" atan nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (atan_series_eq formula-decl nil atan_approx nil)
    (atan_pos_le1_lb const-decl "real" atan_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil))
   nil)
  (pi_ub_diff-1 nil 3555079683
   ("" (skeep)
    (("" (invoke (name "K1" "%1") (! 1 2))
      (("" (replaces -1)
        (("" (expand "pi_ubn")
          (("" (expand "atan_pos_le1_lb")
            (("" (expand "atan_pos_le1_ub")
              (("" (expand "atan_series_n")
                (("" (expand "sigma" + 1)
                  (("" (expand "sigma" + 1)
                    (("" (expand "sigma" + 2)
                      (("" (expand "sigma" + 2)
                        (("" (expand "atan_series_term")
                          (("" (expand "atan_series_coef")
                            ((""
                              (case "FORALL (nn:nat): (-1)^(2*nn+1) = -1 AND (-1)^(2*nn)=1")
                              (("1" (inst-cp - "n+1")
                                (("1" (flatten)
                                  (("1" (assert)
                                    (("1" (replaces -2)
                                      (("1"
                                        (replaces -2)
                                        (("1"
                                          (inst - "n")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "K1")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (induct "nn")
                                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                                   ("3" (skeep)
                                    (("3" (expand "^")
                                      (("3"
                                        (expand "expt" +)
                                        (("3"
                                          (expand "expt" +)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma def-decl "real" sigma reals)
    (atan_series_term const-decl "[nat -> real]" atan nil)
    (atan_series_coef const-decl "rat" atan nil)
    (atan_series_n const-decl "real" atan nil))
   nil))
 (pi_lb_diff_bounds 0
  (pi_lb_diff_bounds-2 "" 3790092532
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "xdiffname" -1)
        (("" (rewrite "pi_lb_diff")
          (("" (name "A1" "(1/5)^(4*n+5)")
            (("" (name "A2" "(1/239)^(4*n+3)")
              (("" (replace -2)
                (("" (replace -1)
                  (("" (name "B1" "1/(4*n+5)")
                    (("" (replace -1)
                      (("" (name "B2" "1/(4*n+3)")
                        (("" (replace -1)
                          (("" (name "C1" "1/(25*(4*n+7))")
                            (("" (replace -1)
                              (("" (name "C2" "1/(57121*(4*n+5))")
                                (("" (replace -1)
                                  (("" (name "D1" "B1-C1")
                                    (("" (name "D2" "B2-C2")
                                      ((""
                                        (case
                                         "A1 > 0 AND A2 > 0 AND B1 > 0 AND B2 > 0 AND C1 > 0 AND C2 > 0 AND B1 > 0 AND B2 > 0 AND A1 > 0 AND A2 > 0 AND D1 > 0 AND D2 > 0")
                                        (("1"
                                          (label "tps" -1)
                                          (("1"
                                            (hide "tps")
                                            (("1"
                                              (case
                                               "NOT xdiff = 16*A1*D1 + 4*A2*D2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (replaces -1 :dir rl)
                                                    (("1"
                                                      (replaces -1 :dir rl)
                                                      (("1"
                                                        (replaces -1 :dir rl)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (hide "xdiffname")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (reveal "tps")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (case
                                                             "16*A1*D1 > 14 * (1 / 5) ^ (5 * n + 5) AND 4*A2*D2 > 0")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (case
                                                                   "A1*D1 > (1 / 5) ^ (5 * n + 5)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (case
                                                                       "D1 > (1/5)^n")
                                                                      (("1"
                                                                        (mult-by
                                                                         -1
                                                                         "A1")
                                                                        (("1"
                                                                          (expand
                                                                           "A1"
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (rewrite
                                                                             "expt_plus"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "D1")
                                                                          (("2"
                                                                            (expand
                                                                             "B1"
                                                                             +)
                                                                            (("2"
                                                                              (expand
                                                                               "C1"
                                                                               +)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "div_expt")
                                                                                (("2"
                                                                                  (case
                                                                                   "1^n=1")
                                                                                  (("1"
                                                                                    (case
                                                                                     "(1/2)*(1/(5+4*n)) > 1/5^n AND 1 / (175 + 100 * n) < (1/2)*(1/(5+4*n))")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL (nk:nat): 5^(nk+5) > 10+8*(nk+5)")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "n-5")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (induct
                                                                                               "nk")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "^")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "expt"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (mult-by
                                                                                                         -1
                                                                                                         "5")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "posreal_times_posreal_is_posreal")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "A2"
                                                                       "D2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "A2*D2 < (1 / 5) ^ (3 + 4 * n) AND A1*D1 < (1/25)*(1 / 5) ^ (3 + 4 * n)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (expand
                                                                     "D2"
                                                                     +)
                                                                    (("1"
                                                                      (lemma
                                                                       "posreal_times_posreal_is_posreal")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "A2"
                                                                         "C2")
                                                                        (("1"
                                                                          (case
                                                                           "A2*B2 < (1 / 5) ^ (3 + 4 * n)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              2))
                                                                            (("2"
                                                                              (case
                                                                               "A2 < (1 / 5) ^ (3 + 4 * n)")
                                                                              (("1"
                                                                                (case
                                                                                 "B2 < 1")
                                                                                (("1"
                                                                                  (mult-ineq
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "B2"
                                                                                     +)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "A2"
                                                                                   +)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "div_expt")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "div_expt")
                                                                                      (("2"
                                                                                        (case
                                                                                         "1^(3+4*n) = 1")
                                                                                        (("1"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "both_sides_expt_pos_lt_aux")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "2+4*n"
                                                                                               _
                                                                                               _)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "5"
                                                                                                 "239")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "FORALL (nk:nat): 1^nk = 1")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (induct
                                                                                               "nk")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "expt"
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "A1 <= (1/25) * (1 / 5) ^ (3 + 4 * n) AND D1 < 1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (mult-ineq
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "A1"
                                                                           +)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt"
                                                                               +
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "B1 < 1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "B1"
                                                                               +)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "A1" +)
                                              (("1"
                                                (rewrite "expt_pos")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "A2" +)
                                              (("2"
                                                (rewrite "expt_pos")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "B1" +)
                                              (("3" (cross-mult 1) nil nil))
                                              nil)
                                             ("4"
                                              (expand "B2" +)
                                              (("4" (cross-mult 1) nil nil))
                                              nil)
                                             ("5"
                                              (expand "C1" +)
                                              (("5" (cross-mult 1) nil nil))
                                              nil)
                                             ("6"
                                              (expand "C2" +)
                                              (("6" (cross-mult 1) nil nil))
                                              nil)
                                             ("7"
                                              (expand "B1" +)
                                              (("7" (cross-mult 1) nil nil))
                                              nil)
                                             ("8"
                                              (expand "B2" +)
                                              (("8" (cross-mult 1) nil nil))
                                              nil)
                                             ("9"
                                              (expand "A1" +)
                                              (("9" (cross-mult 1) nil nil))
                                              nil)
                                             ("10"
                                              (expand "A2" +)
                                              (("10"
                                                (rewrite "expt_pos")
                                                nil
                                                nil))
                                              nil)
                                             ("11"
                                              (case "B1 > C1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "B1" +)
                                                (("2"
                                                  (expand "C1" +)
                                                  (("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("12"
                                              (case "B2 > C2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "B2" +)
                                                (("2"
                                                  (expand "C2" +)
                                                  (("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (pi_lb_diff_bounds-1 nil 3552315150
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "xdiffname" -1)
        (("" (rewrite "pi_lb_diff")
          (("" (name "A1" "(1/5)^(4*n+5)")
            (("" (name "A2" "(1/239)^(4*n+3)")
              (("" (replace -2)
                (("" (replace -1)
                  (("" (name "B1" "1/(4*n+5)")
                    (("" (replace -1)
                      (("" (name "B2" "1/(4*n+3)")
                        (("" (replace -1)
                          (("" (name "C1" "1/(25*(4*n+7))")
                            (("" (replace -1)
                              (("" (name "C2" "1/(57121*(4*n+5))")
                                (("" (replace -1)
                                  (("" (name "D1" "B1-C1")
                                    (("" (name "D2" "B2-C2")
                                      ((""
                                        (case
                                         "A1 > 0 AND A2 > 0 AND B1 > 0 AND B2 > 0 AND C1 > 0 AND C2 > 0 AND B1 > 0 AND B2 > 0 AND A1 > 0 AND A2 > 0 AND D1 > 0 AND D2 > 0")
                                        (("1"
                                          (label "tps" -1)
                                          (("1"
                                            (hide "tps")
                                            (("1"
                                              (case
                                               "NOT xdiff = 16*A1*D1 + 4*A2*D2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replaces -1 :dir rl)
                                                  (("1"
                                                    (replaces -1 :dir rl)
                                                    (("1"
                                                      (replaces -1 :dir rl)
                                                      (("1"
                                                        (replaces -1 :dir rl)
                                                        (("1"
                                                          (replaces
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (replaces
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replaces
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (hide "xdiffname")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (reveal "tps")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (case
                                                             "16*A1*D1 > 14 * (1 / 5) ^ (5 * n + 5) AND 4*A2*D2 > 0")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (split)
                                                                (("1"
                                                                  (case
                                                                   "A1*D1 > (1 / 5) ^ (5 * n + 5)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide 2)
                                                                    (("2"
                                                                      (case
                                                                       "D1 > (1/5)^n")
                                                                      (("1"
                                                                        (mult-by
                                                                         -1
                                                                         "A1")
                                                                        (("1"
                                                                          (expand
                                                                           "A1"
                                                                           (-1
                                                                            1))
                                                                          (("1"
                                                                            (rewrite
                                                                             "expt_plus"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "D1")
                                                                          (("2"
                                                                            (expand
                                                                             "B1"
                                                                             +)
                                                                            (("2"
                                                                              (expand
                                                                               "C1"
                                                                               +)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "div_expt")
                                                                                (("2"
                                                                                  (case
                                                                                   "1^n=1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "(1/2)*(1/(5+4*n)) > 1/5^n AND 1 / (175 + 100 * n) < (1/2)*(1/(5+4*n))")
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            (("1"
                                                                                              (case
                                                                                               "FORALL (nk:nat): 5^(nk+5) > 10+8*(nk+5)")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "n-5")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (induct
                                                                                                 "nk")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "^")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "expt"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (mult-by
                                                                                                           -1
                                                                                                           "5")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "FORALL (nk:nat): 1^nk = 1")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (induct
                                                                                         "nk")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "expt"
                                                                                               +)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "posreal_times_posreal_is_posreal")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "A2"
                                                                       "D2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "A2*D2 < (1 / 5) ^ (3 + 4 * n) AND A1*D1 < (1/25)*(1 / 5) ^ (3 + 4 * n)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (expand
                                                                     "D2"
                                                                     +)
                                                                    (("1"
                                                                      (lemma
                                                                       "posreal_times_posreal_is_posreal")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "A2"
                                                                         "C2")
                                                                        (("1"
                                                                          (case
                                                                           "A2*B2 < (1 / 5) ^ (3 + 4 * n)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             (-1
                                                                              2))
                                                                            (("2"
                                                                              (case
                                                                               "A2 < (1 / 5) ^ (3 + 4 * n)")
                                                                              (("1"
                                                                                (case
                                                                                 "B2 < 1")
                                                                                (("1"
                                                                                  (mult-ineq
                                                                                   -1
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "B2"
                                                                                     +)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "A2"
                                                                                   +)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "div_expt")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "div_expt")
                                                                                      (("2"
                                                                                        (case
                                                                                         "1^(3+4*n) = 1")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (cross-mult
                                                                                             1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "both_sides_expt_pos_lt_aux")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "2+4*n"
                                                                                                 _
                                                                                                 _)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "5"
                                                                                                   "239")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "^")
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "FORALL (nk:nat): 1^nk = 1")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (induct
                                                                                               "nk")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "expt")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "expt"
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "A1 <= (1/25) * (1 / 5) ^ (3 + 4 * n) AND D1 < 1")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (mult-ineq
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide 2)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (expand
                                                                           "A1"
                                                                           +)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "expt"
                                                                               +
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "expt"
                                                                                 +
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "B1 < 1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "B1"
                                                                               +)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (split)
                                            (("1"
                                              (expand "A1" +)
                                              (("1"
                                                (rewrite "expt_pos")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "A2" +)
                                              (("2"
                                                (rewrite "expt_pos")
                                                nil
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "B1" +)
                                              (("3" (cross-mult 1) nil nil))
                                              nil)
                                             ("4"
                                              (expand "B2" +)
                                              (("4" (cross-mult 1) nil nil))
                                              nil)
                                             ("5"
                                              (expand "C1" +)
                                              (("5" (cross-mult 1) nil nil))
                                              nil)
                                             ("6"
                                              (expand "C2" +)
                                              (("6" (cross-mult 1) nil nil))
                                              nil)
                                             ("7"
                                              (expand "B1" +)
                                              (("7" (cross-mult 1) nil nil))
                                              nil)
                                             ("8"
                                              (expand "B2" +)
                                              (("8" (cross-mult 1) nil nil))
                                              nil)
                                             ("9"
                                              (expand "A1" +)
                                              (("9" (cross-mult 1) nil nil))
                                              nil)
                                             ("10"
                                              (expand "A2" +)
                                              (("10"
                                                (rewrite "expt_pos")
                                                nil
                                                nil))
                                              nil)
                                             ("11"
                                              (case "B1 > C1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "B1" +)
                                                (("2"
                                                  (expand "C1" +)
                                                  (("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("12"
                                              (case "B2 > C2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "B2" +)
                                                (("2"
                                                  (expand "C2" +)
                                                  (("2"
                                                    (cross-mult 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pi_lb_diff formula-decl nil atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (C2 skolem-const-decl "posrat" atan_approx nil)
    (expt_pos formula-decl nil exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal judgement-tcc nil real_types nil)
    (A1 skolem-const-decl "posrat" atan_approx nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (D1 skolem-const-decl "rat" atan_approx nil)
    (C1 skolem-const-decl "posrat" atan_approx nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat" rationals nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (n skolem-const-decl "nat" atan_approx nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (B1 skolem-const-decl "posrat" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (B2 skolem-const-decl "posrat" atan_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (A2 skolem-const-decl "posrat" atan_approx nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (D2 skolem-const-decl "rat" atan_approx nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (<= const-decl "bool" reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil))
   shostak))
 (pi_lb_quot_bounds 0
  (pi_lb_quot_bounds-1 nil 3554119553
   (""
    (case "NOT FORALL (nb6:below(6)): LET xquot = pi_lbn(nb6) / pi_lbn(nb6 + 1) IN
          1 - 14.5 * (1 / 5) ^ (4 * nb6 + 3) <= xquot AND xquot <= 1")
    (("1" (hide 2) (("1" (eval-formula) nil nil)) nil)
     ("2" (skeep)
      (("2" (case "NOT n>5")
        (("1" (inst - "n") (("1" (assert) nil nil)) nil)
         ("2" (hide -2)
          (("2" (skoletin 1)
            (("2" (name "xdiff" "pi_lbn(n+1)-pi_lbn(n)")
              (("2" (case "NOT xquot = 1 - xdiff/pi_lbn(n+1)")
                (("1" (assert)
                  (("1" (replace -2)
                    (("1" (replace -1 :dir rl) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (case "xquot <= 1")
                  (("1" (assert)
                    (("1"
                      (case "xdiff/pi_lbn(n+1) <= 14.5 * (1 / 5) ^ (3 + 4 * n)")
                      (("1" (assert) nil nil)
                       ("2" (hide 2)
                        (("2" (lemma "pi_lb_diff_bounds")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (replace -4)
                                (("2" (flatten)
                                  (("2" (case "25/8 <= pi_lbn(1+n)")
                                    (("1" (cross-mult 1)
                                      (("1"
                                        (mult-ineq -1 -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (case
                                         "FORALL (kk:nat): 25/8 <= pi_lbn(kk)")
                                        (("1" (inst?) nil nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (induct "kk")
                                            (("1" (eval-formula) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (lemma "pi_lb_inc")
                                                (("2"
                                                  (inst - "j+1" "j")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "pi_lb_inc")
                    (("2" (inst - "n+1" "n")
                      (("2" (assert)
                        (("2" (expand "xquot" 1)
                          (("2" (cross-mult 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (pi_lb_diff_bounds formula-decl nil atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_lb_inc formula-decl nil atan_approx nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (xquot skolem-const-decl "posreal" atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "nat" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lbn const-decl "real" atan_approx nil))
   shostak))
 (pi_ub_diff_bounds 0
  (pi_ub_diff_bounds-4 "" 3790092538
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "xdiffname" -1)
        (("" (rewrite "pi_ub_diff")
          (("" (case "(1/5)^(5+4*n) = (1/25)*(1/5)^(3+4*n)")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (case "(1/239)^(7+4*n) = (1/239^2)*(1/239)^(5+4*n)")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (invoke (name "K1" "%1") (! -1 2 1))
                        (("1" (invoke (name "K2" "%1") (! -2 2 2))
                          (("1" (invoke (name "K3" "%1") (! -3 2 3))
                            (("1" (invoke (name "K4" "%1") (! -4 2 4))
                              (("1" (replace -1)
                                (("1" (replace -2)
                                  (("1" (replace -3)
                                    (("1" (replace -4)
                                      (("1"
                                        (case
                                         "K1/2 >= 32 * (1 / 5) ^ (3 + 5 * n)")
                                        (("1"
                                          (case "K2 < K1")
                                          (("1"
                                            (case
                                             "2*K1 < (7/5) * (1 / 5) ^ (3 + 4 * n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "K4 < K2/2")
                                                (("1"
                                                  (case "K3 < K1/2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "K1 > 0 AND K2 > 0 AND K4 > 0 AND K3 > 0")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "K1 + K2 - K4 - K3 >= K1/2")
                                                          (("1"
                                                            (case
                                                             "K1 + K2 - K4 - K3 < 2*K1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 "xdiffname"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "^")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide
                                                       (-1 -2 -3 -4 -5 -6 2))
                                                      (("2"
                                                        (hide (-1 -2 -3))
                                                        (("2"
                                                          (expand "K1")
                                                          (("2"
                                                            (expand "K3")
                                                            (("2"
                                                              (case
                                                               "1/(5+4*n) < 1/(3+4*n)")
                                                              (("1"
                                                                (case
                                                                 "16 * ((1 / 5) ^ (3 + 4 * n) * (1 / 25)) <
                                                                                                                                                                  16 * (((1 / 5) ^ (3 + 4 * n)) ) / 2")
                                                                (("1"
                                                                  (mult-ineq
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-1 -2 -3 -4 -5))
                                                  (("2"
                                                    (hide (-1 -2 -3))
                                                    (("2"
                                                      (expand "K4")
                                                      (("2"
                                                        (expand "K2")
                                                        (("2"
                                                          (case
                                                           "1/(7+4*n) < 1/(5+4*n)")
                                                          (("1"
                                                            (case
                                                             "4 * ((1 / 239) ^ (5 + 4 * n) * (1 / 239 ^ 2)) <
                                                                                                                                                    4 * (((1 / 239) ^ (5 + 4 * n))) / 2")
                                                            (("1"
                                                              (mult-ineq
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 +
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (cross-mult 1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 -5 2))
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "K1")
                                                    (("2"
                                                      (case
                                                       "1/(3+4*n) <= 1/23")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "(1/5)^(3+4*n)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (case
                                                           "EXISTS (kk:nat): n = kk+5")
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst + "n-5")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -2 -3 -4 -5 -6 2))
                                            (("2"
                                              (expand "K1")
                                              (("2"
                                                (expand "K2")
                                                (("2"
                                                  (case
                                                   "(1/239)^(4*n+5) < (1/5)^(3+4*n) AND 1/(5+4*n) < 1/(3+4*n)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (mult-ineq -1 -2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_expt_pos_lt_aux")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "2+4*n"
                                                           "1/239"
                                                           "1/5")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand "^")
                                                              (("1"
                                                                (expand
                                                                 "expt"
                                                                 +
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "expt"
                                                                   +
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 -2 -3 -4 -5 2))
                                          (("2"
                                            (expand "K1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "expt_plus")
                                                (("2"
                                                  (inst - "3+4*n" "n" "1/5")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "(1/(3+4*n)) > 4*(1/5)^n")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "8 * (((1 / 5) ^ (3 + 4 * n)))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("2"
                                                            (case
                                                             "FORALL (kk:nat): 1/(3+4*(kk+5)) > 4*(1/5)^(kk+5)")
                                                            (("1"
                                                              (inst - "n-5")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "kk")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "(23+4*j)/(27+4*j) > 4/5")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -2)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2" (lemma "expt_plus")
                      (("2" (inst - "2" "5+4*n" "1/239")
                        (("2" (assert)
                          (("2" (replaces -1)
                            (("2" (rewrite "div_expt") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (lemma "expt_plus")
                (("2" (inst - "3+4*n" "2" "1/5")
                  (("2" (assert)
                    (("2" (replaces -1)
                      (("2" (rewrite "div_expt")
                        (("2" (rewrite "div_expt")
                          (("2" (case "FORALL (kk:nat): 1^kk = 1")
                            (("1" (inst?)
                              (("1" (case "1^2 = 1")
                                (("1" (assert)
                                  (("1" (case "5^2 = 25")
                                    (("1" (replaces -1)
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1) (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (induct "kk")
                                (("1" (grind) nil nil)
                                 ("2" (skeep)
                                  (("2" (expand "^")
                                    (("2" (expand "expt" 1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (pi_ub_diff_bounds-3 nil 3566172731
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "xdiffname" -1)
        (("" (rewrite "pi_ub_diff")
          (("" (case "(1/5)^(5+4*n) = (1/25)*(1/5)^(3+4*n)")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (case "(1/239)^(7+4*n) = (1/239^2)*(1/239)^(5+4*n)")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (invoke (name "K1" "%1") (! -1 2 1))
                        (("1" (invoke (name "K2" "%1") (! -2 2 2))
                          (("1" (invoke (name "K3" "%1") (! -3 2 3))
                            (("1" (invoke (name "K4" "%1") (! -4 2 4))
                              (("1" (replace -1)
                                (("1" (replace -2)
                                  (("1" (replace -3)
                                    (("1" (replace -4)
                                      (("1"
                                        (case
                                         "K1/2 >= 32 * (1 / 5) ^ (3 + 5 * n)")
                                        (("1"
                                          (case "K2 < K1")
                                          (("1"
                                            (case
                                             "2*K1 < (7/5) * (1 / 5) ^ (3 + 4 * n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "K4 < K2/2")
                                                (("1"
                                                  (case "K3 < K1/2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "K1 > 0 AND K2 > 0 AND K4 > 0 AND K3 > 0")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "K1 + K2 - K4 - K3 >= K1/2")
                                                          (("1"
                                                            (case
                                                             "K1 + K2 - K4 - K3 < 2*K1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 "xdiffname"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "^")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide
                                                       (-1 -2 -3 -4 -5 -6 2))
                                                      (("2"
                                                        (hide (-1 -2 -3))
                                                        (("2"
                                                          (expand "K1")
                                                          (("2"
                                                            (expand "K3")
                                                            (("2"
                                                              (case
                                                               "1/(5+4*n) < 1/(3+4*n)")
                                                              (("1"
                                                                (case
                                                                 "16 * ((1 / 5) ^ (3 + 4 * n) * (1 / 25)) <
                                                                                                                                                                  16 * (((1 / 5) ^ (3 + 4 * n)) ) / 2")
                                                                (("1"
                                                                  (mult-ineq
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-1 -2 -3 -4 -5))
                                                  (("2"
                                                    (hide (-1 -2 -3))
                                                    (("2"
                                                      (expand "K4")
                                                      (("2"
                                                        (expand "K2")
                                                        (("2"
                                                          (case
                                                           "1/(7+4*n) < 1/(5+4*n)")
                                                          (("1"
                                                            (case
                                                             "4 * ((1 / 239) ^ (5 + 4 * n) * (1 / 239 ^ 2)) <
                                                                                                                                                    4 * (((1 / 239) ^ (5 + 4 * n))) / 2")
                                                            (("1"
                                                              (mult-ineq
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 +
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (cross-mult 1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 -5 2))
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "K1")
                                                    (("2"
                                                      (case
                                                       "1/(3+4*n) <= 1/23")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "(1/5)^(3+4*n)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (case
                                                           "EXISTS (kk:nat): n = kk+5")
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst + "n-5")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -2 -3 -4 -5 -6 2))
                                            (("2"
                                              (expand "K1")
                                              (("2"
                                                (expand "K2")
                                                (("2"
                                                  (case
                                                   "(1/239)^(4*n+5) < (1/5)^(3+4*n) AND 1/(5+4*n) < 1/(3+4*n)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (mult-ineq -1 -2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_expt_pos_lt_aux")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "2+4*n"
                                                           "1/239"
                                                           "1/5")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand "^")
                                                              (("1"
                                                                (expand
                                                                 "expt"
                                                                 +
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "expt"
                                                                   +
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 -2 -3 -4 -5 2))
                                          (("2"
                                            (expand "K1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "expt_plus")
                                                (("2"
                                                  (inst - "3+4*n" "n" "1/5")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "(1/(3+4*n)) > 4*(1/5)^n")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "8 * (((1 / 5) ^ (3 + 4 * n)))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("2"
                                                            (case
                                                             "FORALL (kk:nat): 1/(3+4*(kk+5)) > 4*(1/5)^(kk+5)")
                                                            (("1"
                                                              (inst - "n-5")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "kk")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "(23+4*j)/(27+4*j) > 4/5")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -2)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2" (lemma "expt_plus")
                      (("2" (inst - "2" "5+4*n" "1/239")
                        (("2" (assert)
                          (("2" (replaces -1)
                            (("2" (rewrite "div_expt")
                              (("2" (rewrite "div_expt")
                                (("2" (assert)
                                  (("2" (case "1^2 = 1")
                                    (("1" (assert) nil nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (lemma "expt_plus")
                (("2" (inst - "3+4*n" "2" "1/5")
                  (("2" (assert)
                    (("2" (replaces -1)
                      (("2" (rewrite "div_expt")
                        (("2" (rewrite "div_expt")
                          (("2" (case "FORALL (kk:nat): 1^kk = 1")
                            (("1" (inst?)
                              (("1" (replaces -1)
                                (("1" (case "1^2 = 1")
                                  (("1" (replaces -1)
                                    (("1" (assert)
                                      (("1"
                                        (case "5^2 = 25")
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (induct "kk")
                                (("1" (grind) nil nil)
                                 ("2" (skeep)
                                  (("2" (expand "^")
                                    (("2" (expand "expt" 1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_ubn const-decl "real" atan_approx nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pi_ub_diff formula-decl nil atan_approx nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nnrat_plus_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (K4 skolem-const-decl "posrat" atan_approx nil)
    (expt def-decl "real" exponentiation nil)
    (K2 skolem-const-decl "posrat" atan_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (K1 skolem-const-decl "posrat" atan_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (K3 skolem-const-decl "posrat" atan_approx nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (both_sides_expt_pos_lt_aux formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (expt_1i formula-decl nil exponentiation nil)
    (div_expt formula-decl nil exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (pi_ub_diff_bounds-2 nil 3566172669
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "xdiffname" -1)
        (("" (rewrite "pi_ub_diff")
          (("" (case "(1/5)^(5+4*n) = (1/25)*(1/5)^(3+4*n)")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (case "(1/239)^(7+4*n) = (1/239^2)*(1/239)^(5+4*n)")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (invoke (name "K1" "%1") (! -1 2 1))
                        (("1" (invoke (name "K2" "%1") (! -2 2 2))
                          (("1" (invoke (name "K4" "%1") (! -3 2 3))
                            (("1" (invoke (name "K3" "%1") (! -4 2 4))
                              (("1" (replace -1)
                                (("1" (replace -2)
                                  (("1" (replace -3)
                                    (("1" (replace -4)
                                      (("1"
                                        (case
                                         "K1/2 >= 32 * (1 / 5) ^ (3 + 5 * n)")
                                        (("1"
                                          (case "K2 < K1")
                                          (("1"
                                            (case
                                             "2*K1 < (7/5) * (1 / 5) ^ (3 + 4 * n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "K3 < K2/2")
                                                (("1"
                                                  (case "K4 < K1/2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "K1 > 0 AND K2 > 0 AND K3 > 0 AND K4 > 0")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "K1 + K2 - K3 - K4 >= K1/2")
                                                          (("1"
                                                            (case
                                                             "K1 + K2 - K3 - K4 < 2*K1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 "xdiffname"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "^")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide
                                                       (-1 -2 -3 -4 -5 -6 2))
                                                      (("2"
                                                        (hide (-1 -2 -3))
                                                        (("2"
                                                          (expand "K1")
                                                          (("2"
                                                            (expand "K4")
                                                            (("2"
                                                              (case
                                                               "1/(5+4*n) < 1/(3+4*n)")
                                                              (("1"
                                                                (case
                                                                 "16 * ((1 / 5) ^ (3 + 4 * n) * (1 / 25)) <
                                                                                                                                           16 * (((1 / 5) ^ (3 + 4 * n)) ) / 2")
                                                                (("1"
                                                                  (mult-ineq
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-1 -2 -3 -4 -5))
                                                  (("2"
                                                    (hide (-1 -2 -3))
                                                    (("2"
                                                      (expand "K3")
                                                      (("2"
                                                        (expand "K2")
                                                        (("2"
                                                          (case
                                                           "1/(7+4*n) < 1/(5+4*n)")
                                                          (("1"
                                                            (case
                                                             "4 * ((1 / 239) ^ (5 + 4 * n) * (1 / 239 ^ 2)) <
                                                                                                                               4 * (((1 / 239) ^ (5 + 4 * n))) / 2")
                                                            (("1"
                                                              (mult-ineq
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 +
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (cross-mult 1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 -5 2))
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "K1")
                                                    (("2"
                                                      (case
                                                       "1/(3+4*n) <= 1/23")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "(1/5)^(3+4*n)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (case
                                                           "EXISTS (kk:nat): n = kk+5")
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst + "n-5")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -2 -3 -4 -5 -6 2))
                                            (("2"
                                              (expand "K1")
                                              (("2"
                                                (expand "K2")
                                                (("2"
                                                  (case
                                                   "(1/239)^(4*n+5) < (1/5)^(3+4*n) AND 1/(5+4*n) < 1/(3+4*n)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (mult-ineq -1 -2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_expt_pos_lt_aux")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "2+4*n"
                                                           "1/239"
                                                           "1/5")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand "^")
                                                              (("1"
                                                                (expand
                                                                 "expt"
                                                                 +
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "expt"
                                                                   +
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 -2 -3 -4 -5 2))
                                          (("2"
                                            (expand "K1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "expt_plus")
                                                (("2"
                                                  (inst - "3+4*n" "n" "1/5")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "(1/(3+4*n)) > 4*(1/5)^n")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "8 * (((1 / 5) ^ (3 + 4 * n)))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("2"
                                                            (case
                                                             "FORALL (kk:nat): 1/(3+4*(kk+5)) > 4*(1/5)^(kk+5)")
                                                            (("1"
                                                              (inst - "n-5")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "kk")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "(23+4*j)/(27+4*j) > 4/5")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -2)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2" (lemma "expt_plus")
                      (("2" (inst - "2" "5+4*n" "1/239")
                        (("2" (assert)
                          (("2" (replaces -1)
                            (("2" (rewrite "div_expt")
                              (("2" (rewrite "div_expt")
                                (("2" (assert)
                                  (("2" (case "1^2 = 1")
                                    (("1" (assert) nil nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (lemma "expt_plus")
                (("2" (inst - "3+4*n" "2" "1/5")
                  (("2" (assert)
                    (("2" (replaces -1)
                      (("2" (rewrite "div_expt")
                        (("2" (rewrite "div_expt")
                          (("2" (case "FORALL (kk:nat): 1^kk = 1")
                            (("1" (inst?)
                              (("1" (replaces -1)
                                (("1" (case "1^2 = 1")
                                  (("1" (replaces -1)
                                    (("1" (assert)
                                      (("1"
                                        (case "5^2 = 25")
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (induct "kk")
                                (("1" (grind) nil nil)
                                 ("2" (skeep)
                                  (("2" (expand "^")
                                    (("2" (expand "expt" 1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (pi_ub_diff_bounds-1 nil 3555081842
   ("" (skeep)
    (("" (skoletin 1)
      (("" (label "xdiffname" -1)
        (("" (rewrite "pi_ub_diff")
          (("" (case "(1/5)^(5+4*n) = (1/25)*(1/5)^(3+4*n)")
            (("1" (replaces -1)
              (("1" (assert)
                (("1" (case "(1/239)^(7+4*n) = (1/239^2)*(1/239)^(5+4*n)")
                  (("1" (replaces -1)
                    (("1" (assert)
                      (("1" (invoke (name "K1" "%1") (! -1 2 1))
                        (("1" (invoke (name "K2" "%1") (! -2 2 2))
                          (("1" (invoke (name "K3" "%1") (! -3 2 3))
                            (("1" (invoke (name "K4" "%1") (! -4 2 4))
                              (("1" (replace -1)
                                (("1" (replace -2)
                                  (("1" (replace -3)
                                    (("1" (replace -4)
                                      (("1"
                                        (case
                                         "K1/2 >= 32 * (1 / 5) ^ (3 + 5 * n)")
                                        (("1"
                                          (case "K2 < K1")
                                          (("1"
                                            (case
                                             "2*K1 < (7/5) * (1 / 5) ^ (3 + 4 * n)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "K3 < K2/2")
                                                (("1"
                                                  (case "K4 < K1/2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "K1 > 0 AND K2 > 0 AND K3 > 0 AND K4 > 0")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "K1 + K2 - K3 - K4 >= K1/2")
                                                          (("1"
                                                            (case
                                                             "K1 + K2 - K3 - K4 < 2*K1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 "xdiffname"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "^")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (hide
                                                       (-1 -2 -3 -4 -5 -6 2))
                                                      (("2"
                                                        (hide (-1 -2 -3))
                                                        (("2"
                                                          (expand "K1")
                                                          (("2"
                                                            (expand "K4")
                                                            (("2"
                                                              (case
                                                               "1/(5+4*n) < 1/(3+4*n)")
                                                              (("1"
                                                                (case
                                                                 "16 * ((1 / 5) ^ (3 + 4 * n) * (1 / 25)) <
                                                                                                                    16 * (((1 / 5) ^ (3 + 4 * n)) ) / 2")
                                                                (("1"
                                                                  (mult-ineq
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-1 -2 -3 -4 -5))
                                                  (("2"
                                                    (hide (-1 -2 -3))
                                                    (("2"
                                                      (expand "K3")
                                                      (("2"
                                                        (expand "K2")
                                                        (("2"
                                                          (case
                                                           "1/(7+4*n) < 1/(5+4*n)")
                                                          (("1"
                                                            (case
                                                             "4 * ((1 / 239) ^ (5 + 4 * n) * (1 / 239 ^ 2)) <
                                                                                                          4 * (((1 / 239) ^ (5 + 4 * n))) / 2")
                                                            (("1"
                                                              (mult-ineq
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 +
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "expt"
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "expt"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (cross-mult 1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -2 -3 -4 -5 2))
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand "K1")
                                                    (("2"
                                                      (case
                                                       "1/(3+4*n) <= 1/23")
                                                      (("1"
                                                        (mult-by
                                                         -1
                                                         "(1/5)^(3+4*n)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (case
                                                           "EXISTS (kk:nat): n = kk+5")
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (cross-mult 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst + "n-5")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -2 -3 -4 -5 -6 2))
                                            (("2"
                                              (expand "K1")
                                              (("2"
                                                (expand "K2")
                                                (("2"
                                                  (case
                                                   "(1/239)^(4*n+5) < (1/5)^(3+4*n) AND 1/(5+4*n) < 1/(3+4*n)")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (mult-ineq -1 -2)
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (lemma
                                                         "both_sides_expt_pos_lt_aux")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "2+4*n"
                                                           "1/239"
                                                           "1/5")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand "^")
                                                              (("1"
                                                                (expand
                                                                 "expt"
                                                                 +
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "expt"
                                                                   +
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 -2 -3 -4 -5 2))
                                          (("2"
                                            (expand "K1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma "expt_plus")
                                                (("2"
                                                  (inst - "3+4*n" "n" "1/5")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "(1/(3+4*n)) > 4*(1/5)^n")
                                                        (("1"
                                                          (mult-by
                                                           -1
                                                           "8 * (((1 / 5) ^ (3 + 4 * n)))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-2 1))
                                                          (("2"
                                                            (case
                                                             "FORALL (kk:nat): 1/(3+4*(kk+5)) > 4*(1/5)^(kk+5)")
                                                            (("1"
                                                              (inst - "n-5")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (induct "kk")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (expand
                                                                       "expt"
                                                                       +)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "(23+4*j)/(27+4*j) > 4/5")
                                                                          (("1"
                                                                            (cross-mult
                                                                             -2)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2" (lemma "expt_plus")
                      (("2" (inst - "2" "5+4*n" "1/239")
                        (("2" (assert)
                          (("2" (replaces -1)
                            (("2" (rewrite "div_expt")
                              (("2" (rewrite "div_expt")
                                (("2" (assert)
                                  (("2" (case "1^2 = 1")
                                    (("1" (assert) nil nil)
                                     ("2" (hide-all-but 1)
                                      (("2" (grind) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (lemma "expt_plus")
                (("2" (inst - "3+4*n" "2" "1/5")
                  (("2" (assert)
                    (("2" (replaces -1)
                      (("2" (rewrite "div_expt")
                        (("2" (rewrite "div_expt")
                          (("2" (case "FORALL (kk:nat): 1^kk = 1")
                            (("1" (inst?)
                              (("1" (replaces -1)
                                (("1" (case "1^2 = 1")
                                  (("1" (replaces -1)
                                    (("1" (assert)
                                      (("1"
                                        (case "5^2 = 25")
                                        (("1"
                                          (replaces -1)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (grind) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2" (induct "kk")
                                (("1" (grind) nil nil)
                                 ("2" (skeep)
                                  (("2" (expand "^")
                                    (("2" (expand "expt" 1)
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (pi_ub_quot_bounds 0
  (pi_ub_quot_bounds-3 nil 3565741552
   (""
    (case "NOT FORALL (nn:subrange(0,15)): LET xquot = pi_ubn(nn + 1) / pi_ubn(nn) IN
                               1 - (9/5) * (1 / 5) ^ (4 * nn + 3) <= xquot AND xquot <= 1")
    (("1" (eval-formula) nil nil)
     ("2" (skeep)
      (("2" (case "NOT n>=15")
        (("1" (inst - "n") (("1" (assert) nil nil)) nil)
         ("2" (hide -2)
          (("2" (lemma "pi_ub_diff_bounds")
            (("2" (inst - "n")
              (("2" (split -)
                (("1" (skoletin 1)
                  (("1" (skoletin -2 :old? t)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (mult-by -3 "1/pi_ubn(n)")
                          (("1" (assert)
                            (("1"
                              (case "NOT xdiff * (1/pi_ubn(n)) = 1 - xquot")
                              (("1" (assert) nil nil)
                               ("2" (replaces -1)
                                (("2" (assert)
                                  (("2" (case "1/pi_ubn(n) < 1/2")
                                    (("1"
                                      (mult-by -1 " ((1 / 5) ^ (3 + 4 * n))")
                                      (("1" (assert) nil nil)) nil)
                                     ("2"
                                      (case
                                       "FORALL (nn:nat): pi_ubn(nn+15) > 2")
                                      (("1"
                                        (inst - "n-15")
                                        (("1"
                                          (assert)
                                          (("1" (cross-mult 1) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (case
                                           "FORALL (nn:nat): pi_lbn(nn+15) > 2")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "nn")
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst - "nn+15")
                                                  (("1"
                                                    (assert)
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (induct "nn")
                                              (("1"
                                                (assert)
                                                (("1" (eval-formula) nil nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_lb_inc")
                                                    (("2"
                                                      (inst - "16+j" "15+j")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "xquot" +)
                          (("2" (cross-mult 1)
                            (("2" (lemma "pi_ub_dec")
                              (("2" (inst - "1+n" "n")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (xquot skolem-const-decl "posreal" atan_approx nil)
    (pi_ub_dec formula-decl nil atan_approx nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pi_lbn const-decl "real" atan_approx nil)
    (pi_lb_pos application-judgement "posreal" atan_approx nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (pi_bounds formula-decl nil atan_approx nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pi_lb_inc formula-decl nil atan_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_ub_diff_bounds formula-decl nil atan_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (n skolem-const-decl "nat" atan_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (pi_ub_pos application-judgement "posreal" atan_approx nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (subrange type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pi_ubn const-decl "real" atan_approx nil))
   nil)
  (pi_ub_quot_bounds-2 nil 3565741534
   (""
    (case "NOT FORALL (nn:subrange(0,15)): LET xquot = pi_ubn(nn + 1) / pi_ubn(nn) IN
                        1 - (9/5) * (1 / 5) ^ (4 * nn + 3) <= xquot AND xquot <= 1")
    (("1" (eval-formula) nil)
     ("2" (skeep)
      (("2" (case "NOT n>=15")
        (("1" (inst - "n") (("1" (assert) nil)))
         ("2" (hide -2)
          (("2" (lemma "pi_ub_diff_bounds")
            (("2" (inst - "n")
              (("2" (split -)
                (("1" (skoletin 1)
                  (("1" (skoletin -2)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (mult-by -3 "1/pi_ubn(n)")
                          (("1" (assert)
                            (("1"
                              (case "NOT xdiff * (1/pi_ubn(n)) = 1 - xquot")
                              (("1" (assert) nil)
                               ("2" (replaces -1)
                                (("2" (assert)
                                  (("2" (case "1/pi_ubn(n) < 1/2")
                                    (("1"
                                      (mult-by -1 " ((1 / 5) ^ (3 + 4 * n))")
                                      (("1" (assert) nil)))
                                     ("2"
                                      (case
                                       "FORALL (nn:nat): pi_ubn(nn+15) > 2")
                                      (("1"
                                        (inst - "n-15")
                                        (("1"
                                          (assert)
                                          (("1" (cross-mult 1) nil)))))
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (case
                                           "FORALL (nn:nat): pi_lbn(nn+15) > 2")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "nn")
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst - "nn+15")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (ground)
                                                      nil)))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (induct "nn")
                                              (("1"
                                                (assert)
                                                (("1" (eval-formula) nil)))
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_lb_inc")
                                                    (("2"
                                                      (inst - "16+j" "15+j")
                                                      (("2"
                                                        (assert)
                                                        nil)))))))))))))))))))))))))))))))
                         ("2" (expand "xquot" +)
                          (("2" (cross-mult 1)
                            (("2" (lemma "pi_ub_dec")
                              (("2" (inst - "1+n" "n")
                                (("2" (assert) nil)))))))))))))))))
                 ("2" (assert) nil))))))))))))))
    nil)
   nil nil)
  (pi_ub_quot_bounds-1 nil 3555152240
   (""
    (case "NOT FORALL (nn:subrange(0,15)): LET xquot = pi_ubn(nn + 1) / pi_ubn(nn) IN
                 1 - (9/5) * (1 / 5) ^ (4 * nn + 3) <= xquot AND xquot <= 1")
    (("1" (eval-formula) nil nil)
     ("2" (skeep)
      (("2" (case "NOT n>=15")
        (("1" (inst - "n") (("1" (assert) nil nil)) nil)
         ("2" (hide -2)
          (("2" (lemma "pi_ub_diff_bounds")
            (("2" (inst - "n")
              (("2" (split -)
                (("1" (skoletin 1)
                  (("1" (skoletin -2 :old? t)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (mult-by -3 "1/pi_ubn(n)")
                          (("1" (assert)
                            (("1"
                              (case "NOT xdiff * (1/pi_ubn(n)) = 1 - xquot")
                              (("1" (assert) nil nil)
                               ("2" (replaces -1)
                                (("2" (assert)
                                  (("2" (case "1/pi_ubn(n) < 1/2")
                                    (("1"
                                      (mult-by -1 " ((1 / 5) ^ (3 + 4 * n))")
                                      (("1" (assert) nil nil)) nil)
                                     ("2"
                                      (case
                                       "FORALL (nn:nat): pi_ubn(nn+15) > 2")
                                      (("1"
                                        (inst - "n-15")
                                        (("1"
                                          (assert)
                                          (("1" (cross-mult 1) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (case
                                           "FORALL (nn:nat): pi_lbn(nn+15) > 2")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst - "nn")
                                              (("1"
                                                (lemma "pi_bounds")
                                                (("1"
                                                  (inst - "nn+15")
                                                  (("1"
                                                    (assert)
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (induct "nn")
                                              (("1"
                                                (assert)
                                                (("1" (eval-formula) nil nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "pi_lb_inc")
                                                    (("2"
                                                      (inst - "16+j" "15+j")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "xquot" +)
                          (("2" (cross-mult 1)
                            (("2" (lemma "pi_ub_dec")
                              (("2" (inst - "1+n" "n")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


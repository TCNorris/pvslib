(trig_extra
 (sin_minus_2pi 0
  (sin_minus_2pi-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_2pi")
        (("" (rewrite "cos_2pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_2pi formula-decl nil sincos nil)
    (sin_2pi formula-decl nil sincos nil))
   nil))
 (cos_minus_2pi 0
  (cos_minus_2pi-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_2pi")
        (("" (rewrite "sin_2pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_2pi formula-decl nil sincos nil)
    (cos_2pi formula-decl nil sincos nil))
   nil))
 (tan_minus_2pi_TCC1 0
  (tan_minus_2pi_TCC1-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "Tan?")
      (("" (rewrite "cos_minus_2pi") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (Tan? const-decl "bool" trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_minus_2pi formula-decl nil trig_extra nil))
   nil
   (tan_minus_2pi subtype
    "(number_fields.-)(trig_extra.a, number_fields.*(2, pi_def.pi))"
    "(trig_basic.Tan?)")))
 (tan_minus_2pi_TCC2 0
  (tan_minus_2pi_TCC2-1 nil 3269431996 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (Tan? const-decl "bool" trig_basic nil))
   nil (tan_minus_2pi subtype "trig_extra.a" "(trig_basic.Tan?)")))
 (tan_minus_2pi 0
  (tan_minus_2pi-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_minus_2pi") (("" (rewrite "cos_minus_2pi") nil nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (tan const-decl "real" trig_basic nil)
    (cos_minus_2pi formula-decl nil trig_extra nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_minus_2pi formula-decl nil trig_extra nil))
   nil))
 (sin_minus_3pi2 0
  (sin_minus_3pi2-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_3pi2")
        (("" (rewrite "cos_3pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_3pi2 formula-decl nil sincos nil)
    (sin_3pi2 formula-decl nil sincos nil))
   nil))
 (cos_minus_3pi2 0
  (cos_minus_3pi2-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_3pi2")
        (("" (rewrite "sin_3pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_3pi2 formula-decl nil sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_3pi2 formula-decl nil sincos nil))
   nil))
 (tan_minus_3pi2_TCC1 0
  (tan_minus_3pi2_TCC1-1 nil 3269431996
   ("" (expand "Tan?")
    (("" (skosimp*)
      (("" (lemma "sin_shift" ("a" "a!1-3*pi/2"))
        (("" (lemma "sin_period" ("a" "-a!1" "j" "1"))
          (("" (rewrite "sin_neg" -1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (sin_period formula-decl nil sincos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sin_neg formula-decl nil sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_shift formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (Tan? const-decl "bool" trig_basic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil
   (tan_minus_3pi2 subtype
    "(number_fields.-)(trig_extra.a, number_fields./(number_fields.*(3, pi_def.pi), 2))"
    "(trig_basic.Tan?)")))
 (tan_minus_3pi2_TCC2 0
  (tan_minus_3pi2_TCC2-2 "" 3790092094
   ("" (skosimp)
    (("" (expand "tan")
      (("" (lemma "div_eq_zero")
        (("" (inst -1 "cos(a!1)" "sin(a!1)")
          (("" (replace -1 * lr) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (tan_minus_3pi2 subtype "trig_basic.tan(trig_extra.a)" "nznum"))
  (tan_minus_3pi2_TCC2-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (lemma "div_eq_zero")
        (("" (inst -1 "cos(a!1)" "sin(a!1)")
          (("1" (replace -1 * lr) (("1" (propax) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((tan const-decl "real" trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (cos const-decl "real" sincos_def nil)
    (sin const-decl "real" sincos_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (div_eq_zero formula-decl nil real_props nil))
   nil (tan_minus_3pi2 subtype "trig_basic.tan(trig_extra.a)" "nznum")))
 (tan_minus_3pi2 0
  (tan_minus_3pi2-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_minus_3pi2")
        (("" (rewrite "cos_minus_3pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (tan const-decl "real" trig_basic nil)
    (cos_minus_3pi2 formula-decl nil trig_extra nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_minus_3pi2 formula-decl nil trig_extra nil))
   nil))
 (sin_minus_pi 0
  (sin_minus_pi-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_pi")
        (("" (rewrite "cos_pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_pi formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_pi formula-decl nil sincos nil))
   nil))
 (cos_minus_pi 0
  (cos_minus_pi-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_pi")
        (("" (rewrite "sin_pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_pi formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_pi formula-decl nil sincos nil))
   nil))
 (tan_minus_pi_TCC1 0
  (tan_minus_pi_TCC1-1 nil 3269431996
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "neg_cos" ("a" "a!1-pi")) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (Tan? const-decl "bool" trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (neg_cos formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil))
   nil
   (tan_minus_pi subtype "(number_fields.-)(trig_extra.a, pi_def.pi)"
    "(trig_basic.Tan?)")))
 (tan_minus_pi 0
  (tan_minus_pi-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_minus_pi")
        (("" (rewrite "cos_minus_pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (tan const-decl "real" trig_basic nil)
    (cos_minus_pi formula-decl nil trig_extra nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_minus_pi formula-decl nil trig_extra nil))
   nil))
 (sin_minus_pi2 0
  (sin_minus_pi2-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "cos_pi2")
        (("" (rewrite "sin_pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_pi2 formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_pi2 formula-decl nil sincos nil))
   nil))
 (cos_minus_pi2 0
  (cos_minus_pi2-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_pi2")
        (("" (rewrite "sin_pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_pi2 formula-decl nil sincos nil)
    (cos_pi2 formula-decl nil sincos nil))
   nil))
 (tan_minus_pi2_TCC1 0
  (tan_minus_pi2_TCC1-1 nil 3269431996
   ("" (skolem 1 ("a"))
    (("" (flatten)
      (("" (expand "Tan?")
        (("" (lemma "cos_neg" ("a" "a-pi/2"))
          (("" (lemma "cos_shift" ("a" "a"))
            (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_neg formula-decl nil sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_shift formula-decl nil sincos nil)
    (Tan? const-decl "bool" trig_basic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil
   (tan_minus_pi2 subtype
    "(number_fields.-)(trig_extra.a, number_fields./(pi_def.pi, 2))"
    "(trig_basic.Tan?)")))
 (tan_minus_pi2 0
  (tan_minus_pi2-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_minus_pi2")
        (("" (rewrite "cos_minus_pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (tan const-decl "real" trig_basic nil)
    (cos_minus_pi2 formula-decl nil trig_extra nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_minus_pi2 formula-decl nil trig_extra nil))
   nil))
 (sin_2pi_minus 0
  (sin_2pi_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_2pi")
        (("" (rewrite "cos_2pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_2pi formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_2pi formula-decl nil sincos nil))
   nil))
 (cos_2pi_minus 0
  (cos_2pi_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_2pi")
        (("" (rewrite "sin_2pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_2pi formula-decl nil sincos nil)
    (cos_2pi formula-decl nil sincos nil))
   nil))
 (tan_2pi_minus_TCC1 0
  (tan_2pi_minus_TCC1-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "Tan?")
      (("" (rewrite "cos_2pi_minus") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (Tan? const-decl "bool" trig_basic nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_2pi_minus formula-decl nil trig_extra nil))
   nil
   (tan_2pi_minus subtype
    "(number_fields.-)(number_fields.*(2, pi_def.pi), trig_extra.a)"
    "(trig_basic.Tan?)")))
 (tan_2pi_minus 0
  (tan_2pi_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_2pi_minus")
        (("" (rewrite "cos_2pi_minus") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (tan const-decl "real" trig_basic nil)
    (cos_2pi_minus formula-decl nil trig_extra nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_2pi_minus formula-decl nil trig_extra nil))
   nil))
 (sin_3pi2_minus 0
  (sin_3pi2_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_3pi2")
        (("" (rewrite "cos_3pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_3pi2 formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_3pi2 formula-decl nil sincos nil))
   nil))
 (cos_3pi2_minus 0
  (cos_3pi2_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_3pi2")
        (("" (rewrite "sin_3pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_3pi2 formula-decl nil sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_3pi2 formula-decl nil sincos nil))
   nil))
 (tan_3pi2_minus_TCC1 0
  (tan_3pi2_minus_TCC1-1 nil 3269431996
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "cos_sin" ("a" "3*pi/2-a!1"))
        (("" (lemma "sin_period" ("a" "-a!1" "j" "1"))
          (("" (replace -1 -2 rl)
            (("" (rewrite "sin_neg" -2) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Tan? const-decl "bool" trig_basic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_period formula-decl nil sincos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sin_neg formula-decl nil sincos_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_sin formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil))
   nil
   (tan_3pi2_minus subtype
    "(number_fields.-)(number_fields./(number_fields.*(3, pi_def.pi), 2), trig_extra.a)"
    "(trig_basic.Tan?)")))
 (tan_3pi2_minus 0
  (tan_3pi2_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_3pi2_minus")
        (("" (rewrite "cos_3pi2_minus") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (tan const-decl "real" trig_basic nil)
    (cos_3pi2_minus formula-decl nil trig_extra nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_3pi2_minus formula-decl nil trig_extra nil))
   nil))
 (sin_pi_minus 0
  (sin_pi_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_pi")
        (("" (rewrite "cos_pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_pi formula-decl nil sincos nil) (sin_pi formula-decl nil sincos nil))
   nil))
 (cos_pi_minus 0
  (cos_pi_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_pi")
        (("" (rewrite "sin_pi") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_pi formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi formula-decl nil sincos nil))
   nil))
 (tan_pi_minus_TCC1 0
  (tan_pi_minus_TCC1-1 nil 3269431996
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "neg_cos" ("a" "-a!1"))
        (("" (rewrite "cos_neg" -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (cos_neg formula-decl nil sincos_def nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_cos formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (tan_pi_minus subtype "(number_fields.-)(pi_def.pi, trig_extra.a)"
    "(trig_basic.Tan?)")))
 (tan_pi_minus 0
  (tan_pi_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_pi_minus")
        (("" (rewrite "cos_pi_minus") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((tan const-decl "real" trig_basic nil)
    (cos_pi_minus formula-decl nil trig_extra nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_pi_minus formula-decl nil trig_extra nil))
   nil))
 (sin_pi2_minus 0
  (sin_pi2_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_minus")
      (("" (rewrite "sin_pi2")
        (("" (rewrite "cos_pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_pi2 formula-decl nil sincos nil)
    (sin_pi2 formula-decl nil sincos nil))
   nil))
 (cos_pi2_minus 0
  (cos_pi2_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_minus")
      (("" (rewrite "cos_pi2")
        (("" (rewrite "sin_pi2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_minus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_pi2 formula-decl nil sincos nil)
    (cos_pi2 formula-decl nil sincos nil))
   nil))
 (tan_pi2_minus_TCC1 0
  (tan_pi2_minus_TCC1-1 nil 3269431996
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "sin_cos" ("a" "-a!1"))
        (("" (rewrite "sin_neg" -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (Tan? const-decl "bool" trig_basic nil)
    (sin_neg formula-decl nil sincos_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_cos formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (tan_pi2_minus subtype
    "(number_fields.-)(number_fields./(pi_def.pi, 2), trig_extra.a)"
    "(trig_basic.Tan?)")))
 (tan_pi2_minus 0
  (tan_pi2_minus-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sin_pi2_minus")
        (("" (rewrite "cos_pi2_minus") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (tan const-decl "real" trig_basic nil)
    (cos_pi2_minus formula-decl nil trig_extra nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_pi2_minus formula-decl nil trig_extra nil))
   nil))
 (sin_times_cos 0
  (sin_times_cos-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "sin_plus")
      (("" (rewrite "sin_minus") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sin_plus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_minus formula-decl nil sincos nil))
   nil))
 (cos_times_cos 0
  (cos_times_cos-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_plus")
      (("" (rewrite "cos_minus") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cos_plus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_minus formula-decl nil sincos nil))
   nil))
 (sin_times_sin 0
  (sin_times_sin-1 nil 3269431996
   ("" (skosimp)
    (("" (rewrite "cos_plus")
      (("" (rewrite "cos_minus") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cos_plus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_minus formula-decl nil sincos nil))
   nil))
 (sin_sum 0
  (sin_sum-1 nil 3269431996
   ("" (skosimp*)
    (("" (lemma "sin_plus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
      (("" (lemma "sin_minus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_plus formula-decl nil sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sin_minus formula-decl nil sincos nil))
   nil))
 (sin_diff 0
  (sin_diff-1 nil 3269431996
   ("" (skosimp*)
    (("" (lemma "sin_plus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
      (("" (lemma "sin_minus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_plus formula-decl nil sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sin_minus formula-decl nil sincos nil))
   nil))
 (cos_sum 0
  (cos_sum-1 nil 3269431996
   ("" (skosimp*)
    (("" (lemma "cos_plus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
      (("" (lemma "cos_minus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
        (("" (assert)
          (("" (replace -1)
            (("" (replace -2)
              (("" (assert)
                (("" (name-replace "K1" "cos((a!1 + b!1) / 2)")
                  (("" (name-replace "K2" "cos((a!1 - b!1) / 2)")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_plus formula-decl nil sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_minus formula-decl nil sincos nil))
   nil))
 (cos_diff 0
  (cos_diff-1 nil 3269431996
   ("" (skosimp*)
    (("" (lemma "cos_plus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
      (("" (lemma "cos_minus" ("a" "(a!1+b!1)/2" "b" "(a!1-b!1)/2"))
        (("" (replace -1)
          (("" (replace -2)
            (("" (assert)
              (("" (name-replace "K1" "sin((a!1 + b!1) / 2)")
                (("" (name-replace "K2" "sin((a!1 - b!1) / 2)")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_plus formula-decl nil sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sin const-decl "real" sincos_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (cos_minus formula-decl nil sincos nil))
   nil))
 (tan_diff_TCC1 0
  (tan_diff_TCC1-1 nil 3269431996
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (rewrite "zero_times3") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos const-decl "real" sincos_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (zero_times3 formula-decl nil real_props nil))
   nil
   (tan_diff subtype
    "(number_fields.*(sincos_def.cos(trig_extra.a), sincos_def.cos(trig_extra.b)))"
    "nznum")))
 (tan_diff 0
  (tan_diff-2 "" 3790092100
   ("" (skosimp*)
    (("" (expand "tan")
      ((""
        (case "(sin(a!1) / cos(a!1) - sin(b!1) / cos(b!1) = sin(a!1 - b!1)
                                             /
                                             (cos(a!1)
                                              *
                                              cos(b!1))) = (sin(a!1 - b!1)
                                                            /
                                                            (cos(a!1)
                                                             *
                                                             cos
                                                             (b!1)) = sin(a!1)
                                                                      /
                                                                      cos(a!1)
                                                                      -
                                                                      sin(b!1)
                                                                      /
                                                                      cos(b!1))")
        (("1" (replace -1 1 :hide? t)
          (("1" (rewrite "div_cancel3" 1)
            (("1" (rewrite "times_div1" 1)
              (("1"
                (case-replace
                 "(cos(a!1) * cos(b!1) * sin(a!1)) / cos(a!1) = cos(b!1) * sin(a!1)")
                (("1"
                  (case-replace
                   "cos(a!1) * cos(b!1) * (sin(b!1) / cos(b!1)) = cos(a!1) * sin(b!1)")
                  (("1" (hide -1 -2)
                    (("1" (rewrite "sin_minus") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (tan_diff-1 nil 3269431996
   ("" (skosimp*)
    (("" (expand "tan")
      ((""
        (case "(sin(a!1) / cos(a!1) - sin(b!1) / cos(b!1) = sin(a!1 - b!1)
                                             /
                                             (cos(a!1)
                                              *
                                              cos(b!1))) = (sin(a!1 - b!1)
                                                            /
                                                            (cos(a!1)
                                                             *
                                                             cos
                                                             (b!1)) = sin(a!1)
                                                                      /
                                                                      cos(a!1)
                                                                      -
                                                                      sin(b!1)
                                                                      /
                                                                      cos(b!1))")
        (("1" (replace -1 1 :hide? t)
          (("1" (rewrite "div_cancel3" 1)
            (("1" (rewrite "times_div1" 1)
              (("1"
                (case-replace
                 "(cos(a!1) * cos(b!1) * sin(a!1)) / cos(a!1) = cos(b!1) * sin(a!1)")
                (("1"
                  (case-replace
                   "cos(a!1) * cos(b!1) * (sin(b!1) / cos(b!1)) = cos(a!1) * sin(b!1)")
                  (("1" (hide -1 -2)
                    (("1" (rewrite "sin_minus") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) (("2" (assert) nil nil)) nil)
         ("3" (assert)
          (("3" (assert)
            (("3" (hide 2)
              (("3" (expand "Tan?")
                (("3" (lemma "zero_times3")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (assert)
          (("4" (assert) (("4" (expand "Tan?") (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (assert)
          (("5" (assert) (("5" (expand "Tan?") (("5" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil)
    (times_div1 formula-decl nil real_props nil)
    (sin_minus formula-decl nil sincos nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin const-decl "real" sincos_def nil)
    (cos const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil))
 (sq_sin 0
  (sq_sin-1 nil 3269431996
   ("" (skosimp)
    (("" (lemma "sin2_cos2")
      (("" (inst -1 "a!1")
        (("" (replace -1 * rl)
          (("" (hide -1)
            (("" (lemma "cos_plus")
              (("" (inst -1 "a!1" "a!1")
                (("" (replace -1 * lr)
                  (("" (hide -1)
                    (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin2_cos2 formula-decl nil sincos_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_plus formula-decl nil sincos nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (sq_cos 0
  (sq_cos-1 nil 3269431996
   ("" (skosimp)
    (("" (lemma "sin2_cos2")
      (("" (inst -1 "a!1")
        (("" (replace -1 * rl)
          (("" (hide -1)
            (("" (lemma "cos_plus")
              (("" (inst -1 "a!1" "a!1")
                (("" (replace -1 * lr)
                  (("" (hide -1)
                    (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin2_cos2 formula-decl nil sincos_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_plus formula-decl nil sincos nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (sin_half_zeroes 0
  (sin_half_zeroes-1 nil 3269431996
   ("" (skosimp)
    (("" (prop)
      (("1" (lemma "sq_sin")
        (("1" (inst -1 "a!1/2")
          (("1" (replace -2 * lr)
            (("1" (expand "sq") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "sq_sin")
        (("2" (inst -1 "a!1/2")
          (("2" (replace -2 * lr)
            (("2" (assert)
              (("2" (lemma "sq_eq_0")
                (("2" (inst -1 "sin(a!1/2)") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sq_sin formula-decl nil trig_extra nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (sin const-decl "real" sincos_def nil)
    (sq_eq_0 formula-decl nil sq reals))
   nil))
 (cos_half_zeroes 0
  (cos_half_zeroes-1 nil 3269431996
   ("" (skosimp)
    (("" (prop)
      (("1" (lemma "sq_cos")
        (("1" (inst -1 "a!1/2")
          (("1" (replace -2 * lr)
            (("1" (expand "sq") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (lemma "sq_cos")
        (("2" (inst -1 "a!1/2")
          (("2" (replace -2 * lr)
            (("2" (lemma "sq_eq_0")
              (("2" (inst -1 "cos(a!1/2)") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sq_cos formula-decl nil trig_extra nil)
    (sq_eq_0 formula-decl nil sq reals)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (cos const-decl "real" sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (cos_half_zeroes2 0
  (cos_half_zeroes2-1 nil 3269431996
   ("" (skosimp)
    (("" (lemma "sin_plus")
      (("" (inst -1 "a!1/2" "a!1/2")
        (("" (replace -2 * lr) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin_plus formula-decl nil sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (sq_tan_TCC1 0
  (sq_tan_TCC1-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "Tan?")
      (("" (prop)
        (("" (rewrite "cos_half_zeroes" :dir rl) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_half_zeroes formula-decl nil trig_extra nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil (sq_tan subtype "trig_extra.a" "(trig_basic.Tan?)")))
 (sq_tan 0
  (sq_tan-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (rewrite "sq_div")
        (("1" (rewrite "sq_sin")
          (("1" (rewrite "sq_cos")
            (("1" (assert)
              (("1" (rewrite "div_div2")
                (("1" (rewrite "div_cancel1") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide 3)
          (("2" (lemma "sq_cos")
            (("2" (inst -1 "a!1")
              (("2" (prop)
                (("2" (replace -2 * lr)
                  (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (tan const-decl "real" trig_basic nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_sin formula-decl nil trig_extra nil)
    (div_cancel1 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_cos formula-decl nil trig_extra nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos const-decl "real" sincos_def nil)
    (sin const-decl "real" sincos_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_div formula-decl nil sq reals))
   nil))
 (sin_half_TCC1 0
  (sin_half_TCC1-1 nil 3269431996
   ("" (skosimp*) (("" (typepred "cos(a!1)") (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (sin_half subtype
    "number_fields./(((number_fields.-)(1, sincos_def.cos(trig_extra.a))), 2)"
    "nonneg_real")))
 (sin_half_TCC2 0
  (sin_half_TCC2-1 nil 3269431996
   ("" (skosimp*) (("" (typepred "cos(a!1)") (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil
   (sin_half subtype
    "number_fields./(((number_fields.-)(1, sincos_def.cos(trig_extra.a))), 2)"
    "nonneg_real")))
 (sin_half 0
  (sin_half-1 nil 3269431996
   ("" (skosimp*)
    (("" (lemma "cos_2a_sin")
      (("" (inst -1 "a!1/2")
        (("" (case-replace "2 * (a!1 / 2) = a!1")
          (("1" (hide -1)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1"
                  (case-replace
                   "(2 * (sin(a!1 / 2) * sin(a!1 / 2)) / 2) = sq(sin(a!1/2))")
                  (("1" (hide -1)
                    (("1" (prop)
                      (("1" (rewrite "sqrt_sq")
                        (("1" (hide 2) (("1" (rewrite "sin_ge_0") nil nil))
                          nil))
                        nil)
                       ("2" (rewrite "sqrt_sq_abs")
                        (("2" (expand "abs")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("2" (lemma "sin_le_0")
                                (("2" (inst -1 "a!1/2")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_2a_sin formula-decl nil trig_basic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sin const-decl "real" sincos_def nil)
    (sin_ge_0 formula-decl nil trig_ineq nil)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_le_0 formula-decl nil trig_ineq nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil))
 (cos_half_TCC1 0
  (cos_half_TCC1-1 nil 3269431996
   ("" (skosimp*) (("" (typepred "cos(a!1)") (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (cos_half subtype
    "number_fields./(((number_fields.+)(1, sincos_def.cos(trig_extra.a))), 2)"
    "nonneg_real")))
 (cos_half_TCC2 0
  (cos_half_TCC2-1 nil 3269431996
   ("" (skosimp*) (("" (typepred "cos(a!1)") (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil
   (cos_half subtype
    "number_fields./(((number_fields.+)(1, sincos_def.cos(trig_extra.a))), 2)"
    "nonneg_real")))
 (cos_half_TCC3 0
  (cos_half_TCC3-1 nil 3269431996
   ("" (skosimp*) (("" (typepred "cos(a!1)") (("" (assert) nil nil)) nil))
    nil)
   ((cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil
   (cos_half subtype
    "number_fields./(((number_fields.+)(1, sincos_def.cos(trig_extra.a))), 2)"
    "nonneg_real")))
 (cos_half 0
  (cos_half-1 nil 3269431996
   ("" (skosimp*)
    (("" (lemma "cos_2a_sin")
      (("" (inst -1 "a!1/2")
        (("" (case-replace "2 * (a!1 / 2) = a!1")
          (("1" (hide -1)
            (("1" (replace -1)
              (("1" (hide -1)
                (("1" (assert)
                  (("1"
                    (case-replace
                     "sin(a!1 / 2) * sin(a!1 / 2) = sq(sin(a!1/2))")
                    (("1"
                      (case-replace
                       "(2 - 2 * sq(sin(a!1 / 2))) / 2 = (1 - sq(sin(a!1 / 2)))")
                      (("1" (hide -1)
                        (("1" (rewrite "cos2" :dir rl)
                          (("1" (ground)
                            (("1" (case-replace "cos(a!1/2) >= 0")
                              (("1" (rewrite "sqrt_sq") nil nil)
                               ("2" (hide 2)
                                (("2" (rewrite "cos_ge_0") nil nil)) nil))
                              nil)
                             ("2" (case "cos(a!1/2) <= 0")
                              (("1" (rewrite "sqrt_sq_abs")
                                (("1" (expand "abs")
                                  (("1" (lift-if) (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (rewrite "cos_le_0") nil nil)) nil))
                              nil)
                             ("3" (case "cos(a!1/2) >= 0")
                              (("1" (rewrite "sqrt_sq") nil nil)
                               ("2" (hide 2)
                                (("2" (rewrite "cos_ge_0_3pi2") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (assert) nil nil)) nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "sq") (("2" (propax) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_2a_sin formula-decl nil trig_basic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos2 formula-decl nil sincos_def nil)
    (cos_ge_0_3pi2 formula-decl nil trig_ineq nil)
    (<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (cos_le_0 formula-decl nil trig_ineq nil)
    (cos const-decl "real" sincos_def nil)
    (sqrt_sq formula-decl nil sqrt reals)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_ge_0 formula-decl nil trig_ineq nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin const-decl "real" sincos_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil))
 (tan_half_TCC1 0
  (tan_half_TCC1-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "Tan?")
      (("" (lemma "cos_2a")
        (("" (inst -1 "a!1/2")
          (("" (replace -1 * lr)
            (("" (hide -1)
              (("" (prop)
                (("" (replace -1 * lr)
                  (("" (assert)
                    (("" (lemma "sin2")
                      (("" (inst -1 "a!1/2")
                        (("" (expand "sq")
                          (("" (replace -1 * lr)
                            (("" (hide -1) (("" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin2 formula-decl nil sincos_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_2a formula-decl nil trig_basic nil))
   nil
   (tan_half subtype "number_fields./(trig_extra.a, 2)" "(trig_basic.Tan?)")))
 (tan_half_TCC2 0
  (tan_half_TCC2-1 nil 3269431996 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil
   (tan_half subtype "((number_fields.+)(1, sincos_def.cos(trig_extra.a)))"
    "nznum")))
 (tan_half 0
  (tan_half-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "tan")
      (("" (lemma "sin_plus")
        (("" (inst -1 "a!1/2" "a!1/2")
          (("" (replace -1 * lr)
            (("" (hide -1)
              (("" (lemma "sq_cos")
                (("" (inst -1 "a!1/2")
                  (("" (rewrite "div_cancel1")
                    (("" (lemma "div_cancel1")
                      (("" (inst -1 "2" "1+cos(a!1)")
                        (("" (replace -2 * rl)
                          (("" (replace -1 * rl)
                            (("" (hide -2 -1)
                              (("" (expand "sq") (("" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tan const-decl "real" trig_basic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sq const-decl "nonneg_real" sq reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sq_cos formula-decl nil trig_extra nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sin_plus formula-decl nil sincos nil))
   nil))
 (tan_half2_TCC1 0
  (tan_half2_TCC1-1 nil 3269431996
   ("" (skosimp)
    (("" (expand "Tan?")
      (("" (lemma "sin_2a")
        (("" (inst -1 "a!1/2")
          (("" (replace -1 * lr)
            (("" (hide -1)
              (("" (prop) (("" (replace -1 * lr) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_2a formula-decl nil trig_basic nil))
   nil
   (tan_half2 subtype "number_fields./(trig_extra.a, 2)"
    "(trig_basic.Tan?)")))
 (tan_half2 0
  (tan_half2-1 nil 3269431996
   ("" (skosimp*)
    (("" (name "BB" "a!1/2")
      (("" (replace -1)
        (("" (case-replace "a!1 = 2*BB")
          (("1" (hide -1 -2)
            (("1" (rewrite "sin_2a")
              (("1" (rewrite "cos_2a_sin")
                (("1" (assert)
                  (("1" (expand "tan") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_2a formula-decl nil trig_basic nil)
    (tan const-decl "real" trig_basic nil)
    (cos_2a_sin formula-decl nil trig_basic nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil))
 (sin_3a 0
  (sin_3a-1 nil 3269431996
   ("" (skosimp)
    (("" (lemma "sin_plus")
      (("" (inst -1 "a!1" "2*a!1")
        (("" (rewrite "sin_2a")
          (("" (rewrite "cos_2a")
            (("" (assert)
              (("" (replace -1)
                (("" (assert)
                  (("" (hide -1)
                    (("" (expand "expt")
                      (("" (expand "expt")
                        (("" (expand "expt")
                          (("" (expand "expt")
                            (("" (assert)
                              (("" (lemma "sin_plus")
                                (("" (inst -1 "a!1" "2*a!1")
                                  (("" (rewrite "sin_2a")
                                    (("" (rewrite "cos_2a")
                                      ((""
                                        (assert)
                                        ((""
                                          (lemma "cos2")
                                          ((""
                                            (inst?)
                                            ((""
                                              (expand "sq")
                                              ((""
                                                (replace -1)
                                                (("" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_plus formula-decl nil sincos nil)
    (sin_2a formula-decl nil trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (expt def-decl "real" exponentiation nil)
    (cos2 formula-decl nil sincos_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_2a formula-decl nil trig_basic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (cos_3a 0
  (cos_3a-1 nil 3269431996
   ("" (skosimp)
    (("" (lemma "cos_plus")
      (("" (inst -1 "a!1" "2*a!1")
        (("" (rewrite "sin_2a")
          (("" (assert)
            (("" (replace -1)
              (("" (hide -1)
                (("" (expand "expt")
                  (("" (expand "expt")
                    (("" (expand "expt")
                      (("" (expand "expt")
                        (("" (lemma "cos2")
                          (("" (inst?)
                            (("" (expand "sq")
                              (("" (replace -1)
                                (("" (rewrite "cos_2a")
                                  (("" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_plus formula-decl nil sincos nil)
    (sin_2a formula-decl nil trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (expt def-decl "real" exponentiation nil)
    (cos2 formula-decl nil sincos_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (cos_2a formula-decl nil trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (sin_eq_sin 0
  (sin_eq_sin-2 "" 3790092108
   ("" (skosimp*)
    (("" (prop)
      (("1" (case "sin(a!1) - sin(b!1) = 0")
        (("1" (hide -2)
          (("1" (rewrite "sin_diff")
            (("1" (rewrite "zero_times3")
              (("1" (rewrite "zero_times3")
                (("1" (prop)
                  (("1" (rewrite "cos_eq_0")
                    (("1" (skosimp*)
                      (("1" (inst + "i!1") (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "sin_eq_0")
                    (("2" (skosimp*)
                      (("2" (lemma "both_sides_times1")
                        (("2" (inst -1 "2" "(a!1 - b!1) / 2" "i!1 * pi")
                          (("2" (replace -1 -2 rl t)
                            (("2" (rewrite "div_cancel2" -1)
                              (("2" (inst + "i!1")
                                (("2" (flatten) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (skosimp*)
        (("2" (prop)
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (rewrite "sin_plus")
                (("1" (assert)
                  (("1" (lemma "sin_k_pi")
                    (("1" (inst -1 "2*k!1")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "cos_2k_pi")
                            (("1" (inst -1 "k!1")
                              (("1" (replace -1) (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (hide -1)
              (("2" (lemma "sin_minus")
                (("2" (inst -1 "pi + 2*k!1*pi" "b!1")
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (lemma "sin_k_pi")
                        (("2" (inst -1 "2*k!1+1")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2" (hide -1)
                                (("2" (assert)
                                  (("2" (rewrite "cos_plus")
                                    (("2" (assert)
                                      (("2"
                                        (lemma "cos_2k_pi")
                                        (("2"
                                          (inst -1 "k!1")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "sin_k_pi")
                                                (("2"
                                                  (inst -1 "2*k!1")
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite "cos_pi")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin_eq_sin-1 nil 3269431996
   ("" (skosimp*)
    (("" (prop)
      (("1" (case "sin(a!1) - sin(b!1) = 0")
        (("1" (hide -2)
          (("1" (rewrite "sin_diff")
            (("1" (rewrite "zero_times3")
              (("1" (rewrite "zero_times3")
                (("1" (prop)
                  (("1" (rewrite "cos_eq_0")
                    (("1" (skosimp*)
                      (("1" (inst + "i!1")
                        (("1" (assert)
                          (("1" (flatten) (("1" (ground) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "sin_eq_0")
                    (("2" (skosimp*)
                      (("2" (lemma "both_sides_times1")
                        (("2" (inst -1 "2" "(a!1 - b!1) / 2" "i!1 * pi")
                          (("2" (replace -1 -2 rl t)
                            (("2" (rewrite "div_cancel2" -1)
                              (("2" (inst + "i!1")
                                (("2" (flatten) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (skosimp*)
        (("2" (prop)
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (rewrite "sin_plus")
                (("1" (assert)
                  (("1" (lemma "sin_k_pi")
                    (("1" (inst -1 "2*k!1")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "cos_2k_pi")
                            (("1" (inst -1 "k!1")
                              (("1" (replace -1) (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (hide -1)
              (("2" (lemma "sin_minus")
                (("2" (inst -1 "pi + 2*k!1*pi" "b!1")
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (lemma "sin_k_pi")
                        (("2" (inst -1 "2*k!1+1")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2" (hide -1)
                                (("2" (assert)
                                  (("2" (rewrite "cos_plus")
                                    (("2" (assert)
                                      (("2"
                                        (lemma "cos_2k_pi")
                                        (("2"
                                          (inst -1 "k!1")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "sin_k_pi")
                                                (("2"
                                                  (inst -1 "2*k!1")
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite "cos_pi")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_times3 formula-decl nil real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_eq_0 formula-decl nil sincos nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (sin_eq_0 formula-decl nil sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sin_diff formula-decl nil trig_extra nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin const-decl "real" sincos_def nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cos_2k_pi formula-decl nil sincos nil)
    (sin_k_pi formula-decl nil sincos nil)
    (sin_plus formula-decl nil sincos nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi formula-decl nil sincos nil)
    (cos_plus formula-decl nil sincos nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_minus formula-decl nil sincos nil))
   nil))
 (cos_eq_cos 0
  (cos_eq_cos-1 nil 3269431996
   ("" (skosimp*)
    (("" (prop)
      (("1" (case-replace "cos(a!1)-cos(b!1) = 0")
        (("1" (hide -2)
          (("1" (rewrite "cos_diff")
            (("1" (rewrite "zero_times3")
              (("1" (rewrite "zero_times3")
                (("1" (prop)
                  (("1" (rewrite "sin_eq_0")
                    (("1" (skosimp*)
                      (("1" (inst + "i!1") (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (rewrite "sin_eq_0")
                    (("2" (skosimp*)
                      (("2" (inst + "i!1")
                        (("2" (flatten) (("2" (ground) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (skosimp*)
        (("2" (prop)
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (rewrite "cos_plus")
                (("1" (lemma "cos_2k_pi")
                  (("1" (inst -1 "k!1")
                    (("1" (replace -1)
                      (("1" (hide -1)
                        (("1" (lemma "sin_k_pi")
                          (("1" (inst -1 "2*k!1")
                            (("1" (replace -1)
                              (("1" (hide -1) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -1)
            (("2" (hide -1)
              (("2" (rewrite "cos_plus")
                (("2" (lemma "sin_k_pi")
                  (("2" (inst -1 "2*k!1")
                    (("2" (replace -1)
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2" (lemma "cos_2k_pi")
                            (("2" (inst -1 "k!1")
                              (("2" (replace -1)
                                (("2" (assert)
                                  (("2" (hide -1)
                                    (("2" (rewrite "cos_neg") nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (sin const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_times3 formula-decl nil real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (sin_eq_0 formula-decl nil sincos nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_diff formula-decl nil trig_extra nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos const-decl "real" sincos_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_2k_pi formula-decl nil sincos nil)
    (sin_k_pi formula-decl nil sincos nil)
    (integer nonempty-type-from-decl nil integers nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cos_plus formula-decl nil sincos nil)
    (cos_neg formula-decl nil sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil))
 (tan_eq_tan 0
  (tan_eq_tan-2 "" 3790092109
   ("" (skosimp*)
    (("" (prop)
      (("1" (case-replace "tan(a!1) - tan(b!1) = 0")
        (("1" (hide -2)
          (("1" (rewrite "tan_diff")
            (("1" (rewrite "div_eq_zero")
              (("1" (rewrite "sin_eq_0")
                (("1" (skosimp*)
                  (("1" (inst + "i!1") (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (skosimp*)
        (("2" (replace -1)
          (("2" (hide -1)
            (("2" (expand "tan")
              (("2" (expand "Tan?")
                (("2" (rewrite "sin_plus")
                  (("2" (rewrite "cos_plus")
                    (("2" (rewrite "sin_k_pi") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (tan_eq_tan-1 nil 3269431996
   ("" (skosimp*)
    (("" (prop)
      (("1" (case-replace "tan(a!1) - tan(b!1) = 0")
        (("1" (hide -2)
          (("1" (rewrite "tan_diff")
            (("1" (rewrite "div_eq_zero")
              (("1" (rewrite "sin_eq_0")
                (("1" (skosimp*)
                  (("1" (inst + "i!1") (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (hide -1 2)
                (("2" (expand "Tan?")
                  (("2" (lemma "zero_times3")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil)
       ("2" (skosimp*)
        (("2" (replace -1)
          (("2" (hide -1)
            (("2" (expand "tan")
              (("2" (expand "Tan?")
                (("2" (rewrite "sin_plus")
                  (("2" (rewrite "cos_plus")
                    (("2" (rewrite "sin_k_pi") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def nil)
    (cos const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_eq_zero formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (sin_eq_0 formula-decl nil sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (tan_diff formula-decl nil trig_extra nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil)
    (Tan? const-decl "bool" trig_basic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_plus formula-decl nil sincos nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sin_k_pi formula-decl nil sincos nil)
    (cos_plus formula-decl nil sincos nil))
   nil))
 (sin_cos_eq 0
  (sin_cos_eq-2 nil 3409057622
   ("" (skosimp*)
    (("" (lemma "sin_eq_sin")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "cos_eq_cos")
            (("" (inst?)
              (("" (assert)
                (("" (skosimp*)
                  (("" (case-replace "k!1 = 0")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "k!2 = 0")
                      (("1" (assert)
                        (("1" (case-replace "k!1 <= -1")
                          (("1" (mult-by -1 "2*pi")
                            (("1" (case-replace "k!1 >= 1")
                              (("1" (mult-by -1 "2*pi")
                                (("1" (ground) nil nil)) nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case-replace "k!1 >= 1")
                              (("1" (mult-by -1 "2*pi")
                                (("1" (assert) nil nil)) nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case-replace "k!1 >= 1")
                        (("1" (mult-by -1 "2*pi")
                          (("1" (assert)
                            (("1" (case-replace "k!1 <= -1")
                              (("1" (mult-by -1 "2*pi")
                                (("1" (assert) nil nil)) nil)
                               ("2" (assert)
                                (("2" (ground)
                                  (("1" (case-replace "k!2 >= 1")
                                    (("1" (mult-by 1 "pi")
                                      (("1"
                                        (mult-by -1 "2*pi")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert)
                                      (("2"
                                        (case-replace "k!2 <= -1")
                                        (("1"
                                          (mult-by -1 "2*pi")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but (-1 -3))
                                    (("2" (replace -1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (case-replace
                                           "(2*k!2+1) * pi   =  2 * (k!1 * pi)")
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (div-by -1 "pi")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "2 * (k!1 * pi) / pi = 2*k!1")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case-replace "k!1 <= -1")
                          (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_eq_sin formula-decl nil trig_extra nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_eq_cos formula-decl nil trig_extra nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil)
  (sin_cos_eq-1 nil 3409057569
   (";;; Proof sin_eq_sin-1 for formula trig_extra.sin_eq_sin" (skosimp*)
    ((";;; Proof sin_eq_sin-1 for formula trig_extra.sin_eq_sin" (prop)
      (("1" (case "sin(a!1) - sin(b!1) = 0")
        (("1" (hide -2)
          (("1" (rewrite "sin_diff")
            (("1" (rewrite "zero_times3")
              (("1" (rewrite "zero_times3")
                (("1" (prop)
                  (("1" (rewrite "cos_eq_0")
                    (("1" (skosimp*)
                      (("1" (inst + "i!1")
                        (("1" (assert)
                          (("1" (flatten) (("1" (ground) nil)))))))))))
                   ("2" (rewrite "sin_eq_0")
                    (("2" (skosimp*)
                      (("2" (lemma "both_sides_times1")
                        (("2" (inst -1 "2" "(a!1 - b!1) / 2" "i!1 * pi")
                          (("2" (replace -1 -2 rl t)
                            (("2" (rewrite "div_cancel2" -1)
                              (("2" (inst + "i!1")
                                (("2" (flatten)
                                  (("2" (assert)
                                    nil)))))))))))))))))))))))))))
         ("2" (assert) nil)))
       ("2" (skosimp*)
        (("2" (prop)
          (("1" (replace -1)
            (("1" (hide -1)
              (("1" (rewrite "sin_plus")
                (("1" (assert)
                  (("1" (lemma "sin_k_pi")
                    (("1" (inst -1 "2*k!1")
                      (("1" (replace -1)
                        (("1" (hide -1)
                          (("1" (lemma "cos_2k_pi")
                            (("1" (inst -1 "k!1")
                              (("1" (replace -1)
                                (("1" (assert) nil)))))))))))))))))))))))
           ("2" (replace -1)
            (("2" (hide -1)
              (("2" (lemma "sin_minus")
                (("2" (inst -1 "pi + 2*k!1*pi" "b!1")
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (lemma "sin_k_pi")
                        (("2" (inst -1 "2*k!1+1")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2" (hide -1)
                                (("2" (assert)
                                  (("2" (rewrite "cos_plus")
                                    (("2" (assert)
                                      (("2"
                                        (lemma "cos_2k_pi")
                                        (("2"
                                          (inst -1 "k!1")
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma "sin_k_pi")
                                                (("2"
                                                  (inst -1 "2*k!1")
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite "cos_pi")
                                                        (("2"
                                                          (assert)
                                                          nil))))))))))))))))))))))))))))))))))))))))))))))))))))))
    ";;; developed with shostak decision procedures")
   nil nil))
 (sin_eq_cos 0
  (sin_eq_cos-1 nil 3422960416
   ("" (skeep)
    (("" (lemma "cos_plus")
      (("" (inst - "a" "pi/4")
        (("" (rewrite "cos_pi4")
          (("" (rewrite "sin_pi4")
            (("" (replace -2)
              (("" (assert)
                (("" (lemma "cos_eq_0")
                  (("" (inst?)
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (inst + "i!1") (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_plus formula-decl nil sincos nil)
    (cos_pi4 formula-decl nil trig_values nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (cos_eq_0 formula-decl nil sincos nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_pi4 formula-decl nil trig_values nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil))
 (tan_eq_1 0
  (tan_eq_1-1 nil 3422960557
   ("" (skosimp*)
    (("" (expand "tan") (("" (rewrite "sin_eq_cos") nil nil)) nil)) nil)
   ((tan const-decl "real" trig_basic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_eq_cos formula-decl nil trig_extra nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (sin_eq_pm1 0
  (sin_eq_pm1-2 "" 3790092110
   ("" (skosimp*)
    (("" (ground)
      (("1" (lemma "sin_k_pi2")
        (("1" (inst -1 "i!1")
          (("1" (replace -1 * rl)
            (("1" (hide -1)
              (("1" (rewrite "sin_eq_sin")
                (("1" (skosimp*)
                  (("1" (prop)
                    (("1" (inst + "k!1") nil nil)
                     ("2" (inst + "k!1-i!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (lemma "sin_k_pi2")
          (("2" (inst -1 "2*j!1+i!1")
            (("2" (replace -2 * rl)
              (("2" (hide -2)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (lemma "expt_plus")
                      (("2" (inst -1 "2*j!1" "i!1" "-1")
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (case "(-1) ^ (2 * j!1) = 1")
                              (("1" (assert) nil nil)
                               ("2" (hide 2)
                                (("2" (rewrite "even_m1_pow") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin_eq_pm1-1 nil 3269431996
   ("" (skosimp*)
    (("" (ground)
      (("1" (lemma "sin_k_pi2")
        (("1" (inst -1 "i!1")
          (("1" (replace -1 * rl)
            (("1" (hide -1)
              (("1" (rewrite "sin_eq_sin")
                (("1" (skosimp*)
                  (("1" (prop)
                    (("1" (inst + "k!1") (("1" (assert) nil nil)) nil)
                     ("2" (inst + "k!1-i!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (lemma "sin_k_pi2")
          (("2" (inst -1 "2*j!1+i!1")
            (("2" (replace -2 * rl)
              (("2" (hide -2)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (lemma "expt_plus")
                      (("2" (inst -1 "2*j!1" "i!1" "-1")
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (case "(-1) ^ (2 * j!1) = 1")
                              (("1" (assert) nil nil)
                               ("2" (hide 2)
                                (("2" (rewrite "even_m1_pow") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sin_eq_sin formula-decl nil trig_extra nil)
    (sin_k_pi2 formula-decl nil sincos nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (^ const-decl "real" exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (cos_eq_pm1 0
  (cos_eq_pm1-2 "" 3790092111
   ("" (skosimp*)
    (("" (ground)
      (("1" (lemma "cos_k_pi")
        (("1" (inst -1 "i!1")
          (("1" (replace -1 * rl)
            (("1" (hide -1)
              (("1" (rewrite "cos_eq_cos")
                (("1" (skosimp*)
                  (("1" (prop)
                    (("1" (inst + "k!1") nil nil)
                     ("2" (inst + "k!1-i!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (lemma "cos_k_pi")
          (("2" (inst -1 "2*j!1+i!1")
            (("2" (replace -2 * rl)
              (("2" (hide -2)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (lemma "expt_plus")
                      (("2" (inst -1 "2*j!1" "i!1" "-1")
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (case "(-1) ^ (2 * j!1) = 1")
                              (("1" (assert) nil nil)
                               ("2" (hide 2)
                                (("2" (rewrite "even_m1_pow") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_eq_pm1-1 nil 3269431996
   ("" (skosimp*)
    (("" (ground)
      (("1" (lemma "cos_k_pi")
        (("1" (inst -1 "i!1")
          (("1" (replace -1 * rl)
            (("1" (hide -1)
              (("1" (rewrite "cos_eq_cos")
                (("1" (skosimp*)
                  (("1" (prop)
                    (("1" (inst + "k!1") (("1" (assert) nil nil)) nil)
                     ("2" (inst + "k!1-i!1") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (lemma "cos_k_pi")
          (("2" (inst -1 "2*j!1+i!1")
            (("2" (replace -2 * rl)
              (("2" (hide -2)
                (("2" (replace -1)
                  (("2" (hide -1)
                    (("2" (lemma "expt_plus")
                      (("2" (inst -1 "2*j!1" "i!1" "-1")
                        (("2" (replace -1)
                          (("2" (hide -1)
                            (("2" (case "(-1) ^ (2 * j!1) = 1")
                              (("1" (assert) nil nil)
                               ("2" (hide 2)
                                (("2" (rewrite "even_m1_pow") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos_eq_cos formula-decl nil trig_extra nil)
    (cos_k_pi formula-decl nil sincos nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (expt_plus formula-decl nil exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (^ const-decl "real" exponentiation nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (even_m1_pow formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (sin_plus_cos 0
  (sin_plus_cos-1 nil 3409057644
   ("" (assert)
    (("" (skosimp*) (("" (rewrite "sin_plus") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_plus formula-decl nil sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (spc_tan_prep 0
  (spc_tan_prep-1 nil 3409057669
   ("" (skosimp*)
    (("" (hide -1)
      (("" (expand "tan")
        (("" (cross-mult -1)
          (("" (invoke (case "sq(%1) = sq(%2)") (? -1 "%1 = %2"))
            (("1" (rewrite "sq_times")
              (("1" (rewrite "sq_times")
                (("1" (lemma "sin2_cos2")
                  (("1" (inst?)
                    (("1" (hide -3)
                      (("1" (prop)
                        (("1" (move-terms -1 l 1)
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1" (assert)
                                (("1" (move-terms -1 r 2)
                                  (("1" (factor -1)
                                    (("1" (replace -2 - rl)
                                      (("1"
                                        (div-by -1 "sq(C!1)")
                                        (("1" (rewrite "sq_div") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (move-terms -1 l 2)
                          (("2" (replace -1)
                            (("2" (hide -1)
                              (("2" (assert)
                                (("2" (move-terms -1 l 2)
                                  (("2" (factor -1)
                                    (("2" (replace -2 - rl)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (div-by -1 "sq(C!1)")
                                          (("2"
                                            (rewrite "sq_div")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sin const-decl "real" sincos_def nil)
    (cos const-decl "real" sincos_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (div_cancel4 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_times formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_div formula-decl nil sq reals)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (tan const-decl "real" trig_basic nil))
   nil))
 (sin_plus_cos_atan2_TCC1 0
  (sin_plus_cos_atan2_TCC1-1 nil 3422960309 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (sin_plus_cos_atan2 subtype "trig_extra.y"
    "{z: reals.real | booleans.=>(trig_extra.x = 0, z /= 0)}")))
 (sin_plus_cos_atan2 0
  (sin_plus_cos_atan2-1 nil 3422960329
   ("" (skosimp*)
    (("" (rewrite "sin_plus")
      (("" (rewrite "sin_atan2")
        (("" (rewrite "cos_atan2")
          (("" (lift-if)
            (("" (assert)
              (("" (split +)
                (("1" (flatten)
                  (("1" (replace -1)
                    (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (case-replace
                     "sqrt(1 + sq(y!1 / x!1)) = sqrt(sq(x!1)+sq(y!1))/sqrt(sq(x!1))")
                    (("1" (assert) nil nil)
                     ("2" (hide 3)
                      (("2" (lemma "sqrt_div")
                        (("2" (inst - "sq(x!1) + sq(y!1)" "sq(x!1)")
                          (("2" (split)
                            (("1" (replace -1 :dir RL)
                              (("1"
                                (invoke (case "%1=%2") (! 1 l 1) (! 1 r 1))
                                (("1" (assert) nil nil)
                                 ("2" (hide -1 2 3)
                                  (("2" (cross-mult 1)
                                    (("2" (expand "sq")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "sq_gt_0") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 3)
                      (("3" (rewrite "sqrt_sq_abs")
                        (("3" (expand "abs")
                          (("3" (lift-if) (("3" (assert) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_plus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil) (atan2 const-decl "real" atan2 nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (nil application-judgement "nnreal_lt_2pi" atan2 nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cos_atan2 formula-decl nil atan2 nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sqrt_sq_abs formula-decl nil sqrt reals)
    (sq_gt_0 formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (sqrt_div formula-decl nil sqrt reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_0 formula-decl nil sq reals) (sqrt_sq formula-decl nil sqrt reals)
    (sqrt_sq_neg formula-decl nil sqrt reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_atan2 formula-decl nil atan2 nil))
   nil)))


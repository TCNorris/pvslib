(trig_basic
 (sin_2a 0
  (sin_2a-1 nil 3265007761
   ("" (skosimp*)
    (("" (lemma "sin_plus" ("a" "a!1" "b" "a!1")) (("" (assert) nil nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_plus formula-decl nil sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   shostak))
 (cos_2a 0
  (cos_2a-1 nil 3265007796
   ("" (skosimp*)
    (("" (lemma "cos_plus" ("a" "a!1" "b" "a!1")) (("" (assert) nil nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_plus formula-decl nil sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil))
   shostak))
 (cos_2a_cos 0
  (cos_2a_cos-1 nil 3265007818
   ("" (skosimp*)
    (("" (rewrite "cos_2a")
      (("" (rewrite "sq_rew")
        (("" (rewrite "sq_rew")
          (("" (lemma "sin2_cos2" ("a" "a!1"))
            (("" (expand "sq") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_2a formula-decl nil trig_basic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin const-decl "real" sincos_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (sq_rew formula-decl nil sq reals) (cos const-decl "real" sincos_def nil))
   shostak))
 (cos_2a_sin 0
  (cos_2a_sin-1 nil 3265007915
   ("" (skosimp*)
    (("" (lemma "sin2_cos2" ("a" "a!1"))
      (("" (rewrite "cos_2a") (("" (expand "sq") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_2a formula-decl nil trig_basic nil))
   shostak))
 (trig_eq_prep 0
  (trig_eq_prep-1 nil 3707574797
   ("" (skeep)
    (("" (case "FORALL (x:real): EXISTS (n:int): x-1 <= n AND n <= x")
      (("1" (inst -1 "r/(2*pi)")
        (("1" (skeep)
          (("1" (inst 1 "-n")
            (("1" (move-terms -1 l 2)
              (("1" (cross-mult -1)
                (("1" (cross-mult -2)
                  (("1" (move-terms -2 l)
                    (("1" (move-terms -1 r 1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (inst 1 "floor(x)")
            (("2" (split) (("1" (assert) nil nil) ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil))
   nil))
 (sin_eq_1 0
  (sin_eq_1-3 nil 3707575507
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "trig_eq_prep")
          (("1" (inst -1 "a")
            (("1" (skeep)
              (("1" (lemma "sin_period")
                (("1" (inst -1 "a" "i")
                  (("1" (replaces -1 -4)
                    (("1" (mult-eq -3 -3)
                      (("1" (lemma "sin2_cos2")
                        (("1" (inst -1 "a + 2 * i * pi")
                          (("1" (expand "sq")
                            (("1" (replace -2 -1)
                              (("1" (move-terms -1 l 2)
                                (("1" (assert)
                                  (("1" (cancel-by -1 "cos(2 * (i * pi) + a)")
                                    (("1" (lemma "cos_eq_0_2pi")
                                      (("1"
                                        (inst -1 "a+2*i*pi")
                                        (("1"
                                          (replace -5 -1)
                                          (("1"
                                            (replace -6 -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (hide-all-but (-1 1))
                                                  (("1"
                                                    (inst 1 "-i")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-1 -8))
                                                  (("2"
                                                    (replace -1 -2)
                                                    (("2"
                                                      (lemma "sin_3pi2")
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (lemma "sin_period")
            (("2" (inst -1 "a" "-i")
              (("2" (replace -1 1)
                (("2" (replace -2 1)
                  (("2" (assert)
                    (("2"
                      (case-replace
                       "pi / 2 + 2 * (-i * pi) + 2 * (i * pi) = pi/2")
                      (("1" (lemma "sin_pi2") (("1" (propax) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trig_eq_prep formula-decl nil trig_basic nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_eq_0_2pi formula-decl nil sincos nil)
    (sin_3pi2 formula-decl nil sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (div_1 skolem-const-decl "real_abs_le1" trig_basic nil)
    (zero_div formula-decl nil extra_tegies nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sin_period formula-decl nil sincos nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_pi2 formula-decl nil sincos nil))
   nil)
  (sin_eq_1-2 nil 3279154781
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "sin")
          (("1" (lemma "floor_def" ("x" "a!1/(2*pi)"))
            (("1" (rewrite "div_mult_pos_lt1")
              (("1" (rewrite "div_mult_pos_le2")
                (("1" (flatten)
                  (("1" (inst + "floor(a!1/(2*pi))")
                    (("1" (lemma "phases_sin")
                      (("1" (inst - "a!1 - 2 * (floor(a!1 / (2 * pi)) * pi)")
                        (("1" (lemma "cos_value_bij")
                          (("1" (expand "bijective?")
                            (("1" (expand "injective?")
                              (("1" (flatten -1)
                                (("1" (hide -2)
                                  (("1" (lemma "sin_value_strict_increasing")
                                    (("1" (expand "strict_increasing?")
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (rewrite "sin_q1" -6)
                                          (("1"
                                            (rewrite "phase_sin_q1" -1)
                                            (("1"
                                              (flatten -1)
                                              (("1"
                                                (inst
                                                 -3
                                                 "a!1 - 2 * (floor(a!1 / (2 * pi)) * pi)"
                                                 "pi/2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite "sin_value_pi2")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "abs" 1)
                                                  (("2" (assert) nil nil))
                                                  nil)
                                                 ("3"
                                                  (expand "abs" 1)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sin_q2" -6)
                                          (("2"
                                            (rewrite "phase_sin_q2" -1)
                                            (("2"
                                              (flatten -1)
                                              (("2"
                                                (inst
                                                 -4
                                                 "-1 * (pi / 2) - 2 * (floor(a!1 / (2 * pi)) * pi) + a!1"
                                                 "0")
                                                (("1"
                                                  (rewrite "cos_value_0")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite "sin_q3" -6)
                                          (("3"
                                            (rewrite "phase_sin_q3" -1)
                                            (("3"
                                              (flatten -1)
                                              (("3"
                                                (inst
                                                 -3
                                                 "-pi/2"
                                                 "-1 * pi - 2 * (floor(a!1 / (2 * pi)) * pi) + a!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "sin_value_minus_pi2")
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "abs" 1)
                                                  (("2" (assert) nil nil))
                                                  nil)
                                                 ("3"
                                                  (expand "abs" 1)
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (rewrite "sin_q4" -6)
                                          (("4"
                                            (rewrite "phase_sin_q4" -1)
                                            (("4"
                                              (flatten -1)
                                              (("4"
                                                (inst
                                                 -4
                                                 "pi"
                                                 "-1 * (3 * pi / 2) - 2 * (floor(a!1 / (2 * pi)) * pi) +
                          a!1")
                                                (("1"
                                                  (rewrite "cos_value_pi")
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skosimp*)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (lemma "sin_period" ("a" "pi/2" "j" "i!1"))
                (("2" (rewrite "sin_pi2") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def nil)
    (strict_increasing? const-decl "bool" real_fun_preds reals))
   nil)
  (sin_eq_1-1 nil 3265137440
   ("" (skosimp*)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "sin")
          (("1" (lemma "floor_def" ("x" "a!1/(2*pi)"))
            (("1" (rewrite "div_mult_pos_lt1")
              (("1" (rewrite "div_mult_pos_le2")
                (("1" (flatten)
                  (("1" (expand "pi")
                    (("1" (inst + "floor(a!1/(2*pi))")
                      (("1" (lemma "phases_sin")
                        (("1"
                          (inst - "a!1 - 2 * (floor(a!1 / (2 * pi)) * pi)")
                          (("1" (lemma "cos_value_bij")
                            (("1" (expand "bijective?")
                              (("1" (expand "injective?")
                                (("1" (flatten -1)
                                  (("1" (hide -2)
                                    (("1"
                                      (lemma "sin_value_strict_increasing")
                                      (("1"
                                        (expand "strict_increasing?")
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (rewrite "sin_q1" -6)
                                            (("1"
                                              (rewrite "phase_sin_q1" -1)
                                              (("1"
                                                (flatten -1)
                                                (("1"
                                                  (inst
                                                   -3
                                                   "a!1 - 2 * (floor(a!1 / (2 * pi)) * pi)"
                                                   "pi/2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "sin_value_pi2")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "abs" 1)
                                                    (("2" (assert) nil nil))
                                                    nil)
                                                   ("3"
                                                    (expand "abs" 1)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "sin_q2" -6)
                                            (("2"
                                              (rewrite "phase_sin_q2" -1)
                                              (("2"
                                                (flatten -1)
                                                (("2"
                                                  (inst
                                                   -4
                                                   "-1 * (pi / 2) - 2 * (floor(a!1 / (2 * pi)) * pi) + a!1"
                                                   "0")
                                                  (("1"
                                                    (rewrite "cos_value_0")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite "sin_q3" -6)
                                            (("3"
                                              (rewrite "phase_sin_q3" -1)
                                              (("3"
                                                (flatten -1)
                                                (("3"
                                                  (inst
                                                   -3
                                                   "-pi/2"
                                                   "-1 * pi - 2 * (floor(a!1 / (2 * pi)) * pi) + a!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "sin_value_minus_pi2")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "abs" 1)
                                                    (("2" (assert) nil nil))
                                                    nil)
                                                   ("3"
                                                    (expand "abs" 1)
                                                    (("3" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite "sin_q4" -6)
                                            (("4"
                                              (rewrite "phase_sin_q4" -1)
                                              (("4"
                                                (flatten -1)
                                                (("4"
                                                  (inst
                                                   -4
                                                   "pi"
                                                   "-1 * (3 * pi / 2) - 2 * (floor(a!1 / (2 * pi)) * pi) +
                  a!1")
                                                  (("1"
                                                    (rewrite "cos_value_pi")
                                                    (("1" (assert) nil nil))
                                                    nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skosimp*)
          (("2" (replace -1)
            (("2" (hide -1)
              (("2" (lemma "sin_period" ("a" "pi/2" "j" "i!1"))
                (("2" (rewrite "sin_pi2") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((strict_increasing? const-decl "bool" real_fun_preds reals)) shostak))
 (cos_eq_1 0
  (cos_eq_1-1 nil 3265137585
   ("" (skosimp*)
    (("" (rewrite "cos_sin")
      (("" (lemma "sin_eq_1" ("a" "a!1+pi/2"))
        (("" (split 1)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (hide -2)
              (("2" (skosimp*)
                (("2" (split -2)
                  (("1" (assert) nil nil)
                   ("2" (inst + "i!1") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_sin formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (sin_eq_1 formula-decl nil trig_basic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil))
   shostak))
 (sin_eq_m1 0
  (sin_eq_m1-1 nil 3707146468
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "trig_eq_prep")
          (("1" (inst -1 "a")
            (("1" (skeep)
              (("1" (lemma "sin_period")
                (("1" (inst 1 "1-i")
                  (("1" (inst -1 "a" "i")
                    (("1" (replace -1 -4)
                      (("1" (mult-eq -4 -4)
                        (("1" (lemma "sin2_cos2")
                          (("1" (inst -1 "a + 2 * i * pi")
                            (("1" (expand "sq")
                              (("1" (replace -2 -1)
                                (("1" (assert)
                                  (("1" (cancel-by -1 "cos(2 * (i * pi) + a)")
                                    (("1" (lemma "cos_eq_0_2pi")
                                      (("1"
                                        (inst -1 "2 * (i * pi) + a")
                                        (("1"
                                          (replace -6 -1)
                                          (("1"
                                            (replace -7 -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -3 -1)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -1 -9)
                                                    (("1"
                                                      (lemma "sin_pi2")
                                                      (("1" (assert) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (move-terms -1 l 1)
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2" (assert) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (lemma "sin_period")
            (("2" (inst -1 "a" "1-i")
              (("2" (replace -1 1)
                (("2" (replace -2 1)
                  (("2" (assert)
                    (("2" (lemma "sin_3pi2") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trig_eq_prep formula-decl nil trig_basic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_eq_0_2pi formula-decl nil sincos nil)
    (sin_pi2 formula-decl nil sincos nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (div_2 skolem-const-decl "real_abs_le1" trig_basic nil)
    (zero_div formula-decl nil extra_tegies nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil) (< const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sin_period formula-decl nil sincos nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_3pi2 formula-decl nil sincos nil))
   shostak))
 (cos_eq_m1 0
  (cos_eq_m1-2 nil 3707580008
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "trig_eq_prep")
          (("1" (inst -1 "a")
            (("1" (skeep)
              (("1" (lemma "cos_period")
                (("1" (lemma "sin2_cos2")
                  (("1" (inst -1 "a")
                    (("1" (expand "sq")
                      (("1" (mult-eq -5 -5)
                        (("1" (replace -1 -2)
                          (("1" (move-terms -2 l 1)
                            (("1" (assert)
                              (("1" (cancel-by -2 "sin(a)")
                                (("1" (hide -2 -3 -7)
                                  (("1" (lemma "sin_eq_0_2pi")
                                    (("1" (inst -1 "2 * i * pi +a")
                                      (("1"
                                        (replace -4 -1)
                                        (("1"
                                          (replace -5 -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma "sin_period")
                                              (("1"
                                                (inst -1 "a" "i")
                                                (("1"
                                                  (replace -1 -4)
                                                  (("1"
                                                    (replace -4 -2)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (move-terms -1 l 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -1 -4)
                                                            (("1"
                                                              (reveal -6)
                                                              (("1"
                                                                (lemma
                                                                 "cos_period")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "a"
                                                                   "i")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "cos_0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but (-1 1))
                                                        (("2"
                                                          (move-terms -1 l 1)
                                                          (("2"
                                                            (inst 1 "-i")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (reveal -5)
                                                        (("3"
                                                          (lemma "cos_period")
                                                          (("3"
                                                            (move-terms
                                                             -3
                                                             l
                                                             1)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "a"
                                                               "i")
                                                              (("3"
                                                                (replace
                                                                 -1
                                                                 -2)
                                                                (("3"
                                                                  (replace
                                                                   -3
                                                                   -2)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (lemma
                                                                       "cos_2pi")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (lemma "cos_period")
            (("2" (inst -1 "a" "-i")
              (("2" (replace -1 1)
                (("2" (replace -2 1)
                  (("2" (case-replace "2 * i * pi + pi + 2 * -i * pi = pi")
                    (("1" (lemma "cos_pi") (("1" (propax) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trig_eq_prep formula-decl nil trig_basic nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sq const-decl "nonneg_real" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (sin_period formula-decl nil sincos nil)
    (cos_0 formula-decl nil sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (cos_2pi formula-decl nil sincos nil)
    (integer nonempty-type-from-decl nil integers nil)
    (sin_eq_0_2pi formula-decl nil sincos nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_3 skolem-const-decl "real_abs_le1" trig_basic nil)
    (/= const-decl "boolean" notequal nil)
    (zero_div formula-decl nil extra_tegies nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos_period formula-decl nil sincos nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_pi formula-decl nil sincos nil))
   nil)
  (cos_eq_m1-1 nil 3707146482 ("" (skosimp*) (("" (postpone) nil nil)) nil)
   nil shostak))
 (sin_cos_eq_0 0
  (sin_cos_eq_0-1 nil 3708960680
   ("" (skosimp)
    (("" (rewrite "sin_eq_0")
      (("" (skosimp)
        (("" (replace -1)
          (("" (rewrite "cos_k_pi") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((sin_eq_0 formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cos_k_pi formula-decl nil sincos nil))
   nil))
 (eq_iff_periodic 0
  (eq_iff_periodic-1 nil 3708960581
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "cos_minus" ("a" "a!1" "b" "b!1"))
          (("1" (replace -2)
            (("1" (replace -3)
              (("1" (rewrite "sq_rew")
                (("1" (rewrite "sq_rew")
                  (("1" (lemma "sin2_cos2" ("a" "b!1"))
                    (("1" (assert)
                      (("1" (replace -1)
                        (("1" (rewrite "cos_eq_1" -2)
                          (("1" (skosimp)
                            (("1" (inst + "i!1") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (replace -1)
          (("2" (rewrite "sin_period" 1 :dir rl)
            (("2" (rewrite "cos_period" 1 :dir rl) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_minus formula-decl nil sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin const-decl "real" sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos_eq_1 formula-decl nil trig_basic nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (sq_rew formula-decl nil sq reals) (cos const-decl "real" sincos_def nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_period formula-decl nil sincos nil)
    (sin_period formula-decl nil sincos nil))
   shostak))
 (cos_gt_0_prep 0
  (cos_gt_0_prep-2 nil 3707558816
   ("" (skeep)
    (("" (lemma "cos_neg")
      (("" (inst -1 "a")
        (("" (lemma "sin_shift")
          (("" (inst -1 "a")
            (("" (lemma "sin_pos_0tohalfpi")
              (("" (inst -1 "pi/2 -a")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_neg formula-decl nil sincos_def nil)
    (sin_shift formula-decl nil sincos nil)
    (sin_pos_0tohalfpi formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (a skolem-const-decl "real" trig_basic nil)
    (<= const-decl "bool" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (cos_gt_0_prep-1 nil 3707146495
   ("" (skosimp*) (("" (postpone) nil nil)) nil) nil shostak))
 (cos_gt_0 0
  (cos_gt_0-1 nil 3707041072
   ("" (skosimp)
    (("" (case "forall (x:posreal): x<pi/2 => cos(x) > 0")
      (("1" (lemma "trichotomy" ("x" "a!1"))
        (("1" (split -1)
          (("1" (inst - "a!1") (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil)
           ("2" (replace -1)
            (("2" (rewrite "cos_0") (("2" (assert) nil nil)) nil)) nil)
           ("3" (inst - "-a!1")
            (("1" (assert) (("1" (rewrite "cos_neg") nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (skosimp)
          (("2" (typepred "x!1")
            (("2" (lemma "cos_gt_0_prep")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a!1 skolem-const-decl "real" trig_basic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_0 formula-decl nil sincos_def nil)
    (cos_neg formula-decl nil sincos_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (cos_gt_0_prep formula-decl nil trig_basic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (tan_TCC1 0
  (tan_TCC1-1 nil 3704810425 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Tan? const-decl "bool" trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (/= const-decl "boolean" notequal nil))
   nil (tan subtype "sincos_def.cos(trig_basic.a)" "nznum")))
 (tan_0_TCC1 0
  (tan_0_TCC1-1 nil 3704810425
   ("" (lemma "cos_0") (("" (expand "Tan?") (("" (assert) nil nil)) nil)) nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_0 formula-decl nil sincos_def nil))
   nil (tan_0 subtype "0" "(trig_basic.Tan?)")))
 (tan_0 0
  (tan_0-1 nil 3704810429
   ("" (expand "tan") (("" (rewrite "sin_0") (("" (assert) nil nil)) nil))
    nil)
   ((sin_0 formula-decl nil sincos_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil))
   shostak))
 (tan_neg_TCC1 0
  (tan_neg_TCC1-1 nil 3704810425
   ("" (skosimp*)
    (("" (typepred "a!1")
      (("" (expand "Tan?")
        (("" (lemma "cos_neg") (("" (inst?) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_neg formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil
   (tan_neg subtype "(number_fields.-)(trig_basic.a)" "(trig_basic.Tan?)")))
 (tan_neg 0
  (tan_neg-1 nil 3704810448
   ("" (skosimp*)
    (("" (expand "tan")
      (("" (rewrite "sin_neg")
        (("" (rewrite "cos_neg") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((tan const-decl "real" trig_basic nil)
    (cos_neg formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (Tan? const-decl "bool" trig_basic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_neg formula-decl nil sincos_def nil))
   shostak))
 (deriv_domain_real_abs_lt_pi2 0
  (deriv_domain_real_abs_lt_pi2-1 nil 3706453257
   ("" (lemma "deriv_domain_open") (("" (inst - "-pi/2" "pi/2") nil nil)) nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis))
   shostak))
 (tan_prep 0
  (tan_prep-1 nil 3705918205
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (flatten)
        (("" (typepred "x!1")
          (("" (lemma "cos_eq_0")
            (("" (inst?)
              (("" (assert)
                (("" (skosimp*)
                  (("" (lemma "trichotomy")
                    (("" (inst - "i!1")
                      (("" (ground)
                        (("1" (replace -2)
                          (("1" (hide -2)
                            (("1" (mult-by -1 "pi") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "-pi < i!1*pi")
                          (("1" (hide -6)
                            (("1" (div-by -1 "pi") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_eq_0 formula-decl nil sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil))
 (tan_restrict_TCC1 0
  (tan_restrict_TCC1-2 nil 3705922072
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (flatten)
        (("" (typepred "x!1")
          (("" (lemma "cos_eq_0")
            (("" (inst?)
              (("" (assert)
                (("" (skosimp*)
                  (("" (lemma "trichotomy")
                    (("" (inst - "i!1")
                      (("" (ground)
                        (("1" (replace -2)
                          (("1" (hide -2)
                            (("1" (mult-by -1 "pi") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "-pi < i!1*pi")
                          (("1" (hide -6)
                            (("1" (div-by -1 "pi") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (trichotomy formula-decl nil real_axioms nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_eq_0 formula-decl nil sincos nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil (tan_restrict subtype "trig_basic.x" "(trig_basic.Tan?)"))
  (tan_restrict_TCC1-1 nil 3705835049
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (flatten)
        (("" (lemma "cos_eq_0")
          (("" (inst?)
            (("" (assert)
              (("" (hide -2)
                (("" (skosimp*)
                  (("" (case "i!1 = 0")
                    (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil (tan_restrict subtype "trig_basic.x" "(trig_basic.Tan?)")))
 (tan_rew 0
  (tan_rew-1 nil 3705909696
   ("" (skosimp*) (("" (expand "tan") (("" (propax) nil nil)) nil)) nil)
   ((tan const-decl "real" trig_basic nil)) shostak))
 (tan_pi_TCC1 0
  (tan_pi_TCC1-1 nil 3264999490
   ("" (expand "Tan?") (("" (rewrite "cos_pi") (("" (assert) nil nil)) nil))
    nil)
   ((cos_pi formula-decl nil sincos nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Tan? const-decl "bool" trig_basic nil))
   shostak (tan_pi subtype "pi_def.pi" "(trig_basic.Tan?)")))
 (tan_pi 0
  (tan_pi-1 nil 3265006469
   ("" (expand "tan")
    (("" (rewrite "sin_pi")
      (("" (rewrite "cos_pi") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sin_pi formula-decl nil sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi formula-decl nil sincos nil)
    (tan const-decl "real" trig_basic nil))
   shostak))
 (tan_2pi_TCC1 0
  (tan_2pi_TCC1-1 nil 3264999491
   ("" (expand "Tan?") (("" (rewrite "cos_2pi") (("" (assert) nil nil)) nil))
    nil)
   ((cos_2pi formula-decl nil sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (Tan? const-decl "bool" trig_basic nil))
   shostak
   (tan_2pi subtype "number_fields.*(2, pi_def.pi)" "(trig_basic.Tan?)")))
 (tan_2pi 0
  (tan_2pi-2 "" 3790091911
   ("" (expand "tan")
    (("" (rewrite "sin_2pi") (("" (rewrite "cos_2pi") nil nil)) nil)) nil)
   nil shostak)
  (tan_2pi-1 nil 3265006491
   ("" (expand "tan")
    (("" (rewrite "sin_2pi")
      (("" (rewrite "cos_2pi") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sin_2pi formula-decl nil sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_2pi formula-decl nil sincos nil)
    (tan const-decl "real" trig_basic nil))
   shostak))
 (tan_plus_TCC1 0
  (tan_plus_TCC1-1 nil 3264999490
   ("" (skosimp*)
    (("" (expand "tan") (("" (expand "Tan?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Tan? const-decl "bool" trig_basic nil))
   shostak
   (tan_plus subtype
    "((number_fields.-)(1, number_fields.*(trig_basic.tan(trig_basic.a), trig_basic.tan(trig_basic.b))))"
    "nznum")))
 (tan_plus 0
  (tan_plus-1 nil 3265074705
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (expand "tan")
        (("" (rewrite "sin_plus" 2)
          (("" (rewrite "cos_plus" 2) (("" (rewrite "cross_mult" 2) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (sin_plus formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_mult formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (sin const-decl "real" sincos_def nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_plus formula-decl nil sincos nil)
    (tan const-decl "real" trig_basic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil))
   shostak))
 (tan_minus_TCC1 0
  (tan_minus_TCC1-1 nil 3264999490
   ("" (skosimp*) (("" (expand "tan") (("" (assert) nil nil)) nil)) nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak
   (tan_minus subtype
    "((number_fields.+)(1, number_fields.*(trig_basic.tan(trig_basic.a), trig_basic.tan(trig_basic.b))))"
    "nznum")))
 (tan_minus 0
  (tan_minus-1 nil 3265071900
   ("" (skosimp*)
    (("" (lemma "tan_plus" ("a" "a!1" "b" "-b!1"))
      (("" (rewrite "tan_neg" -1)
        (("" (assert)
          (("" (expand "Tan?") (("" (rewrite "cos_neg" 1) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tan_plus formula-decl nil trig_basic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_neg formula-decl nil sincos_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (tan_neg formula-decl nil trig_basic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Tan? const-decl "bool" trig_basic nil))
   shostak))
 (tan_2a_TCC1 0
  (tan_2a_TCC1-1 nil 3264999490
   ("" (skosimp*) (("" (expand "tan") (("" (assert) nil nil)) nil)) nil)
   ((sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak
   (tan_2a subtype
    "((number_fields.-)(1, number_fields.*(trig_basic.tan(trig_basic.a), trig_basic.tan(trig_basic.a))))"
    "nznum")))
 (tan_2a 0
  (tan_2a-1 nil 3265072074
   ("" (skosimp*)
    (("" (lemma "tan_plus" ("a" "a!1" "b" "a!1")) (("" (assert) nil nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (tan_plus formula-decl nil trig_basic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (tan_period_TCC1 0
  (tan_period_TCC1-2 nil 3308056533
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "odd_or_even_int" ("x" "j!1"))
        (("" (split -1)
          (("1" (expand "odd?")
            (("1" (skosimp*)
              (("1" (replace -1)
                (("1" (lemma "cos_period" ("a" "pi+a!1" "j" "j!2"))
                  (("1" (replace -1 -3 rl)
                    (("1" (lemma "neg_cos" ("a" "a!1"))
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "even?")
            (("2" (skosimp*)
              (("2" (replace -1)
                (("2" (lemma "cos_period" ("a" "a!1" "j" "j!2"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (Tan? const-decl "bool" trig_basic nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos_period formula-decl nil sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (neg_cos formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even? const-decl "bool" integers nil)
    (odd_or_even_int formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil))
   nil
   (tan_period subtype
    "(number_fields.+)(trig_basic.a, number_fields.*(trig_basic.j, pi_def.pi))"
    "(trig_basic.Tan?)"))
  (tan_period_TCC1-1 nil 3264999491
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "odd_or_even_int" ("i" "j!1"))
        (("" (split -1)
          (("1" (expand "odd?")
            (("1" (skosimp*)
              (("1" (replace -1)
                (("1" (lemma "cos_period" ("a" "pi+a!1" "j" "j!2"))
                  (("1" (replace -1 -3 rl)
                    (("1" (lemma "neg_cos" ("a" "a!1"))
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "even?")
            (("2" (skosimp*)
              (("2" (replace -1)
                (("2" (lemma "cos_period" ("a" "a!1" "j" "j!2"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (tan_period subtype
    "(number_fields.+)(trig_basic.a, number_fields.*(trig_basic.j, pi_def.pi))"
    "(trig_basic.Tan?)")))
 (tan_period 0
  (tan_period-2 nil 3308056563
   ("" (skosimp*)
    (("" (expand "tan")
      (("" (lemma "odd_or_even_int" ("x" "j!1"))
        (("" (split -1)
          (("1" (expand "odd?")
            (("1" (skosimp*)
              (("1" (replace -1)
                (("1" (lemma "sin_period" ("a" "a!1+pi" "j" "j!2"))
                  (("1" (lemma "cos_period" ("a" "a!1+pi" "j" "j!2"))
                    (("1" (replace -1 1 rl)
                      (("1" (replace -2 1 rl)
                        (("1" (lemma "neg_cos" ("a" "a!1"))
                          (("1" (lemma "neg_sin" ("a" "a!1"))
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "even?")
            (("2" (skosimp*)
              (("2" (replace -1)
                (("2" (lemma "sin_period" ("a" "a!1" "j" "j!2"))
                  (("2" (lemma "cos_period" ("a" "a!1" "j" "j!2"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (tan const-decl "real" trig_basic nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sin_period formula-decl nil sincos nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (neg_cos formula-decl nil sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_sin formula-decl nil sincos nil)
    (cos_period formula-decl nil sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (even? const-decl "bool" integers nil)
    (odd_or_even_int formula-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil))
   nil)
  (tan_period-1 nil 3265072739
   ("" (skosimp*)
    (("" (expand "tan")
      (("" (lemma "odd_or_even_int" ("i" "j!1"))
        (("" (split -1)
          (("1" (expand "odd?")
            (("1" (skosimp*)
              (("1" (replace -1)
                (("1" (lemma "sin_period" ("a" "a!1+pi" "j" "j!2"))
                  (("1" (lemma "cos_period" ("a" "a!1+pi" "j" "j!2"))
                    (("1" (replace -1 1 rl)
                      (("1" (replace -2 1 rl)
                        (("1" (lemma "neg_cos" ("a" "a!1"))
                          (("1" (lemma "neg_sin" ("a" "a!1"))
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "even?")
            (("2" (skosimp*)
              (("2" (replace -1)
                (("2" (lemma "sin_period" ("a" "a!1" "j" "j!2"))
                  (("2" (lemma "cos_period" ("a" "a!1" "j" "j!2"))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (tan_k_pi_TCC1 0
  (tan_k_pi_TCC1-1 nil 3264999491
   ("" (skosimp*)
    (("" (expand "Tan?")
      (("" (lemma "cos_k_pi" ("k" "k!1")) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Tan? const-decl "bool" trig_basic nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_k_pi formula-decl nil sincos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil))
   shostak
   (tan_k_pi subtype "number_fields.*(trig_basic.k, pi_def.pi)"
    "(trig_basic.Tan?)")))
 (tan_k_pi 0
  (tan_k_pi-1 nil 3265072687
   ("" (skosimp*)
    (("" (expand "tan")
      (("" (rewrite "sin_k_pi") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((tan const-decl "real" trig_basic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sin_k_pi formula-decl nil sincos nil))
   shostak))
 (tan_restrict_continuous 0
  (tan_restrict_continuous-1 nil 3706959725
   ("" (expand "tan_restrict")
    (("" (expand "tan")
      (("" (lemma "div_fun_continuous[real_abs_lt_pi2]")
        (("" (inst - "sin" "cos")
          (("1" (expand "/")
            (("1" (expand "restrict") (("1" (propax) nil nil)) nil)) nil)
           ("2" (hide 2)
            (("2" (expand "restrict")
              (("2" (split +)
                (("1" (skosimp*)
                  (("1" (lemma "tan_prep")
                    (("1" (inst?)
                      (("1" (expand "Tan?") (("1" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "continuous?")
                  (("2" (skosimp*)
                    (("2" (lemma "cos_continuous")
                      (("2" (inst?)
                        (("2" (expand "continuous?")
                          (("2" (skosimp*)
                            (("2" (inst - "epsilon!1")
                              (("2" (skosimp*)
                                (("2" (inst + "delta!1")
                                  (("2" (skosimp*)
                                    (("2" (inst?) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "restrict")
              (("3" (expand "continuous?")
                (("3" (skosimp*)
                  (("3" (lemma "sin_continuous")
                    (("3" (inst?)
                      (("3" (expand "continuous?")
                        (("3" (skosimp*)
                          (("3" (inst - "epsilon!1")
                            (("3" (skosimp*)
                              (("3" (inst + "delta!1")
                                (("3" (skosimp*)
                                  (("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (tan const-decl "real" trig_basic nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (restrict const-decl "R" restrict nil)
    (sin const-decl "real" sincos_def nil)
    (nz_continuous_fun type-eq-decl nil continuous_functions analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (continuous_fun nonempty-type-eq-decl nil continuous_functions analysis)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (cos_continuous formula-decl nil sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Tan? const-decl "bool" trig_basic nil)
    (tan_prep formula-decl nil trig_basic nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sin_continuous formula-decl nil sincos nil)
    (div_fun_continuous judgement-tcc nil continuous_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (tan_restrict_inj 0
  (tan_restrict_inj-1 nil 3705847284
   ("" (expand "injective?")
    (("" (skosimp*)
      (("" (expand "tan")
        (("" (cross-mult -1)
          (("" (lemma "sin_minus")
            (("" (inst?)
              (("" (case "sin(x1!1 - x2!1) = 0")
                (("1" (hide -2 -3)
                  (("1" (lemma "sin_eq_0")
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (skosimp*)
                          (("1" (hide -2)
                            (("1" (case "i!1 = 0")
                              (("1" (assert) nil nil)
                               ("2" (typepred "x1!1")
                                (("2" (typepred "x2!1")
                                  (("2"
                                    (case-replace "x1!1 = x2!1 + i!1 * pi")
                                    (("1" (hide -1)
                                      (("1"
                                        (case "i!1 >= 1")
                                        (("1"
                                          (mult-by -1 "pi")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (case "i!1 <= -1")
                                          (("1"
                                            (mult-by -1 "pi")
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (sin const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cos const-decl "real" sincos_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (>= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin_eq_0 formula-decl nil sincos nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_minus formula-decl nil sincos nil)
    (tan const-decl "real" trig_basic nil)
    (injective? const-decl "bool" functions nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (tan_inf_at_pi2 0
  (tan_inf_at_pi2-1 nil 3706953388
   ("" (case "adh[real_abs_lt_pi2](fullset[real])(pi / 2)")
    (("1" (expand "inf_limit_at")
      (("1" (skosimp*)
        (("1" (lemma "limit_zero_denominator[real_abs_lt_pi2]")
          (("1" (inst - "pi/2" "sin" "cos" "1" "1" "1")
            (("1" (expand "restrict")
              (("1" (split -1)
                (("1" (expand "inf_limit_at")
                  (("1" (expand "/")
                    (("1" (inst - "M!1")
                      (("1" (skosimp*)
                        (("1" (inst + "delta!1")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "tan_restrict")
                                  (("1" (expand "tan")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "convergence")
                    (("2" (lemma "sin_continuous")
                      (("2" (expand "convergence")
                        (("2" (assert)
                          (("2" (inst - "pi/2")
                            (("2" (expand "continuous?")
                              (("2" (skosimp*)
                                (("2" (inst - "epsilon!1")
                                  (("2" (skosimp*)
                                    (("2" (inst + "delta!1")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (rewrite "sin_pi2")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "cos_continuous")
                    (("3" (inst - "pi/2")
                      (("3" (expand "continuous?")
                        (("3" (expand "convergence")
                          (("3" (expand "convergence")
                            (("3" (assert)
                              (("3" (skosimp*)
                                (("3" (inst - "epsilon!1")
                                  (("3" (skosimp*)
                                    (("3" (inst + "delta!1")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst - "x!1")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (expand "sign_near")
                    (("4" (inst + "pi/4")
                      (("4" (skosimp*)
                        (("4" (lemma "cos_gt_0")
                          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (skosimp*)
                    (("5" (lemma "cos_gt_0")
                      (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "adh")
        (("2" (expand "fullset")
          (("2" (skosimp*)
            (("2" (case "e!1 <= pi/2")
              (("1" (inst + "pi/2-e!1/2")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)
               ("2" (inst + "pi/4")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (e!1 skolem-const-decl "posreal" trig_basic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (inf_limit_at const-decl "boolean" infinite_limits nil)
    (limit_zero_denominator formula-decl nil infinite_limits nil)
    (cos_gt_0 formula-decl nil trig_basic nil)
    (sign_near const-decl "bool" infinite_limits nil)
    (cos_continuous formula-decl nil sincos nil)
    (sin_continuous formula-decl nil sincos nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (sin_pi2 formula-decl nil sincos nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (tan_restrict const-decl "real" trig_basic nil)
    (tan const-decl "real" trig_basic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (Sign type-eq-decl nil sign reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (sin const-decl "real" sincos_def nil)
    (restrict const-decl "R" restrict nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil))
   shostak))
 (tan_neginf_at_mpi2 0
  (tan_neginf_at_mpi2-2 "" 3790091915
   ("" (case "adh[real_abs_lt_pi2](fullset[real])(-pi / 2)")
    (("1" (expand "inf_limit_at")
      (("1" (skosimp*)
        (("1" (lemma "limit_zero_denominator[real_abs_lt_pi2]")
          (("1" (inst - "-pi/2" "sin" "cos" "1" "-1" "1")
            (("1" (expand "restrict")
              (("1" (split -1)
                (("1" (expand "inf_limit_at")
                  (("1" (expand "/")
                    (("1" (inst - "M!1")
                      (("1" (skosimp*)
                        (("1" (inst + "delta!1")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "tan_restrict")
                                  (("1" (expand "tan")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "convergence")
                    (("2" (lemma "sin_continuous")
                      (("2" (expand "convergence")
                        (("2" (assert)
                          (("2" (inst - "-pi/2")
                            (("2" (expand "continuous?")
                              (("2" (skosimp*)
                                (("2" (inst - "epsilon!1")
                                  (("2" (skosimp*)
                                    (("2" (inst + "delta!1")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "sin_neg")
                                              (("2"
                                                (inst - "pi/2")
                                                (("2"
                                                  (lemma "sin_pi2")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "cos_continuous")
                    (("3" (inst - "-pi/2")
                      (("3" (expand "continuous?")
                        (("3" (expand "convergence")
                          (("3" (expand "convergence")
                            (("3" (assert)
                              (("3" (skosimp*)
                                (("3" (inst - "epsilon!1")
                                  (("3" (skosimp*)
                                    (("3" (inst + "delta!1")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst - "x!1")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (lemma "cos_pi2")
                                              (("3"
                                                (lemma "cos_neg")
                                                (("3"
                                                  (inst - "pi/2")
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (expand "sign_near")
                    (("4" (inst + "pi/4")
                      (("4" (skosimp*)
                        (("4" (lemma "cos_gt_0")
                          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (skosimp*)
                    (("5" (lemma "cos_gt_0")
                      (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "adh")
        (("2" (expand "fullset")
          (("2" (skosimp*)
            (("2" (case "e!1 <= pi")
              (("1" (inst + "-pi/2+e!1/2")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)
               ("2" (inst + "-pi/4")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (tan_neginf_at_mpi2-1 nil 3707042938
   ("" (case "adh[real_abs_lt_pi2](fullset[real])(-pi / 2)")
    (("1" (expand "inf_limit_at")
      (("1" (skosimp*)
        (("1" (lemma "limit_zero_denominator[real_abs_lt_pi2]")
          (("1" (inst - "-pi/2" "sin" "cos" "1" "-1" "1")
            (("1" (expand "restrict")
              (("1" (split -1)
                (("1" (expand "inf_limit_at")
                  (("1" (expand "/")
                    (("1" (inst - "M!1")
                      (("1" (skosimp*)
                        (("1" (inst + "delta!1")
                          (("1" (skosimp*)
                            (("1" (inst?)
                              (("1" (assert)
                                (("1" (expand "tan_restrict")
                                  (("1" (expand "tan")
                                    (("1" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "convergence")
                    (("2" (lemma "sin_continuous")
                      (("2" (expand "convergence")
                        (("2" (assert)
                          (("2" (inst - "-pi/2")
                            (("2" (expand "continuous?")
                              (("2" (skosimp*)
                                (("2" (inst - "epsilon!1")
                                  (("2" (skosimp*)
                                    (("2" (inst + "delta!1")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "sin_neg")
                                              (("2"
                                                (inst - "pi/2")
                                                (("2"
                                                  (lemma "sin_pi2")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "cos_continuous")
                    (("3" (inst - "-pi/2")
                      (("3" (expand "continuous?")
                        (("3" (expand "convergence")
                          (("3" (expand "convergence")
                            (("3" (assert)
                              (("3" (skosimp*)
                                (("3" (inst - "epsilon!1")
                                  (("3" (skosimp*)
                                    (("3" (inst + "delta!1")
                                      (("3"
                                        (skosimp*)
                                        (("3"
                                          (inst - "x!1")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (lemma "cos_pi2")
                                              (("3"
                                                (lemma "cos_neg")
                                                (("3"
                                                  (inst - "pi/2")
                                                  (("3" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (expand "sign_near")
                    (("4" (inst + "pi/4")
                      (("4" (skosimp*)
                        (("4" (lemma "cos_gt_0")
                          (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (skosimp*)
                    (("5" (lemma "cos_gt_0")
                      (("5" (inst?) (("5" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "adh")
        (("2" (expand "fullset")
          (("2" (skosimp*)
            (("2" (case "e!1 <= pi")
              (("1" (inst + "-pi/2+e!1/2")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil)
               ("2" (inst + "-pi/4")
                (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (e!1 skolem-const-decl "posreal" trig_basic nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (inf_limit_at const-decl "boolean" infinite_limits nil)
    (limit_zero_denominator formula-decl nil infinite_limits nil)
    (cos_gt_0 formula-decl nil trig_basic nil)
    (sign_near const-decl "bool" infinite_limits nil)
    (cos_pi2 formula-decl nil sincos nil)
    (cos_neg formula-decl nil sincos_def nil)
    (cos_continuous formula-decl nil sincos nil)
    (sin_continuous formula-decl nil sincos nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (sin_neg formula-decl nil sincos_def nil)
    (sin_pi2 formula-decl nil sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (tan_restrict const-decl "real" trig_basic nil)
    (tan const-decl "real" trig_basic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (Sign type-eq-decl nil sign reals)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (sin const-decl "real" sincos_def nil)
    (restrict const-decl "R" restrict nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil))
   nil))
 (tan_restrict_surj 0
  (tan_restrict_surj-1 nil 3705847301
   ("" (expand "surjective?")
    (("" (skosimp*)
      (("" (case "y!1 = 0")
        (("1" (inst + "0")
          (("1" (rewrite "tan_0") (("1" (assert) nil nil)) nil)
           ("2" (assert) (("2" (typepred "pi") (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (case "y!1 > 0")
          (("1" (lemma "tan_inf_at_pi2")
            (("1" (expand "inf_limit_at")
              (("1" (inst - "y!1")
                (("1" (skosimp*)
                  (("1" (name "XX" "max(0,pi/2-delta!1/2)")
                    (("1" (inst - "XX")
                      (("1" (lemma "tan_restrict_continuous")
                        (("1" (lemma "intermediate_value2[0,XX]")
                          (("1" (inst - "(LAMBDA (x:J[0,XX]): tan(x))" "y!1")
                            (("1" (split -1)
                              (("1" (skosimp*)
                                (("1" (inst + "c!1")
                                  (("1" (assert)
                                    (("1" (expand "tan_restrict")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1 -2)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -3 3)
                                (("2" (expand "continuous?")
                                  (("2" (skosimp*)
                                    (("2" (inst?)
                                      (("1"
                                        (expand "tan_restrict")
                                        (("1"
                                          (expand "continuous?")
                                          (("1"
                                            (skosimp*)
                                            (("1"
                                              (inst - "epsilon!1")
                                              (("1"
                                                (skosimp*)
                                                (("1"
                                                  (inst + "delta!2")
                                                  (("1"
                                                    (skosimp*)
                                                    (("1"
                                                      (inst - "x!1")
                                                      (("1" (assert) nil nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (rewrite "tan_0") (("3" (assert) nil nil))
                                nil)
                               ("4" (expand "tan_restrict")
                                (("4" (assert)
                                  (("4" (hide -1 1 4) (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (lemma "tan_prep")
                                (("2" (hide -1 -2 -4 -5 3)
                                  (("2" (lemma "tan_prep")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "x!1")
                                          (("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide 3) (("2" (grind) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma "tan_neginf_at_mpi2")
            (("2" (expand "inf_limit_at")
              (("2" (expand "tan_restrict")
                (("2" (inst - "-y!1")
                  (("1" (skosimp*)
                    (("1" (name "XX" "min(0,-pi/2+delta!1/2)")
                      (("1" (inst - "XX")
                        (("1" (lemma "intermediate_value2[XX,0]")
                          (("1" (inst - "(LAMBDA (x:J[XX,0]): tan(x))" "y!1")
                            (("1" (split -1)
                              (("1" (skosimp*)
                                (("1" (inst + "c!1")
                                  (("1" (assert)
                                    (("1" (hide -1 -3) (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide -2 4)
                                (("2" (lemma "tan_restrict_continuous")
                                  (("2" (expand "continuous?")
                                    (("2" (skosimp*)
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (expand "tan_restrict")
                                          (("1"
                                            (expand "continuous?")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (inst - "epsilon!1")
                                                (("1"
                                                  (skosimp*)
                                                  (("1"
                                                    (inst + "delta!2")
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (inst - "x!1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide -1 2)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert)
                                (("3" (hide 1 5) (("3" (grind) nil nil)) nil))
                                nil)
                               ("4" (rewrite "tan_0") (("4" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (hide -2 4)
                                (("2" (lemma "tan_prep")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (typepred "x!1")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert) nil nil))
                            nil)
                           ("2" (hide -2 4) (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide 4) (("2" (grind) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (inf_limit_at const-decl "boolean" infinite_limits nil)
    (delta!1 skolem-const-decl "posreal" trig_basic nil)
    (XX skolem-const-decl "{p: real | p >= 0 AND p >= pi / 2 - delta!1 / 2}"
     trig_basic nil)
    (intermediate_value2 formula-decl nil continuity_interval analysis)
    (x!1 skolem-const-decl "J[0, XX]" trig_basic nil)
    (tan_prep formula-decl nil trig_basic nil)
    (c!1 skolem-const-decl "J[0, XX]" trig_basic nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (x0!1 skolem-const-decl "J[0, XX]" trig_basic nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (x!1 skolem-const-decl "J[0, XX]" trig_basic nil)
    (tan const-decl "real" trig_basic nil)
    (Tan? const-decl "bool" trig_basic nil)
    (J nonempty-type-eq-decl nil continuity_interval analysis)
    (tan_restrict_continuous formula-decl nil trig_basic nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (y!1 skolem-const-decl "real" trig_basic nil)
    (tan_inf_at_pi2 formula-decl nil trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "J[XX, 0]" trig_basic nil)
    (c!1 skolem-const-decl "J[XX, 0]" trig_basic nil)
    (x!1 skolem-const-decl "J[XX, 0]" trig_basic nil)
    (x0!1 skolem-const-decl "J[XX, 0]" trig_basic nil)
    (XX skolem-const-decl "{p: real | p <= 0 AND p <= -pi / 2 + delta!1 / 2}"
     trig_basic nil)
    (delta!1 skolem-const-decl "posreal" trig_basic nil)
    (tan_neginf_at_mpi2 formula-decl nil trig_basic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil) (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (tan_0 formula-decl nil trig_basic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_lb_new const-decl "posreal" pi_def nil)
    (pi_ub_new const-decl "posreal" pi_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (surjective? const-decl "bool" functions nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (tan_restrict_bij 0
  (tan_restrict_bij-1 nil 3705845049
   ("" (expand "bijective?")
    (("" (rewrite "tan_restrict_inj")
      (("" (rewrite "tan_restrict_surj") nil nil)) nil))
    nil)
   ((tan_restrict_inj formula-decl nil trig_basic nil)
    (tan_restrict_surj formula-decl nil trig_basic nil)
    (bijective? const-decl "bool" functions nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   shostak))
 (tan_eq_0 0
  (tan_eq_0-1 nil 3705848791
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "tan")
        (("1" (cross-mult -1)
          (("1" (lemma "sin_eq_0")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (expand "tan")
        (("2" (cross-mult 1)
          (("2" (lemma "sin_eq_0")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (sin const-decl "real" sincos_def nil)
    (Tan? const-decl "bool" trig_basic nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (cos const-decl "real" sincos_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (sin_eq_0 formula-decl nil sincos nil)
    (tan const-decl "real" trig_basic nil))
   shostak))
 (deriv_tan_restrict_TCC1 0
  (deriv_tan_restrict_TCC1-1 nil 3706260113
   ("" (rewrite "deriv_domain_real_abs_lt_pi2") nil nil)
   ((deriv_domain_real_abs_lt_pi2 formula-decl nil trig_basic nil)) nil
   (deriv_tan_restrict assuming
    "analysis@derivatives[real_abs_lt_pi2].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_tan_restrict_TCC2 0
  (deriv_tan_restrict_TCC2-1 nil 3706260113
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (inst-cp + "0")
        (("" (assert)
          (("" (flatten) (("" (inst + "pi/4") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil))
   nil
   (deriv_tan_restrict assuming
    "analysis@derivatives[real_abs_lt_pi2].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (deriv_tan_restrict_TCC3 0
  (deriv_tan_restrict_TCC3-1 nil 3706260113
   ("" (flatten)
    (("" (skosimp*)
      (("" (typepred "x!1")
        (("" (lemma "tan_prep")
          (("" (inst - "x!1")
            (("" (expand "Tan?")
              (("" (flatten)
                (("" (lemma "sq_eq_0")
                  (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (tan_prep formula-decl nil trig_basic nil)
    (Tan? const-decl "bool" trig_basic nil)
    (sq_eq_0 formula-decl nil sq reals)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil))
   nil
   (deriv_tan_restrict subtype "sq.sq(sincos_def.cos(trig_basic.x))"
    "nznum")))
 (deriv_tan_restrict 0
  (deriv_tan_restrict-2 nil 3706437611
   ("" (case-replace "FORALL (x1: real_abs_lt_pi2): cos(x1) /= 0")
    (("1" (case "del_neigh_all?[real_abs_lt_pi2]")
      (("1" (lemma "cos_derivable_fun")
        (("1" (lemma "derivable_subtype[real,real_abs_lt_pi2]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "sin_derivable_fun")
                (("1" (lemma "derivable_subtype[real,real_abs_lt_pi2]")
                  (("1" (inst - "sin")
                    (("1" (assert)
                      (("1" (expand "tan_restrict")
                        (("1" (expand "restrict")
                          (("1" (expand "tan")
                            (("1" (lemma "deriv_div_fun[real_abs_lt_pi2]")
                              (("1" (inst - "sin" "cos")
                                (("1" (expand "restrict")
                                  (("1" (expand "/")
                                    (("1" (assert)
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (split +)
                                                (("1"
                                                  (lemma
                                                   "div_derivable_fun[real_abs_lt_pi2]")
                                                  (("1"
                                                    (inst - "sin" "cos")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "restrict")
                                                        (("1"
                                                          (expand "/")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (lemma "deriv_sin")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (case-replace
                                                           "deriv[real_abs_lt_pi2](LAMBDA (s: real_abs_lt_pi2): sin(s))(x!1) = cos(x!1)")
                                                          (("1"
                                                            (case-replace
                                                             "deriv[real_abs_lt_pi2](LAMBDA (s: real_abs_lt_pi2): cos(s))(x!1) = -sin(x!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "sin2_cos2")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "sq")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_cos")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5)
                                                                      (("2"
                                                                        (lemma
                                                                         "deriv_subtype[real,real_abs_lt_pi2]")
                                                                        (("2"
                                                                          (expand
                                                                           "restrict")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "cos")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "deriv_subtype[real,real_abs_lt_pi2]")
                                                              (("2"
                                                                (inst - "sin")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "restrict")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -2 -3 -4)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (rewrite
                                                             "sq_eq_0")
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1 -2 -3 -4 -5)
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (rewrite
                                                               "sq_rew")
                                                              (("3"
                                                                (rewrite
                                                                 "sq_eq_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 2)
        (("2" (expand "del_neigh_all?")
          (("2" (skosimp*)
            (("2" (inst + "min(a!1+pi/2,pi/2-a!1)/2")
              (("1" (skosimp*) (("1" (grind :exclude "pi") nil nil)) nil)
               ("2" (grind :exclude "pi") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (lemma "tan_prep")
          (("2" (inst?) (("2" (expand "Tan?") (("2" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((tan_prep formula-decl nil trig_basic nil)
    (Tan? const-decl "bool" trig_basic nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_real_abs_lt_pi2 formula-decl nil sincos nil)
    (noa_real_lt_pi2 formula-decl nil sincos nil)
    (restrict const-decl "R" restrict nil)
    (deriv_div_fun formula-decl nil derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sq_rew formula-decl nil sq reals) (sq_eq_0 formula-decl nil sq reals)
    (deriv_sin formula-decl nil sincos_def nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_cos formula-decl nil sincos_def nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_derivable_fun formula-decl nil derivatives analysis)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (tan const-decl "real" trig_basic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (tan_restrict const-decl "real" trig_basic nil)
    (sin const-decl "real" sincos_def nil)
    (sin_derivable_fun formula-decl nil sincos nil)
    (cos_derivable_fun formula-decl nil sincos nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (a!1 skolem-const-decl "real_abs_lt_pi2" trig_basic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil)
  (deriv_tan_restrict-1 nil 3706260313
   ("" (case-replace "FORALL (x1: real_abs_lt_pi2): cos(x1) /= 0")
    (("1" (case "del_neigh_all?[real_abs_lt_pi2]")
      (("1" (lemma "cos_derivable_fun")
        (("1" (lemma "derivable_subtype[real,real_abs_lt_pi2]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "sin_derivable_fun")
                (("1" (lemma "derivable_subtype[real,real_abs_lt_pi2]")
                  (("1" (inst - "sin")
                    (("1" (assert)
                      (("1" (expand "tan_restrict")
                        (("1" (expand "restrict")
                          (("1" (expand "tan")
                            (("1" (lemma "deriv_div_fun[real_abs_lt_pi2]")
                              (("1" (inst - "sin" "cos")
                                (("1" (expand "restrict")
                                  (("1" (expand "/")
                                    (("1" (assert)
                                      (("1"
                                        (expand "-")
                                        (("1"
                                          (expand "*")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (split +)
                                                (("1"
                                                  (lemma
                                                   "div_derivable_fun[real_abs_lt_pi2]")
                                                  (("1"
                                                    (inst - "sin" "cos")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "restrict")
                                                        (("1"
                                                          (expand "/")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (lemma "deriv_sin")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (case-replace
                                                           "deriv(LAMBDA (s: real_abs_lt_pi2): sin(s))(x!1) = cos(x!1)")
                                                          (("1"
                                                            (case-replace
                                                             "deriv(LAMBDA (s: real_abs_lt_pi2): cos(s))(x!1) = -sin(x!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "sin2_cos2")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "sq")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "deriv_cos")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5)
                                                                      (("2"
                                                                        (lemma
                                                                         "deriv_subtype[real,real_abs_lt_pi2]")
                                                                        (("2"
                                                                          (expand
                                                                           "restrict")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "cos")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "deriv_subtype[real,real_abs_lt_pi2]")
                                                              (("2"
                                                                (inst - "sin")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "restrict")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -2 -3 -4)
                                                      (("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (rewrite
                                                             "sq_eq_0")
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide -1 -2 -3 -4 -5)
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (rewrite
                                                               "sq_rew")
                                                              (("3"
                                                                (rewrite
                                                                 "sq_eq_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide -1 2)
        (("2" (expand "del_neigh_all?")
          (("2" (skosimp*)
            (("2" (inst + "min(a!1+pi/2,pi/2-a!1)/2")
              (("1" (skosimp*) (("1" (grind :exclude "pi") nil nil)) nil)
               ("2" (grind :exclude "pi") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skosimp*)
        (("2" (lemma "tan_prep")
          (("2" (inst?) (("2" (expand "Tan?") (("2" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_real_abs_lt_pi2 formula-decl nil sincos nil)
    (noa_real_lt_pi2 formula-decl nil sincos nil)
    (deriv_div_fun formula-decl nil derivatives analysis)
    (sq_rew formula-decl nil sq reals) (sq_eq_0 formula-decl nil sq reals)
    (deriv_sin formula-decl nil sincos_def nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_cos formula-decl nil sincos_def nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (sq const-decl "nonneg_real" sq reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (div_derivable_fun formula-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (nz_deriv_fun type-eq-decl nil derivatives analysis)
    (sin const-decl "real" sincos_def nil)
    (sin_derivable_fun formula-decl nil sincos nil)
    (cos_derivable_fun formula-decl nil sincos nil)
    (cos const-decl "real" sincos_def nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil))
   shostak)))


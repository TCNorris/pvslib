(arccos
 (IMP_derivative_props_TCC1 0
  (IMP_derivative_props_TCC1-1 nil 3708362116 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (IMP_derivative_props assuming
    "derivative_props[posreal_lt_pi].derivative_props"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_derivative_props_TCC2 0
  (IMP_derivative_props_TCC2-1 nil 3708362116
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (inst-cp + "pi/4")
        (("" (inst-cp + "pi/2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (IMP_derivative_props assuming
    "derivative_props[posreal_lt_pi].derivative_props"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (cos_restrict_range 0
  (cos_restrict_range-1 nil 3706882260
   ("" (skosimp*)
    (("" (case "cos(x!1) = -1 IMPLIES x!1 = pi")
      (("1" (case "cos(x!1) = 1 IMPLIES x!1 = 0")
        (("1" (ground) nil nil)
         ("2" (hide -1 2)
          (("2" (flatten)
            (("2" (lemma "cos_eq_1")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skosimp*)
                    (("2" (hide -2)
                      (("2" (case "i!1 = 0")
                        (("1" (assert) nil nil)
                         ("2" (case "i!1 >= 1")
                          (("1" (assert)
                            (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (case "i!1 <= -1")
                            (("1" (assert)
                              (("1" (mult-by -1 "2*pi")
                                (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "cos_eq_m1")
          (("2" (inst?)
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (case "i!1 = 0")
                  (("1" (assert) nil nil)
                   ("2" (case "i!1 >= 1")
                    (("1" (assert)
                      (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (case "i!1 <= -1")
                      (("1" (assert)
                        (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (cos const-decl "real" sincos_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_eq_1 formula-decl nil trig_basic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_eq_m1 formula-decl nil trig_basic nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cos_restrict_TCC1 0
  (cos_restrict_TCC1-1 nil 3707142920
   ("" (skosimp*)
    (("" (lemma "cos_restrict_range") (("" (inst?) nil nil)) nil)) nil)
   ((cos_restrict_range formula-decl nil arccos nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil))
   nil (cos_restrict subtype "sincos_def.cos(arccos.x)" "real_abs_lt1")))
 (cos_restrict_inj 0
  (cos_restrict_inj-1 nil 3707144475
   ("" (expand "injective?")
    (("" (skosimp*)
      (("" (case "x1!1 <= x2!1")
        (("1" (lemma "cos_decreasing")
          (("1" (inst - "x2!1" "x1!1") (("1" (assert) nil nil)) nil)) nil)
         ("2" (typepred "x2!1")
          (("2" (lemma "cos_decreasing")
            (("2" (inst - "x1!1" "x2!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cos_decreasing formula-decl nil trig_ineq nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (injective? const-decl "bool" functions nil))
   nil))
 (cos_restrict_surj 0
  (cos_restrict_surj-1 nil 3707143124
   ("" (expand "surjective?")
    (("" (skosimp*)
      (("" (lemma "intermediate_value4[0,pi]")
        (("1" (inst - "cos" "y!1")
          (("1" (assert)
            (("1" (expand "restrict")
              (("1" (rewrite "cos_pi")
                (("1" (rewrite "cos_0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (skosimp*)
                        (("1" (inst + "c!1")
                          (("1" (assert)
                            (("1" (typepred "c!1")
                              (("1" (case-replace "c!1 = pi")
                                (("1" (rewrite "cos_pi")
                                  (("1" (assert) nil nil)) nil)
                                 ("2" (assert)
                                  (("2" (case-replace "c!1 = 0")
                                    (("1" (rewrite "cos_0")
                                      (("1" (assert) nil nil)) nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "continuous?")
                          (("2" (skosimp*)
                            (("2" (lemma "cos_continuous")
                              (("2" (inst?)
                                (("2" (expand "continuous?")
                                  (("2" (skosimp*)
                                    (("2" (inst - "epsilon!1")
                                      (("2"
                                        (skosimp*)
                                        (("2"
                                          (inst + "delta!1")
                                          (("2"
                                            (skosimp*)
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((J nonempty-type-eq-decl nil continuity_interval analysis)
    (restrict const-decl "R" restrict nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (cos_0 formula-decl nil sincos_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (c!1 skolem-const-decl "J[0, pi]" arccos nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (cos_continuous formula-decl nil sincos nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cos_pi formula-decl nil sincos nil) (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (intermediate_value4 formula-decl nil continuity_interval analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (surjective? const-decl "bool" functions nil))
   nil))
 (cos_restrict_bij 0
  (cos_restrict_bij-1 nil 3707144441
   ("" (expand "bijective?")
    (("" (lemma "cos_restrict_surj")
      (("" (assert)
        (("" (lemma "cos_restrict_inj") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((cos_restrict_surj formula-decl nil arccos nil)
    (cos_restrict_inj formula-decl nil arccos nil)
    (bijective? const-decl "bool" functions nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil))
 (del_neigh_lem2 0
  (del_neigh_lem2-1 nil 3707145720
   ("" (expand "del_neigh_all?")
    (("" (skosimp*)
      (("" (inst + "min(a!1/2,(pi-a!1)/2)")
        (("1" (skosimp*) (("1" (grind) nil nil)) nil) ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (a!1 skolem-const-decl "posreal_lt_pi" arccos nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_cos_restrict_TCC1 0
  (deriv_cos_restrict_TCC1-1 nil 3707144800
   ("" (lemma "deriv_domain_open")
    (("" (inst - "0" "pi") (("" (assert) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (deriv_domain_posreal_lt_pi formula-decl nil sincos nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis))
   nil
   (deriv_cos_restrict assuming
    "analysis@derivatives[posreal_lt_pi].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_cos_restrict 0
  (deriv_cos_restrict-2 nil 3707145754
   ("" (lemma "derivable_cos")
    (("" (lemma "derivable_subtype[real,posreal_lt_pi]")
      (("" (inst?)
        (("" (assert)
          (("" (expand "restrict")
            (("" (assert)
              (("" (lemma "deriv_subtype[real,posreal_lt_pi]")
                (("" (inst?)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (expand "restrict")
                        (("1" (assert)
                          (("1" (lemma "deriv_cos_fun")
                            (("1" (replace -1)
                              (("1" (expand "-") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2 2)
                        (("2" (lemma "del_neigh_lem2")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (deriv_domain_posreal_lt_pi formula-decl nil sincos nil)
    (noa_posreal_lt_pi formula-decl nil sincos nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv_cos_fun formula-decl nil sincos nil)
    (del_neigh_lem2 formula-decl nil arccos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (restrict const-decl "R" restrict nil)
    (derivable_cos formula-decl nil sincos_def nil))
   nil)
  (deriv_cos_restrict-1 nil 3707144837
   ("" (lemma "derivable_cos")
    (("" (lemma "derivable_subtype[real,posreal_lt_pi]")
      (("" (inst?)
        (("" (assert)
          (("" (expand "restrict")
            (("" (assert)
              (("" (lemma "deriv_subtype[real,posreal_lt_pi]")
                (("" (inst?)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (expand "restrict")
                        (("1" (assert)
                          (("1" (lemma "deriv_cos_fun")
                            (("1" (replace -1)
                              (("1" (expand "-") (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2 2)
                        (("2" (expand "del_neigh_all?")
                          (("2" (skosimp*)
                            (("2" (typepred "a!1")
                              (("2" (inst + "min(a!1/2,(pi-a!1)/2)")
                                (("1" (skosimp*) (("1" (grind) nil nil)) nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_cos formula-decl nil sincos_def nil)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (del_neigh_all? const-decl "bool" deriv_domain_def analysis)
    (deriv_cos_fun formula-decl nil sincos nil)
    (noa_posreal_lt_pi formula-decl nil sincos nil)
    (deriv_domain_posreal_lt_pi formula-decl nil sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil))
   nil))
 (arc_cos_exists 0
  (arc_cos_exists-3 "" 3790092583
   ("" (lemma "cos_restrict_range")
    (("" (inst + "inverse[posreal_lt_pi,real_abs_lt1](cos_restrict)")
      (("" (skosimp*)
        (("" (lemma "inverse_surjective[posreal_lt_pi,real_abs_lt1]")
          (("" (inst?)
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (lemma "cos_restrict_surj") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (arc_cos_exists-2 nil 3707142798
   ("" (lemma "cos_restrict_range")
    (("" (inst + "inverse[posreal_lt_pi,real_abs_lt1](cos_restrict)")
      (("1" (skosimp*)
        (("1" (lemma "inverse_surjective[posreal_lt_pi,real_abs_lt1]")
          (("1" (inst?)
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (lemma "cos_restrict_surj") (("2" (propax) nil nil)) nil))
              nil)
             ("3" (assert)
              (("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (inst?) (("3" (flatten) (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (inst?) (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (inverse const-decl "D" function_inverse nil)
    (inverse_surjective formula-decl nil function_inverse nil)
    (cos_restrict_surj formula-decl nil arccos nil)
    (surjective? const-decl "bool" functions nil)
    (cos_restrict_range formula-decl nil arccos nil))
   nil)
  (arc_cos_exists-1 nil 3707142764
   ("" (lemma "cos_restrict_range")
    (("" (inst + "inverse[real_abs_lt_pi2,real_abs_lt1](cos_restrict)")
      (("1" (skosimp*)
        (("1" (lemma "inverse_surjective[real_abs_lt_pi2,real_abs_lt1]")
          (("1" (inst?)
            (("1" (assert) nil)
             ("2" (hide 2)
              (("2" (lemma "cos_restrict_surj") (("2" (propax) nil)))))
             ("3" (assert)
              (("3" (hide 2)
                (("3" (skosimp*)
                  (("3" (inst?)
                    (("3" (flatten) (("3" (assert) nil)))))))))))))))))
       ("2" (skosimp*)
        (("2" (inst?) (("2" (flatten) (("2" (assert) nil))))))))))
    nil)
   nil nil))
 (arc_cos_TCC1 0
  (arc_cos_TCC1-2 "" 3790092583
   ("" (lemma arc_cos_exists) (("" (propax) nil nil)) nil) nil shostak
   (arc_cos existence ""
    "[y: trig_types.real_abs_lt1 -> {x: trig_types.posreal_lt_pi | y = sincos_def.cos(x)}]"))
  (arc_cos_TCC1-1 nil 3408970754
   ("" (lemma arc_cos_exists)
    (("" (skosimp*)
      (("" (inst?)
        (("" (skosimp*) (("" (assert) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((arc_cos_exists formula-decl nil arccos nil)) nil
   (arc_cos existence ""
    "[y: trig_types.real_abs_lt1 -> {x: trig_types.posreal_lt_pi | y = sincos_def.cos(x)}]")))
 (arc_cos_inverse 0
  (arc_cos_inverse-2 "" 3790092583
   ("" (apply-extensionality 1 :hide? t)
    (("1" (lemma "inverse_injective[posreal_lt_pi,real_abs_lt1]")
      (("1" (inst - "arc_cos(x!1)" "(LAMBDA (x: posreal_lt_pi): cos(x))")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (lemma "cos_restrict_inj") (("2" (propax) nil nil)) nil)) nil)
         ("3" (hide -1 -2 2)
          (("3" (skosimp*)
            (("3" (lemma "cos_restrict_range") (("3" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (lemma "cos_restrict")
        (("2" (replace -1 * RL)
          (("2" (hide -1)
            (("2" (lemma "inverse_surjective[posreal_lt_pi, real_abs_lt1]")
              (("2" (inst?)
                (("1" (expand "cos_restrict") (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma cos_restrict_surj)
                    (("2" (assert)
                      (("2" (expand "cos_restrict") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "cos_restrict_range") (("3" (propax) nil nil)) nil))
    nil)
   nil shostak)
  (arc_cos_inverse-1 nil 3707146068
   ("" (apply-extensionality 1 :hide? t)
    (("1" (lemma "inverse_injective[posreal_lt_pi,real_abs_lt1]")
      (("1" (inst - "arc_cos(x!1)" "(LAMBDA (x: posreal_lt_pi): cos(x))")
        (("1" (assert) nil nil)
         ("2" (hide 2)
          (("2" (lemma "cos_restrict_inj") (("2" (propax) nil nil)) nil)) nil)
         ("3" (hide -1 -2 2)
          (("3" (skosimp*)
            (("3" (lemma "cos_restrict_range")
              (("3" (inst?)
                (("3" (assert) (("3" (flatten) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (lemma "cos_restrict")
        (("2" (replace -1 * RL)
          (("2" (hide -1)
            (("2" (lemma "inverse_surjective[posreal_lt_pi, real_abs_lt1]")
              (("2" (inst?)
                (("1" (expand "cos_restrict") (("1" (assert) nil nil)) nil)
                 ("2" (hide 2)
                  (("2" (lemma cos_restrict_surj)
                    (("2" (assert)
                      (("2" (expand "cos_restrict") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "cos_restrict_range")
      (("3" (assert)
        (("3" (skosimp*)
          (("3" (inst?) (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((inverse_surjective formula-decl nil function_inverse nil)
    (cos_restrict_surj formula-decl nil arccos nil)
    (surjective? const-decl "bool" functions nil)
    (cos_restrict macro-decl "real_abs_lt1" arccos nil)
    (inverse_injective formula-decl nil function_inverse nil)
    (cos_restrict_range formula-decl nil arccos nil)
    (cos_restrict_inj formula-decl nil arccos nil)
    (injective? const-decl "bool" functions nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (inverse const-decl "D" function_inverse nil)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil))
   nil))
 (cos_arc_cos 0
  (cos_arc_cos-2 nil 3707146111
   ("" (skosimp*) (("" (typepred "arc_cos(y!1)") (("" (assert) nil nil)) nil))
    nil)
   ((arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_range application-judgement "real_abs_le1" sincos nil))
   nil)
  (cos_arc_cos-1 nil 3408970791 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)) shostak))
 (arc_cos_cos 0
  (arc_cos_cos-2 nil 3707146146
   ("" (skosimp*)
    (("" (typepred "arc_cos(cos(x!1))")
      (("" (lemma "cos_restrict_inj")
        (("" (expand "injective?")
          (("" (inst - "x!1" "arc_cos(cos(x!1))") (("" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (injective? const-decl "bool" functions nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_restrict_inj formula-decl nil arccos nil))
   nil)
  (arc_cos_cos-1 nil 3408971160
   ("" (skosimp*)
    (("" (typepred "arc_cos(cos(x!1))") (("" (postpone) nil nil)) nil)) nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil))
   shostak))
 (arc_cos_derivable_TCC1 0
  (arc_cos_derivable_TCC1-1 nil 3707469805
   ("" (lemma "deriv_domain_open") (("" (inst - "-1" "1") nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (deriv_domain_open formula-decl nil deriv_domain analysis))
   nil
   (arc_cos_derivable assuming
    "analysis@derivatives[real_abs_lt1].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (arc_cos_derivable_TCC2 0
  (arc_cos_derivable_TCC2-1 nil 3707469805
   ("" (expand "not_one_element?")
    (("" (skosimp*)
      (("" (inst-cp + "0")
        (("" (inst-cp + "1/2") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (arc_cos_derivable assuming
    "analysis@derivatives[real_abs_lt1].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (arc_cos_derivable 0
  (arc_cos_derivable-3 "" 3790092584
   ("" (lemma "inverse_derivable_fun[posreal_lt_pi,real_abs_lt1]")
    (("1"
      (inst - "(LAMBDA (x: posreal_lt_pi): cos(x))"
       "(LAMBDA (x: real_abs_lt1): arc_cos(x))"
       "deriv[posreal_lt_pi](LAMBDA (x: posreal_lt_pi): cos(x))")
      (("1" (split -1)
        (("1"
          (case-replace "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
          (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "deriv_cos_restrict") (("2" (flatten) nil nil)) nil))
          nil)
         ("3" (lemma "cos_restrict_bij") (("3" (propax) nil nil)) nil)
         ("4" (hide 2)
          (("4" (expand "inverse?")
            (("4" (skosimp*)
              (("4" (typepred "arc_cos(r!1)") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (lemma "deriv_cos")
            (("2" (inst?)
              (("2" (lemma "deriv_subtype[real,posreal_lt_pi]")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (expand "restrict")
                        (("1" (assert)
                          (("1" (decompose-equality -1)
                            (("1" (inst?)
                              (("1" (replace -2)
                                (("1" (replace -1)
                                  (("1" (hide -1 -2)
                                    (("1" (typepred "x1!1")
                                      (("1"
                                        (lemma "sin_eq_0_2pi")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -)
                              (("2" (lemma "cos_derivable_fun")
                                (("2" (assert)
                                  (("2"
                                    (lemma
                                     "derivable_subtype[real,posreal_lt_pi]")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "restrict")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "cos_derivable_fun")
                        (("2" (propax) nil nil)) nil)
                       ("3" (lemma del_neigh_lem2) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "deriv_cos_restrict") (("3" (flatten) nil nil)) nil)
       ("4" (skosimp*)
        (("4" (assert)
          (("4" (typepred "x!1")
            (("4" (lemma "cos_restrict_range") (("4" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "connected?")
        (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (arc_cos_derivable-2 nil 3707220987
   ("" (lemma "inverse_derivable_fun[posreal_lt_pi,real_abs_lt1]")
    (("1"
      (inst - "(LAMBDA (x: posreal_lt_pi): cos(x))"
       "(LAMBDA (x: real_abs_lt1): arc_cos(x))"
       "deriv[posreal_lt_pi](LAMBDA (x: posreal_lt_pi): cos(x))")
      (("1" (split -1)
        (("1"
          (case-replace "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
          (("1" (apply-extensionality 1 :hide? t) nil nil)) nil)
         ("2" (hide 2)
          (("2" (lemma "deriv_cos_restrict") (("2" (flatten) nil nil)) nil))
          nil)
         ("3" (lemma "cos_restrict_bij") (("3" (propax) nil nil)) nil)
         ("4" (hide 2)
          (("4" (expand "inverse?")
            (("4" (skosimp*)
              (("4" (typepred "arc_cos(r!1)") (("4" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skosimp*)
          (("2" (lemma "deriv_cos")
            (("2" (inst?)
              (("2" (lemma "deriv_subtype[real,posreal_lt_pi]")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (expand "restrict")
                        (("1" (assert)
                          (("1" (decompose-equality -1)
                            (("1" (inst?)
                              (("1" (replace -2)
                                (("1" (replace -1)
                                  (("1" (hide -1 -2)
                                    (("1" (typepred "x1!1")
                                      (("1"
                                        (lemma "sin_eq_0_2pi")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -)
                              (("2" (lemma "cos_derivable_fun")
                                (("2" (assert)
                                  (("2"
                                    (lemma
                                     "derivable_subtype[real,posreal_lt_pi]")
                                    (("2" (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "restrict")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "cos_derivable_fun")
                        (("2" (propax) nil nil)) nil)
                       ("3" (lemma del_neigh_lem2) (("3" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "deriv_cos_restrict") (("3" (flatten) nil nil)) nil)
       ("4" (skosimp*)
        (("4" (assert)
          (("4" (typepred "x!1")
            (("4" (lemma "cos_restrict_range")
              (("4" (inst?)
                (("4" (assert) (("4" (flatten) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (expand "connected?")
        (("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil))
      nil)
     ("3" (hide 2)
      (("3" (expand "connected?")
        (("3" (skosimp*) (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_domain_posreal_lt_pi formula-decl nil sincos nil)
    (noa_posreal_lt_pi formula-decl nil sincos nil)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (cos_restrict_bij formula-decl nil arccos nil)
    (deriv_cos_restrict formula-decl nil arccos nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (cos_derivable_fun formula-decl nil sincos nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sin_eq_0_2pi formula-decl nil sincos nil)
    (restrict const-decl "R" restrict nil)
    (del_neigh_lem2 formula-decl nil arccos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_cos formula-decl nil sincos_def nil)
    (cos_restrict_range formula-decl nil arccos nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (inverse_derivable_fun formula-decl nil derivative_inverse analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil))
   nil)
  (arc_cos_derivable-1 nil 3707220948
   ("" (lemma "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]")
    (("1"
      (inst - "(LAMBDA (x: real_abs_lt_pi2): sin(x))"
       "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
       "deriv[real_abs_lt_pi2](LAMBDA (x: real_abs_lt_pi2): sin(x))")
      (("1" (split -1)
        (("1"
          (case-replace "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
          (("1" (apply-extensionality 1 :hide? t) nil)))
         ("2" (hide 2)
          (("2" (lemma "deriv_sin_restrict") (("2" (flatten) nil)))))
         ("3" (lemma "sin_restrict_bij") (("3" (propax) nil)))
         ("4" (hide 2)
          (("4" (expand "inverse?")
            (("4" (skosimp*)
              (("4" (typepred "arc_sin(r!1)") (("4" (assert) nil)))))))))))
       ("2" (skosimp*)
        (("2" (lemma "deriv_sin")
          (("2" (inst?)
            (("2" (lemma "deriv_subtype[real,real_abs_lt_pi2]")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (expand "restrict")
                      (("1" (assert)
                        (("1" (decompose-equality -1)
                          (("1" (inst?)
                            (("1" (replace -2)
                              (("1" (replace -1)
                                (("1" (hide -1 -2 1)
                                  (("1" (lemma "cos_gt_0")
                                    (("1" (inst?)
                                      (("1" (assert) nil)))))))))))))
                           ("2" (hide -1 -2 1 2)
                            (("2" (lemma "cos_gt_0")
                              (("2" (inst?) (("2" (assert) nil)))))))))))))
                     ("2" (lemma "sin_derivable_fun") (("2" (propax) nil)))
                     ("3" (hide -1 -2 2)
                      (("3" (lemma del_neigh_lem)
                        (("3" (propax) nil)))))))))))))))))))
       ("3" (lemma "deriv_sin_restrict") (("3" (flatten) nil)))
       ("4" (skosimp*)
        (("4" (assert)
          (("4" (typepred "x!1")
            (("4" (lemma "sin_restrict_range")
              (("4" (inst?)
                (("4" (assert)
                  (("4" (flatten) (("4" (assert) nil)))))))))))))))))
     ("2" (hide 2)
      (("2" (expand "connected?") (("2" (skosimp*) (("2" (assert) nil)))))))
     ("3" (hide 2)
      (("3" (expand "connected?") (("3" (skosimp*) (("3" (assert) nil))))))))
    nil)
   nil nil))
 (arc_cos_range_lt 0
  (arc_cos_range_lt-2 nil 3707221986
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (case "arc_cos(x!1) = 0 IMPLIES x!1 = 1")
        (("1" (case "arc_cos(x!1) = pi IMPLIES x!1 = -1")
          (("1" (assert) nil nil)
           ("2" (hide -1 2)
            (("2" (flatten)
              (("2" (case "cos(pi) = -1")
                (("1" (assert) nil nil) ("2" (rewrite "cos_pi") nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (cos_pi formula-decl nil sincos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil))
   nil)
  (arc_cos_range_lt-1 nil 3707221972
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (case "arc_sin(x!1) = pi/2 IMPLIES x!1 = 1")
        (("1" (case "arc_sin(x!1) = -pi/2 IMPLIES x!1 = -1")
          (("1" (assert) nil)
           ("2" (hide -1 2)
            (("2" (flatten)
              (("2" (case "sin(-pi/2) = -1")
                (("1" (assert) nil)
                 ("2" (hide -1)
                  (("2" (lemma "sin_pi2")
                    (("2" (lemma "sin_neg")
                      (("2" (inst - "pi/2")
                        (("2" (assert) nil)))))))))))))))))
         ("2" (hide 2)
          (("2" (flatten)
            (("2" (lemma "sin_pi2") (("2" (assert) nil))))))))))))
    nil)
   nil nil))
 (deriv_arc_cos_prep 0
  (deriv_arc_cos_prep-1 nil 3707470209
   ("" (skosimp*)
    (("" (typepred "x!1")
      (("" (mult-ineq -2 -2)
        (("1" (assert) (("1" (expand "sq") (("1" (assert) nil nil)) nil)) nil)
         ("2" (grind) nil nil))
        nil))
      nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (sq const-decl "nonneg_real" sq reals)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil))
   nil))
 (deriv_arc_cos_fun_TCC1 0
  (deriv_arc_cos_fun_TCC1-1 nil 3707220934
   ("" (skosimp*)
    (("" (lemma "deriv_arc_cos_prep")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((deriv_arc_cos_prep formula-decl nil arccos nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_arc_cos_fun subtype "(number_fields.-)(1, sq.sq(arccos.x))"
    "nonneg_real")))
 (deriv_arc_cos_fun_TCC2 0
  (deriv_arc_cos_fun_TCC2-1 nil 3707220934
   ("" (flatten)
    (("" (hide -1)
      (("" (lemma "deriv_arc_cos_prep")
        (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_arc_cos_prep formula-decl nil arccos nil))
   nil
   (deriv_arc_cos_fun subtype
    "sqrt.sqrt((number_fields.-)(1, sq.sq(arccos.x)))" "nznum")))
 (deriv_arc_cos_fun 0
  (deriv_arc_cos_fun-4 nil 3707470390
   ("" (lemma "arc_cos_derivable")
    (("" (assert)
      (("" (lemma "deriv_cos_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,posreal_lt_pi]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_cos(x))"
               "(LAMBDA (x: posreal_lt_pi): cos(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1" (expand "const_fun")
                                      (("1"
                                        (case-replace
                                         "-sin(arc_cos(x!1)) = -sqrt(1-sq(x!1))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3 2)
                                          (("2"
                                            (case-replace
                                             "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (lemma "sqrt_lem")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "1-sq(x!1)"
                                                       "sin(arc_cos(x!1))")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (case
                                                                 "sq(cos(arc_cos(x!1))) = sq(x!1)")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (lemma
                                                                     "sin2_cos2")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_rew")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma "sin_ge_0")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (apply-extensionality 1 :hide? t) nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                          (("2" (apply-extensionality 1 :hide? t) nil nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3"
                            (case-replace
                             "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                            (("1" (hide -1)
                              (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                                (("1" (inst - "1" "0")
                                  (("1" (assert) (("1" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality 1 :hide? t) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "deriv_arc_cos_prep")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1")
                                (("1" (assert) nil nil)) nil)
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 2)
                (("2"
                  (case-replace
                   "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                  (("2" (apply-extensionality 1 :hide? t) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (derivable? const-decl "bool" derivatives analysis)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (x!1 skolem-const-decl "real_abs_lt1" arccos nil)
    (sq_neg formula-decl nil sq reals) (sq_le formula-decl nil sq reals)
    (deriv_arc_cos_prep formula-decl nil arccos nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (derivable_const application-judgement "deriv_fun" pi_def nil)
    (constant_seq2 application-judgement "(convergent_nz?)" convergence_ops
     analysis)
    (derivable_const application-judgement "deriv_fun" derivatives analysis)
    (x!1 skolem-const-decl "real_abs_lt1" arccos nil)
    (sq_rew formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (sin_ge_0 formula-decl nil trig_ineq nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_lem formula-decl nil sqrt reals)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sin const-decl "real" sincos_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_linear_fun formula-decl nil derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (chain_rule formula-decl nil chain_rule analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (deriv_cos_restrict formula-decl nil arccos nil)
    (arc_cos_derivable formula-decl nil arccos nil))
   nil)
  (deriv_arc_cos_fun-3 nil 3707224300
   ("" (lemma "arc_cos_derivable")
    (("" (assert)
      (("" (lemma "deriv_cos_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,posreal_lt_pi]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_cos(x))"
               "(LAMBDA (x: posreal_lt_pi): cos(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1" (expand "const_fun")
                                      (("1"
                                        (case-replace
                                         "-sin(arc_cos(x!1)) = -sqrt(1-sq(x!1))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (case-replace
                                                 "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (apply-extensionality
                                                     1
                                                     :hide?
                                                     t)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3 2)
                                          (("2"
                                            (case-replace
                                             "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (decompose-equality -1)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (lemma "sqrt_lem")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "1-sq(x!1)"
                                                       "sin(arc_cos(x!1))")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (case
                                                                 "sq(cos(arc_cos(x!1))) = sq(x!1)")
                                                                (("1"
                                                                  (hide -2)
                                                                  (("1"
                                                                    (lemma
                                                                     "sin2_cos2")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_rew")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma "sin_ge_0")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t) nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (apply-extensionality 1 :hide? t) nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                          (("2" (apply-extensionality 1 :hide? t) nil nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3"
                            (case-replace
                             "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                            (("1" (hide -1)
                              (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                                (("1" (inst - "1" "0")
                                  (("1" (assert) (("1" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (apply-extensionality 1 :hide? t) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "deriv_arc_sin_prep")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil)
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1")
                                (("1" (assert) nil nil)) nil)
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil nil)) nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 -2 2)
                (("2"
                  (case-replace
                   "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                  (("2" (apply-extensionality 1 :hide? t) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_range application-judgement "real_abs_le1" sincos nil)
    (derivable? const-decl "bool" derivatives analysis)
    (sin_range application-judgement "real_abs_le1" sincos nil)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_neg formula-decl nil sq reals) (sq_le formula-decl nil sq reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (constant_seq2 application-judgement "(convergent_nz?)" convergence_ops
     analysis)
    (derivable_const application-judgement "deriv_fun" derivatives analysis)
    (sq_rew formula-decl nil sq reals)
    (sin2_cos2 formula-decl nil sincos_def nil)
    (sin_ge_0 formula-decl nil trig_ineq nil)
    (sqrt_lem formula-decl nil sqrt reals)
    (sin const-decl "real" sincos_def nil)
    (deriv_linear_fun formula-decl nil derivatives analysis)
    (sq const-decl "nonneg_real" sq reals)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (chain_rule formula-decl nil chain_rule analysis)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (cos const-decl "real" sincos_def nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil))
   nil)
  (deriv_arc_cos_fun-2 nil 3707222222
   ("" (lemma "arc_cos_derivable")
    (("" (assert)
      (("" (lemma "deriv_cos_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,posreal_lt_pi]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_cos(x))"
               "(LAMBDA (x: posreal_lt_pi): cos(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "cos(arc_cos(x!1)) = sqrt(1-sq(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil)))))))))))))))
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (case
                                           "(LAMBDA (x: real_abs_lt1): cos(arc_cos(x))) = (LAMBDA (x: real_abs_lt1): x)")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (lemma "sqrt_lem")
                                                (("1"
                                                  (inst
                                                   -
                                                   "1-sq(x!1)"
                                                   "cos(arc_cos(x!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (replace -1 + rl)
                                                            (("1"
                                                              (lemma
                                                               "cos2_cos2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "sq")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))))))))
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (lemma "cos_ge_0")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil)))))))))))))))))))
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil)))))))))))
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t)
                                  nil)))))))
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil)))))))))
                                   ("2" (apply-extensionality 1 :hide? t)
                                    nil)))))))))))))
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                          (("2" (apply-extensionality 1 :hide? t) nil)))))
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3"
                            (case-replace
                             "(LAMBDA (x_1: real_abs_lt1): cos(arc_cos(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                            (("1" (hide -1)
                              (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                                (("1" (inst - "1" "0")
                                  (("1" (assert) (("1" (flatten) nil)))))))))
                             ("2" (apply-extensionality 1 :hide? t)
                              nil)))))))))
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "deriv_arc_cos_prep")
                          (("2" (inst?)
                            (("2" (lemma "sqrt_eq_0")
                              (("2" (inst?)
                                (("1" (assert) nil)
                                 ("2" (assert) nil)))))))))))))
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1") (("1" (assert) nil)))
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil)))))
                                 ("2" (assert) nil)))))))))))))))))))
               ("2" (hide -1 -2 2)
                (("2"
                  (case-replace
                   "(LAMBDA (x: real_abs_lt1): arc_cos(x)) = arc_cos")
                  (("2" (apply-extensionality 1 :hide? t) nil))))))))))))))))
    nil)
   nil nil)
  (deriv_arc_cos_fun-1 nil 3707222147
   ("" (lemma "arc_sin_derivable")
    (("" (assert)
      (("" (lemma "deriv_sin_restrict")
        (("" (flatten)
          (("" (lemma "chain_rule[real_abs_lt1,real_abs_lt_pi2]")
            ((""
              (inst - "(LAMBDA (x: real_abs_lt1): arc_sin(x))"
               "(LAMBDA (x: real_abs_lt_pi2): sin(x))")
              (("1" (expand "*")
                (("1" (assert)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (decompose-equality -1)
                      (("1" (inst?)
                        (("1"
                          (case-replace
                           "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1" (replace -3)
                                (("1" (hide -3)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "const_fun")
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case-replace
                                                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                                                  (("1" (assert) nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (apply-extensionality
                                                       1
                                                       :hide?
                                                       t)
                                                      nil)))))))))))))))
                                       ("2"
                                        (hide -1 -2 -3 2)
                                        (("2"
                                          (case
                                           "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (lemma "sqrt_lem")
                                                (("1"
                                                  (inst
                                                   -
                                                   "1-sq(x!1)"
                                                   "cos(arc_sin(x!1))")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (replace -1 + rl)
                                                            (("1"
                                                              (lemma
                                                               "sin2_cos2")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (expand
                                                                   "sq")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))))))))
                                                   ("2"
                                                    (hide -1 2)
                                                    (("2"
                                                      (lemma "cos_ge_0")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (apply-extensionality
                                               1
                                               :hide?
                                               t)
                                              nil)))))))))))))))))))
                           ("2" (hide -1 -2 2)
                            (("2"
                              (case-replace
                               "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                              (("1" (hide -1 -2 -3)
                                (("1" (expand "const_fun")
                                  (("1"
                                    (lemma "deriv_linear_fun[real_abs_lt1]")
                                    (("1" (inst - "1" "0")
                                      (("1"
                                        (assert)
                                        (("1" (flatten) nil)))))))))))
                               ("2" (hide 2)
                                (("2" (apply-extensionality 1 :hide? t)
                                  nil)))))))
                           ("3" (hide 2)
                            (("3" (hide -1 -3 -4)
                              (("3" (hide -1)
                                (("3"
                                  (case-replace
                                   "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                                  (("1" (hide -1)
                                    (("1"
                                      (lemma "deriv_linear_fun[real_abs_lt1]")
                                      (("1"
                                        (inst - "1" "0")
                                        (("1"
                                          (assert)
                                          (("1" (flatten) nil)))))))))
                                   ("2" (apply-extensionality 1 :hide? t)
                                    nil)))))))))))))
                       ("2" (hide -4 -5 -6 2)
                        (("2"
                          (case-replace
                           "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                          (("2" (apply-extensionality 1 :hide? t) nil)))))
                       ("3" (hide 2)
                        (("3" (hide -)
                          (("3"
                            (case-replace
                             "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)")
                            (("1" (hide -1)
                              (("1" (lemma "deriv_linear_fun[real_abs_lt1]")
                                (("1" (inst - "1" "0")
                                  (("1" (assert) (("1" (flatten) nil)))))))))
                             ("2" (apply-extensionality 1 :hide? t)
                              nil)))))))))
                     ("2" (hide -)
                      (("2" (skosimp*)
                        (("2" (lemma "deriv_arc_sin_prep")
                          (("2" (inst?)
                            (("2" (lemma "sqrt_eq_0")
                              (("2" (inst?)
                                (("1" (assert) nil)
                                 ("2" (assert) nil)))))))))))))
                     ("3" (hide -)
                      (("3" (skosimp*)
                        (("3" (typepred "x!1")
                          (("3" (lemma "sq_le")
                            (("3" (case "x!1 >= 0")
                              (("1" (inst - "x!1" "1") (("1" (assert) nil)))
                               ("2" (inst - "-x!1" "1")
                                (("1" (assert)
                                  (("1" (rewrite "sq_neg")
                                    (("1" (assert) nil)))))
                                 ("2" (assert) nil)))))))))))))))))))
               ("2" (hide -1 -2 2)
                (("2"
                  (case-replace
                   "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin")
                  (("2" (apply-extensionality 1 :hide? t) nil))))))))))))))))
    nil)
   nil nil))
 (arc_cos_continuous 0
  (arc_cos_continuous-1 nil 3707225896
   ("" (lemma "arc_cos_derivable")
    (("" (lemma "derivable_cont_fun[real_abs_lt1]")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (derivable_cont_fun formula-decl nil derivatives analysis)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (arc_cos_derivable formula-decl nil arccos nil))
   nil))
 (arc_cos_bij 0
  (arc_cos_bij-1 nil 3707225932
   ("" (lemma "bij_inv_is_bij[posreal_lt_pi,real_abs_lt1]")
    (("" (inst - "cos_restrict")
      (("" (assert)
        (("" (split -1)
          (("1" (lemma "arc_cos_inverse") (("1" (assert) nil nil)) nil)
           ("2" (hide 2)
            (("2" (lemma "cos_restrict_bij") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arc_cos_inverse formula-decl nil arccos nil)
    (cos_restrict_bij formula-decl nil arccos nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (bij_inv_is_bij formula-decl nil function_inverse nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil))
   nil))
 (arccos_TCC1 0
  (arccos_TCC1-1 nil 3707225859 ("" (subtype-tcc) nil nil) nil nil
   (arccos subtype "pi_def.pi" "nnreal_le_pi")))
 (arccos_TCC2 0
  (arccos_TCC2-1 nil 3707225859 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (arccos subtype "arccos.y" "real_abs_lt1")))
 (arccos_TCC3 0
  (arccos_TCC3-1 nil 3707227366 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (arccos subtype "arccos.arc_cos(arccos.y)" "nnreal_le_pi")))
 (arccos_TCC4 0
  (arccos_TCC4-1 nil 3707469805 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (arccos subtype "0" "nnreal_le_pi")))
 (arc_cos_0 0
  (arc_cos_0-1 nil 3707227416
   ("" (typepred "arc_cos(0)")
    (("" (lemma "cos_eq_0")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp*)
            (("" (case "i!1 = 0")
              (("1" (assert) nil nil)
               ("2" (case "i!1 >= 1")
                (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil)) nil)
                 ("2" (case "i!1 <= -1")
                  (("1" (mult-by -1 "2*pi") (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_eq_0 formula-decl nil sincos nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_range application-judgement "real_abs_le1" sincos nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (real_abs_lt1 nonempty-type-eq-decl nil trig_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     nil)
    (posreal_lt_pi nonempty-type-eq-decl nil trig_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (arc_cos const-decl "{x: posreal_lt_pi | y = cos(x)}" arccos nil))
   nil)))


(linear_transformations_2D
 (linear_transform_zero 0
  (linear_transform_zero-1 nil 3469894976
   ("" (skeep)
    (("" (expand "linear_transform?")
      (("" (inst - "zero" "zero")
        (("" (inst - "0" "0") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((linear_transform? const-decl "bool" linear_transformations_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (scal_0 formula-decl nil vectors_2D nil)
    (add_zero_left formula-decl nil vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (linear_transform_scal 0
  (linear_transform_scal-1 nil 3469896390
   ("" (skeep)
    (("" (skeep)
      (("" (expand "linear_transform?")
        (("" (inst - "u" "zero")
          (("" (inst - "a" "0") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil)
    (add_zero_right formula-decl nil vectors_2D nil)
    (scal_0 formula-decl nil vectors_2D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (linear_transform? const-decl "bool" linear_transformations_2D nil))
   shostak))
 (linear_transform_add 0
  (linear_transform_add-1 nil 3469896526
   ("" (skeep)
    (("" (skeep)
      (("" (expand "linear_transform?")
        (("" (inst - "u" "v")
          (("" (inst - "1" "1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (linear_transform? const-decl "bool" linear_transformations_2D nil))
   shostak))
 (linear_transform_sub 0
  (linear_transform_sub-1 nil 3469896544
   ("" (skeep)
    (("" (skeep)
      (("" (expand "linear_transform?")
        (("" (inst - "u" "v")
          (("" (inst - "1" "-1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (scal_neg_1 formula-decl nil vectors_2D nil)
    (add_neg_sub formula-decl nil vectors_2D nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (linear_transform? const-decl "bool" linear_transformations_2D nil))
   shostak))
 (linear_transform_rew 0
  (linear_transform_rew-1 nil 3469894596
   ("" (skeep)
    (("" (expand "linear_transform?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst - "u" "v")
            (("1" (inst - "1" "1") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (inst - "u" "zero")
            (("2" (inst - "a" "0") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (inst - "a*u" "b*v")
              (("3" (inst-cp - "u" "a")
                (("3" (inst - "v" "b") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_transform? const-decl "bool" linear_transformations_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (scal_0 formula-decl nil vectors_2D nil)
    (add_zero_right formula-decl nil vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (linear_transform_alt_left 0
  (linear_transform_alt_left-1 nil 3469894809
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (skeep)
          (("1" (expand "linear_transform?")
            (("1" (inst - "u" "v")
              (("1" (inst - "a" "1") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (copy -1)
        (("2" (lemma "linear_transform_rew")
          (("2" (inst - "L")
            (("2" (assert)
              (("2" (hide 2)
                (("2" (split)
                  (("1" (skeep)
                    (("1" (inst - "u" "v")
                      (("1" (inst - "1") (("1" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst - "u" "zero")
                      (("2" (inst - "a")
                        (("2" (assert)
                          (("2" (inst - "zero" "zero")
                            (("2" (inst - "1")
                              (("2" (assert)
                                (("2" (case "L(zero) = zero")
                                  (("1" (replace -1) (("1" (assert) nil nil))
                                    nil)
                                   ("2" (hide-all-but (-2 1))
                                    (("2" (expand "+")
                                      (("2" (decompose-equality) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (linear_transform? const-decl "bool" linear_transformations_2D nil)
    (linear_transform_rew formula-decl nil linear_transformations_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (add_zero_right formula-decl nil vectors_2D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_2D nil)
    (comp_zero_y formula-decl nil vectors_2D nil)
    (comp_zero_x formula-decl nil vectors_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add_zero_left formula-decl nil vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil))
   shostak))
 (linear_transform_alt_right 0
  (linear_transform_alt_right-1 nil 3469897191
   ("" (skeep)
    (("" (lemma "linear_transform_alt_left")
      (("" (inst?)
        (("" (replace -1)
          (("" (hide -1)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "v" "u")
                  (("1" (skeep)
                    (("1" (inst - "a") (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "v" "u")
                  (("2" (skeep)
                    (("2" (inst - "a") (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_transform_alt_left formula-decl nil linear_transformations_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (linear_transform_perp_unique 0
  (linear_transform_perp_unique-1 nil 3469896156
   ("" (skeep)
    (("" (decompose-equality 3)
      (("" (lemma "orthogonal_basis")
        (("" (inst - "u" "v" "x!1")
          (("" (assert)
            (("" (replace -1)
              (("" (lemma "linear_transform_add")
                (("" (inst?)
                  (("" (assert)
                    (("" (inst?)
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (lemma "linear_transform_scal")
                            (("" (inst - "L")
                              (("" (assert)
                                (("" (inst - "u" "((x!1 * u) / sqv(u))")
                                  (("" (lemma "linear_transform_scal")
                                    (("" (inst - "L")
                                      ((""
                                        (assert)
                                        ((""
                                          (inst - "v" "((x!1 * v) / sqv(v))")
                                          ((""
                                            (lemma "linear_transform_add")
                                            ((""
                                              (inst - "J")
                                              ((""
                                                (assert)
                                                ((""
                                                  (inst
                                                   -
                                                   "((x!1 * u) / sqv(u)) * u"
                                                   "((x!1 * v) / sqv(v)) * v")
                                                  ((""
                                                    (replace -1)
                                                    ((""
                                                      (lemma
                                                       "linear_transform_scal")
                                                      ((""
                                                        (inst - "J")
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (copy -1)
                                                            ((""
                                                              (inst
                                                               -
                                                               "v"
                                                               "((x!1 * v) / sqv(v))")
                                                              ((""
                                                                (inst
                                                                 -
                                                                 "u"
                                                                 "((x!1 * u) / sqv(u))")
                                                                ((""
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D nil)
    (linear_transform_scal formula-decl nil linear_transformations_2D nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (linear_transform_add formula-decl nil linear_transformations_2D nil)
    (orthogonal_basis formula-decl nil basis_2D nil))
   shostak))
 (linear_functional_zero 0
  (linear_functional_zero-1 nil 3469896999
   ("" (skeep)
    (("" (expand "linear_functional?")
      (("" (inst - "zero" "zero")
        (("" (inst - "0" "0") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (add_zero_left formula-decl nil vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (linear_functional_scal 0
  (linear_functional_scal-1 nil 3469897023
   ("" (skeep)
    (("" (expand "linear_functional?")
      (("" (skeep)
        (("" (inst - "u" "zero")
          (("" (inst - "a" "0") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil)
    (add_zero_right formula-decl nil vectors_2D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (linear_functional_add 0
  (linear_functional_add-1 nil 3469897049
   ("" (skeep)
    (("" (expand "linear_functional?")
      (("" (skeep)
        (("" (inst - "u" "v")
          (("" (inst - "1" "1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (linear_functional_sub 0
  (linear_functional_sub-1 nil 3469897073
   ("" (skeep)
    (("" (expand "linear_functional?")
      (("" (skeep)
        (("" (inst - "u" "v")
          (("" (inst - "1" "-1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (scal_neg_1 formula-decl nil vectors_2D nil)
    (add_neg_sub formula-decl nil vectors_2D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (kernel_functional_nonempty 0
  (kernel_functional_nonempty-1 nil 3469899049
   ("" (skeep)
    (("" (case "F(iv) /= 0")
      (("1" (name "const1" "F(jv)/F(iv)")
        (("1" (name "constvect" "const1*iv-jv")
          (("1" (inst + "constvect")
            (("1" (split)
              (("1" (hide-all-but (-1 1))
                (("1" (flatten)
                  (("1" (replace -1)
                    (("1" (hide -1)
                      (("1" (expand "jv")
                        (("1" (expand "iv")
                          (("1" (expand "zero") (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1 + rl)
                (("2" (expand "linear_functional?")
                  (("2" (inst - "iv" "jv" "const1" "-1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil)
       ("2" (flatten)
        (("2" (inst + "iv")
          (("2" (assert)
            (("2" (expand "iv")
              (("2" (expand "zero") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iv const-decl "Normalized" vectors_2D nil)
    (Normalized type-eq-decl nil vectors_2D nil)
    (norm const-decl "nnreal" vectors_2D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "Vector" vectors_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (zero const-decl "Vector" vectors_2D nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (scal_neg_1 formula-decl nil vectors_2D nil)
    (add_neg_sub formula-decl nil vectors_2D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (jv const-decl "Normalized" vectors_2D nil))
   shostak))
 (linear_functional_is_dot 0
  (linear_functional_is_dot-1 nil 3469899666
   ("" (skeep)
    (("" (name "wwww" "(F(iv), F(jv))")
      (("" (inst + "wwww")
        (("" (decompose-equality 1)
          (("" (expand "*")
            (("" (replace -1 + rl)
              (("" (assert)
                (("" (expand "linear_functional?")
                  (("" (inst - "iv" "jv")
                    (("" (inst - "x!1`x" "x!1`y")
                      (("" (case "x!1 = x!1`x * iv + x!1`y * jv")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "iv")
                            (("2" (expand "jv")
                              (("2" (expand "*")
                                (("2" (expand "+")
                                  (("2" (decompose-equality 1) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((jv const-decl "Normalized" vectors_2D nil)
    (iv const-decl "Normalized" vectors_2D nil)
    (Normalized type-eq-decl nil vectors_2D nil)
    (norm const-decl "nnreal" vectors_2D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "real" vectors_2D nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (+ const-decl "Vector" vectors_2D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (linear_functional_rew 0
  (linear_functional_rew-1 nil 3469897125
   ("" (skeep)
    (("" (expand "linear_functional?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst - "u" "v")
            (("1" (inst - "1" "1") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (inst - "u" "zero")
            (("2" (inst - "a" "0") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (inst - "a*u" "b*v")
              (("3" (inst-cp - "u" "a")
                (("3" (inst - "v" "b") (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (add_zero_right formula-decl nil vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (linear_functional_alt_left 0
  (linear_functional_alt_left-2 nil 3469897332
   ("" (skeep)
    (("" (ground)
      (("1" (skeep)
        (("1" (skeep)
          (("1" (expand "linear_functional?")
            (("1" (inst - "u" "v")
              (("1" (inst - "a" "1") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (copy -1)
        (("2" (lemma "linear_functional_rew")
          (("2" (inst - "F")
            (("2" (assert)
              (("2" (hide 2)
                (("2" (split)
                  (("1" (skeep)
                    (("1" (inst - "u" "v")
                      (("1" (inst - "1") (("1" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst - "u" "zero")
                      (("2" (inst - "a")
                        (("2" (assert)
                          (("2" (inst - "zero" "zero")
                            (("2" (inst - "1") (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (scal_1 formula-decl nil vectors_2D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (linear_functional_rew formula-decl nil linear_transformations_2D nil)
    (zero const-decl "Vector" vectors_2D nil)
    (add_zero_right formula-decl nil vectors_2D nil)
    (add_zero_left formula-decl nil vectors_2D nil)
    (scal_zero formula-decl nil vectors_2D nil))
   nil)
  (linear_functional_alt_left-1 nil 3469897302
   ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))
 (linear_functional_alt_right 0
  (linear_functional_alt_right-1 nil 3469897411
   ("" (skeep)
    (("" (lemma "linear_functional_alt_left")
      (("" (inst?)
        (("" (replace -1)
          (("" (hide -1)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "v" "u")
                  (("1" (skeep)
                    (("1" (inst - "a") (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst - "v" "u")
                  (("2" (skeep)
                    (("2" (inst - "a") (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((linear_functional_alt_left formula-decl nil linear_transformations_2D
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (linear_functional_perp_unique 0
  (linear_functional_perp_unique-1 nil 3469897490
   ("" (skeep)
    (("" (decompose-equality 3)
      (("" (lemma "orthogonal_basis")
        (("" (inst - "u" "v" "x!1")
          (("" (assert)
            (("" (replace -1)
              (("" (lemma "linear_functional_add")
                (("" (inst?)
                  (("" (assert)
                    (("" (inst?)
                      (("" (replace -1)
                        (("" (hide -1)
                          (("" (lemma "linear_functional_scal")
                            (("" (inst - "F")
                              (("" (assert)
                                (("" (inst - "u" "((x!1 * u) / sqv(u))")
                                  (("" (lemma "linear_functional_scal")
                                    (("" (inst - "F")
                                      ((""
                                        (assert)
                                        ((""
                                          (inst - "v" "((x!1 * v) / sqv(v))")
                                          ((""
                                            (lemma "linear_functional_add")
                                            ((""
                                              (inst - "G")
                                              ((""
                                                (assert)
                                                ((""
                                                  (inst
                                                   -
                                                   "((x!1 * u) / sqv(u)) * u"
                                                   "((x!1 * v) / sqv(v)) * v")
                                                  ((""
                                                    (replace -1)
                                                    ((""
                                                      (lemma
                                                       "linear_functional_scal")
                                                      ((""
                                                        (inst - "G")
                                                        ((""
                                                          (assert)
                                                          ((""
                                                            (copy -1)
                                                            ((""
                                                              (inst
                                                               -
                                                               "v"
                                                               "((x!1 * v) / sqv(v))")
                                                              ((""
                                                                (inst
                                                                 -
                                                                 "u"
                                                                 "((x!1 * u) / sqv(u))")
                                                                ((""
                                                                  (replace -1)
                                                                  ((""
                                                                    (replace
                                                                     -2)
                                                                    ((""
                                                                      (replace
                                                                       -4)
                                                                      ((""
                                                                        (replace
                                                                         -5)
                                                                        ((""
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def nil)
    (* const-decl "Vector" vectors_2D nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (linear_functional_scal formula-decl nil linear_transformations_2D nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (linear_functional_add formula-decl nil linear_transformations_2D nil)
    (orthogonal_basis formula-decl nil basis_2D nil))
   nil))
 (linear_functional_is_perp_dot 0
  (linear_functional_is_perp_dot-1 nil 3469900569
   ("" (skeep)
    (("" (name "rzk" "F(perpR(u))/sqv(u)")
      (("1" (inst + "rzk")
        (("1" (lemma "linear_functional_perp_unique")
          (("1"
            (inst - "F" "(LAMBDA (v: Vector): rzk * det(v, u))" "u"
             "perpR(u)")
            (("1" (assert)
              (("1" (ground)
                (("1" (hide-all-but (-1 1))
                  (("1" (expand "zero")
                    (("1" (expand "perpR")
                      (("1" (flatten) (("1" (decompose-equality) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "linear_functional?")
                    (("2" (skosimp*) (("2" (grind) nil nil)) nil)) nil))
                  nil)
                 ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil)
                 ("4" (replace -1 + rl)
                  (("4" (lemma "det_perpR")
                    (("4" (inst - "perpR(u)" "u")
                      (("4" (replace -1)
                        (("4" (lemma "sqv_perpR")
                          (("4" (inst?)
                            (("4" (expand "sqv" -1 1)
                              (("4" (replace -1) (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "sqv_eq_0")
        (("2" (inst - "u") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqv const-decl "nnreal" vectors_2D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (perpR const-decl "Vect2" perpendicular_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (linear_functional_perp_unique formula-decl nil linear_transformations_2D
     nil)
    (det_eq_0 formula-decl nil det_2D nil)
    (sqv_perpR formula-decl nil perpendicular_2D nil)
    (det_perpR formula-decl nil det_2D nil)
    (orthogonal? const-decl "bool" vectors_2D nil)
    (* const-decl "real" vectors_2D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D nil)
    (* const-decl "Vector" vectors_2D nil)
    (linear_functional? const-decl "bool" linear_transformations_2D nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (zero const-decl "Vector" vectors_2D nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (det const-decl "real" det_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv_eq_0 formula-decl nil vectors_2D nil))
   shostak))
 (linear_functional_perp_signs_unique 0
  (linear_functional_perp_signs_unique-1 nil 3469964996
   ("" (skeep)
    (("" (label "lfF" -1)
      (("" (label "lfG" -2)
        (("" (label "FGu" -3)
          (("" (label "fv" -4)
            (("" (label "gv" -5)
              (("" (lemma "linear_functional_is_perp_dot")
                (("" (inst-cp - "F" "v")
                  (("" (inst - "G" "v")
                    (("" (assert)
                      (("" (skosimp*)
                        (("" (replace -1)
                          (("" (replace -2)
                            (("" (assert)
                              (("" (rewrite "det_perpR")
                                (("" (rewrite "det_perpR")
                                  (("" (name "const3" "u*perpR(v)")
                                    (("" (replace -1)
                                      ((""
                                        (name "const4" "w!1*perpR(v)")
                                        ((""
                                          (replace -1)
                                          ((""
                                            (hide-all-but ("FGu" 2))
                                            ((""
                                              (case-replace
                                               "const3*const3 = sq(const3)")
                                              (("1"
                                                (case-replace
                                                 "const4*const4 = sq(const4)")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (case "rzk!1*rzk!2 > 0")
                                                      (("1"
                                                        (div-by
                                                         1
                                                         "sq(const4)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (div-by
                                                         -1
                                                         "sq(const3)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "sq")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "sq")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (det_eq_0 formula-decl nil det_2D nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (const4 skolem-const-decl "real" linear_transformations_2D nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (const3 skolem-const-decl "real" linear_transformations_2D nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (perpR const-decl "Vect2" perpendicular_2D nil)
    (* const-decl "real" vectors_2D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (det_perpR formula-decl nil det_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def nil)
    (linear_functional_is_perp_dot formula-decl nil linear_transformations_2D
     nil))
   nil)))


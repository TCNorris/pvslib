(vect3_fun_ops
 (caret_TCC1 0
  (caret_TCC1-1 nil 3403006068 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (caret subtype "vect3_fun_ops.n"
    "{i: integers.int | booleans.OR(vect3_fun_ops.f(vect3_fun_ops.v) /= 0, reals.>=(i, 0))}")))
 (diff_function 0
  (diff_function-1 nil 3258969194
   ("" (skolem!) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (- const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (+ const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (- const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil))
 (div_function 0
  (div_function-1 nil 3258969194
   ("" (skolem!) (("" (apply-extensionality) (("" (grind) nil nil)) nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (/ const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (* const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (/ const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil))
 (scal_function 0
  (scal_function-1 nil 3258969194
   ("" (skolem!)
    (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (const_fun const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (* const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (* const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (scaldiv_function 0
  (scaldiv_function-1 nil 3258969194
   ("" (skolem!)
    (("" (apply-extensionality :hide? t) (("" (grind) nil nil)) nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (const_fun const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (/ const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (/ const-decl "[Vect3 -> real]" vect3_fun_ops nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (negneg_function 0
  (negneg_function-2 "" 3790093287
   ("" (skolem!)
    (("" (auto-rewrite "-") (("" (apply-extensionality :hide? t) nil nil))
      nil))
    nil)
   nil shostak)
  (negneg_function-1 nil 3258969194
   ("" (skolem!)
    (("" (auto-rewrite "-") (("" (apply-extensionality :hide? t) nil)))) nil)
   ((real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[Vect3 -> real]" vect3_fun_ops nil))
   nil)))


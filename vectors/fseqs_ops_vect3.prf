(fseqs_ops_vect3
 (plus_TCC1 0
  (plus_TCC1-1 nil 3563272395 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (+ const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (default const-decl "T" fseqs structures))
   nil
   (plus subtype
    "(LAMBDA n: IF reals.<(fseqs_ops_vect3.n, fseqs_ops_vect3.len) THEN (vectors_3D.+)(fseqs_ops_vect3.fs`seq(fseqs_ops_vect3.n), fseqs_ops_vect3.gs`seq(fseqs_ops_vect3.n)) ELSE fseqs[Vect3].default ENDIF)"
    "fseqs[Vect3].barray(fseqs_ops_vect3.len)")))
 (times_TCC1 0
  (times_TCC1-1 nil 3563272395 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (default const-decl "T" fseqs structures))
   nil
   (times subtype
    "(LAMBDA n: IF reals.<(fseqs_ops_vect3.n, fseqs_ops_vect3.gs`length) THEN vectors_3D.*(fseqs_ops_vect3.c`seq(fseqs_ops_vect3.n), fseqs_ops_vect3.gs`seq(fseqs_ops_vect3.n)) ELSE fseqs[Vect3].default ENDIF)"
    "fseqs[Vect3].barray(fseqs_ops_vect3.gs`length)"))))


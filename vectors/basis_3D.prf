(basis_3D
 (orthogonal_kernel 0
  (orthogonal_kernel-1 nil 3651332825
   (""
    (case "NOT FORALL (a1, a2, a3: real, e1, e2, e3: Vect3):
             e1 /= zero AND e2 /= zero AND e3 /= zero
         AND orthogonal?(e1, e2, e3) AND a1 * e1 + a2 * e2 + a3 * e3 = zero
         IMPLIES a1=0")
    (("1" (hide 2)
      (("1" (skeep)
        (("1" (expand "orthogonal?")
          (("1" (flatten)
            (("1" (expand "orthogonal?")
              (("1" (case "e1 = (-a2/a1)*e2 + (-a3/a1)*e3")
                (("1" (replace -1 -2)
                  (("1" (rewrite "dot_add_left")
                    (("1" (case "NOT e3*e2=0")
                      (("1" (grind) nil nil)
                       ("2" (replace -1)
                        (("2" (assert)
                          (("2" (lemma "sqv_eq_0")
                            (("2" (inst - "e2")
                              (("2" (assert)
                                (("2" (case "a2/=0")
                                  (("1" (flatten)
                                    (("1" (mult-by 2 "-a2/a1")
                                      (("1"
                                        (expand "sqv" 2)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (replace -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -3 -6)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "sqv_eq_0")
                                              (("2"
                                                (inst - "e3")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (mult-by 1 "-a3/a1")
                                                    (("1"
                                                      (expand "sqv" 1)
                                                      (("1" (assert) nil nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (cross-mult -1)
                                                        (("2"
                                                          (case "NOT a3 = 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (replace -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "NOT (1/a1)*(a1 * e1 + a2 * e2 + a3 * e3)=(1/a1)*zero")
                  (("1" (grind) nil nil)
                   ("2" (rewrite "scal_add_right")
                    (("2" (rewrite "scal_add_right")
                      (("2" (assert)
                        (("2"
                          (both-sides "-"
                           "((1 / a1) * a2) * e2 + ((1 / a1) * a3) * e3" -1)
                          (("1" (assert)
                            (("1"
                              (case "NOT e1 + ((1 / a1) * a2) * e2 + ((1 / a1) * a3) * e3 -
       (((1 / a1) * a2) * e2 + ((1 / a1) * a3) * e3) = e1+zero")
                              (("1" (hide-all-but 1) (("1" (grind) nil nil))
                                nil)
                               ("2" (assert)
                                (("2" (replaces -1)
                                  (("2" (replaces -1 1)
                                    (("2" (hide -) (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (iff) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (split +)
        (("1" (insteep -) (("1" (assert) nil nil)) nil)
         ("2" (inst - "a2" "a1" "a3" "e2" "e1" "e3")
          (("2" (assert)
            (("2" (split +) (("1" (grind) nil nil) ("2" (grind) nil nil))
              nil))
            nil))
          nil)
         ("3" (inst - "a3" "a1" "a2" "e3" "e1" "e2")
          (("3" (assert)
            (("3" (split) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthogonal? const-decl "bool" vectors_3D nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (scal_1 formula-decl nil vectors_3D nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "Vector" vectors_3D nil)
    (sub_zero_left formula-decl nil vectors_3D nil)
    (times_div2 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "Vector" vectors_3D nil)
    (scal_zero formula-decl nil vectors_3D nil)
    (scal_assoc formula-decl nil vectors_3D nil)
    (scal_add_right formula-decl nil vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (a1 skolem-const-decl "real" basis_3D nil)
    (a2 skolem-const-decl "real" basis_3D nil)
    (div_cancel3 formula-decl nil real_props nil)
    (a3 skolem-const-decl "real" basis_3D nil)
    (dot_scal_right formula-decl nil vectors_3D nil)
    (add_zero_right formula-decl nil vectors_3D nil)
    (add_zero_left formula-decl nil vectors_3D nil)
    (scal_0 formula-decl nil vectors_3D nil)
    (sqv_eq_0 formula-decl nil vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dot_add_left formula-decl nil vectors_3D nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (zero const-decl "Vector" vectors_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil))
   shostak))
 (orthogonal_spans 0
  (orthogonal_spans-1 nil 3651396935
   (""
    (name "spans"
          "LAMBDA (e1,e2,e3:Vect3): (FORALL (w:Vect3): EXISTS (a1,a2,a3:real): w = a1*e1+a2*e2+a3*e3)")
    (("" (name "E1" "(# x:=1,y:=0,z:=0 #)")
      (("" (name "E2" "(# x:=0,y:=1,z:=0 #)")
        (("" (name "E3" "(# x:=0,y:=0,z:=1 #)")
          (("" (hide -4)
            (("" (case "NOT spans(E1,E2,E3)")
              (("1" (hide 2)
                (("1" (expand "spans")
                  (("1" (skeep)
                    (("1" (inst + "w`x" "w`y" "w`z")
                      (("1" (replaces -1 :dir rl)
                        (("1" (replaces -1 :dir rl)
                          (("1" (replaces -1 :dir rl)
                            (("1" (assert)
                              (("1" (case "w = w+zero")
                                (("1" (replaces -1) (("1" (grind) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skolem 1 ("e1" "e2" "e3" _))
                (("2" (case "e1=zero OR e2=zero OR e3=zero")
                  (("1" (skosimp*) (("1" (ground) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (case "NOT orthogonal?(e1,e2,e3)")
                      (("1" (skosimp*) nil nil)
                       ("2" (case "spans(e1,e2,e3)")
                        (("1" (expand "spans") (("1" (assert) nil nil)) nil)
                         ("2" (hide 5)
                          (("2" (copy -2)
                            (("2" (expand "spans" -1)
                              (("2" (inst - "e1")
                                (("2" (skolem - ("d1" "d2" "d3"))
                                  (("2"
                                    (name "A1"
                                          "IF d1/=0 THEN E1 ELSIF d2/=0 THEN E2 ELSE E3 ENDIF")
                                    (("2"
                                      (name
                                       "A2"
                                       "IF d1/=0 THEN E2 ELSIF d2/=0 THEN E1 ELSE E1 ENDIF")
                                      (("2"
                                        (name
                                         "A3"
                                         "IF d1/=0 THEN E3 ELSIF d2/=0 THEN E3 ELSE E2 ENDIF")
                                        (("2"
                                          (name
                                           "aa1"
                                           "IF d1/=0 THEN d1 ELSIF d2/=0 THEN d2 ELSE d3 ENDIF")
                                          (("2"
                                            (name
                                             "aa2"
                                             "IF d1/=0 THEN d2 ELSIF d2/=0 THEN d1 ELSE d1 ENDIF")
                                            (("2"
                                              (name
                                               "aa3"
                                               "IF d1/=0 THEN d3 ELSIF d2/=0 THEN d3 ELSE d2 ENDIF")
                                              (("2"
                                                (case
                                                 "NOT (d1/=0 OR d2/=0 OR d3/=0)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "NOT aa1/=0")
                                                  (("1"
                                                    (expand "aa1" 1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (label "igz" -2)
                                                    (("2"
                                                      (hide "igz")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (case
                                                           "NOT A1 + zero = (1/aa1)*e1 + (-aa2/aa1)*A2 + (-aa3/aa1)*A3")
                                                          (("1"
                                                            (case
                                                             "aa1*A1 = e1 - aa2*A2 - aa3*A3")
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1 2))
                                                              (("1"
                                                                (decompose-equality
                                                                 +)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (case
                                                                 "e1 = aa1*A1+aa2*A2+aa3*A3")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide 2)
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (label
                                                                         "pz"
                                                                         -7)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (replace
                                                                             "pz"
                                                                             +)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             "pz"
                                                                             +)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "NOT spans(e1,A2,A3)")
                                                            (("1"
                                                              (expand
                                                               "spans"
                                                               1)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (expand
                                                                   "spans"
                                                                   -)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "w")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (replaces
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replaces
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4
                                                                                         +)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           +)
                                                                                          (("1"
                                                                                            (inst
                                                                                             7
                                                                                             "a1/d1"
                                                                                             _
                                                                                             _)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_add_right")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "scal_add_right")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "a2-(a1/d1)*d2"
                                                                                                     _)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "scal_sub_left")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "a3-(a1/d1)*d3")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (replace
                                                                                   -4
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -11
                                                                                       +)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -9
                                                                                         +)
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           _
                                                                                           "a1"
                                                                                           _)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "a2/d2"
                                                                                               _)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "a3-(a2/d2)*d3")
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (replace
                                                                             -1)
                                                                            (("3"
                                                                              (replace
                                                                               -3)
                                                                              (("3"
                                                                                (case
                                                                                 "d3 = 0")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "0"
                                                                                     "0"
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -10
                                                                                     +)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -12
                                                                                       +)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -4
                                                                                           +
                                                                                           :dir
                                                                                           rl)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -5
                                                                                             +
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "a3/d3"
                                                                                               "a1"
                                                                                               "a2")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (copy -1)
                                                              (("2"
                                                                (expand
                                                                 "spans"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "e2")
                                                                  (("2"
                                                                    (skolem
                                                                     -
                                                                     ("f1"
                                                                      "f2"
                                                                      "f3"))
                                                                    (("2"
                                                                      (case
                                                                       "f2 = 0 AND f3 = 0")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sqv_eq_0")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "e1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "e2*e1 = 0")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "f1 = 0")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (mult-by
                                                                                               2
                                                                                               "f1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    2))
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (name
                                                                         "B"
                                                                         "IF f2 = 0 THEN A3 ELSE A2 ENDIF")
                                                                        (("2"
                                                                          (name
                                                                           "b"
                                                                           "IF f2=0 THEN f3 ELSE f2 ENDIF")
                                                                          (("2"
                                                                            (name
                                                                             "C"
                                                                             "IF f2 = 0 THEN A2 ELSE A3 ENDIF")
                                                                            (("2"
                                                                              (name
                                                                               "c"
                                                                               "IF f2=0 THEN f2 ELSE f3 ENDIF")
                                                                              (("2"
                                                                                (case
                                                                                 "NOT e2 = f1*e1 + b*B+c*C")
                                                                                (("1"
                                                                                  (hide
                                                                                   -8)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -8)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -8)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -8)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -8)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5
                                                                                               1)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "NOT b/=0")
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -9)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -9)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -9)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -9)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -9)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "NOT B+zero = (1/b)*e2 - (f1/b)*e1-(c/b)*C")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "NOT spans(e1,e2,C)")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "spans"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (copy
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "spans"
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "w")
                                                                                                                  (("1"
                                                                                                                    (skeep
                                                                                                                     -)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (lift-if)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -6
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -7
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -8
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -5
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 +
                                                                                                                                                 _
                                                                                                                                                 _
                                                                                                                                                 "a2")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   _
                                                                                                                                                   "a3/f3")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "scal_add_right")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         +
                                                                                                                                                         "a1-(a3/f3)*f1")
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -)
                                                                                                                                                          (("1"
                                                                                                                                                            (grind)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -5
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -6
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -7
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -4
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           +
                                                                                                                                           _
                                                                                                                                           "a2/f2"
                                                                                                                                           _)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             +
                                                                                                                                             "a1-(a2/f2)*f1"
                                                                                                                                             "a3- (a2/f2)*f3")
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               -)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (copy
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "spans"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               (-5
                                                                                                                -6
                                                                                                                -7
                                                                                                                -8))
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "e3")
                                                                                                                (("2"
                                                                                                                  (skolem
                                                                                                                   -
                                                                                                                   ("g1"
                                                                                                                    "g2"
                                                                                                                    "g3"))
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "g3 = 0")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "sqv_eq_0")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -
                                                                                                                             "e3")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "e3*(g1*e1+g2*e2)=0")
                                                                                                                                (("1"
                                                                                                                                  (hide-all-but
                                                                                                                                   (-1
                                                                                                                                    -2
                                                                                                                                    1))
                                                                                                                                  (("1"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (case
                                                                                                                                   "NOT orthogonal?(e1,e2,e3)")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      1))
                                                                                                                                    (("2"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (case
                                                                                                                       "NOT C+zero = (1/g3)*e3-(g1/g3)*e1-(g2/g3)*e2")
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "spans"
                                                                                                                           (-3
                                                                                                                            +))
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "w")
                                                                                                                              (("2"
                                                                                                                                (skeep
                                                                                                                                 -)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3
                                                                                                                                   +)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     +)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "scal_sub_right")
                                                                                                                                        (("2"
                                                                                                                                          (rewrite
                                                                                                                                           "scal_sub_right")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               +
                                                                                                                                               "a1-(a3*g1/g3)"
                                                                                                                                               "a2-(a3*g2/g3)"
                                                                                                                                               "a3/g3")
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -)
                                                                                                                                                (("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (spans skolem-const-decl "[[Vect3, Vect3, Vect3] -> boolean]" basis_3D
     nil)
    (add_zero_right formula-decl nil vectors_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (zero const-decl "Vector" vectors_3D nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (aa1 skolem-const-decl "real" basis_3D nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_3D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "real" vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (f1 skolem-const-decl "real" basis_3D nil)
    (orthogonal? const-decl "bool" vectors_3D nil)
    (sqv_eq_0 formula-decl nil vectors_3D nil)
    (scal_sub_right formula-decl nil vectors_3D nil)
    (sub_zero_right formula-decl nil vectors_3D nil)
    (scal_add_right formula-decl nil vectors_3D nil)
    (scal_assoc formula-decl nil vectors_3D nil)
    (scal_sub_left formula-decl nil vectors_3D nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_0 formula-decl nil vectors_3D nil)
    (add_zero_left formula-decl nil vectors_3D nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil))
   shostak))
 (orthogonal_dot_zero 0
  (orthogonal_dot_zero-1 nil 3651479801
   ("" (skeep)
    (("" (lemma "orthogonal_spans")
      (("" (insteep -)
        (("" (assert)
          (("" (skeep -)
            (("" (expand "orthogonal?")
              (("" (expand "orthogonal?")
                (("" (flatten)
                  (("" (case "a1=0 AND a2=0 AND a3=0")
                    (("1" (flatten)
                      (("1" (replaces -1)
                        (("1" (replaces -1)
                          (("1" (replaces -1) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (assert)
                        (("2" (rewrite "dot_add_left")
                          (("2" (rewrite "dot_add_left")
                            (("2" (rewrite "dot_add_left")
                              (("2" (rewrite "dot_add_left")
                                (("2" (rewrite "dot_add_left")
                                  (("2" (rewrite "dot_add_left")
                                    (("2" (assert)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "dot_comm")
                                            (("2"
                                              (inst-cp - "e2" "e1")
                                              (("2"
                                                (inst-cp - "e3" "e2")
                                                (("2"
                                                  (inst - "e3" "e1")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (replaces -1)
                                                            (("2"
                                                              (replaces -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "sqv_eq_0")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -
                                                                     "e1")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "e2")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "e3")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             +)
                                                                            (("1"
                                                                              (mult-by
                                                                               4
                                                                               "a1")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               3
                                                                               "a2")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (mult-by
                                                                               2
                                                                               "a3")
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthogonal_spans formula-decl nil basis_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (dot_add_left formula-decl nil vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (sqv_eq_0 formula-decl nil vectors_3D nil)
    (a3 skolem-const-decl "real" basis_3D nil)
    (a2 skolem-const-decl "real" basis_3D nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (a1 skolem-const-decl "real" basis_3D nil)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (dot_comm formula-decl nil vectors_3D nil)
    (scal_0 formula-decl nil vectors_3D nil)
    (add_zero_left formula-decl nil vectors_3D nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (orthogonal? const-decl "bool" vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil))
   shostak))
 (orthogonal_basis_TCC1 0
  (orthogonal_basis_TCC1-1 nil 3476700907
   ("" (skosimp*)
    (("" (expand "orthogonal?")
      (("" (lemma "sqv_eq_0") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((orthogonal? const-decl "bool" basis_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (sqv_eq_0 formula-decl nil vectors_3D nil))
   nil (orthogonal_basis subtype "vectors_3D.sqv(basis_3D.e1)" "nznum")))
 (orthogonal_basis_TCC2 0
  (orthogonal_basis_TCC2-1 nil 3476700907
   ("" (skosimp*)
    (("" (lemma "sqv_eq_0") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sqv_eq_0 formula-decl nil vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil))
   nil (orthogonal_basis subtype "vectors_3D.sqv(basis_3D.e2)" "nznum")))
 (orthogonal_basis_TCC3 0
  (orthogonal_basis_TCC3-1 nil 3651320022
   ("" (skeep*)
    (("" (lemma "sqv_eq_0") (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sqv_eq_0 formula-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (orthogonal_basis subtype "vectors_3D.sqv(basis_3D.e3)" "nznum")))
 (orthogonal_basis 0
  (orthogonal_basis-1 nil 3476701148
   ("" (skeep)
    (("" (lemma "orthogonal_spans")
      (("" (inst?)
        (("" (inst - "w")
          (("" (assert)
            (("" (skeep -)
              (("" (label "wdef" -1)
                (("" (name "q" "a1-((w * e1) / sqv(e1))")
                  (("" (name "p" "a2-((w * e2) / sqv(e2))")
                    (("" (name "r" "a3-((w * e3) / sqv(e3))")
                      (("" (name "gg" "q*e1+p*e2+r*e3")
                        (("" (lemma "orthogonal_dot_zero")
                          (("" (inst - "e1" "e2" "e3" "gg")
                            (("" (assert)
                              (("" (copy -7)
                                (("" (expand "orthogonal?" -1)
                                  (("" (flatten)
                                    (("" (expand "orthogonal?" (-1 -2 -3))
                                      ((""
                                        (lemma "dot_comm")
                                        ((""
                                          (inst-cp - "e1" "e2")
                                          ((""
                                            (inst-cp - "e2" "e3")
                                            ((""
                                              (inst - "e3" "e1")
                                              ((""
                                                (expand "gg")
                                                ((""
                                                  (rewrite "dot_add_left")
                                                  ((""
                                                    (rewrite "dot_add_left")
                                                    ((""
                                                      (rewrite "dot_add_left")
                                                      ((""
                                                        (rewrite
                                                         "dot_add_left")
                                                        ((""
                                                          (rewrite
                                                           "dot_add_left")
                                                          ((""
                                                            (rewrite
                                                             "dot_add_left")
                                                            ((""
                                                              (replace -1)
                                                              ((""
                                                                (replace -2)
                                                                ((""
                                                                  (replace -3)
                                                                  ((""
                                                                    (replace
                                                                     -4)
                                                                    ((""
                                                                      (replace
                                                                       -5)
                                                                      ((""
                                                                        (replace
                                                                         -6)
                                                                        ((""
                                                                          (assert)
                                                                          ((""
                                                                            (split
                                                                             -)
                                                                            (("1"
                                                                              (lemma
                                                                               "orthogonal_kernel")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "q"
                                                                                 "p"
                                                                                 "r"
                                                                                 "e1"
                                                                                 "e2"
                                                                                 "e3")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "q"
                                                                               1)
                                                                              (("2"
                                                                                (case
                                                                                 "w*e1 = a1*sqv(e1)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sqv")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   "wdef"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "dot_add_left")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "dot_add_left")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (expand
                                                                               "p"
                                                                               1)
                                                                              (("3"
                                                                                (case
                                                                                 "w*e2 = a2*sqv(e2)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sqv")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   "wdef"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "dot_add_left")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "dot_add_left")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -5)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (expand
                                                                               "r"
                                                                               1)
                                                                              (("4"
                                                                                (case
                                                                                 "w*e3 = a3*sqv(e3)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sqv")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   "wdef"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "dot_add_left")
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "dot_add_left")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthogonal_spans formula-decl nil basis_3D nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "real" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (orthogonal_dot_zero formula-decl nil basis_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (orthogonal? const-decl "bool" vectors_3D nil)
    (dot_add_left formula-decl nil vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (r skolem-const-decl "real" basis_3D nil)
    (p skolem-const-decl "real" basis_3D nil)
    (q skolem-const-decl "real" basis_3D nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (orthogonal_kernel formula-decl nil basis_3D nil)
    (gg skolem-const-decl "Vector" basis_3D nil)
    (dot_comm formula-decl nil vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (orthonormal_basis 0
  (orthonormal_basis-1 nil 3476547366
   ("" (skosimp*)
    (("" (expand "orthonormal?")
      (("" (flatten)
        (("" (lemma "orthogonal_basis")
          (("" (inst - "e1!1" "e2!1" "e3!1" "w!1")
            (("" (assert)
              (("" (case-replace "sqv(e1!1) = 1")
                (("1" (case-replace "sqv(e2!1) = 1")
                  (("1" (assert)
                    (("1" (case-replace "sqv(e3!1) = 1")
                      (("1" (assert) nil nil)
                       ("2" (hide-all-but (-7 1))
                        (("2" (expand "norm")
                          (("2" (lemma "sqrt_eq")
                            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-5 1))
                    (("2" (expand "norm")
                      (("2" (lemma "sqrt_eq")
                        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-3 1))
                  (("2" (expand "norm")
                    (("2" (lemma "sqrt_eq")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthonormal? const-decl "bool" basis_3D nil)
    (orthogonal_basis formula-decl nil basis_3D nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt_eq formula-decl nil sqrt reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (basis_add 0
  (basis_add-1 nil 3476530662 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil))
   shostak))
 (basis_sub 0
  (basis_sub-1 nil 3476530735 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil))
   shostak))
 (basis_sqv 0
  (basis_sqv-1 nil 3476707207
   ("" (skeep)
    (("" (replace -2)
      (("" (hide -2)
        (("" (rewrite "sqv_add")
          (("" (rewrite "sqv_add")
            (("" (expand "orthonormal?")
              (("" (flatten)
                (("" (expand "orthogonal?")
                  (("" (flatten)
                    (("" (expand "orthogonal?")
                      (("" (replace -1)
                        (("" (rewrite "dot_add_left")
                          (("" (lemma "dot_comm")
                            (("" (inst-cp - "e2" "e3")
                              (("" (inst-cp - "e1" "e2")
                                (("" (inst - "e3" "e1")
                                  (("" (replace -1)
                                    (("" (replace -2)
                                      ((""
                                        (replace -3)
                                        ((""
                                          (replace -4)
                                          ((""
                                            (replace -5)
                                            ((""
                                              (replace -6)
                                              ((""
                                                (assert)
                                                ((""
                                                  (rewrite "sqv_scal")
                                                  ((""
                                                    (rewrite "sqv_scal")
                                                    ((""
                                                      (rewrite "sqv_scal")
                                                      ((""
                                                        (case-replace
                                                         "sqv(e1) = 1")
                                                        (("1"
                                                          (case-replace
                                                           "sqv(e2) = 1")
                                                          (("1"
                                                            (case-replace
                                                             "sqv(e3) = 1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (expand "norm")
                                                              (("2"
                                                                (lemma
                                                                 "sqrt_eq")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand "norm")
                                                            (("2"
                                                              (lemma
                                                               "sqrt_eq")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "norm")
                                                          (("2"
                                                            (lemma "sqrt_eq")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqv_add formula-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_scal_right formula-decl nil vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (orthonormal? const-decl "bool" basis_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (orthogonal? const-decl "bool" vectors_3D nil)
    (dot_add_left formula-decl nil vectors_3D nil)
    (sqv_scal formula-decl nil vectors_3D nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt_eq formula-decl nil sqrt reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (dot_comm formula-decl nil vectors_3D nil)
    (scal_assoc formula-decl nil vectors_3D nil))
   nil))
 (basis_dot 0
  (basis_dot-1 nil 3477648577
   ("" (skeep)
    (("" (expand "orthonormal?")
      (("" (flatten)
        (("" (expand "orthogonal?")
          (("" (expand "orthogonal?")
            (("" (flatten)
              (("" (lemma "dot_comm")
                (("" (inst-cp - "e1" "e2")
                  (("" (inst-cp - "e2" "e3")
                    (("" (inst - "e3" "e1")
                      (("" (assert)
                        (("" (rewrite "dot_add_left")
                          (("" (rewrite "dot_add_left")
                            (("" (rewrite "dot_add_right")
                              (("" (rewrite "dot_add_right")
                                (("" (rewrite "dot_add_right")
                                  (("" (rewrite "dot_add_right")
                                    (("" (rewrite "dot_add_right")
                                      ((""
                                        (rewrite "dot_add_right")
                                        ((""
                                          (assert)
                                          ((""
                                            (case
                                             "sqv(e1)=1 AND sqv(e2)=1 AND sqv(e3)=1")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "sqv")
                                                (("1" (assert) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (2 3 4 5 6))
                                              (("2"
                                                (split)
                                                (("1"
                                                  (expand "norm")
                                                  (("1"
                                                    (expand "sqv")
                                                    (("1"
                                                      (lemma "sqrt_eq")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred "sqv(e1)")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "norm")
                                                  (("2"
                                                    (expand "sqv")
                                                    (("2"
                                                      (lemma "sqrt_eq")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred "sqv(e2)")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand "norm")
                                                  (("3"
                                                    (expand "sqv")
                                                    (("3"
                                                      (lemma "sqrt_eq")
                                                      (("3"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred "sqv(e3)")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthonormal? const-decl "bool" basis_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (dot_add_left formula-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (dot_add_right formula-decl nil vectors_3D nil)
    (dot_scal_right formula-decl nil vectors_3D nil)
    (e3 skolem-const-decl "Vect3" basis_3D nil)
    (e2 skolem-const-decl "Vect3" basis_3D nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (sqrt_eq formula-decl nil sqrt reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (e1 skolem-const-decl "Vect3" basis_3D nil)
    (* const-decl "real" vectors_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_comm formula-decl nil vectors_3D nil)
    (orthogonal? const-decl "bool" vectors_3D nil))
   nil))
 (orthogonal_basis_sqv 0
  (orthogonal_basis_sqv-1 nil 3481620928
   ("" (skeep)
    (("" (replace -2)
      (("" (expand "sqv")
        (("" (rewrite "dot_add_left")
          (("" (rewrite "dot_add_right")
            (("" (expand "orthogonal?")
              (("" (case "e2*e1 = 0")
                (("1" (grind) nil nil)
                 ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_add_left formula-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (sq const-decl "nonneg_real" sq reals)
    (orthogonal? const-decl "bool" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dot_scal_right formula-decl nil vectors_3D nil)
    (dot_add_right formula-decl nil vectors_3D nil)
    (sqv const-decl "nnreal" vectors_3D nil))
   shostak))
 (orthonormal_basis_sqv 0
  (orthonormal_basis_sqv-1 nil 3481621043
   ("" (skeep)
    (("" (lemma "orthogonal_basis_sqv")
      (("" (inst?)
        (("" (assert)
          (("" (split -)
            (("1" (case "sqv(e1) = 1 AND sqv(e2) = 1 AND sqv(e3)= 1")
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (expand "orthonormal?")
                (("2" (flatten)
                  (("2" (lemma "sqrt_sqv_norm")
                    (("2" (inst-cp - "e1")
                      (("2" (inst-cp - "e2")
                        (("2" (inst - "e3") (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "orthonormal?") (("2" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthogonal_basis_sqv formula-decl nil basis_3D nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sqrt_sqv_norm formula-decl nil vectors_3D nil)
    (orthonormal? const-decl "bool" basis_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (orthogonal_basis_norm 0
  (orthogonal_basis_norm-1 nil 3481623256
   ("" (skeep)
    (("" (lemma "orthogonal_basis_sqv")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "sqrt_sqv_norm")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((orthogonal_basis_sqv formula-decl nil basis_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (sqrt_sqv_norm formula-decl nil vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak))
 (orthonormal_basis_norm 0
  (orthonormal_basis_norm-1 nil 3481623341
   ("" (skeep)
    (("" (lemma "orthonormal_basis_sqv")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "sqrt_sqv_norm")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((orthonormal_basis_sqv formula-decl nil basis_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (sqrt_sqv_norm formula-decl nil vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil))
   shostak))
 (orthogonal_basis_dot 0
  (orthogonal_basis_dot-1 nil 3529142458
   ("" (skeep)
    (("" (replaces -2) (("" (replaces -2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (orthogonal? const-decl "bool" basis_3D nil)
    (orthogonal? const-decl "bool" vectors_3D nil)
    (* const-decl "real" vectors_3D nil))
   shostak))
 (orthonormal_basis_dot 0
  (orthonormal_basis_dot-1 nil 3529142540
   ("" (skeep)
    (("" (lemma "orthogonal_basis_dot")
      (("" (inst - "a1" "a2" "a3" "b1" "b2" "b3" "e1" "e2" "e3" "w1" "w2")
        (("" (assert)
          (("" (split -)
            (("1" (case "sqv(e1) = 1 AND sqv(e2) = 1 AND sqv(e3)=1")
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but (-2 1))
                (("2" (expand "orthonormal?")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2"
                        (case "FORALL (egrtzp:Vect3): norm(egrtzp) = 1 IMPLIES sqv(egrtzp) = 1")
                        (("1" (inst-cp - "e3")
                          (("1" (inst-cp - "e2")
                            (("1" (inst - "e1") (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep)
                            (("2" (rewrite "sq_eq" -1 :dir rl)
                              (("2" (rewrite "sq_norm") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "orthonormal?") (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((orthogonal_basis_dot formula-decl nil basis_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (orthonormal? const-decl "bool" basis_3D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq_eq formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq_1 formula-decl nil sq reals) (sq_norm formula-decl nil vectors_3D nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))


(closest_approach_3D
 (sq_dist_lem 0
  (sq_dist_lem-1 nil 3256049050
   ("" (skosimp*)
    (("" (assert)
      (("" (rewrite "sq_dist_is_dist_sq")
        (("" (rewrite "dist_norm")
          (("" (expand "norm")
            (("" (rewrite "sq_sqrt")
              (("" (expand "sqv")
                (("" (expand "*")
                  (("" (expand "+")
                    (("" (expand "-") (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dist_norm formula-decl nil distance_3D nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (* const-decl "real" vectors_3D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (sq_dist_is_dist_sq formula-decl nil distance_3D nil))
   nil))
 (sq_dist_quad 0
  (sq_dist_quad-1 nil 3255774848 ("" (skosimp*) (("" (grind) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (sq const-decl "nonneg_real" sq reals)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil))
   shostak))
 (dist_eq_vel 0
  (dist_eq_vel-1 nil 3255968102 ("" (grind) nil nil)
   ((* const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (dist const-decl "nnreal" distance_3D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (norm_diff_eq_0 0
  (norm_diff_eq_0-1 nil 3255967833
   ("" (skosimp*)
    (("" (rewrite "norm_eq_0")
      (("" (rewrite "sub_eq_zero")
        (("" (replaces -1)
          (("" (rewrite "dist_eq_vel") (("" (rewrite "dist_eq_vel") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (dist_eq_vel formula-decl nil closest_approach_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (sub_eq_zero formula-decl nil vectors_3D nil))
   shostak))
 (time_closest_TCC1 0
  (time_closest_TCC1-2 "" 3790093073
   ("" (skosimp*) (("" (rewrite "sq_eq_0") nil nil)) nil) nil shostak
   (time_closest subtype
    "sq.sq(vectors_3D.norm((vectors_3D.-)(closest_approach_3D.u, closest_approach_3D.v)))"
    "nznum"))
  (time_closest_TCC1-1 nil 3255962785
   ("" (skosimp*)
    (("" (rewrite "sq_eq_0")
      (("" (rewrite "norm_eq_0") (("" (assert) (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq_eq_0 formula-decl nil sq reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil))
   shostak
   (time_closest subtype
    "sq.sq(vectors_3D.norm((vectors_3D.-)(closest_approach_3D.u, closest_approach_3D.v)))"
    "nznum")))
 (time_closest_lem_TCC1 0
  (time_closest_lem_TCC1-2 "" 3790093073
   ("" (skosimp*)
    (("" (rewrite "dot_sq_norm")
      (("" (assert)
        (("" (hide -2)
          (("" (hide -1)
            (("" (lemma "sq_eq_0") (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (time_closest_lem subtype "(number_fields.*(2, closest_approach_3D.a))"
    "nznum"))
  (time_closest_lem_TCC1-1 nil 3256051573
   ("" (skosimp*)
    (("" (rewrite "dot_sq_norm")
      (("" (assert)
        (("" (replace -2)
          (("" (hide -2)
            (("" (hide -1)
              (("" (lemma "sq_eq_0")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_sq_norm formula-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (sq_eq_0 formula-decl nil sq reals)
    (norm const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak
   (time_closest_lem subtype "(number_fields.*(2, closest_approach_3D.a))"
    "nznum")))
 (time_closest_lem 0
  (time_closest_lem-1 nil 3256049208
   ("" (skosimp*)
    (("" (expand "time_closest")
      (("" (assert) (("" (rewrite "dot_sq_norm") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((time_closest const-decl "real" closest_approach_3D nil)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (cpa_prep_mono 0
  (cpa_prep_mono-2 nil 3431333345
   ("" (skosimp*)
    (("" (expand "time_closest")
      (("" (assert)
        (("" (case "a!1 > 0")
          (("1" (lemma "quad_min_mono_inc")
            (("1" (inst - "a!1" "b!1" "c!1" "t2!1" "t1!1")
              (("1" (assert)
                (("1" (assert)
                  (("1" (prop)
                    (("1" (assert)
                      (("1" (rewrite "dot_sq_norm")
                        (("1" (lemma "sq_dist_quad")
                          (("1"
                            (inst -1 "a!1" "b!1" "c!1" "p0!1" "q0!1" "t1!1"
                             "u!1" "v!1" "w0!1")
                            (("1" (assert)
                              (("1" (lemma "sq_dist_quad")
                                (("1"
                                  (inst -1 "a!1" "b!1" "c!1" "p0!1" "q0!1"
                                   "t2!1" "u!1" "v!1" "w0!1")
                                  (("1" (assert)
                                    (("1" (expand "quadratic")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "dot_sq_norm")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (rewrite "dot_sq_norm")
              (("2" (lemma "sq_eq_0")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((time_closest const-decl "real" closest_approach_3D nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (a!1 skolem-const-decl "real" closest_approach_3D nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (sq_dist_quad formula-decl nil closest_approach_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (quadratic const-decl "real" quadratic reals)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (quad_min_mono_inc formula-decl nil quad_minmax reals)
    (norm const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (sq_eq_0 formula-decl nil sq reals)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil))
   nil)
  (cpa_prep_mono-1 nil 3401722700
   ("" (skosimp*)
    (("" (expand "time_closest")
      (("" (assert)
        (("" (case "a!1 > 0")
          (("1" (lemma "quadratic_min_mono_inc")
            (("1"
              (inst - "a!1" "b!1" "c!1"
               "(LAMBDA t: sq_dist(p0!1 + t * u!1, q0!1 + t * v!1))" "t_cpa!1"
               "t2!1" "t1!1")
              (("1" (assert)
                (("1" (prop)
                  (("1" (apply-extensionality 1 :hide? t)
                    (("1" (lemma "sq_dist_quad")
                      (("1"
                        (inst -1 "a!1" "b!1" "c!1" "p0!1" "q0!1" "x!1" "u!1"
                         "v!1" "w0!1")
                        (("1" (assert)
                          (("1" (expand "quadratic") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skosimp*)
                      (("2" (expand "quadratic")
                        (("2" (lemma "sq_dist_quad")
                          (("2"
                            (inst -1 "a!1" "b!1" "c!1" "p0!1" "q0!1" "x1!1"
                             "u!1" "v!1" "w0!1")
                            (("2" (assert) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "time_closest_lem")
                    (("2" (inst -1 "a!1" "b!1" "p0!1" "q0!1" "u!1" "v!1")
                      (("2" (assert)
                        (("2" (expand "time_closest") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (rewrite "dot_sq_norm")
              (("2" (lemma "sq_eq_0")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (* const-decl "Vector" vectors_3D nil)
    (quadratic const-decl "real" quadratic reals)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (sq_eq_0 formula-decl nil sq reals)
    (dot_scal_left formula-decl nil vectors_3D nil))
   nil))
 (time_cpa 0
  (time_cpa-3 nil 3431334821
   ("" (skosimp*)
    (("" (case "norm(u!1 - v!1) = 0")
      (("1" (expand "is_minimum?")
        (("1" (skosimp*)
          (("1" (lemma "norm_diff_eq_0")
            (("1" (inst -1 "p0!1" "q0!1" "t_cpa!1" "y!1" "u!1" "v!1")
              (("1" (assert)
                (("1" (assert)
                  (("1" (expand "dist") (("1" (rewrite "sqrt_eq") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "time_closest")
        (("2" (name "A" "(u!1-v!1)*(u!1-v!1)")
          (("2" (name "B" "2*(p0!1-q0!1)*(u!1-v!1)")
            (("2" (name "C" "(p0!1-q0!1)*(p0!1-q0!1)")
              (("2" (case "A > 0")
                (("1" (assert)
                  (("1" (lemma "quad_min")
                    (("1" (inst -1 "A" "B" "C")
                      (("1" (assert)
                        (("1"
                          (case-replace
                           "(LAMBDA t: sq_dist(p0!1 + t * u!1, q0!1 + t * v!1)) = quadratic(A, B, C)")
                          (("1" (assert)
                            (("1" (lemma "dot_sq_norm")
                              (("1" (inst - "(u!1 - v!1)")
                                (("1" (assert) nil nil)) nil))
                              nil))
                            nil)
                           ("2" (apply-extensionality 1 :hide? t)
                            (("1" (lemma "sq_dist_quad")
                              (("1"
                                (inst -1 "A" "B" "C" "p0!1" "q0!1" "x!1" "u!1"
                                 "v!1" "p0!1-q0!1")
                                (("1" (assert)
                                  (("1" (expand "quadratic")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skosimp*)
                              (("2" (expand "quadratic")
                                (("2" (lemma "sq_dist_quad")
                                  (("2"
                                    (inst -1 "A" "B" "C" "p0!1" "q0!1" "x1!1"
                                     "u!1" "v!1" "p0!1-q0!1")
                                    (("2" (assert) (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "dot_sq_norm")
                  (("2" (inst - "u!1-v!1")
                    (("2" (lemma "sq_eq_0")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def nil)
    (- const-decl "Vector" vectors_3D nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt_eq formula-decl nil sqrt reals)
    (dist const-decl "nnreal" distance_3D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (norm_diff_eq_0 formula-decl nil closest_approach_3D nil)
    (is_minimum? const-decl "bool" quad_minmax reals)
    (* const-decl "real" vectors_3D nil) (sq_eq_0 formula-decl nil sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (quadratic const-decl "real" quadratic reals)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sq_dist_quad formula-decl nil closest_approach_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (A skolem-const-decl "real" closest_approach_3D nil)
    (B skolem-const-decl "real" closest_approach_3D nil)
    (C skolem-const-decl "real" closest_approach_3D nil)
    (quad_min formula-decl nil quad_minmax reals)
    (> const-decl "bool" reals nil)
    (time_closest const-decl "real" closest_approach_3D nil))
   nil)
  (time_cpa-2 nil 3421667499
   ("" (skosimp*)
    (("" (case "norm(u!1 - v!1) = 0")
      (("1" (expand "is_minimum?")
        (("1" (skosimp*)
          (("1" (lemma "norm_diff_eq_0")
            (("1" (inst -1 "p0!1" "q0!1" "t_cpa!1" "y!1" "u!1" "v!1")
              (("1" (assert)
                (("1" (assert)
                  (("1" (expand "dist") (("1" (rewrite "sqrt_eq") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "time_closest")
        (("2" (name "A" "(u!1-v!1)*(u!1-v!1)")
          (("2" (name "B" "2*(p0!1-q0!1)*(u!1-v!1)")
            (("2" (name "C" "(p0!1-q0!1)*(p0!1-q0!1)")
              (("2" (case "A > 0")
                (("1" (lemma "quadratic_min")
                  (("1"
                    (inst -1 "A" "B" "C"
                     "(LAMBDA t: sq_dist(p0!1 + t * u!1, q0!1 + t * v!1))"
                     "t_cpa!1")
                    (("1" (assert)
                      (("1" (prop)
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (lemma "sq_dist_quad")
                            (("1"
                              (inst -1 "A" "B" "C" "p0!1" "q0!1" "x!1" "u!1"
                               "v!1" "p0!1-q0!1")
                              (("1" (assert)
                                (("1" (expand "quadratic")
                                  (("1" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skosimp*)
                            (("2" (expand "quadratic")
                              (("2" (lemma "sq_dist_quad")
                                (("2"
                                  (inst -1 "A" "B" "C" "p0!1" "q0!1" "x1!1"
                                   "u!1" "v!1" "p0!1-q0!1")
                                  (("2" (assert) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "time_closest_lem")
                          (("2" (inst -1 "A" "B" "p0!1" "q0!1" "u!1" "v!1")
                            (("2" (assert)
                              (("2" (assert)
                                (("2" (expand "time_closest")
                                  (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (lemma "dot_sq_norm")
                  (("2" (inst - "u!1-v!1")
                    (("2" (lemma "sq_eq_0")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect3 type-eq-decl nil vectors_3D_def nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (sqrt_eq formula-decl nil sqrt reals) (* const-decl "real" vectors_3D nil)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (sq_eq_0 formula-decl nil sq reals)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (quadratic const-decl "real" quadratic reals))
   nil)
  (time_cpa-1 nil 3255788628
   ("" (skosimp*)
    (("" (lemma "cpa_prep")
      (("" (inst?)
        (("" (name "W0" "p0!1-q0!1")
          ((""
            (inst - "(u!1 - v!1) * (u!1 - v!1)" "2 * W0 * (u!1 - v!1)"
             " W0 * W0" "W0")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector type-eq-decl nil vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil))
   shostak))
 (dist_cpa 0
  (dist_cpa-1 nil 3255788937
   ("" (skosimp*)
    (("" (lemma "time_cpa")
      (("" (inst?)
        (("" (inst?)
          (("" (expand "is_minimum?")
            (("" (inst -1 "t!1")
              (("" (expand "dist") (("" (rewrite "sqrt_le") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((time_cpa formula-decl nil closest_approach_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (time_closest const-decl "real" closest_approach_3D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_le formula-decl nil sqrt reals)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (dist const-decl "nnreal" distance_3D nil)
    (is_minimum? const-decl "bool" quad_minmax reals)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (dist_cpa_lt 0
  (dist_cpa_lt-1 nil 3401722756
   ("" (skosimp*)
    (("" (assert)
      (("" (lemma "cpa_prep_mono")
        (("" (inst?)
          (("" (name "W0" "p0!1-q0!1")
            ((""
              (inst - "(u!1 - v!1) * (u!1 - v!1)" "2 * W0 * (u!1 - v!1)"
               " W0 * W0" "t1!1" "t2!1" "W0")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (cpa_prep_mono formula-decl nil closest_approach_3D nil))
   nil))
 (dist_min 0
  (dist_min-1 nil 3255958397
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "dist_cpa")
          (("" (inst -1 "p0!1" "q0!1" "t1!1" "u!1" "v!1")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dist_cpa formula-decl nil closest_approach_3D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (dist_diverges 0
  (dist_diverges-3 nil 3401722795
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "dist_cpa_lt")
          (("" (inst?)
            (("" (inst - "t1!1" "t2!1")
              (("" (assert)
                (("" (expand "dist")
                  (("" (lemma "sqrt_lt")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dist_cpa_lt formula-decl nil closest_approach_3D nil)
    (dist const-decl "nnreal" distance_3D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (sqrt_lt formula-decl nil sqrt reals)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil))
   nil)
  (dist_diverges-2 nil 3401544437
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        (("" (case "t1!1 = time_closest(p0!1, q0!1, u!1, v!1)")
          (("1" (lemma "dist_min")
            (("1" (inst?)
              (("1" (assert) (("1" (assert) (("1" (inst?) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "norm(u!1-v!1)=0")
            (("1" (lemma "norm_diff_eq_0")
              (("1" (inst -1 "p0!1" "q0!1" "t1!1" "t2!1" "u!1" "v!1")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (rewrite "sq_dist_le")
              (("2" (hide 4)
                (("2" (name "A" "(u!1 - v!1) * (u!1 - v!1)")
                  (("2" (name "W0" "p0!1 - q0!1")
                    (("2" (name "B" "2 * W0 * (u!1 - v!1) ")
                      (("2" (name "C" "W0*W0")
                        (("2" (lemma "sq_dist_quad")
                          (("2" (inst?)
                            (("2" (inst -1 "A" "B" "C" "W0")
                              (("2" (assert)
                                (("2" (replace -1)
                                  (("2" (hide -1)
                                    (("2" (lemma "sq_dist_quad")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst -1 "A" "B" "C" "W0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma "sq_dist_quad")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (case-replace
                                                           "A > 0")
                                                          (("1"
                                                            (lemma
                                                             "quadratic_min_mono_inc")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "A"
                                                               "B"
                                                               "C"
                                                               "quadratic(A,B,C)"
                                                               "-B / (2 * A)"
                                                               "_"
                                                               "_")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "t2!1"
                                                                 "t1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "quadratic")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "time_closest_lem")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "sq_eq_0")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "dot_sq_norm"
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "sq_eq_0")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm const-decl "nnreal" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (sq_eq_0 formula-decl nil sq reals)
    (quadratic const-decl "real" quadratic reals)
    (* const-decl "real" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil))
   nil)
  (dist_diverges-1 nil 3256916765
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        (("" (case "t2!1 = time_closest(p0!1, q0!1, u!1, v!1)")
          (("1" (lemma "dist_min")
            (("1" (inst?)
              (("1" (assert) (("1" (assert) (("1" (inst?) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "norm(u!1-v!1)=0")
            (("1" (lemma "norm_diff_eq_0")
              (("1" (inst -1 "p0!1" "q0!1" "t2!1" "tt!1" "u!1" "v!1")
                (("1" (assert) nil nil)) nil))
              nil)
             ("2" (rewrite "sq_dist_le")
              (("2" (hide 4)
                (("2" (name "A" "(u!1 - v!1) * (u!1 - v!1)")
                  (("2" (name "W0" "p0!1 - q0!1")
                    (("2" (name "B" "2 * W0 * (u!1 - v!1) ")
                      (("2" (name "C" "W0*W0")
                        (("2" (lemma "sq_dist_quad")
                          (("2" (inst?)
                            (("2" (inst -1 "A" "B" "C" "W0")
                              (("2" (assert)
                                (("2" (replace -1)
                                  (("2" (hide -1)
                                    (("2" (lemma "sq_dist_quad")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst -1 "A" "B" "C" "W0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma "sq_dist_quad")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (case-replace
                                                           "A > 0")
                                                          (("1"
                                                            (lemma
                                                             "quadratic_min_mono_inc")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "A"
                                                               "B"
                                                               "C"
                                                               "quadratic(A,B,C)"
                                                               "-B / (2 * A)"
                                                               "_"
                                                               "_")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "tt!1"
                                                                 "t2!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "quadratic")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "time_closest_lem")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "sq_eq_0")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "dot_sq_norm"
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "sq_eq_0")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm const-decl "nnreal" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (dot_sq_norm formula-decl nil vectors_3D nil)
    (sq_eq_0 formula-decl nil sq reals)
    (quadratic const-decl "real" quadratic reals)
    (* const-decl "real" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil))
   nil))
 (dist_parallel_lines 0
  (dist_parallel_lines-1 nil 3401722823
   ("" (skosimp*)
    (("" (assert)
      (("" (flatten)
        (("" (expand "dist")
          (("" (lemma "sqrt_eq")
            (("" (inst?)
              (("" (flatten)
                (("" (hide -1)
                  (("" (split -1)
                    (("1" (propax) nil nil)
                     ("2" (hide 2)
                      (("2" (lemma "sq_dist_quad")
                        (("2" (name "W0" "p0!1-q0!1")
                          (("2" (inst?)
                            (("2"
                              (inst - "(u!1 - v!1) * (u!1 - v!1)"
                               "2 * W0 * (u!1 - v!1)" " W0 * W0" "W0")
                              (("2" (assert)
                                (("2" (replace -2)
                                  (("2" (hide -2)
                                    (("2" (lemma "sq_dist_quad")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst
                                           -
                                           "(u!1 - v!1) * (u!1 - v!1)"
                                           "2 * W0 * (u!1 - v!1)"
                                           " W0 * W0"
                                           "W0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (case-replace
                                                 "u!1 - v!1 = zero")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (lemma "norm_eq_0")
                                                  (("2"
                                                    (inst?)
                                                    (("2" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dist const-decl "nnreal" distance_3D nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (norm_eq_0 formula-decl nil vectors_3D nil)
    (dot_zero_right formula-decl nil vectors_3D nil)
    (zero const-decl "Vector" vectors_3D nil)
    (dot_scal_left formula-decl nil vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_dist_quad formula-decl nil closest_approach_3D nil)
    (sqrt_eq formula-decl nil sqrt reals))
   nil))
 (dot_nneg_tca_npos 0
  (dot_nneg_tca_npos-1 nil 3406994109
   ("" (skosimp)
    (("" (expand "time_closest")
      (("" (lift-if)
        (("" (prop)
          (("1" (rewrite "norm_eq_0")
            (("1" (replaces -1) (("1" (assert) nil nil)) nil)) nil)
           ("2" (mult-by 2 " sq(norm(u!1 - v!1))")
            (("1" (assert) nil nil) ("2" (rewrite "sq_gt_0") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((time_closest const-decl "real" closest_approach_3D nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (norm_eq_0 formula-decl nil vectors_3D nil)
    (sq_gt_0 formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (v!1 skolem-const-decl "Vect3" closest_approach_3D nil)
    (u!1 skolem-const-decl "Vect3" closest_approach_3D nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_3D nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (divergent_u_neq_v 0
  (divergent_u_neq_v-1 nil 3409339432
   ("" (skosimp)
    (("" (replaces -2) (("" (expand "divergent?") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sq const-decl "nonneg_real" sq reals)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (dist const-decl "nnreal" distance_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (divergent? const-decl "bool" closest_approach_3D nil))
   nil))
 (dot_nneg_divergent 0
  (dot_nneg_divergent-1 nil 3406994137
   ("" (skosimp)
    (("" (lemma "dot_nneg_tca_npos")
      (("" (inst? -1)
        (("" (assert)
          (("" (lemma "dist_diverges")
            (("" (expand "divergent?")
              (("" (skosimp)
                (("" (inst? -1)
                  (("" (inst -1 "0" "t!1" _)
                    (("" (inst? -1)
                      (("" (assert)
                        (("" (split -1)
                          (("1" (propax) nil nil)
                           ("2" (flatten)
                            (("2" (rewrite "norm_eq_0")
                              (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_nneg_tca_npos formula-decl nil closest_approach_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (divergent? const-decl "bool" closest_approach_3D nil)
    (time_closest const-decl "real" closest_approach_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (norm_eq_0 formula-decl nil vectors_3D nil)
    (sub_eq_zero formula-decl nil vectors_3D nil)
    (add_zero_right formula-decl nil vectors_3D nil)
    (scal_0 formula-decl nil vectors_3D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dist_diverges formula-decl nil closest_approach_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil))
   nil))
 (divergent_dot_nneg 0
  (divergent_dot_nneg-2 "" 3790093084
   ("" (skosimp)
    (("" (case "divergent?(p0!1-q0!1,zero,u!1-v!1,zero)")
      (("1" (hide -2)
        (("1" (case "norm(u!1-v!1) /= 0")
          (("1" (flatten)
            (("1" (name-replace "s" "p0!1-q0!1")
              (("1" (name-replace "w" "u!1-v!1")
                (("1" (expand "divergent?")
                  (("1" (name "myt" "-(s*w)/sqv(w)")
                    (("1" (case "myt > 0")
                      (("1" (inst -3 "myt")
                        (("1" (expand "dist")
                          (("1" (rewrite "sqrt_lt")
                            (("1" (expand "sq_dist")
                              (("1" (expand* "*" "+")
                                (("1" (sq-simp)
                                  (("1" (move-terms -3 l)
                                    (("1" (assert)
                                      (("1"
                                        (expand "sq")
                                        (("1"
                                          (factor -3)
                                          (("1"
                                            (grind-reals -3 :dontdistrib *)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (replaces -1 :dir rl)
                        (("2" (hide -1)
                          (("2" (expand "norm")
                            (("2" (case "sqv(w) = 0")
                              (("1" (replaces -1)
                                (("1" (rewrite "sqrt_0") nil nil)) nil)
                               ("2" (cross-mult 2) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide -2 2)
                        (("2" (rewrite "norm_sqv_eq_0") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "divergent_u_neq_v")
            (("2" (assert)
              (("2" (flatten) (("2" (rewrite "norm_eq_0") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (expand "divergent?")
          (("2" (skosimp 1)
            (("2" (inst -1 "t!1")
              (("2" (assert)
                (("2" (expand "dist")
                  (("2" (rewrite "sqrt_lt")
                    (("2" (rewrite "sqrt_lt")
                      (("2" (expand "sq_dist")
                        (("2" (assert)
                          (("2" (expand* "*" "+" "-") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (divergent_dot_nneg-1 nil 3411903251
   ("" (skosimp)
    (("" (case "divergent?(p0!1-q0!1,zero,u!1-v!1,zero)")
      (("1" (hide -2)
        (("1" (case "norm(u!1-v!1) /= 0")
          (("1" (flatten)
            (("1" (name-replace "s" "p0!1-q0!1")
              (("1" (name-replace "w" "u!1-v!1")
                (("1" (expand "divergent?")
                  (("1" (name "myt" "-(s*w)/sqv(w)")
                    (("1" (case "myt > 0")
                      (("1" (inst -3 "myt")
                        (("1" (expand "dist")
                          (("1" (rewrite "sqrt_lt")
                            (("1" (expand "sq_dist")
                              (("1" (expand* "*" "+")
                                (("1" (sq-simp)
                                  (("1" (move-terms -3 l)
                                    (("1" (assert)
                                      (("1"
                                        (expand "sq")
                                        (("1"
                                          (factor -3)
                                          (("1"
                                            (grind-reals -3 :dontdistrib *)
                                            (("1"
                                              (move-terms -3 r (1 2 3))
                                              (("1"
                                                (add-formulas 2 -3)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (factor 1)
                                                    (("1"
                                                      (replaces -2 :dir rl)
                                                      (("1"
                                                        (field 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (replaces -1 :dir rl)
                        (("2" (hide -1)
                          (("2" (expand "norm")
                            (("2" (case "sqv(w) = 0")
                              (("1" (replaces -1)
                                (("1" (rewrite "sqrt_0") nil nil)) nil)
                               ("2" (cross-mult 2) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide -2 2)
                        (("2" (rewrite "norm_sqv_eq_0") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "divergent_u_neq_v")
            (("2" (assert)
              (("2" (flatten) (("2" (rewrite "norm_eq_0") nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (expand "divergent?")
          (("2" (skosimp 1)
            (("2" (inst -1 "t!1")
              (("2" (assert)
                (("2" (expand "dist")
                  (("2" (rewrite "sqrt_lt")
                    (("2" (rewrite "sqrt_lt")
                      (("2" (expand "sq_dist")
                        (("2" (assert)
                          (("2" (expand* "*" "+" "-") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero const-decl "Vector" vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (divergent? const-decl "bool" closest_approach_3D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (norm_sqv_eq_0 formula-decl nil vectors_3D nil)
    (> const-decl "bool" reals nil) (dist const-decl "nnreal" distance_3D nil)
    (TRUE const-decl "bool" booleans nil)
    (comp_zero_z formula-decl nil vectors_3D nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (comp_zero_y formula-decl nil vectors_3D nil)
    (sq_times formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sq_minus formula-decl nil sq reals) (sq_0 formula-decl nil sq reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq_plus formula-decl nil sq reals)
    (comp_zero_x formula-decl nil vectors_3D nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (pos_times_lt formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add_zero_right formula-decl nil vectors_3D nil)
    (scal_zero formula-decl nil vectors_3D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_lt formula-decl nil sqrt reals)
    (sq_dist const-decl "nnreal" distance_3D nil)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (myt skolem-const-decl "real" closest_approach_3D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_0 formula-decl nil sqrt reals)
    (w skolem-const-decl "Vector" closest_approach_3D nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_3D nil)
    (sqv const-decl "nnreal" vectors_3D nil)
    (norm_eq_0 formula-decl nil vectors_3D nil)
    (divergent_u_neq_v formula-decl nil closest_approach_3D nil))
   nil))
 (divergent_t1_lt_t2 0
  (divergent_t1_lt_t2-1 nil 3409356106
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (use "divergent_u_neq_v")
          (("1" (assert)
            (("1" (flatten)
              (("1" (skeep 2)
                (("1" (lemma "dist_diverges")
                  (("1"
                    (inst -1 "p0!1" "q0!1" "t1" "t2"
                     "time_closest(p0!1, q0!1, u!1, v!1)" "u!1" "v!1")
                    (("1" (beta)
                      (("1" (assert)
                        (("1" (hide 3)
                          (("1" (case "norm(u!1 - v!1) = 0")
                            (("1" (hide-all-but (-1 2))
                              (("1" (rewrite "norm_eq_0")
                                (("1" (rewrite "sub_eq_zero") nil nil)) nil))
                              nil)
                             ("2" (assert)
                              (("2" (lemma "dot_nneg_tca_npos")
                                (("2" (inst?)
                                  (("2" (assert)
                                    (("2" (use "divergent_dot_nneg")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "divergent?")
          (("2" (skosimp)
            (("2" (inst -1 "0" "t!1") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((divergent_u_neq_v formula-decl nil closest_approach_3D nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (dist_diverges formula-decl nil closest_approach_3D nil)
    (divergent_dot_nneg formula-decl nil closest_approach_3D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dot_nneg_tca_npos formula-decl nil closest_approach_3D nil)
    (sub_eq_zero formula-decl nil vectors_3D nil)
    (norm_eq_0 formula-decl nil vectors_3D nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_3D nil)
    (- const-decl "Vector" vectors_3D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (time_closest const-decl "real" closest_approach_3D nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (divergent? const-decl "bool" closest_approach_3D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (add_zero_right formula-decl nil vectors_3D nil)
    (scal_0 formula-decl nil vectors_3D nil))
   nil))
 (dot_prop_divergent 0
  (dot_prop_divergent-1 nil 3421668843
   ("" (skosimp*)
    (("" (expand "dot_prop?")
      (("" (split +)
        (("1" (flatten)
          (("1" (lemma "dot_nneg_divergent")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "divergent_dot_nneg")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_prop? const-decl "bool" closest_approach_3D nil)
    (divergent_dot_nneg formula-decl nil closest_approach_3D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (dot_nneg_divergent formula-decl nil closest_approach_3D nil))
   nil))
 (t1_lt_t2_lt_D 0
  (t1_lt_t2_lt_D-2 nil 3402919842
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "+ ")
        (("" (lemma "quad_min_eq_intv")
          ((""
            (inst - "sq(v`x) + sq(v`y) + sq(v`z)"
             "2*s`x*v`x + 2*s`y*v`y + 2*s`z*v`z"
             "D+ sq(s`x) + sq(s`y) + sq(s`z)" "t" "t1" "t2")
            (("1" (split -1)
              (("1" (expand "quadratic")
                (("1" (expand "sq") (("1" (assert) nil nil)) nil)) nil)
               ("2" (hide 3)
                (("2" (hide -)
                  (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil))
                nil)
               ("3" (hide 3)
                (("3" (replace -2 -3 rl)
                  (("3" (hide -2)
                    (("3" (expand "quadratic")
                      (("3" (expand "sq") (("3" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil)
               ("4" (propax) nil nil) ("5" (propax) nil nil))
              nil)
             ("2" (expand "sq" 1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (quad_min_eq_intv formula-decl nil quad_minmax reals)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (quadratic const-decl "real" quadratic reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (v skolem-const-decl "Vect3" closest_approach_3D nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)
  (t1_lt_t2_lt_D-1 nil 3402657613
   ("" (skeep)
    (("" (lemma "quad_min_eq_intv")
      ((""
        (inst - "sq(vx) + sq(vy)" "2*sx*vx + 2*sy*vy" "D+ sq(sx) + sq(sy)" "t"
         "t1" "t2")
        (("1" (split -1)
          (("1" (expand "quadratic")
            (("1" (expand "sq") (("1" (assert) nil nil)) nil)) nil)
           ("2" (hide 3)
            (("2" (hide -) (("2" (expand "sq") (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("3" (hide 3)
            (("3" (replace -2 -3 rl)
              (("3" (hide -2)
                (("3" (expand "quadratic")
                  (("3" (expand "sq") (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("4" (propax) nil nil) ("5" (propax) nil nil))
          nil)
         ("2" (expand "sq" 1) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (quadratic const-decl "real" quadratic reals)
    (quad_min_eq_intv formula-decl nil quad_minmax reals))
   nil))
 (lt_D_t1_lt_t2 0
  (lt_D_t1_lt_t2-2 nil 3402919974
   ("" (skeep)
    (("" (expand "*")
      (("" (expand "+ ")
        (("" (lemma "quad_min_eq_is_in")
          ((""
            (inst - "sq(v`x) + sq(v`y) + sq(v`z)"
             "2*s`x*v`x + 2*s`y*v`y + 2*s`z*v`z"
             "D+ sq(s`x) + sq(s`y) + sq(s`z)" "t" "t1" "t2")
            (("1" (split -1)
              (("1" (propax) nil nil)
               ("2" (hide -)
                (("2" (expand "sq") (("2" (assert) nil nil)) nil)) nil)
               ("3" (expand "quadratic")
                (("3" (expand "sq") (("3" (assert) nil nil)) nil)) nil)
               ("4" (expand "quadratic")
                (("4" (expand "sq") (("4" (assert) nil nil)) nil)) nil)
               ("5" (propax) nil nil))
              nil)
             ("2" (expand "sq" 1) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "Vector" vectors_3D nil)
    (* const-decl "real" vectors_3D nil)
    (quad_min_eq_is_in formula-decl nil quad_minmax reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (quadratic const-decl "real" quadratic reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (v skolem-const-decl "Vect3" closest_approach_3D nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)
  (lt_D_t1_lt_t2-1 nil 3402657586
   ("" (skeep)
    (("" (lemma "quad_min_eq_is_in")
      ((""
        (inst - "sq(vx) + sq(vy)" "2*sx*vx + 2*sy*vy" "D+ sq(sx) + sq(sy)" "t"
         "t1" "t2")
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide -) (("2" (expand "sq") (("2" (assert) nil nil)) nil))
            nil)
           ("3" (expand "quadratic")
            (("3" (expand "sq") (("3" (assert) nil nil)) nil)) nil)
           ("4" (expand "quadratic")
            (("4" (expand "sq") (("4" (assert) nil nil)) nil)) nil)
           ("5" (propax) nil nil))
          nil)
         ("2" (expand "sq" 1) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq const-decl "nonneg_real" sq reals)
    (quadratic const-decl "real" quadratic reals)
    (quad_min_eq_is_in formula-decl nil quad_minmax reals))
   nil))
 (discr_le_0 0
  (discr_le_0-1 nil 3402929953
   ("" (skeep)
    (("" (lemma "a_gt_0_discr_gt_0")
      (("" (inst?)
        (("" (inst - "t")
          (("" (assert) (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((a_gt_0_discr_gt_0 formula-decl nil quadratic reals)
    (+ const-decl "Vector" vectors_3D nil)
    (* const-decl "Vector" vectors_3D nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_3D nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (sos const-decl "nnreal" vectors_3D nil)
    (nnreal type-eq-decl nil real_types nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Vector type-eq-decl nil vectors_3D nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))


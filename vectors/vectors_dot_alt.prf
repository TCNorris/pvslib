(vectors_dot_alt
 (dot_rew_prep_TCC1 0
  (dot_rew_prep_TCC1-1 nil 3460465509 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil (dot_rew_prep subtype "vectors_dot_alt.m" "T_high[below(n)]")))
 (dot_rew_prep 0
  (dot_rew_prep-3 "" 3790093292
   ("" (induct "m")
    (("1" (skosimp*)
      (("1" (expand "sigma")
        (("1" (expand "sigma") (("1" (lift-if) (("1" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (lemma "sigma_last[nat]")
          (("2" (assert)
            (("2" (inst - "_" "j!1+1" "0")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (lemma "sigma_last[Index[n]]")
                        (("2" (inst - "_" "j!1+1" "0")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) nil nil))
    nil)
   nil shostak)
  (dot_rew_prep-2 "" 3757815843
   ("" (induct "m")
    (("1" (skosimp*)
      (("1" (expand "sigma")
        (("1" (expand "sigma") (("1" (lift-if) (("1" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (lemma "sigma_last[nat]")
          (("2" (assert)
            (("2" (inst - "_" "j!1+1" "0")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (lemma "sigma_last[Index[n]]")
                        (("2" (inst - "_" "j!1+1" "0")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2" (expand "restrict")
                                (("2" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) nil nil))
    nil)
   ((sigma_last formula-decl nil sigma reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors nil) (Index type-eq-decl nil vectors nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" vectors_dot_alt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)
  (dot_rew_prep-1 nil 3460465514
   ("" (induct "m")
    (("1" (skosimp*)
      (("1" (expand "sigma")
        (("1" (expand "sigma") (("1" (lift-if) (("1" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp*)
      (("2" (inst?)
        (("2" (lemma "sigma_last[nat]")
          (("2" (assert)
            (("2" (inst - "_" "j!1+1" "0")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (hide -1)
                      (("2" (lemma "sigma_last[Index[n]]")
                        (("2" (inst - "_" "j!1+1" "0")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp*) nil nil) ("4" (skosimp*) (("4" (assert) nil nil)) nil))
    nil)
   ((sigma_last formula-decl nil sigma reals)
    (sigma def-decl "real" sigma reals) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals) (Vector type-eq-decl nil vectors nil)
    (Index type-eq-decl nil vectors nil))
   shostak))
 (dot_rew 0
  (dot_rew-1 nil 3460465393
   ("" (skosimp*)
    (("" (expand "dot")
      (("" (expand "*") (("" (rewrite "dot_rew_prep") nil nil)) nil)) nil))
    nil)
   ((dot const-decl "real" vectors_dot_alt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (dot_rew_prep formula-decl nil vectors_dot_alt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" vectors_dot_alt nil)
    (< const-decl "bool" reals nil) (Index type-eq-decl nil vectors nil)
    (Vector type-eq-decl nil vectors nil) (* const-decl "real" vectors nil))
   shostak)))


(linear_independence_3D
 (get_around_bug 0
  (get_around_bug-1 nil 3426242526 ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   shostak))
 (test2 0
  (test2-1 nil 3411492170
   ("" (skosimp*)
    (("" (prop)
      (("1" (expand "linearly_dependent?")
        (("1" (skosimp*)
          (("1" (inst + "rk!1(0)" "rk!1(1)")
            (("1" (assert)
              (("1" (expand "sigma")
                (("1" (expand "sigma")
                  (("1" (assert)
                    (("1" (expand "*" -3)
                      (("1" (expand "sigma" -3)
                        (("1" (assert)
                          (("1" (expand "sigma" -3)
                            (("1" (assert)
                              (("1" (replace -4)
                                (("1" (assert)
                                  (("1" (expand "+ ")
                                    (("1" (assert)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (typepred "jj!1")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "jj!1 = 0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (case "jj!1 = 1")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (typepred "jj!1")
                                                    (("2"
                                                      (hide-all-but
                                                       (-1 -4 1 2))
                                                      (("2"
                                                        (case
                                                         "integer_pred(jj!1)")
                                                        (("1"
                                                          (lemma
                                                           "get_around_bug")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "linearly_dependent?")
        (("2" (skosimp*)
          (("2" (inst + "fseq2(k1!1,k2!1)")
            (("2" (expand "fseq2")
              (("2" (assert)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1" (inst + "0")
                      (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                    nil)
                   ("2" (inst + "1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma def-decl "Vector" sigma_3D nil)
    (* const-decl "fseq[Vect3]" fseqs_ops_vect3 nil)
    (add_zero_right formula-decl nil vectors_3D nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (get_around_bug formula-decl nil linear_independence_3D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "Vector" vectors_3D nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sigma const-decl "Vector" sigma_fseq_3D nil)
    (fseq type-eq-decl nil fseqs structures)
    (barray type-eq-decl nil fseqs structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (linearly_dependent? const-decl "bool" linear_independence_3D nil)
    (linearly_dependent? const-decl "bool" cross_3D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_3D nil)
    (zero const-decl "Vector" vectors_3D nil)
    (default const-decl "T" fseqs structures)
    (Vect3 type-eq-decl nil vectors_3D_def nil)
    (/= const-decl "boolean" notequal nil)
    (fseq2 const-decl "fseq" fseqs structures))
   shostak)))


(cos_props
 (cos_iter_alt_series_TCC1 0
  (cos_iter_alt_series_TCC1-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (cos_iter_alt_series subtype "(number_fields.-)(cos_props.n, 1)" "nat")))
 (cos_iter_alt_series_TCC2 0
  (cos_iter_alt_series_TCC2-1 nil 3634305349 ("" (subtype-tcc) nil nil) nil
   nil
   (cos_iter_alt_series subtype "(number_fields.*(2, cos_props.n))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (cos_iter_alt_series_TCC3 0
  (cos_iter_alt_series_TCC3-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil
   (cos_iter_alt_series subtype "2"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (cos_iter_alt_series_TCC4 0
  (cos_iter_alt_series_TCC4-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((posreal_exp application-judgement "posreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (cos_iter_alt_series subtype "cos_props.c" "{c | fast_approx.c /= 0}")))
 (cos_iter_alt_series 0
  (cos_iter_alt_series-2 "" 3790099992
   ("" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
    (("1" (skeep :preds? t)
      (("1" (expand "cos_approx_iter_alt")
        (("1" (rewrite "expt_x2")
          (("1" (expand "cos_approx_iter_alt")
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (lift-if -8)
                    (("1" (split -8)
                      (("1" (flatten)
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1" (simplify)
                              (("1" (expand "pm1")
                                (("1" (expand "cos_approx")
                                  (("1" (expand "sigma")
                                    (("1" (expand "sigma")
                                      (("1"
                                        (expand "cos_term")
                                        (("1"
                                          (replaces -9)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (simplify)
                              (("1" (lift-if 2)
                                (("1" (split 2)
                                  (("1" (flatten)
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (rewrite "sigma_last" 2)
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (simplify 2)
                                            (("1"
                                              (expand "cos_term")
                                              (("1"
                                                (lift-if 2)
                                                (("1"
                                                  (split 2)
                                                  (("1" (flatten) nil nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replaces -9)
                                                      (("2"
                                                        (inst -11 "n")
                                                        (("2"
                                                          (replaces -11)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (lift-if 1)
                              (("2" (split 1)
                                (("1" (flatten) nil nil)
                                 ("2" (flatten)
                                  (("2" (expand "cos_approx")
                                    (("2" (rewrite "sigma_last" 1)
                                      (("2"
                                        (rewrite "sigma_last" 1)
                                        (("2"
                                          (replaces -3 :dir rl)
                                          (("2"
                                            (simplify 1)
                                            (("2"
                                              (inst-cp -14 "1+n")
                                              (("2"
                                                (inst -14 "n")
                                                (("2"
                                                  (replaces -14)
                                                  (("2"
                                                    (replaces -14)
                                                    (("2"
                                                      (replace -11 1)
                                                      (("2"
                                                        (expand "cos_term")
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (simplify 2)
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_plus"
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "expt_plus"
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_x2")
                                                                      (("2"
                                                                        (expand
                                                                         "factorial"
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (expand
                                                                           "factorial"
                                                                           2
                                                                           4)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             2
                                                                             5)
                                                                            (("2"
                                                                              (field
                                                                               2)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn" 1 NAT_induction)
        (("2" (skeep)
          (("2" (expand "pm1" 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_iter_alt_series-1 nil 3634305350
   ("" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
    (("1" (skeep :preds? t)
      (("1" (expand "cos_approx_iter_alt")
        (("1" (rewrite "expt_x2")
          (("1" (expand "cos_approx_iter_alt")
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (lift-if -8)
                    (("1" (split -8)
                      (("1" (flatten)
                        (("1" (replaces -1)
                          (("1" (replaces -1)
                            (("1" (simplify)
                              (("1" (expand "pm1")
                                (("1" (expand "cos_approx")
                                  (("1" (expand "sigma")
                                    (("1" (expand "sigma")
                                      (("1"
                                        (expand "cos_term")
                                        (("1"
                                          (replaces -9)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (rewrite "expt_x0")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (simplify)
                              (("1" (lift-if 2)
                                (("1" (split 2)
                                  (("1" (flatten)
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (rewrite "sigma_last" 2)
                                        (("1"
                                          (replaces -1 :dir rl)
                                          (("1"
                                            (simplify 2)
                                            (("1"
                                              (expand "cos_term")
                                              (("1"
                                                (lift-if 2)
                                                (("1"
                                                  (split 2)
                                                  (("1" (flatten) nil nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replaces -9)
                                                      (("2"
                                                        (inst -11 "n")
                                                        (("2"
                                                          (replaces -11)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (lift-if 1)
                              (("2" (split 1)
                                (("1" (flatten) nil nil)
                                 ("2" (flatten)
                                  (("2" (expand "cos_approx")
                                    (("2" (rewrite "sigma_last" 1)
                                      (("2"
                                        (rewrite "sigma_last" 1)
                                        (("2"
                                          (replaces -3 :dir rl)
                                          (("2"
                                            (simplify 1)
                                            (("2"
                                              (inst-cp -14 "1+n")
                                              (("2"
                                                (inst -14 "n")
                                                (("2"
                                                  (replaces -14)
                                                  (("2"
                                                    (replaces -14)
                                                    (("2"
                                                      (replace -11 1)
                                                      (("2"
                                                        (expand "cos_term")
                                                        (("2"
                                                          (lift-if 1)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (simplify 2)
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_plus"
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "expt_plus"
                                                                     2)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_x2")
                                                                      (("2"
                                                                        (expand
                                                                         "factorial"
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (expand
                                                                           "factorial"
                                                                           2
                                                                           4)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             2
                                                                             5)
                                                                            (("2"
                                                                              (field
                                                                               2)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn" 1 NAT_induction)
        (("2" (skeep)
          (("2" (expand "pm1" 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (cos_approx const-decl "real" trig_approx trig)
    (expt_x0 formula-decl nil exponentiation nil)
    (factorial_0 formula-decl nil factorial ints)
    (cos_term const-decl "real" trig_approx trig)
    (sigma def-decl "real" sigma reals)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sigma_last formula-decl nil sigma reals) (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma reals) (T_low type-eq-decl nil sigma reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cross_mult formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (cos_approx_iter_alt def-decl "nzreal" fast_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pm1 def-decl "int" fast_approx nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (cos_iter_alt_series2_TCC1 0
  (cos_iter_alt_series2_TCC1-1 nil 3634308423 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)) nil
   (cos_iter_alt_series2 subtype "(number_fields.*(2, cos_props.mm))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (cos_iter_alt_series2_TCC2 0
  (cos_iter_alt_series2_TCC2-1 nil 3634308423 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (cos_iter_alt_series2 subtype "(number_fields.*(2, cos_props.m))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (cos_iter_alt_series2_TCC3 0
  (cos_iter_alt_series2_TCC3-1 nil 3634308423 ("" (subtype-tcc) nil nil)
   ((posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cos_approx const-decl "real" trig_approx trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (cos_iter_alt_series2 subtype
    "number_fields./(cos_props.c, factorial.factorial(number_fields.*(2, cos_props.n)))"
    "{c | fast_approx.c /= 0}")))
 (cos_iter_alt_series2_TCC4 0
  (cos_iter_alt_series2_TCC4-1 nil 3634308423 ("" (subtype-tcc) nil nil)
   ((posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cos_approx const-decl "real" trig_approx trig)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil (cos_iter_alt_series2 subtype "cos_props.N" "nat")))
 (cos_iter_alt_series2 0
  (cos_iter_alt_series2-2 "" 3790100000
   ("" (induct "m")
    (("1" (ground) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)
     ("4" (skeep)
      (("4" (skeep :preds? t)
        (("4" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
          (("1" (case "j=0")
            (("1" (replaces -1)
              (("1" (hide -13)
                (("1" (simplify 1)
                  (("1" (lemma "cos_iter_alt_series")
                    (("1" (inst -1 "x" "eps" "n" "b" "c / factorial(2 * n)")
                      (("1" (ground)
                        (("1" (rewrite "sigma_eq_arg")
                          (("1" (replaces -11)
                            (("1" (inst -2 "n")
                              (("1" (replaces -2)
                                (("1" (expand "cos_term")
                                  (("1" (lift-if 1)
                                    (("1" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (rewrite "expt_x0")
                                            (("1"
                                              (rewrite "expt_x0")
                                              (("1"
                                                (expand "factorial" -1 2)
                                                (("1"
                                                  (simplify)
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (case-replace
                                             "(IF NOT (-1) ^ n * (x ^ (2 * n) / factorial(2 * n)) + b =
                          0
                    THEN n
                  ELSE 1 + n
                  ENDIF) = (IF NOT (-1) ^ n * x ^ (2 * n) / factorial(2 * n) + b = 0
                    THEN n
                  ELSE 1 + n
                  ENDIF)")
                                            (("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (grind
                                                 :exclude
                                                 ("factorial" "^"))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -11 "0")
                        (("2" (simplify)
                          (("2" (rewrite "expt_x0")
                            (("2" (simplify)
                              (("2" (ground)
                                (("2" (expand "factorial" -12)
                                  (("2" (expand "factorial" -12)
                                    (("2" (field) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground)
              (("2" (expand "cos_approx_iter_alt" 2)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (inst -13 "0")
                        (("1" (simplify)
                          (("1" (rewrite "expt_x0") (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2"
                        (inst -1 "x" "eps" "1+n"
                         "pm1(n) * (c / factorial(2 * n)) + b" "c*x^2")
                        (("1"
                          (case "c / factorial(2 * n) * x * x /
                           (2 + 2 * n + (4 * (n * n) + 4 * n)) = c * x ^ 2 / factorial(2 * (1 + n))")
                          (("1" (replaces -1)
                            (("1"
                              (case "pm1(n) * (c / factorial(2 * n)) + b +
                          sigma(1 + n, 1 + n - 1 + j, cos_term(x)) = sigma(n, j + n, cos_term(x)) + b")
                              (("1" (replaces -1) (("1" (ground) nil nil))
                                nil)
                               ("2" (simplify 1)
                                (("2" (lemma "sigma_first")
                                  (("2" (inst -1 "cos_term(x)" "j+n" "n")
                                    (("2" (ground)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (simplify 1)
                                          (("2"
                                            (inst -2 "n")
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (replaces -10)
                                                (("2"
                                                  (expand "cos_term")
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_x2" 1)
                            (("2" (simplify 1)
                              (("2" (expand "factorial" 1 2)
                                (("2" (expand "factorial" 1 2)
                                  (("2" (expand "factorial" 1 3)
                                    (("2" (field 1) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -10 1)
                          (("2" (rewrite "expt_plus" 1)
                            (("2" (ground)
                              (("1" (replace -10 -11)
                                (("1" (skeep)
                                  (("1" (inst -11 "mm+1")
                                    (("1" (simplify)
                                      (("1"
                                        (rewrite "expt_plus" -11)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (replace -10 -12)
                                (("2" (rewrite "expt_plus" -12)
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replaces -10)
                          (("3" (inst -1 "n")
                            (("3" (replaces -1)
                              (("3" (lift-if -7)
                                (("3" (split -7)
                                  (("1" (flatten)
                                    (("1" (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "cos_approx")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (expand "cos_term")
                                                  (("1" (grind 1) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "cos_approx")
                                      (("2"
                                        (rewrite "sigma_last" 2)
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (simplify 2)
                                            (("2"
                                              (expand "cos_term")
                                              (("2"
                                                (lift-if 2)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (induct "nn" 1 NAT_induction)
              (("2" (skeep)
                (("2" (expand "pm1" 1)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (ground)
          (("5" (ground) (("5" (lift-if -2) (("5" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (cross-mult)
          (("6" (ground) (("6" (typepred (c)) (("6" (simplify) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep) (("7" (skeep) (("7" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (cos_iter_alt_series2-1 nil 3634308424
   ("" (induct "m")
    (("1" (ground) nil nil) ("2" (ground) nil nil) ("3" (ground) nil nil)
     ("4" (skeep)
      (("4" (skeep :preds? t)
        (("4" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
          (("1" (case "j=0")
            (("1" (replaces -1)
              (("1" (hide -13)
                (("1" (simplify 1)
                  (("1" (lemma "cos_iter_alt_series")
                    (("1" (inst -1 "x" "eps" "n" "b" "c / factorial(2 * n)")
                      (("1" (ground)
                        (("1" (rewrite "sigma_eq_arg")
                          (("1" (replaces -11)
                            (("1" (inst -2 "n")
                              (("1" (replaces -2)
                                (("1" (expand "cos_term")
                                  (("1" (lift-if 1)
                                    (("1" (split 1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (rewrite "expt_x0")
                                            (("1"
                                              (rewrite "expt_x0")
                                              (("1"
                                                (expand "factorial" -1 2)
                                                (("1"
                                                  (simplify)
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (case-replace
                                             "(IF NOT (-1) ^ n * (x ^ (2 * n) / factorial(2 * n)) + b =
                          0
                    THEN n
                  ELSE 1 + n
                  ENDIF) = (IF NOT (-1) ^ n * x ^ (2 * n) / factorial(2 * n) + b = 0
                    THEN n
                  ELSE 1 + n
                  ENDIF)")
                                            (("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (grind
                                                 :exclude
                                                 ("factorial" "^"))
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -11 "0")
                        (("2" (simplify)
                          (("2" (rewrite "expt_x0")
                            (("2" (simplify)
                              (("2" (ground)
                                (("2" (expand "factorial" -12)
                                  (("2" (expand "factorial" -12)
                                    (("2" (field) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground)
              (("2" (expand "cos_approx_iter_alt" 2)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (inst -13 "0")
                        (("1" (simplify)
                          (("1" (rewrite "expt_x0") (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2"
                        (inst -1 "x" "eps" "1+n"
                         "pm1(n) * (c / factorial(2 * n)) + b" "c*x^2")
                        (("1"
                          (case "c / factorial(2 * n) * x * x /
                           (2 + 2 * n + (4 * (n * n) + 4 * n)) = c * x ^ 2 / factorial(2 * (1 + n))")
                          (("1" (replaces -1)
                            (("1"
                              (case "pm1(n) * (c / factorial(2 * n)) + b +
                          sigma(1 + n, 1 + n - 1 + j, cos_term(x)) = sigma(n, j + n, cos_term(x)) + b")
                              (("1" (replaces -1) (("1" (ground) nil nil))
                                nil)
                               ("2" (simplify 1)
                                (("2" (lemma "sigma_first")
                                  (("2" (inst -1 "cos_term(x)" "j+n" "n")
                                    (("2" (ground)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (simplify 1)
                                          (("2"
                                            (inst -2 "n")
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (replaces -10)
                                                (("2"
                                                  (expand "cos_term")
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "expt_x2" 1)
                            (("2" (simplify 1)
                              (("2" (expand "factorial" 1 2)
                                (("2" (expand "factorial" 1 2)
                                  (("2" (expand "factorial" 1 3)
                                    (("2" (field 1) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replace -10 1)
                          (("2" (rewrite "expt_plus" 1)
                            (("2" (ground)
                              (("1" (replace -10 -11)
                                (("1" (skeep)
                                  (("1" (inst -11 "mm+1")
                                    (("1" (simplify)
                                      (("1"
                                        (rewrite "expt_plus" -11)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (replace -10 -12)
                                (("2" (rewrite "expt_plus" -12)
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replaces -10)
                          (("3" (inst -1 "n")
                            (("3" (replaces -1)
                              (("3" (lift-if -7)
                                (("3" (split -7)
                                  (("1" (flatten)
                                    (("1" (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (expand "cos_approx")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (hide 3)
                                                (("1"
                                                  (expand "cos_term")
                                                  (("1" (grind 1) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "cos_approx")
                                      (("2"
                                        (rewrite "sigma_last" 2)
                                        (("2"
                                          (replaces -1 :dir rl)
                                          (("2"
                                            (simplify 2)
                                            (("2"
                                              (expand "cos_term")
                                              (("2"
                                                (lift-if 2)
                                                (("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (induct "nn" 1 NAT_induction)
              (("2" (skeep)
                (("2" (expand "pm1" 1)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (ground)
          (("5" (ground) (("5" (lift-if -2) (("5" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (cross-mult)
          (("6" (ground) (("6" (typepred (c)) (("6" (simplify) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep) (("7" (skeep) (("7" (ground) nil nil)) nil)) nil)
     ("8" (skeep) (("8" (skeep) (("8" (ground) nil nil)) nil)) nil))
    nil)
   ((div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pm1 def-decl "int" fast_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sigma_last formula-decl nil sigma reals)
    (expt_plus formula-decl nil exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sigma_first formula-decl nil sigma reals)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (b skolem-const-decl
     "{b: real | b = IF n = 0 THEN 0 ELSE cos_approx(x, n - 1) ENDIF}"
     cos_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (x skolem-const-decl "{x: posreal | x < 7}" cos_props nil)
    (n skolem-const-decl "nat" cos_props nil)
    (j skolem-const-decl "nat" cos_props nil)
    (eps skolem-const-decl "posreal" cos_props nil)
    (c skolem-const-decl "{c: nnreal |
   c = x ^ (2 * n) AND
    (FORALL (mm: below(1 + j)):
       c * x ^ (2 * mm) / factorial(2 * mm + 2 * n) > eps)
     AND (c * x ^ (2 + 2 * j)) / factorial(2 + 2 * j + 2 * n) <= eps}"
       cos_props nil)
    (sigma_eq_arg formula-decl nil sigma reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (nzrat_times_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (times_div2 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (cos_iter_alt_series formula-decl nil cos_props nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (cos_approx_iter_alt def-decl "nzreal" fast_approx nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (pred type-eq-decl nil defined_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cos_approx const-decl "real" trig_approx trig)
    (nnreal type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma reals)
    (T_high type-eq-decl nil sigma reals) (sigma def-decl "real" sigma reals)
    (cos_term const-decl "real" trig_approx trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   shostak))
 (cos_iter_alt_series3_TCC1 0
  (cos_iter_alt_series3_TCC1-1 nil 3634380006 ("" (subtype-tcc) nil nil) nil
   nil
   (cos_iter_alt_series3 subtype "(number_fields.*(2, cos_props.m))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (cos_iter_alt_series3_TCC2 0
  (cos_iter_alt_series3_TCC2-1 nil 3634380006 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil
   (cos_iter_alt_series3 subtype "(number_fields.*(2, cos_props.n))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (cos_iter_alt_series3_TCC3 0
  (cos_iter_alt_series3_TCC3-1 nil 3634380006 ("" (subtype-tcc) nil nil)
   ((posreal_exp application-judgement "posreal" exponentiation nil)) nil
   (cos_iter_alt_series3 subtype "(number_fields.-)(cos_props.n, 1)" "nat")))
 (cos_iter_alt_series3_TCC4 0
  (cos_iter_alt_series3_TCC4-1 nil 3634380006 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (cos_approx const-decl "real" trig_approx trig)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (cos_iter_alt_series3 subtype "cos_props.N" "nat")))
 (cos_iter_alt_series3 0
  (cos_iter_alt_series3-2 "" 3790100003
   ("" (skeep :preds? t)
    (("" (lemma "cos_iter_alt_series2")
      (("" (ground)
        (("" (inst -1 "x" "eps" "0" "n" "0" "1")
          (("1" (expand "factorial" -1)
            (("1" (expand "cos_approx" 1 2)
              (("1" (ground)
                (("1"
                  (case "(NOT sigma(0, n - 1, cos_term(x)) = 0) = (sigma(0, n - 1, cos_term(x)) /= 0)")
                  (("1" (replaces -1) nil nil) ("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (cos_iter_alt_series3-1 nil 3634380404
   ("" (skeep :preds? t)
    (("" (lemma "cos_iter_alt_series2")
      (("" (ground)
        (("" (inst -1 "x" "eps" "0" "n" "0" "1")
          (("1" (expand "factorial" -1)
            (("1" (expand "cos_approx" 1 2)
              (("1" (ground)
                (("1"
                  (case "(NOT sigma(0, n - 1, cos_term(x)) = 0) = (sigma(0, n - 1, cos_term(x)) /= 0)")
                  (("1" (replaces -1) nil nil) ("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "expt_x0") (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cos_iter_alt_series2 formula-decl nil cos_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (n skolem-const-decl "{n: posnat |
   (FORALL (m: below(n)): x ^ (2 * m) / factorial(2 * m) > eps) AND
    x ^ (2 * n) / factorial(2 * n) <= eps}" cos_props nil)
    (<= const-decl "bool" reals nil)
    (eps skolem-const-decl "posreal" cos_props nil)
    (factorial def-decl "posnat" factorial ints)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "{x: posreal | x < 7}" cos_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cos_approx const-decl "real" trig_approx trig)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sigma def-decl "real" sigma reals)
    (cos_term const-decl "real" trig_approx trig)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   shostak))
 (bounding?_TCC1 0
  (bounding?_TCC1-1 nil 3634305349 ("" (subtype-tcc) nil nil) nil nil
   (bounding? subtype "(number_fields.*(2, cos_props.n))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC1 0
  (bound_iter_TCC1-1 nil 3634305349 ("" (subtype-tcc) nil nil) nil nil
   (bound_iter subtype "(number_fields.*(2, cos_props.m))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC2 0
  (bound_iter_TCC2-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((posreal_exp application-judgement "posreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (bound_iter subtype
    "((number_fields.+)(number_fields.*(2, cos_props.n), 2))"
    "{i: integers.int | booleans.OR(cos_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC3 0
  (bound_iter_TCC3-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil (bound_iter subtype "(number_fields.-)(8, cos_props.n)" "nat")))
 (bound_iter_TCC4 0
  (bound_iter_TCC4-1 nil 3634305349
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype
    "number_fields./((number_fields./(exponentiation.^(cos_props.x, ((number_fields.+)(number_fields.*(2, cos_props.n), 2))), factorial.factorial((number_fields.+)(number_fields.*(2, cos_props.n), 2)))), cos_props.eps)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (bound_iter_TCC5 0
  (bound_iter_TCC5-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((posreal_exp application-judgement "posreal" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (bound_iter subtype
    "((number_fields.+)(number_fields.*(2, cos_props.z`3), 2))"
    "{i: integers.int | booleans.OR(cos_props.z`1 /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC6 0
  (bound_iter_TCC6-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil (bound_iter subtype "(number_fields.-)(8, cos_props.z`3)" "nat")))
 (bound_iter_TCC7 0
  (bound_iter_TCC7-1 nil 3634305349
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype
    "number_fields./((number_fields./(exponentiation.^(cos_props.z`1, ((number_fields.+)(number_fields.*(2, cos_props.z`3), 2))), factorial.factorial((number_fields.+)(number_fields.*(2, cos_props.z`3), 2)))), cos_props.z`2)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (bound_iter_TCC8 0
  (bound_iter_TCC8-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (bounding? const-decl "bool" cos_props nil)
    (^ const-decl "real" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype "(number_fields.+)(cos_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(cos_props.x, (number_fields.*(2, m))), factorial.factorial(number_fields.*(2, m))), cos_props.eps), reals.<=(number_fields./(exponentiation.^(cos_props.x, (number_fields.*(2, nn))), factorial.factorial(number_fields.*(2, nn))), cos_props.eps))}")))
 (bound_iter_TCC9 0
  (bound_iter_TCC9-1 nil 3634305349 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bounding? const-decl "bool" cos_props nil)
    (^ const-decl "real" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype "(number_fields.+)(cos_props.n, 1)"
    "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below(1 + n)): reals.>(number_fields./(exponentiation.^(cos_props.x, (number_fields.*(2, m))), factorial.factorial(number_fields.*(2, m))), cos_props.eps)}")))
 (bound_iter_TCC10 0
  (bound_iter_TCC10-2 "" 3790100019
   ("" (skeep)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten)
          (("1" (expand "lex2")
            (("1" (ground)
              (("1" (ground)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (grind :exclude "factorial") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (ground)
            (("1" (grind :exclude ("factorial" "^")) nil nil)
             ("2" (lift-if 2)
              (("2" (ground)
                (("1"
                  (case-replace
                   "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                  (("1" (case "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1")
                    (("1" (mult-ineq -1 -3) (("1" (ground) nil nil)) nil)
                     ("2" (hide-all-but (1 3))
                      (("2" (flip-ineq 2)
                        (("2" (case "x^2<=49")
                          (("1" (case "1/(4+2*n)<=1/7")
                            (("1" (case "1/(3+2*n)<=1/7")
                              (("1" (mult-ineq -2 -1)
                                (("1" (mult-ineq -4 -1)
                                  (("1" (ground) (("1" (field) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (field) nil nil))
                              nil)
                             ("2" (field) nil nil))
                            nil)
                           ("2" (typepred (x))
                            (("2" (mult-ineq -3 -3)
                              (("2" (rewrite "expt_x2")
                                (("2" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (expand "factorial" 1 1)
                      (("2" (expand "factorial" 1 1)
                        (("2" (expand "factorial" 1 3)
                          (("2" (case-replace "4+2*n = 2+(2+2*n)")
                            (("1" (rewrite "expt_plus" 1)
                              (("1" (field) nil nil)) nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind :exclude ("factorial" "^")) nil nil)
                 ("3" (name "C" "((x ^ (4 + 2 * n)) / factorial(4 + 2 * n))")
                  (("3" (replace -1)
                    (("3"
                      (name-replace "c"
                       "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                      (("3"
                        (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                        (("1" (hide -2) (("1" (grind) nil nil)) nil)
                         ("2" (hide-all-but (1 2 4 6))
                          (("2" (lemma "log_nat_incr")
                            (("2" (inst -1 "4" "C/eps" "c/eps")
                              (("2" (ground)
                                (("2" (case "C <= c/4")
                                  (("1" (cross-mult)
                                    (("1" (case "eps<=eps")
                                      (("1"
                                        (mult-ineq -2 -1)
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2" (expand "C")
                                    (("2" (expand "c")
                                      (("2"
                                        (case-replace
                                         "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                                        (("1"
                                          (case
                                           "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1/4")
                                          (("1"
                                            (case
                                             "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))<= ((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                                            (("1"
                                              (mult-ineq -2 -1)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 5))
                                            (("2"
                                              (case "1/(3+2*n)<=1/14")
                                              (("1"
                                                (case "1/(4+2*n)<=1/14")
                                                (("1"
                                                  (case "x<=7")
                                                  (("1"
                                                    (mult-ineq -1 -1)
                                                    (("1"
                                                      (mult-ineq -1 -3)
                                                      (("1"
                                                        (mult-ineq -1 -5)
                                                        (("1"
                                                          (rewrite
                                                           "expt_x2"
                                                           1)
                                                          (("1"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred (x))
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil)
                                               ("2" (field) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (case-replace "4+2*n = 2+(2+2*n)")
                                            (("1"
                                              (rewrite "expt_plus")
                                              (("1"
                                                (simplify)
                                                (("1"
                                                  (expand "factorial" 1 1)
                                                  (("1"
                                                    (expand "factorial" 1 1)
                                                    (("1"
                                                      (expand "factorial" 1 3)
                                                      (("1"
                                                        (name
                                                         "fac"
                                                         "factorial(2+2*n)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bound_iter termination
    "cos_props.bound_iter(cos_props.x, cos_props.eps, (number_fields.+)(cos_props.n, 1))"
    "nil"))
  (bound_iter_TCC10-1 nil 3634305349
   ("" (skeep)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten)
          (("1" (expand "lex2")
            (("1" (ground)
              (("1" (ground)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (grind :exclude "factorial") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (ground)
            (("1" (grind :exclude ("factorial" "^")) nil nil)
             ("2" (ground)
              (("2" (lift-if 2)
                (("2" (ground)
                  (("1"
                    (case-replace
                     "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                    (("1" (case "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1")
                      (("1" (mult-ineq -1 -3) (("1" (ground) nil nil)) nil)
                       ("2" (hide-all-but (1 3))
                        (("2" (flip-ineq 2)
                          (("2" (case "x^2<=49")
                            (("1" (case "1/(4+2*n)<=1/7")
                              (("1" (case "1/(3+2*n)<=1/7")
                                (("1" (mult-ineq -2 -1)
                                  (("1" (mult-ineq -4 -1)
                                    (("1" (ground) (("1" (field) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (field) nil nil))
                                nil)
                               ("2" (field) nil nil))
                              nil)
                             ("2" (typepred (x))
                              (("2" (mult-ineq -3 -3)
                                (("2" (rewrite "expt_x2")
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "factorial" 1 1)
                        (("2" (expand "factorial" 1 1)
                          (("2" (expand "factorial" 1 3)
                            (("2" (case-replace "4+2*n = 2+(2+2*n)")
                              (("1" (rewrite "expt_plus" 1)
                                (("1" (field) nil nil)) nil)
                               ("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind :exclude ("factorial" "^")) nil nil)
                   ("3"
                    (name "C" "((x ^ (4 + 2 * n)) / factorial(4 + 2 * n))")
                    (("3" (replace -1)
                      (("3"
                        (name-replace "c"
                         "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                        (("3"
                          (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                          (("1" (hide -2) (("1" (grind) nil nil)) nil)
                           ("2" (hide-all-but (1 2 4 6))
                            (("2" (lemma "log_nat_incr")
                              (("2" (inst -1 "4" "C/eps" "c/eps")
                                (("2" (ground)
                                  (("2" (case "C <= c/4")
                                    (("1" (cross-mult)
                                      (("1"
                                        (case "eps<=eps")
                                        (("1"
                                          (mult-ineq -2 -1)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "C")
                                      (("2"
                                        (expand "c")
                                        (("2"
                                          (case-replace
                                           "(x ^ (4 + 2 * n)) / factorial(4 + 2 * n) = (x^2/((4+2*n)*(3+2*n)))*((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                                          (("1"
                                            (case
                                             "(x ^ 2 / ((4 + 2 * n) * (3 + 2 * n)))<=1/4")
                                            (("1"
                                              (case
                                               "((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))<= ((x ^ (2 + 2 * n)) / factorial(2 + 2 * n))")
                                              (("1"
                                                (mult-ineq -2 -1)
                                                (("1" (ground) nil nil))
                                                nil)
                                               ("2" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5))
                                              (("2"
                                                (case "1/(3+2*n)<=1/14")
                                                (("1"
                                                  (case "1/(4+2*n)<=1/14")
                                                  (("1"
                                                    (case "x<=7")
                                                    (("1"
                                                      (mult-ineq -1 -1)
                                                      (("1"
                                                        (mult-ineq -1 -3)
                                                        (("1"
                                                          (mult-ineq -1 -5)
                                                          (("1"
                                                            (rewrite
                                                             "expt_x2"
                                                             1)
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred (x))
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (field) nil nil))
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (case-replace
                                               "4+2*n = 2+(2+2*n)")
                                              (("1"
                                                (rewrite "expt_plus")
                                                (("1"
                                                  (simplify)
                                                  (("1"
                                                    (expand "factorial" 1 1)
                                                    (("1"
                                                      (expand "factorial" 1 1)
                                                      (("1"
                                                        (expand
                                                         "factorial"
                                                         1
                                                         3)
                                                        (("1"
                                                          (name
                                                           "fac"
                                                           "factorial(2+2*n)")
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (c skolem-const-decl "posreal" cos_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (C skolem-const-decl "posreal" cos_props nil)
    (log_nat_incr formula-decl nil log_nat reals)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (above nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_times formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (le_div_le_pos formula-decl nil real_props nil)
    (odd? const-decl "bool" integers nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (bounding? const-decl "bool" cos_props nil)
    (< def-decl "bool" ordinals nil)
    (factorial def-decl "posnat" factorial ints)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (bound_iter termination
    "cos_props.bound_iter(cos_props.x, cos_props.eps, (number_fields.+)(cos_props.n, 1))"
    "nil")))
 (iter_bound 0
  (iter_bound-1 nil 3634382004
   ("" (skeep)
    (("" (inst 2 "bound_iter(x, eps, 0)")
      (("1" (typepred "bound_iter(x, eps, 0)")
        (("1" (ground) nil nil)
         ("2" (skeep)
          (("2" (case "m=0")
            (("1" (replaces -1) (("1" (hide 3) (("1" (grind) nil nil)) nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (case "m=0")
          (("1" (replaces -1) (("1" (grind) nil nil)) nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_exp application-judgement "posreal" exponentiation nil)
    (eps skolem-const-decl "posreal" cos_props nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl "{x: posreal | x < 7}" cos_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (bound_iter def-decl "{nn: posnat |
   (FORALL (m: below(nn)): x ^ (2 * m) / factorial(2 * m) > eps) AND
    x ^ (2 * nn) / factorial(2 * nn) <= eps}" cos_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (cos_fast_approx_bound 0
  (cos_fast_approx_bound-2 "" 3790100027
   (""
    (case "FORALL ((y:posreal | y<7), (eps:posreal| eps<1)): abs(cos(y)-cos_fast_approx(y,eps))<=eps")
    (("1" (skeep)
      (("1" (case "x=0")
        (("1" (replaces -1)
          (("1" (expand "cos_fast_approx")
            (("1" (rewrite "cos_0")
              (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "x<0")
          (("1" (lemma "cos_neg")
            (("1" (inst -1 "x")
              (("1" (replaces -1 :dir rl)
                (("1" (expand "cos_fast_approx")
                  (("1" (lift-if 2)
                    (("1" (ground)
                      (("1" (expand "abs" 2 2)
                        (("1" (inst -2 "-x" "eps")
                          (("1" (expand "abs" -2 2) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x" "eps")
            (("2" (ground) (("2" (typepred (x)) (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "iter_bound")
        (("2" (skeep)
          (("2" (inst -1 "y" "eps")
            (("2" (ground)
              (("2" (skeep)
                (("2" (lemma "cos_iter_alt_series3")
                  (("2" (inst -1 "y" "eps" "nn")
                    (("1" (ground)
                      (("1" (expand "cos_fast_approx")
                        (("1" (expand "abs" 1 2)
                          (("1" (replaces -1)
                            (("1" (lemma "cos_approx_cos")
                              (("1"
                                (name-replace "N"
                                 "IF cos_approx(y, nn - 1) /= 0 THEN nn - 1
                            ELSE nn
                            ENDIF")
                                (("1" (inst -1 "y" "N")
                                  (("1"
                                    (case "abs(cos_term(y)(N+1))<=y ^ (2 * nn) / factorial(2 * nn)")
                                    (("1" (ground) nil nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (case
                                         "FORALL (mm:nat): abs(cos_term(y)(mm)) = y^(2*mm)/factorial(2*mm)")
                                        (("1"
                                          (inst -1 "N+1")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (simplify 1)
                                              (("1"
                                                (expand "N")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (simplify)
                                                      (("1" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "factorial"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "factorial"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "factorial"
                                                             1
                                                             2)
                                                            (("2"
                                                              (rewrite
                                                               "expt_plus")
                                                              (("2"
                                                                (field 1)
                                                                (("2"
                                                                  (typepred
                                                                   (nn))
                                                                  (("2"
                                                                    (case
                                                                     "y^2<=(2+6*nn+4*nn*nn)")
                                                                    (("1"
                                                                      (case
                                                                       "factorial(2*nn)<=factorial(2*nn)")
                                                                      (("1"
                                                                        (mult-ineq
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       (y))
                                                                      (("2"
                                                                        (mult-ineq
                                                                         -3
                                                                         -3)
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_x2"
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (simplify)
                                                                            (("2"
                                                                              (case
                                                                               "3<=nn")
                                                                              (("1"
                                                                                (mult-ineq
                                                                                 -1
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-8
                                                                                    2))
                                                                                  (("1"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "nn=1 OR nn=2")
                                                                                (("1"
                                                                                  (hide
                                                                                   (-3
                                                                                    -5
                                                                                    -6
                                                                                    -7
                                                                                    1
                                                                                    3))
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (simplify)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "cos_approx")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cos_term")
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "cos_approx")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (simplify)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "cos_term")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "factorial")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "factorial")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "factorial")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "expt_x1")
                                                                                                          (("2"
                                                                                                            (move-terms
                                                                                                             -3
                                                                                                             l
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (simplify
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (cross-mult)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred (nn))
                                              (("2"
                                                (expand "N")
                                                (("2"
                                                  (grind
                                                   :exclude
                                                   "cos_approx")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (induct "mm")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (expand "cos_term")
                                                (("2"
                                                  (lift-if -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite "expt_plus")
                                                        (("2"
                                                          (rewrite
                                                           "expt_plus")
                                                          (("2"
                                                            (case
                                                             "abs((-1)^1*y^2/((2+2*j)*(1+2*j))) =y^2/((2+2*j)*(1+2*j)) ")
                                                            (("1"
                                                              (case-replace
                                                               "(-1) ^ 1 * (-1) ^ j * (y ^ 2 * y ^ (2 * j)) /
                             factorial(2 + 2 * j) = ((-1) ^ 1 * y ^ 2 / ((2 + 2 * j) * (1 + 2 * j)))*((-1) ^ j * y ^ (2 * j) / factorial(2 * j))")
                                                              (("1"
                                                                (case
                                                                 "NOT (-1)^1 = -1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "abs_mult")
                                                                      (("2"
                                                                        (replaces
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (replaces
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             2
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "factorial"
                                                                               2
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "factorial"
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (field
                                                                                   2)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "factorial"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "factorial"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "factorial"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "expt_x1"
                                                               1)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (ground)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "N")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (expand "N")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (expand "N")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide-all-but 1)
                                        (("4"
                                          (expand "N")
                                          (("4"
                                            (typepred (nn))
                                            (("4"
                                              (ground)
                                              (("4"
                                                (lift-if 1)
                                                (("4"
                                                  (split 1)
                                                  (("1" (ground) nil nil)
                                                   ("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (typepred (nn))
                                      (("2"
                                        (expand "N")
                                        (("2"
                                          (grind :exclude "cos_approx")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (expand "abs") (("3" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (cos_fast_approx_bound-1 nil 3634382249
   (""
    (case "FORALL ((y:posreal | y<7), (eps:posreal| eps<1)): abs(cos(y)-cos_fast_approx(y,eps))<=eps")
    (("1" (skeep)
      (("1" (case "x=0")
        (("1" (replaces -1)
          (("1" (expand "cos_fast_approx")
            (("1" (rewrite "cos_0")
              (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (case "x<0")
          (("1" (lemma "cos_neg")
            (("1" (inst -1 "x")
              (("1" (replaces -1 :dir rl)
                (("1" (expand "cos_fast_approx")
                  (("1" (lift-if 2)
                    (("1" (ground)
                      (("1" (expand "abs" 2 2)
                        (("1" (inst -2 "-x" "eps")
                          (("1" (expand "abs" -2 2) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x" "eps")
            (("2" (ground) (("2" (typepred (x)) (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (lemma "iter_bound")
        (("2" (skeep)
          (("2" (inst -1 "y" "eps")
            (("2" (ground)
              (("2" (skeep)
                (("2" (lemma "cos_iter_alt_series3")
                  (("2" (inst -1 "y" "eps" "nn")
                    (("1" (ground)
                      (("1" (expand "cos_fast_approx")
                        (("1" (expand "abs" 1 2)
                          (("1" (replaces -1)
                            (("1" (lemma "cos_approx_cos")
                              (("1"
                                (name-replace "N"
                                 "IF cos_approx(y, nn - 1) /= 0 THEN nn - 1
                            ELSE nn
                            ENDIF")
                                (("1" (inst -1 "y" "N")
                                  (("1"
                                    (case "abs(cos_term(y)(N+1))<=y ^ (2 * nn) / factorial(2 * nn)")
                                    (("1" (ground) nil nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (case
                                         "FORALL (mm:nat): abs(cos_term(y)(mm)) = y^(2*mm)/factorial(2*mm)")
                                        (("1"
                                          (inst -1 "N+1")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (simplify 1)
                                              (("1"
                                                (expand "N")
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (simplify)
                                                      (("1" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "factorial"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "factorial"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "factorial"
                                                             1
                                                             2)
                                                            (("2"
                                                              (rewrite
                                                               "expt_plus")
                                                              (("2"
                                                                (field 1)
                                                                (("2"
                                                                  (typepred
                                                                   (nn))
                                                                  (("2"
                                                                    (case
                                                                     "y^2<=(2+6*nn+4*nn*nn)")
                                                                    (("1"
                                                                      (case
                                                                       "factorial(2*nn)<=factorial(2*nn)")
                                                                      (("1"
                                                                        (mult-ineq
                                                                         -1
                                                                         -2)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       (y))
                                                                      (("2"
                                                                        (mult-ineq
                                                                         -3
                                                                         -3)
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_x2"
                                                                           -1
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (simplify)
                                                                            (("2"
                                                                              (case
                                                                               "3<=nn")
                                                                              (("1"
                                                                                (mult-ineq
                                                                                 -1
                                                                                 -1)
                                                                                (("1"
                                                                                  (hide
                                                                                   (-8
                                                                                    2))
                                                                                  (("1"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "nn=1 OR nn=2")
                                                                                (("1"
                                                                                  (hide
                                                                                   (-3
                                                                                    -5
                                                                                    -6
                                                                                    -7
                                                                                    1
                                                                                    3))
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -4)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (simplify)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "cos_approx")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "cos_term")
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "cos_approx")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("2"
                                                                                          (simplify)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "sigma")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "sigma")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sigma")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "cos_term")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "factorial")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "factorial")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "factorial")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "expt_x1")
                                                                                                          (("2"
                                                                                                            (move-terms
                                                                                                             -3
                                                                                                             l
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (simplify
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (cross-mult)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (typepred (nn))
                                              (("2"
                                                (expand "N")
                                                (("2"
                                                  (grind
                                                   :exclude
                                                   "cos_approx")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (induct "mm")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (expand "cos_term")
                                                (("2"
                                                  (lift-if -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite "expt_plus")
                                                        (("2"
                                                          (rewrite
                                                           "expt_plus")
                                                          (("2"
                                                            (case
                                                             "abs((-1)^1*y^2/((2+2*j)*(1+2*j))) =y^2/((2+2*j)*(1+2*j)) ")
                                                            (("1"
                                                              (case-replace
                                                               "(-1) ^ 1 * (-1) ^ j * (y ^ 2 * y ^ (2 * j)) /
                             factorial(2 + 2 * j) = ((-1) ^ 1 * y ^ 2 / ((2 + 2 * j) * (1 + 2 * j)))*((-1) ^ j * y ^ (2 * j) / factorial(2 * j))")
                                                              (("1"
                                                                (case
                                                                 "NOT (-1)^1 = -1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "abs_mult")
                                                                      (("2"
                                                                        (replaces
                                                                         -2
                                                                         2)
                                                                        (("2"
                                                                          (replaces
                                                                           -2
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "factorial"
                                                                             2
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "factorial"
                                                                               2
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "factorial"
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (field
                                                                                   2)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "factorial"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "factorial"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "factorial"
                                                                     1
                                                                     2)
                                                                    (("2"
                                                                      (field
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "expt_x1"
                                                               1)
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (ground)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "N")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (expand "N")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (expand "N")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide-all-but 1)
                                        (("4"
                                          (expand "N")
                                          (("4"
                                            (typepred (nn))
                                            (("4"
                                              (ground)
                                              (("4"
                                                (lift-if 1)
                                                (("4"
                                                  (split 1)
                                                  (("1" (ground) nil nil)
                                                   ("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (typepred (nn))
                                      (("2"
                                        (expand "N")
                                        (("2"
                                          (grind :exclude "cos_approx")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (expand "abs") (("3" (ground) nil nil)) nil)) nil))
    nil)
   ((posreal_exp application-judgement "posreal" exponentiation nil)
    (cos_iter_alt_series3 formula-decl nil cos_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cos_approx_cos formula-decl nil trig_approx trig)
    (N skolem-const-decl "numfield" cos_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (abs_mult formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}" real_defs
     nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_cancel4 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (sigma def-decl "real" sigma reals)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_term const-decl "real" trig_approx trig)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cos_approx const-decl "real" trig_approx trig)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nn skolem-const-decl "posnat" cos_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (y skolem-const-decl "{y: posreal | y < 7}" cos_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (eps skolem-const-decl "{eps: posreal | eps < 1}" cos_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (iter_bound formula-decl nil cos_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (cos_neg formula-decl nil sincos_def trig)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x skolem-const-decl "{x: real | abs(x) < 7}" cos_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (cos_0 formula-decl nil sincos_def trig)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def trig)
    (cos_fast_approx const-decl "real" fast_approx nil))
   shostak)))


(sin_props
 (sin_iter_alt_series_TCC1 0
  (sin_iter_alt_series_TCC1-1 nil 3633867268 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (sin_iter_alt_series subtype "(number_fields.-)(sin_props.n, 1)" "nat")))
 (sin_iter_alt_series_TCC2 0
  (sin_iter_alt_series_TCC2-1 nil 3633867268 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (sin_iter_alt_series subtype
    "((number_fields.+)(number_fields.*(2, sin_props.n), 1))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (sin_iter_alt_series_TCC3 0
  (sin_iter_alt_series_TCC3-1 nil 3634041961 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (sin_iter_alt_series subtype "2"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (sin_iter_alt_series 0
  (sin_iter_alt_series-2 "" 3790100030
   ("" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
    (("1" (skeep :preds? t)
      (("1" (expand "sin_approx_iter_alt")
        (("1" (expand "sin_approx_iter_alt")
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (expand "sin_approx")
                  (("1" (rewrite "sigma_last" 1)
                    (("1" (lift-if -7)
                      (("1" (split -7)
                        (("1" (flatten)
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1" (replaces -8)
                                (("1" (expand "factorial")
                                  (("1" (expand "factorial")
                                    (("1" (expand "sin_term")
                                      (("1"
                                        (expand "pm1")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "factorial")
                                            (("1"
                                              (expand "factorial")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replaces -1 :dir rl)
                            (("2" (label "n0" 1)
                              (("2" (hide 1)
                                (("2" (simplify 1)
                                  (("2" (inst -11 "1+n")
                                    (("2" (replaces -11)
                                      (("2"
                                        (expand "sin_term")
                                        (("2"
                                          (rewrite "expt_plus")
                                          (("2"
                                            (rewrite "expt_plus")
                                            (("2"
                                              (case "x=0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (rewrite "expt_0")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replaces -8)
                                                (("2"
                                                  (grind
                                                   1
                                                   :exclude
                                                   "factorial")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (rewrite "expt_x2" -10) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn" 1 NAT_induction)
        (("2" (skeep)
          (("2" (expand "pm1" 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin_iter_alt_series-1 nil 3633867384
   ("" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
    (("1" (skeep :preds? t)
      (("1" (expand "sin_approx_iter_alt")
        (("1" (expand "sin_approx_iter_alt")
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (expand "sin_approx")
                  (("1" (rewrite "sigma_last" 1)
                    (("1" (lift-if -7)
                      (("1" (split -7)
                        (("1" (flatten)
                          (("1" (replaces -1)
                            (("1" (replaces -1)
                              (("1" (replaces -8)
                                (("1" (expand "factorial")
                                  (("1" (expand "factorial")
                                    (("1" (expand "sin_term")
                                      (("1"
                                        (expand "pm1")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "factorial")
                                            (("1"
                                              (expand "factorial")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "expt")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replaces -1 :dir rl)
                            (("2" (label "n0" 1)
                              (("2" (hide 1)
                                (("2" (simplify 1)
                                  (("2" (inst -11 "1+n")
                                    (("2" (replaces -11)
                                      (("2"
                                        (expand "sin_term")
                                        (("2"
                                          (rewrite "expt_plus")
                                          (("2"
                                            (rewrite "expt_x1")
                                            (("2"
                                              (rewrite "expt_plus")
                                              (("2"
                                                (rewrite "expt_x1")
                                                (("2"
                                                  (case "x=0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (rewrite "expt_0")
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replaces -8)
                                                    (("2"
                                                      (grind
                                                       1
                                                       :exclude
                                                       "factorial")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (rewrite "expt_x2" -10) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "nn" 1 NAT_induction)
        (("2" (skeep)
          (("2" (expand "pm1" 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (grind) nil nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_approx const-decl "real" trig_approx trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (expt_0 formula-decl nil sqrt_exists reals)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (factorial def-decl "posnat" factorial ints)
    (sigma def-decl "real" sigma reals)
    (expt def-decl "real" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sigma_last formula-decl nil sigma reals)
    (sin_term const-decl "real" trig_approx trig)
    (nnreal type-eq-decl nil real_types nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil) (T_high type-eq-decl nil sigma reals)
    (T_low type-eq-decl nil sigma reals)
    (expt_x2 formula-decl nil exponentiation nil)
    (sin_approx_iter_alt def-decl "real" fast_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pm1 def-decl "int" fast_approx nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   shostak))
 (sin_iter_alt_series2_TCC1 0
  (sin_iter_alt_series2_TCC1-1 nil 3633868397 ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (sin_iter_alt_series2 subtype "(number_fields.*(2, sin_props.mm))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (sin_iter_alt_series2_TCC2 0
  (sin_iter_alt_series2_TCC2-1 nil 3633868397 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (sin_iter_alt_series2 subtype "(number_fields.*(2, sin_props.m))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (sin_iter_alt_series2_TCC3 0
  (sin_iter_alt_series2_TCC3-1 nil 3634041961 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (sin_iter_alt_series2 subtype
    "((number_fields.-)((number_fields.+)(sin_props.n, sin_props.m), 1))"
    "nat")))
 (sin_iter_alt_series2 0
  (sin_iter_alt_series2-2 "" 3790100036
   ("" (induct "m")
    (("1" (ground) nil nil) ("2" (ground) nil nil)
     ("3" (skeep)
      (("3" (skeep :preds? t)
        (("3" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
          (("1" (case "j=0")
            (("1" (replaces -1)
              (("1" (simplify 1)
                (("1" (rewrite "sin_iter_alt_series")
                  (("1" (inst -10 "0")
                    (("1" (hide -12)
                      (("1" (simplify -10)
                        (("1" (rewrite "expt_x0")
                          (("1" (ground)
                            (("1" (expand "factorial" -11)
                              (("1" (expand "factorial" -11)
                                (("1" (ground)
                                  (("1"
                                    (hide
                                     (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -12 2))
                                    (("1" (name "fac" "factorial(1 + 2 * n)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (grind)
                                          (("1" (field) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sin_approx_iter_alt" 2)
              (("2" (lift-if 2)
                (("2" (split 2)
                  (("1" (inst -10 "0")
                    (("1" (simplify -10)
                      (("1" (rewrite "expt_x0") (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -12)
                      (("1"
                        (inst -1 "x" " eps" " 1 + n"
                         "                           b - pm1(1 + n) * (c / factorial(1 + 2 * n))"
                         "                          c*x^2")
                        (("1" (ground)
                          (("1" (rewrite "expt_x2")
                            (("1" (ground)
                              (("1"
                                (case "c / factorial(1 + 2 * n) * x * x /
                                              (6 + 6 * n + (4 * (n * n) + 4 * n)) = c * (x * x) / factorial(3 + 2 * n)")
                                (("1" (ground)
                                  (("1"
                                    (case "(6 + 4 * (n * n) + 10 * n) = (6 + 6 * n + (4 * (n * n) + 4 * n))")
                                    (("1" (ground)
                                      (("1"
                                        (replaces -1)
                                        (("1" (replaces -1) nil nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "factorial" 1 2)
                                    (("2" (expand "factorial" 1 2)
                                      (("2"
                                        (expand "factorial" 1 4)
                                        (("2"
                                          (ground)
                                          (("2" (field) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split 1)
                          (("1" (replaces -9)
                            (("1" (case "x=0")
                              (("1" (replaces -1)
                                (("1" (rewrite "expt_0")
                                  (("1" (rewrite "expt_0")
                                    (("1" (rewrite "expt_0")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (rewrite "expt_plus")
                                (("2" (rewrite "expt_plus")
                                  (("2" (rewrite "expt_x2")
                                    (("2" (rewrite "expt_x3")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -10 "mm+1")
                              (("2" (simplify -10)
                                (("2" (rewrite "expt_plus" -10)
                                  (("1" (ground) nil nil)
                                   ("2" (ground)
                                    (("2" (replaces -1)
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (case "x=0")
                            (("1" (replaces -1)
                              (("1" (rewrite "expt_0" 1)
                                (("1" (ground) nil nil)) nil))
                              nil)
                             ("2" (rewrite "expt_plus" -11)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (inst -1 "n+1")
                          (("3" (replaces -1)
                            (("3" (copy -8)
                              (("3" (replaces -1)
                                (("3" (hide-all-but (-6 1))
                                  (("3" (expand "sin_approx")
                                    (("3" (rewrite "sigma_last" 1)
                                      (("3"
                                        (lift-if -1)
                                        (("3"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (simplify 1)
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "factorial")
                                                      (("1"
                                                        (expand "sin_term")
                                                        (("1"
                                                          (expand "factorial")
                                                          (("1"
                                                            (expand
                                                             "factorial")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (label "n0" 1)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (simplify 1)
                                                    (("2"
                                                      (expand "sin_term")
                                                      (("2"
                                                        (rewrite "expt_plus")
                                                        (("2"
                                                          (rewrite
                                                           "expt_plus")
                                                          (("2"
                                                            (case "x=0")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (rewrite
                                                                 "expt_0")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (induct "nn" 1 NAT_induction)
              (("2" (skeep)
                (("2" (expand "pm1" 1)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (skeep) (("4" (ground) nil nil)) nil)) nil)
     ("5" (skeep) (("5" (skeep) (("5" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (sin_iter_alt_series2-1 nil 3633868398
   ("" (induct "m")
    (("1" (ground) nil nil) ("2" (ground) nil nil)
     ("3" (skeep)
      (("3" (skeep :preds? t)
        (("3" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
          (("1" (case "j=0")
            (("1" (replaces -1)
              (("1" (simplify 1)
                (("1" (rewrite "sin_iter_alt_series")
                  (("1" (inst -10 "0")
                    (("1" (hide -12)
                      (("1" (simplify -10)
                        (("1" (rewrite "expt_x0")
                          (("1" (ground)
                            (("1" (expand "factorial" -11)
                              (("1" (expand "factorial" -11)
                                (("1" (ground)
                                  (("1"
                                    (hide
                                     (-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -12 2))
                                    (("1" (name "fac" "factorial(1 + 2 * n)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (grind)
                                          (("1" (field) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "sin_approx_iter_alt" 2)
              (("2" (lift-if 2)
                (("2" (split 2)
                  (("1" (inst -10 "0")
                    (("1" (simplify -10)
                      (("1" (rewrite "expt_x0") (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -12)
                      (("1"
                        (inst -1 "x" " eps" " 1 + n"
                         "                           b - pm1(1 + n) * (c / factorial(1 + 2 * n))"
                         "                          c*x^2")
                        (("1" (ground)
                          (("1" (rewrite "expt_x2")
                            (("1" (ground)
                              (("1"
                                (case "c / factorial(1 + 2 * n) * x * x /
                                              (6 + 6 * n + (4 * (n * n) + 4 * n)) = c * (x * x) / factorial(3 + 2 * n)")
                                (("1" (ground)
                                  (("1"
                                    (case "(6 + 4 * (n * n) + 10 * n) = (6 + 6 * n + (4 * (n * n) + 4 * n))")
                                    (("1" (ground)
                                      (("1"
                                        (replaces -1)
                                        (("1" (replaces -1) nil nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("2" (hide-all-but 1)
                                  (("2" (expand "factorial" 1 2)
                                    (("2" (expand "factorial" 1 2)
                                      (("2"
                                        (expand "factorial" 1 4)
                                        (("2"
                                          (ground)
                                          (("2" (field) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split 1)
                          (("1" (replaces -9)
                            (("1" (case "x=0")
                              (("1" (replaces -1)
                                (("1" (rewrite "expt_0")
                                  (("1" (rewrite "expt_0")
                                    (("1" (rewrite "expt_0")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (rewrite "expt_plus")
                                (("2" (rewrite "expt_plus")
                                  (("2" (rewrite "expt_x1")
                                    (("2" (rewrite "expt_x2")
                                      (("2"
                                        (rewrite "expt_x3")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -10 "mm+1")
                              (("2" (simplify -10)
                                (("2" (rewrite "expt_plus" -10)
                                  (("1" (ground) nil nil)
                                   ("2" (ground)
                                    (("2" (replaces -1)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (rewrite "expt_0")
                                          (("2"
                                            (rewrite "expt_0")
                                            (("1"
                                              (rewrite "expt_0")
                                              (("1"
                                                (rewrite "expt_0")
                                                (("1"
                                                  (rewrite "expt_0")
                                                  (("1" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("2"
                                                (rewrite "expt_0")
                                                (("2"
                                                  (rewrite "expt_0")
                                                  (("2"
                                                    (rewrite "expt_0")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (case "x=0")
                            (("1" (replaces -1)
                              (("1" (rewrite "expt_0" 1)
                                (("1" (ground) nil nil)) nil))
                              nil)
                             ("2" (rewrite "expt_plus" -11)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (inst -1 "n+1")
                          (("3" (replaces -1)
                            (("3" (copy -8)
                              (("3" (replaces -1)
                                (("3" (hide-all-but (-6 1))
                                  (("3" (expand "sin_approx")
                                    (("3" (rewrite "sigma_last" 1)
                                      (("3"
                                        (lift-if -1)
                                        (("3"
                                          (split -1)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1"
                                                        (expand "sigma")
                                                        (("1"
                                                          (expand "factorial")
                                                          (("1"
                                                            (expand
                                                             "sin_term")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (expand
                                                                 "factorial")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (label "n0" 1)
                                              (("2"
                                                (hide 1)
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (simplify 1)
                                                    (("2"
                                                      (expand "sin_term")
                                                      (("2"
                                                        (rewrite "expt_plus")
                                                        (("2"
                                                          (rewrite
                                                           "expt_plus")
                                                          (("1"
                                                            (rewrite
                                                             "expt_x1")
                                                            (("1"
                                                              (rewrite
                                                               "expt_x1")
                                                              (("1"
                                                                (case "x=0")
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "expt_0")
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            (("2"
                                                              (rewrite
                                                               "expt_x1")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (induct "nn" 1 NAT_induction)
              (("2" (skeep)
                (("2" (expand "pm1" 1)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (skeep) (("4" (ground) nil nil)) nil)) nil)
     ("5" (skeep) (("5" (skeep) (("5" (ground) nil nil)) nil)) nil))
    nil)
   ((int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (pm1 def-decl "int" fast_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (T_low type-eq-decl nil sigma reals) (T_high type-eq-decl nil sigma reals)
    (sin_term const-decl "real" trig_approx trig)
    (sigma_last formula-decl nil sigma reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (sigma def-decl "real" sigma reals)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (expt_0 formula-decl nil sqrt_exists reals)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (expt_x3 formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (zero_hat formula-decl nil exponent_props reals)
    (expt_x2 formula-decl nil exponentiation nil)
    (c skolem-const-decl "{c: nnreal |
   c = x ^ (1 + 2 * n) AND
    (FORALL (mm: below(1 + j)):
       c * x ^ (2 * mm) / factorial(1 + 2 * mm + 2 * n) > eps)
     AND (c * x ^ (2 + 2 * j)) / factorial(3 + 2 * j + 2 * n) <= eps}"
       sin_props nil)
    (eps skolem-const-decl "posreal" sin_props nil)
    (j skolem-const-decl "nat" sin_props nil)
    (b skolem-const-decl
     "{b: real | b = IF n = 0 THEN 0 ELSE sin_approx(x, n - 1) ENDIF}"
     sin_props nil)
    (x skolem-const-decl "{x: nnreal | x < 7}" sin_props nil)
    (n skolem-const-decl "nat" sin_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sin_iter_alt_series formula-decl nil sin_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (times_div2 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (sin_approx_iter_alt def-decl "real" fast_approx nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sin_approx const-decl "real" trig_approx trig)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (<= const-decl "bool" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   shostak))
 (sin_iter_alt_series3_TCC1 0
  (sin_iter_alt_series3_TCC1-1 nil 3633871150 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (sin_iter_alt_series3 subtype
    "((number_fields.+)(number_fields.*(2, sin_props.m), 1))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (sin_iter_alt_series3_TCC2 0
  (sin_iter_alt_series3_TCC2-1 nil 3633871150 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (sin_iter_alt_series3 subtype
    "((number_fields.+)(number_fields.*(2, sin_props.n), 1))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (sin_iter_alt_series3_TCC3 0
  (sin_iter_alt_series3_TCC3-1 nil 3634044069 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil))
   nil
   (sin_iter_alt_series3 subtype "(number_fields.-)(sin_props.n, 1)" "nat")))
 (sin_iter_alt_series3 0
  (sin_iter_alt_series3-1 nil 3633871152
   ("" (skeep :preds? t)
    (("" (lemma "sin_iter_alt_series2")
      (("" (inst -1 "x" "eps" "0" "n" "0" "x")
        (("1" (simplify)
          (("1" (expand "factorial" -1)
            (("1" (expand "factorial" -1) (("1" (ground) nil nil)) nil)) nil))
          nil)
         ("2" (case "x=0")
          (("1" (replaces -1)
            (("1" (expand "sin_approx_iter_alt")
              (("1" (rewrite "sin_approx_a0") nil nil)) nil))
            nil)
           ("2" (ground)
            (("1" (skeep)
              (("1" (inst -6 "mm") (("1" (rewrite "expt_plus") nil nil)) nil))
              nil)
             ("2" (rewrite "expt_plus") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_iter_alt_series2 formula-decl nil sin_props nil)
    (sin_approx_iter_alt def-decl "real" fast_approx nil)
    (sin_approx_a0 formula-decl nil trig_approx trig)
    (nat_exp application-judgement "nat" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_approx const-decl "real" trig_approx trig)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nnreal type-eq-decl nil real_types nil)
    (x skolem-const-decl "{x: nnreal | x < 7}" sin_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (eps skolem-const-decl "posreal" sin_props nil)
    (<= const-decl "bool" reals nil)
    (n skolem-const-decl "{n: posnat |
   (FORALL (m: below(n)): (x ^ (1 + 2 * m)) / factorial(1 + 2 * m) > eps)
    AND (x ^ (1 + 2 * n)) / factorial(1 + 2 * n) <= eps}" sin_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil))
   shostak))
 (bounding?_TCC1 0
  (bounding?_TCC1-1 nil 3633873343 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (bounding? subtype
    "((number_fields.+)(number_fields.*(2, sin_props.n), 1))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC1 0
  (bound_iter_TCC1-1 nil 3633873343 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (bound_iter subtype
    "((number_fields.+)(number_fields.*(2, sin_props.m), 1))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC2 0
  (bound_iter_TCC5-2 nil 3767440515
   ("" (skeep) (("" (cross-mult) nil nil)) nil) nil nil
   (bound_iter subtype "(number_fields.+)(1, number_fields.*(2, sin_props.m))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}"))
  (bound_iter_TCC5-1 nil 3633873343 ("" (skeep) (("" (ground) nil nil)) nil)
   nil nil
   (bound_iter subtype "(number_fields.+)(1, number_fields.*(2, sin_props.m))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC3 0
  (bound_iter_TCC3-1 nil 3790099937 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (bound_iter subtype
    "(number_fields.+)(1, number_fields.*(2, sin_props.nn))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC4 0
  (bound_iter_TCC2-1 nil 3633873343 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype
    "((number_fields.+)(number_fields.*(2, sin_props.n), 3))"
    "{i: integers.int | booleans.OR(sin_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC5 0
  (bound_iter_TCC3-1 nil 3633873343 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil (bound_iter subtype "(number_fields.-)(8, sin_props.n)" "nat")))
 (bound_iter_TCC6 0
  (bound_iter_TCC4-1 nil 3633873343
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype
    "number_fields./((number_fields./(exponentiation.^(sin_props.x, ((number_fields.+)(number_fields.*(2, sin_props.n), 3))), factorial.factorial((number_fields.+)(number_fields.*(2, sin_props.n), 3)))), sin_props.eps)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (bound_iter_TCC7 0
  (bound_iter_TCC7-1 nil 3790099937 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil))
   nil
   (bound_iter subtype "(number_fields.+)(1, number_fields.*(2, sin_props.m))"
    "{i: integers.int | booleans.OR(x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC8 0
  (bound_iter_TCC6-2 nil 3767440500 ("" (skeep) (("" (ground) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype
    "((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))"
    "{i: integers.int | booleans.OR(sin_props.z`1 /= 0, reals.>=(i, 0))}"))
  (bound_iter_TCC6-1 nil 3633873343
   ("" (skeep) (("" (cross-mult) nil nil)) nil) nil nil
   (bound_iter subtype
    "((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))"
    "{i: integers.int | booleans.OR(sin_props.z`1 /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC9 0
  (bound_iter_TCC7-2 nil 3767440409
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil (bound_iter subtype "(number_fields.-)(8, sin_props.z`3)" "nat"))
  (bound_iter_TCC7-1 nil 3633873343
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((factorial def-decl "posnat" factorial ints)) nil
   (bound_iter subtype "(number_fields.-)(8, sin_props.z`3)" "nat")))
 (bound_iter_TCC10 0
  (bound_iter_TCC8-2 nil 3767440380
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (factorial def-decl "posnat" factorial ints)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype
    "number_fields./((number_fields./(exponentiation.^(sin_props.z`1, ((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))), factorial.factorial((number_fields.+)(number_fields.*(2, sin_props.z`3), 3)))), sin_props.z`2)"
    "{x: reals.real | reals.>=(x, 1)}"))
  (bound_iter_TCC8-1 nil 3633873343
   ("" (skeep :preds? t)
    (("" (split 1)
      (("1" (propax) nil nil)
       ("2" (expand "bounding?") (("2" (ground) nil nil)) nil))
      nil))
    nil)
   nil nil
   (bound_iter subtype
    "number_fields./((number_fields./(exponentiation.^(sin_props.z`1, ((number_fields.+)(number_fields.*(2, sin_props.z`3), 3))), factorial.factorial((number_fields.+)(number_fields.*(2, sin_props.z`3), 3)))), sin_props.z`2)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (bound_iter_TCC11 0
  (bound_iter_TCC9-3 nil 3767440640
   ("" (skeep :preds? t)
    (("" (split 1)
      (("1" (propax) nil nil)
       ("2" (expand "bounding?") (("2" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (bounding? const-decl "bool" sin_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype "(number_fields.+)(sin_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps), reals.<=(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, nn))), factorial.factorial((number_fields.+)(1, number_fields.*(2, nn)))), sin_props.eps))}"))
  (bound_iter_TCC9-2 nil 3767440596 ("" (skeep) (("" (cross-mult) nil)) nil)
   nil nil
   (bound_iter subtype "(number_fields.+)(sin_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps), reals.<=(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, nn))), factorial.factorial((number_fields.+)(1, number_fields.*(2, nn)))), sin_props.eps))}"))
  (bound_iter_TCC9-1 nil 3633873343
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (case "m=1+n")
        (("1" (replaces -1)
          (("1" (expand "bounding?") (("1" (ground) nil nil)) nil)) nil)
         ("2" (inst -6 "m") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((factorial def-decl "posnat" factorial ints)) nil
   (bound_iter subtype "(number_fields.+)(sin_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps), reals.<=(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, nn))), factorial.factorial((number_fields.+)(1, number_fields.*(2, nn)))), sin_props.eps))}")))
 (bound_iter_TCC12 0
  (bound_iter_TCC10-3 nil 3767440583
   ("" (skeep :preds? t)
    (("" (skeep)
      (("" (case "m=1+n")
        (("1" (replaces -1)
          (("1" (expand "bounding?") (("1" (ground) nil nil)) nil)) nil)
         ("2" (inst -6 "m") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((x skolem-const-decl "{x: posreal | x < 7}" sin_props nil)
    (eps skolem-const-decl "posreal" sin_props nil)
    (n skolem-const-decl "{n: nat |
   FORALL (m: below(n + 1)): (x ^ (1 + 2 * m)) / factorial(1 + 2 * m) > eps}"
     sin_props nil)
    (m skolem-const-decl "below(2 + n)" sin_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (bounding? const-decl "bool" sin_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil))
   nil
   (bound_iter subtype "(number_fields.+)(sin_props.n, 1)"
    "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below(1 + n)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps)}"))
  (bound_iter_TCC10-2 nil 3634044753
   ("" (skeep)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten)
          (("1" (expand "lex2")
            (("1" (ground)
              (("1" (ground)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (grind :exclude "factorial") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (ground)
            (("1" (grind :exclude "factorial") nil nil)
             ("2" (ground)
              (("2" (lift-if 2)
                (("2" (ground)
                  (("1"
                    (case-replace
                     "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                    (("1" (case "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1")
                      (("1" (mult-ineq -1 -3) (("1" (ground) nil nil)) nil)
                       ("2" (hide-all-but (1 3))
                        (("2" (flip-ineq 2)
                          (("2" (case "x^2<=49")
                            (("1" (case "1/(5+2*n)<=1/7")
                              (("1" (case "1/(4+2*n)<=1/7")
                                (("1" (mult-ineq -2 -1)
                                  (("1" (mult-ineq -4 -1)
                                    (("1" (ground) (("1" (field) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (field) nil nil))
                                nil)
                               ("2" (field) nil nil))
                              nil)
                             ("2" (typepred (x))
                              (("2" (mult-ineq -3 -3)
                                (("2" (rewrite "expt_x2")
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "factorial" 1 1)
                        (("2" (expand "factorial" 1 1)
                          (("2" (expand "factorial" 1 3)
                            (("2" (case "x=0")
                              (("1" (replaces -1)
                                (("1" (rewrite "expt_0")
                                  (("1" (rewrite "expt_0")
                                    (("1" (rewrite "expt_0")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (case-replace "5+2*n = 2+(3+2*n)")
                                (("1" (rewrite "expt_plus" 2)
                                  (("1" (field 2) nil nil)) nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind :exclude "factorial") nil nil)
                   ("3"
                    (name "C" "((x ^ (5 + 2 * n)) / factorial(5 + 2 * n))")
                    (("3" (replace -1)
                      (("3"
                        (name-replace "c"
                         "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                        (("3"
                          (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                          (("1" (hide -2) (("1" (grind) nil nil)) nil)
                           ("2" (hide-all-but (1 2 4 6))
                            (("2" (lemma "log_nat_incr")
                              (("2" (inst -1 "4" "C/eps" "c/eps")
                                (("2" (ground)
                                  (("2" (case "C <= c/4")
                                    (("1" (cross-mult)
                                      (("1"
                                        (case "eps<=eps")
                                        (("1"
                                          (mult-ineq -2 -1)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "C")
                                      (("2"
                                        (expand "c")
                                        (("2"
                                          (case-replace
                                           "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                                          (("1"
                                            (case
                                             "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1/4")
                                            (("1"
                                              (case
                                               "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))<= ((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                                              (("1"
                                                (mult-ineq -2 -1)
                                                (("1" (ground) nil nil))
                                                nil)
                                               ("2" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5))
                                              (("2"
                                                (case "1/(4+2*n)<=1/14")
                                                (("1"
                                                  (case "1/(5+2*n)<=1/14")
                                                  (("1"
                                                    (case "x<=7")
                                                    (("1"
                                                      (mult-ineq -1 -1)
                                                      (("1"
                                                        (mult-ineq -1 -3)
                                                        (("1"
                                                          (mult-ineq -1 -5)
                                                          (("1"
                                                            (rewrite
                                                             "expt_x2"
                                                             1)
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred (x))
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (field) nil nil))
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (case "x=0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (rewrite "expt_0")
                                                  (("1"
                                                    (rewrite "expt_0")
                                                    (("1"
                                                      (rewrite "expt_0")
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case-replace
                                                 "5+2*n = 2+(3+2*n)")
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (simplify)
                                                    (("1"
                                                      (expand "factorial" 2 1)
                                                      (("1"
                                                        (expand
                                                         "factorial"
                                                         2
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "factorial"
                                                           2
                                                           3)
                                                          (("1"
                                                            (name
                                                             "fac"
                                                             "factorial(3+2*n)")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (field 2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_0 formula-decl nil sqrt_exists reals)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (log_nat_incr formula-decl nil log_nat reals)
    (factorial def-decl "posnat" factorial ints))
   nil
   (bound_iter subtype "(number_fields.+)(sin_props.n, 1)"
    "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below(1 + n)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps)}"))
  (bound_iter_TCC10-1 nil 3633873343 ("" (subtype-tcc) nil nil)
   ((factorial def-decl "posnat" factorial ints)) nil
   (bound_iter subtype "(number_fields.+)(sin_props.n, 1)"
    "{n: naturalnumbers.nat | FORALL (m: naturalnumbers.below(1 + n)): reals.>(number_fields./(exponentiation.^(sin_props.x, (number_fields.+)(1, number_fields.*(2, m))), factorial.factorial((number_fields.+)(1, number_fields.*(2, m)))), sin_props.eps)}")))
 (bound_iter_TCC13 0
  (bound_iter_TCC11-1 nil 3744304291
   ("" (skeep)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten)
          (("1" (expand "lex2")
            (("1" (ground)
              (("1" (ground)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (ground) (("1" (grind) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (grind :exclude "factorial") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (ground)
            (("1" (grind :exclude "factorial") nil nil)
             ("2" (ground)
              (("2" (lift-if 2)
                (("2" (ground)
                  (("1"
                    (case-replace
                     "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                    (("1" (case "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1")
                      (("1" (mult-ineq -1 -3) (("1" (ground) nil nil)) nil)
                       ("2" (hide-all-but (1 3))
                        (("2" (flip-ineq 2)
                          (("2" (case "x^2<=49")
                            (("1" (case "1/(5+2*n)<=1/7")
                              (("1" (case "1/(4+2*n)<=1/7")
                                (("1" (mult-ineq -2 -1)
                                  (("1" (mult-ineq -4 -1)
                                    (("1" (ground) (("1" (field) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (field) nil nil))
                                nil)
                               ("2" (field) nil nil))
                              nil)
                             ("2" (typepred (x))
                              (("2" (mult-ineq -3 -3)
                                (("2" (rewrite "expt_x2")
                                  (("2" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (expand "factorial" 1 1)
                        (("2" (expand "factorial" 1 1)
                          (("2" (expand "factorial" 1 3)
                            (("2" (case "x=0")
                              (("1" (replaces -1)
                                (("1" (rewrite "expt_0")
                                  (("1" (rewrite "expt_0")
                                    (("1" (rewrite "expt_0")
                                      (("1" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (case-replace "5+2*n = 2+(3+2*n)")
                                (("1" (rewrite "expt_plus" 2)
                                  (("1" (field 2) nil nil)) nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind :exclude "factorial") nil nil)
                   ("3"
                    (name "C" "((x ^ (5 + 2 * n)) / factorial(5 + 2 * n))")
                    (("3" (replace -1)
                      (("3"
                        (name-replace "c"
                         "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                        (("3"
                          (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                          (("1" (hide -2) (("1" (grind) nil nil)) nil)
                           ("2" (hide-all-but (1 2 4 6))
                            (("2" (lemma "log_nat_incr")
                              (("2" (inst -1 "4" "C/eps" "c/eps")
                                (("2" (ground)
                                  (("2" (case "C <= c/4")
                                    (("1" (cross-mult)
                                      (("1"
                                        (case "eps<=eps")
                                        (("1"
                                          (mult-ineq -2 -1)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "C")
                                      (("2"
                                        (expand "c")
                                        (("2"
                                          (case-replace
                                           "(x ^ (5 + 2 * n)) / factorial(5 + 2 * n) = (x^2/((5+2*n)*(4+2*n)))*((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                                          (("1"
                                            (case
                                             "(x ^ 2 / ((5 + 2 * n) * (4 + 2 * n)))<=1/4")
                                            (("1"
                                              (case
                                               "((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))<= ((x ^ (3 + 2 * n)) / factorial(3 + 2 * n))")
                                              (("1"
                                                (mult-ineq -2 -1)
                                                (("1" (ground) nil nil))
                                                nil)
                                               ("2" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 5))
                                              (("2"
                                                (case "1/(4+2*n)<=1/14")
                                                (("1"
                                                  (case "1/(5+2*n)<=1/14")
                                                  (("1"
                                                    (case "x<=7")
                                                    (("1"
                                                      (mult-ineq -1 -1)
                                                      (("1"
                                                        (mult-ineq -1 -3)
                                                        (("1"
                                                          (mult-ineq -1 -5)
                                                          (("1"
                                                            (rewrite
                                                             "expt_x2"
                                                             1)
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred (x))
                                                      (("2" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2" (field) nil nil))
                                                  nil)
                                                 ("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (case "x=0")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (rewrite "expt_0")
                                                  (("1"
                                                    (rewrite "expt_0")
                                                    (("1"
                                                      (rewrite "expt_0")
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case-replace
                                                 "5+2*n = 2+(3+2*n)")
                                                (("1"
                                                  (rewrite "expt_plus")
                                                  (("1"
                                                    (simplify)
                                                    (("1"
                                                      (expand "factorial" 2 1)
                                                      (("1"
                                                        (expand
                                                         "factorial"
                                                         2
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "factorial"
                                                           2
                                                           3)
                                                          (("1"
                                                            (name
                                                             "fac"
                                                             "factorial(3+2*n)")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (field 2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_0 formula-decl nil sqrt_exists reals)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (<= const-decl "bool" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (le_div_le_pos formula-decl nil real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (odd? const-decl "bool" integers nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (log_nat_incr formula-decl nil log_nat reals)
    (C skolem-const-decl "posreal" sin_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (c skolem-const-decl "posreal" sin_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (bounding? const-decl "bool" sin_props nil)
    (< def-decl "bool" ordinals nil)
    (factorial def-decl "posnat" factorial ints)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (bound_iter termination
    "sin_props.bound_iter(sin_props.x, sin_props.eps, (number_fields.+)(sin_props.n, 1))"
    "nil")))
 (iter_bound 0
  (iter_bound-1 nil 3633877780
   ("" (skeep)
    (("" (flip-ineq 1)
      (("" (inst 1 "bound_iter(x,eps,0)")
        (("1" (typepred "bound_iter(x, eps, 0)")
          (("1" (ground) nil nil)
           ("2" (skeep)
            (("2" (case "m=0")
              (("1" (replaces -1)
                (("1" (simplify)
                  (("1" (rewrite "expt_x1")
                    (("1" (expand "factorial")
                      (("1" (expand "factorial") (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground) nil nil))
              nil))
            nil)
           ("3" (ground) nil nil))
          nil)
         ("2" (skeep)
          (("2" (case "m=0")
            (("1" (replaces -1)
              (("1" (simplify)
                (("1" (rewrite "expt_x1")
                  (("1" (expand "factorial")
                    (("1" (expand "factorial") (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil)
         ("3" (ground) nil nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil) (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (bound_iter def-decl "{nn: posnat |
   (FORALL (m: below(nn)): x ^ (2 * m + 1) / factorial(2 * m + 1) > eps)
    AND x ^ (2 * nn + 1) / factorial(2 * nn + 1) <= eps}" sin_props nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (factorial def-decl "posnat" factorial ints)
    (eps skolem-const-decl "posreal" sin_props nil)
    (x skolem-const-decl "{x: nnreal | x < 7}" sin_props nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (sin_fast_approx_bound 0
  (sin_fast_approx_bound-2 "" 3790100082
   ("" (skeep)
    (("" (name "X" "IF x>=0 THEN x ELSE -x ENDIF")
      (("" (lemma "iter_bound")
        (("" (inst -1 "X" "eps")
          (("1" (lemma "sin_iter_alt_series3")
            (("1" (split -2)
              (("1" (case "FORALL (z:real): abs(sin(z))<=abs(z)")
                (("1" (expand "sin_fast_approx")
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (replaces -1)
                          (("1" (rewrite "sin_0")
                            (("1" (ground)
                              (("1" (expand "abs") (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (case-replace "x=X")
                              (("1" (expand "sin_approx_iter_alt")
                                (("1" (lift-if 1)
                                  (("1" (split 1)
                                    (("1" (flatten)
                                      (("1"
                                        (inst -4 "X")
                                        (("1"
                                          (expand "abs" -4 2)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "X=-x")
                              (("1" (replaces -1 :dir rl)
                                (("1" (expand "sin_approx_iter_alt")
                                  (("1" (lift-if 2)
                                    (("1" (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -2 "X")
                                          (("1"
                                            (expand "abs" -2 2)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lift-if -2)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "X")
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (lemma "sin_neg")
                                                        (("2"
                                                          (inst -1 "-x")
                                                          (("2"
                                                            (simplify -1)
                                                            (("2"
                                                              (case-replace
                                                               "--x = x")
                                                              (("1"
                                                                (replaces -2)
                                                                (("1"
                                                                  (case-replace
                                                                   "-x = X")
                                                                  (("1"
                                                                    (hide -6)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    (("2"
                                                                      (expand
                                                                       "X")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "X") (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (case "FORALL (zz:posreal): abs(sin(zz))<=zz")
                    (("1" (skeep)
                      (("1" (case "z=0")
                        (("1" (replaces -1)
                          (("1" (rewrite "sin_0") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (case "z<0")
                          (("1" (lemma "sin_neg")
                            (("1" (inst -1 "z")
                              (("1" (move-terms -1 l 1)
                                (("1" (move-terms -1 r 1)
                                  (("1" (simplify 1)
                                    (("1" (case "0 - -sin(z) = sin(z)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case "abs(z) = abs(-z)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (inst -2 "-z")
                                                (("1" (grind) nil nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("2" (grind -1) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "z")
                            (("1" (ground) nil nil) ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skeep)
                        (("2" (typepred "sin(zz)")
                          (("2" (case "zz>=1")
                            (("1" (ground)
                              (("1" (expand "abs")
                                (("1" (lift-if 1)
                                  (("1" (split 1)
                                    (("1" (flatten) (("1" (ground) nil nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground)
                              (("2" (case "floor(zz/(2*pi)) = 0")
                                (("1" (typepred "zz")
                                  (("1" (lemma "sincos.sin_ub")
                                    (("1" (inst -1 "zz")
                                      (("1"
                                        (flip-ineq 1)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (lemma "sin_pos_0topi")
                                                (("1"
                                                  (inst -1 "zz")
                                                  (("1" (assert) nil nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground)
                                  (("2" (case "zz / (2 * pi)<1")
                                    (("1" (ground) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst -3 "X" "eps" "nn")
                  (("1" (expand "sin_fast_approx")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (replaces -1)
                            (("1" (rewrite "sin_0")
                              (("1" (ground) (("1" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1" (lift-if -5)
                                (("1" (split -5)
                                  (("1" (flatten)
                                    (("1" (replaces -2)
                                      (("1"
                                        (replaces -5)
                                        (("1"
                                          (lemma "sin_approx_sin")
                                          (("1"
                                            (inst -1 "X" "nn-1")
                                            (("1"
                                              (simplify -1)
                                              (("1"
                                                (expand "sin_term")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (case
                                                     "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) = X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                            X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)")
                                                      (("1"
                                                        (inst -1 "nn")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (induct "mm")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (case
                                                               "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))")
                                                              (("1"
                                                                (simplify 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "expt_plus"
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "expt_plus")
                                                                    (("1"
                                                                      (case
                                                                       "X=0")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "2"
                                                                         "1+2*j"
                                                                         "X")
                                                                        (("2"
                                                                          (simplify
                                                                           -1)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (case
                                                                               "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (case
                                                                                   "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                          (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                          ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                          factorial(1 + 2 * j))")
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "(-1)^1 = -1")
                                                                                    (("1"
                                                                                      (assert
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "abs_mult"
                                                                                           2)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = X^2/(6 +6*j+(4*j*j+4*j))")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X^(1+2*j)/factorial(1+2*j)")
                                                                                              (("1"
                                                                                                (cross-mult
                                                                                                 2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (flip-ineq
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (cross-mult
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "^"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "expt")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "expt")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "expt")
                                                                                                                  (("2"
                                                                                                                    (cancel-by
                                                                                                                     1
                                                                                                                     "X*X")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (simplify
                                                                                     -1)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          2))
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          (("2"
                                                                                            (field
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "factorial"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "factorial"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "factorial"
                                                                                     1
                                                                                     2)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (cross-mult)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (lift-if -4)
                                (("2" (split -4)
                                  (("1" (flatten) (("1" (ground) nil nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (lemma "sin_neg")
                                      (("2"
                                        (inst -1 "-x")
                                        (("2"
                                          (case-replace "--x=x")
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (case
                                                 "FORALL (z:real): abs(-z) = abs(z)")
                                                (("1"
                                                  (simplify 3)
                                                  (("1"
                                                    (case-replace
                                                     "-sin(X) - -sin_approx_iter_alt(X, eps, 0, 0, X) = -(sin(X) -sin_approx_iter_alt(X, eps, 0, 0, X))")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(sin(X) - sin_approx_iter_alt(X, eps, 0, 0, X))")
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (replaces -5)
                                                          (("1"
                                                            (lemma
                                                             "sin_approx_sin")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "X"
                                                               "nn-1")
                                                              (("1"
                                                                (expand
                                                                 "sin_term")
                                                                (("1"
                                                                  (case
                                                                   "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) =  X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                                                         X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "nn")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (induct
                                                                         "mm")
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (cross-mult)
                                                                            (("1"
                                                                              (expand
                                                                               "X")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (case
                                                                             "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))")
                                                                            (("1"
                                                                              (simplify
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "expt_plus"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "expt_plus")
                                                                                  (("1"
                                                                                    (case
                                                                                     "X=0")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "2"
                                                                                       "1+2*j"
                                                                                       "X")
                                                                                      (("1"
                                                                                        (simplify
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                                                              (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                                                              ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                                                              factorial(1 + 2 * j))")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "(-1)^1=-1")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "abs_mult")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j))")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X ^ (1 + 2 * j) / factorial(1 + 2 * j)")
                                                                                                          (("1"
                                                                                                            (cross-mult
                                                                                                             2)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (simplify
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (1
                                                                                                        2))
                                                                                                      (("2"
                                                                                                        (cross-mult
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (field
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "factorial"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (cross-mult)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (ground) nil nil))
                                                      nil)
                                                     ("2" (ground) nil nil)
                                                     ("3" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil)
                   ("3" (typepred (x))
                    (("3" (hide (-2 -3 2)) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred (x)) (("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (sin_fast_approx_bound-1 nil 3633878159
   ("" (skeep)
    (("" (name "X" "IF x>=0 THEN x ELSE -x ENDIF")
      (("" (lemma "iter_bound")
        (("" (inst -1 "X" "eps")
          (("1" (lemma "sin_iter_alt_series3")
            (("1" (split -2)
              (("1" (case "FORALL (z:real): abs(sin(z))<=abs(z)")
                (("1" (expand "sin_fast_approx")
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (replaces -1)
                          (("1" (rewrite "sin_0")
                            (("1" (ground)
                              (("1" (expand "abs") (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (case-replace "x=X")
                              (("1" (expand "sin_approx_iter_alt")
                                (("1" (lift-if 1)
                                  (("1" (split 1)
                                    (("1" (flatten)
                                      (("1"
                                        (inst -4 "X")
                                        (("1"
                                          (expand "abs" -4 2)
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (flatten) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (case "X=-x")
                              (("1" (replaces -1 :dir rl)
                                (("1" (expand "sin_approx_iter_alt")
                                  (("1" (lift-if 2)
                                    (("1" (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -2 "X")
                                          (("1"
                                            (expand "abs" -2 2)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lift-if -2)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "X")
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (lemma "sin_neg")
                                                        (("2"
                                                          (inst -1 "-x")
                                                          (("2"
                                                            (simplify -1)
                                                            (("2"
                                                              (case-replace
                                                               "--x = x")
                                                              (("1"
                                                                (replaces -2)
                                                                (("1"
                                                                  (case-replace
                                                                   "-x = X")
                                                                  (("1"
                                                                    (hide -6)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    (("2"
                                                                      (expand
                                                                       "X")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand "X") (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (case "FORALL (zz:posreal): abs(sin(zz))<=zz")
                    (("1" (skeep)
                      (("1" (case "z=0")
                        (("1" (replaces -1)
                          (("1" (rewrite "sin_0") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (case "z<0")
                          (("1" (lemma "sin_neg")
                            (("1" (inst -1 "z")
                              (("1" (move-terms -1 l 1)
                                (("1" (move-terms -1 r 1)
                                  (("1" (simplify 1)
                                    (("1" (case "0 - -sin(z) = sin(z)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (case "abs(z) = abs(-z)")
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (inst -2 "-z")
                                                (("1" (grind) nil nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (ground)
                                              (("2" (grind -1) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "z")
                            (("1" (ground) nil nil) ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (skeep)
                        (("2" (typepred "sin(zz)")
                          (("2" (case "zz>=1")
                            (("1" (ground)
                              (("1" (expand "abs")
                                (("1" (lift-if 1)
                                  (("1" (split 1)
                                    (("1" (flatten) (("1" (ground) nil nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground)
                              (("2" (case "floor(zz/(2*pi)) = 0")
                                (("1" (typepred "zz")
                                  (("1" (lemma "sincos.sin_ub")
                                    (("1" (inst -1 "zz")
                                      (("1"
                                        (flip-ineq 1)
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split)
                                              (("1"
                                                (lemma "sin_pos_0topi")
                                                (("1"
                                                  (inst -1 "zz")
                                                  (("1" (assert) nil nil)
                                                   ("2" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground)
                                  (("2" (case "zz / (2 * pi)<1")
                                    (("1" (ground) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst -3 "X" "eps" "nn")
                  (("1" (expand "sin_fast_approx")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (replaces -1)
                            (("1" (rewrite "sin_0")
                              (("1" (ground) (("1" (grind) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1" (lift-if -5)
                                (("1" (split -5)
                                  (("1" (flatten)
                                    (("1" (replaces -2)
                                      (("1"
                                        (replaces -5)
                                        (("1"
                                          (lemma "sin_approx_sin")
                                          (("1"
                                            (inst -1 "X" "nn-1")
                                            (("1"
                                              (simplify -1)
                                              (("1"
                                                (expand "sin_term")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (case
                                                     "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) = X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                            X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)")
                                                      (("1"
                                                        (inst -1 "nn")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but 1)
                                                        (("2"
                                                          (induct "mm")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (case
                                                               "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))")
                                                              (("1"
                                                                (simplify 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "expt_plus"
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "expt_plus")
                                                                    (("1"
                                                                      (case
                                                                       "X=0")
                                                                      (("1"
                                                                        (replaces
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "2"
                                                                         "1+2*j"
                                                                         "X")
                                                                        (("2"
                                                                          (simplify
                                                                           -1)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (case
                                                                               "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1)
                                                                                (("1"
                                                                                  (case
                                                                                   "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                          (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                          ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                          factorial(1 + 2 * j))")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "(-1)^1 = -1")
                                                                                      (("1"
                                                                                        (assert
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           2)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             2)
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = X^2/(6 +6*j+(4*j*j+4*j))")
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X^(1+2*j)/factorial(1+2*j)")
                                                                                                (("1"
                                                                                                  (cross-mult
                                                                                                   2)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "abs")
                                                                                                  (("2"
                                                                                                    (lift-if)
                                                                                                    (("2"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (flip-ineq
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (cross-mult
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "^"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "expt")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "expt")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "expt")
                                                                                                                    (("2"
                                                                                                                      (cancel-by
                                                                                                                       1
                                                                                                                       "X*X")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (simplify
                                                                                     -1)
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (1
                                                                                          2))
                                                                                        (("2"
                                                                                          (cross-mult
                                                                                           1)
                                                                                          (("2"
                                                                                            (field
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "factorial"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "factorial"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "factorial"
                                                                                     1
                                                                                     2)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  (("2"
                                                                    (cross-mult)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2" (lift-if -4)
                                (("2" (split -4)
                                  (("1" (flatten) (("1" (ground) nil nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (lemma "sin_neg")
                                      (("2"
                                        (inst -1 "-x")
                                        (("2"
                                          (case-replace "--x=x")
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (case
                                                 "FORALL (z:real): abs(-z) = abs(z)")
                                                (("1"
                                                  (simplify 3)
                                                  (("1"
                                                    (case-replace
                                                     "-sin(X) - -sin_approx_iter_alt(X, eps, 0, 0, X) = -(sin(X) -sin_approx_iter_alt(X, eps, 0, 0, X))")
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "(sin(X) - sin_approx_iter_alt(X, eps, 0, 0, X))")
                                                      (("1"
                                                        (replaces -2)
                                                        (("1"
                                                          (replaces -5)
                                                          (("1"
                                                            (lemma
                                                             "sin_approx_sin")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "X"
                                                               "nn-1")
                                                              (("1"
                                                                (expand
                                                                 "sin_term")
                                                                (("1"
                                                                  (case
                                                                   "abs(((-1) ^ nn * X ^ (1 + 2 * nn)) / factorial(1 + 2 * nn)) =  X ^ (1 + 2 * nn) / factorial(1 + 2 * nn)")
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "FORALL (mm:nat): abs(((-1) ^ mm * X ^ (1 + 2 * mm)) / factorial(1 + 2 * mm)) =
                                                         X ^ (1 + 2 * mm) / factorial(1 + 2 * mm)")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "nn")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (induct
                                                                         "mm")
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (cross-mult)
                                                                            (("1"
                                                                              (expand
                                                                               "X")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (case
                                                                             "abs((-1)^1*X^2/((2*j+3)*(2*j+2))) = X^2/((2*j+3)*(2*j+2))")
                                                                            (("1"
                                                                              (simplify
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "expt_plus"
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "expt_plus")
                                                                                  (("1"
                                                                                    (case
                                                                                     "X=0")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "2"
                                                                                       "1+2*j"
                                                                                       "X")
                                                                                      (("1"
                                                                                        (simplify
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "factorial(3 + 2 * j) = ((3+2*j)*(2+2*j))*factorial(1+2*j)")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "((-1) ^ 1 * (-1) ^ j * (X ^ 2 * X ^ (1 + 2 * j))) /
                                                                              (((3 + 2 * j) * (2 + 2 * j)) * factorial(1 + 2 * j)) = ((-1) ^ 1 *  (X ^ 2 ) /
                                                                              ((3 + 2 * j) * (2 + 2 * j)))*( (-1) ^ j *  X ^ (1 + 2 * j) /
                                                                              factorial(1 + 2 * j))")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "(-1)^1=-1")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "abs_mult")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "abs((-1 * (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j)))) = (X ^ 2) / (6 + 6 * j + (4 * (j * j) + 4 * j))")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "abs(((-1) ^ j * X ^ (1 + 2 * j) / factorial(1 + 2 * j))) = X ^ (1 + 2 * j) / factorial(1 + 2 * j)")
                                                                                                          (("1"
                                                                                                            (cross-mult
                                                                                                             2)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (simplify
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       (1
                                                                                                        2))
                                                                                                      (("2"
                                                                                                        (cross-mult
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (field
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "factorial"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "factorial"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "factorial"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (cross-mult)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2" (ground) nil nil))
                                                      nil)
                                                     ("2" (ground) nil nil)
                                                     ("3" (ground) nil nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2" (grind) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil)
                   ("3" (typepred (x))
                    (("3" (hide (-2 -3 2)) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred (x)) (("2" (hide 2) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (X skolem-const-decl "real" sin_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (zz skolem-const-decl "posreal" sin_props nil)
    (sin_pos_0topi formula-decl nil sincos trig)
    (sin_ub formula-decl nil sincos trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (cos const-decl "real" sincos_def trig)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (z skolem-const-decl "real" sin_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin_fast_approx const-decl "real" fast_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (sin_0 formula-decl nil sincos_def trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_approx_iter_alt def-decl "real" fast_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (sin_neg formula-decl nil sincos_def trig)
    (sin const-decl "real" sincos_def trig) (<= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (eps skolem-const-decl "posreal" sin_props nil)
    (factorial def-decl "posnat" factorial ints)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nn skolem-const-decl "posnat" sin_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (sin_approx_sin formula-decl nil trig_approx trig)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (abs_mult formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_40 skolem-const-decl "real" sin_props nil)
    (neg_div formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (even? const-decl "bool" integers nil)
    (even_int nonempty-type-eq-decl nil integers nil)
    (sin_term const-decl "real" trig_approx trig)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (sin_iter_alt_series3 formula-decl nil sin_props nil)
    (iter_bound formula-decl nil sin_props nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))


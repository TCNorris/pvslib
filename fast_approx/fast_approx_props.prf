(fast_approx_props
 (sqrt_close 0
  (sqrt_close-1 nil 3634489410
   ("" (lemma "sqrt_fast_approx_est")
    (("" (skeep)
      (("" (inst -1 "x" "eps")
        (("" (grind :exclude "sqrt_fast_approx") nil nil)) nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (x skolem-const-decl "real" fast_approx_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_fast_approx_est formula-decl nil sqrt_prop nil))
   shostak))
 (sin_close 0
  (sin_close-1 nil 3634489667
   ("" (lemma "sin_fast_approx_bound")
    (("" (ground) (("" (skeep) (("" (inst?) nil nil)) nil)) nil)) nil)
   ((sin_range application-judgement "real_abs_le1" sincos trig)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sin_fast_approx_bound formula-decl nil sin_props nil))
   shostak))
 (cos_close 0
  (cos_close-1 nil 3634489817
   ("" (lemma "cos_fast_approx_bound")
    (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (eps skolem-const-decl "posreal" fast_approx_props nil)
    (cos_fast_approx_bound formula-decl nil cos_props nil))
   shostak))
 (tan_close_TCC1 0
  (tan_close_TCC1-2 nil 3634492646
   ("" (skeep)
    (("" (expand "Tan?")
      (("" (lemma "cos_eq_0")
        (("" (inst -1 "x")
          (("" (flatten)
            (("" (hide -2)
              (("" (split -1)
                (("1" (skeep -1)
                  (("1" (case "abs(x)<=3.139/2")
                    (("1" (hide -3)
                      (("1" (expand "abs")
                        (("1" (lift-if -1)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1" (replaces -3)
                                (("1" (simplify)
                                  (("1" (case "i<0")
                                    (("1" (case "3139/2000< pi/2")
                                      (("1"
                                        (case "-i*pi< pi")
                                        (("1" (cancel-by -1 "pi") nil nil)
                                         ("2" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "atan_approx.pi_bound")
                                        (("2"
                                          (expand "pi_lb")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (cancel-by -1 "pi") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground)
                              (("2" (flip-ineq 1)
                                (("2" (case "3139/2000< pi/2")
                                  (("1" (case "i<0")
                                    (("1" (ground)
                                      (("1"
                                        (case "x+pi/2>= pi/2")
                                        (("1"
                                          (replace -6 -1)
                                          (("1" (cancel-by -1 "pi") nil nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (flip-ineq 1)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (case "pi>0")
                                          (("1"
                                            (mult-ineq -1 -2)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "atan_approx.pi_bound")
                                    (("2" (expand "pi_lb")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (zero_div formula-decl nil extra_tegies nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lb const-decl "posreal" atan_approx trig)
    (pi_bound judgement-tcc nil atan_approx trig)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cos_eq_0 formula-decl nil sincos trig))
   nil (tan_close subtype "fast_approx_props.x" "(trig_basic.Tan?)"))
  (tan_close_TCC1-1 nil 3634492625 ("" (subtype-tcc) nil nil) nil nil
   (tan_close subtype "fast_approx_props.x" "(trig_basic.Tan?)")))
 (tan_close_TCC2 0
  (tan_close_TCC2-1 nil 3634492625 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (tan_close subtype "fast_approx_props.x"
    "{a | reals.<(real_defs.abs(fast_approx.a), 7)}")))
 (tan_close 0
  (tan_close-1 nil 3634492660
   ("" (lemma "tan_fast_approx_bound")
    (("" (ground)
      (("" (skeep) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (tan_fast_approx_bound formula-decl nil tan_props nil))
   shostak))
 (pi_close 0
  (pi_close-1 nil 3634492702
   ("" (lemma "pi_bound")
    (("" (lemma "pi_br_bound")
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((pi_br_bound formula-decl nil atan_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound formula-decl nil atan_props nil))
   shostak))
 (pihalf_close 0
  (pihalf_close-1 nil 3634492793
   ("" (lemma "pihalf_bound")
    (("" (lemma "pihalf_br_bound")
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (ground) nil nil)) nil)) nil)) nil))
      nil))
    nil)
   ((pihalf_br_bound formula-decl nil atan_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pihalf_bound formula-decl nil atan_props nil))
   shostak))
 (atan_close 0
  (atan_close-1 nil 3634492838
   ("" (lemma "atan_fast_approx_bound")
    (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (eps skolem-const-decl "posreal" fast_approx_props nil)
    (pihalf skolem-const-decl "posreal" fast_approx_props nil)
    (atan_fast_approx_bound formula-decl nil atan_props nil))
   shostak)))


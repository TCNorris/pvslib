(sqrt_prop
 (estimate_bound_TCC1 0
  (estimate_bound_TCC1-1 nil 3632666138 ("" (subtype-tcc) nil nil)
   ((nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil
   (estimate_bound subtype "2"
    "{i: integers.int | booleans.OR(sqrt_prop.a /= 0, reals.>=(i, 0))}")))
 (estimate_bound 0
  (estimate_bound-1 nil 3632666154
   ("" (skeep)
    (("" (name "y" "(log_int(x, 4))`2")
      (("" (name "m" "(log_int(x, 4))`1")
        ((""
          (case "(LAMBDA (m: int, y: {y: real | y < 4 AND y >= 1 AND x = 4 ^ m * y}):
   a ^ 2 >= x AND abs(a ^ 2 - x) <= eps * 2 ^ (m + 1) IMPLIES
    abs(a - sqrt(x)) <= eps)
    (m, y)")
          (("1" (beta) (("1" (assert) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (hide 2)
            (("2" (beta)
              (("2" (typepred (y))
                (("2" (replace -4 -3)
                  (("2" (flatten)
                    (("2"
                      (case "abs(a ^ 2 - x) = (a+sqrt(x))*abs(a-sqrt(x))")
                      (("1" (replaces -1)
                        (("1" (case " 2^(m+1)<=(a+sqrt(x))")
                          (("1" (both-sides "*" "eps" -1)
                            (("1"
                              (case "(a + sqrt(x)) * abs(a - sqrt(x)) <= (a + sqrt(x)) * eps")
                              (("1"
                                (flip-ineq 1)
                                (("1"
                                  (case "a+sqrt(x)>=a+sqrt(x)")
                                  (("1"
                                    (mult-ineq -1 -2)
                                    (("1" (ground) nil nil)
                                     ("2"
                                      (expand "abs" 1 1)
                                      (("2"
                                        (expand "abs" 1 2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil)
                               ("2" (ground) nil nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil)
                           ("2" (case "2^m<=sqrt(x)")
                            (("1" (case "sqrt(x)<=a")
                              (("1"
                                (case "2^m<=a")
                                (("1"
                                  (rewrite "expt_plus")
                                  (("1"
                                    (rewrite "expt_x1")
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil)
                               ("2"
                                (flip-ineq 1)
                                (("2"
                                  (mult-ineq -1 -1)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (case-replace
                                       "sqrt(x)*sqrt(x) = x")
                                      (("1"
                                        (rewrite "expt_x2")
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flip-ineq 1)
                              (("2"
                                (mult-ineq -1 -1)
                                (("2"
                                  (rewrite "expt_plus" :dir rl)
                                  (("2"
                                    (rewrite "expt_times")
                                    (("2"
                                      (rewrite "expt_x2")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (case-replace
                                           "sqrt(x)*sqrt(x) = x")
                                          (("1"
                                            (replace -6 -2)
                                            (("1"
                                              (both-sides "*" "4^m" -5)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "a+sqrt(x) = abs(a+sqrt(x))")
                        (("1" (replaces -1)
                          (("1" (rewrite "abs_mult" :dir rl)
                            (("1" (lemma "sq_sqrt")
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (case-replace "sqrt(x)*sqrt(x) = x")
                                  (("1"
                                    (rewrite "expt_x2")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "abs")
                          (("2" (ground) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int
     "reals/")
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (above nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (expt_times formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_sqrt formula-decl nil sqrt "reals/")
    (sq_nz_pos application-judgement "posreal" sq "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/"))
   shostak))
 (sqrt_fast_approx_gen_est 0
  (sqrt_fast_approx_gen_est-1 nil 3632835737
   ("" (skeep)
    (("" (expand "sqrt_fast_approx_gen")
      (("" (lift-if 1)
        (("" (ground)
          (("1" (replaces -1)
            (("1" (expand "abs") (("1" (ground) nil nil)) nil)) nil)
           ("2" (lemma "estimate_bound")
            (("2"
              (name-replace "A" "sqrt_newton_fast_approx(X,
                          sqrt_newton_step_fast_approx(X,
                                               a,
                                               eps
                                               *
                                               2 ^ (1 + log_int(X, 4)`1)),
                          eps * 2 ^ (1 + log_int(X, 4)`1))")
              (("2" (inst -1 "A" "eps" "X")
                (("2" (typepred (A))
                  (("2" (ground)
                    (("2" (ground)
                      (("1" (rewrite "expt_x2") nil nil)
                       ("2" (rewrite "expt_x2")
                        (("2" (move-terms -3 r 1)
                          (("2" (expand "abs") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (sqrt_fast_approx_gen const-decl "nnreal" fast_approx nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_newton_fast_approx def-decl
     "{z: posreal | z * z >= X AND z * z - X <= eps}" fast_approx nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt_newton_step_fast_approx const-decl "posreal" fast_approx nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (above nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int
     "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (estimate_bound formula-decl nil sqrt_prop nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sqrt_fast_approx_est 0
  (sqrt_fast_approx_est-1 nil 3632768170
   ("" (skeep)
    (("" (expand "sqrt_fast_approx")
      (("" (rewrite "sqrt_fast_approx_gen_est") nil nil)) nil))
    nil)
   ((sqrt_fast_approx const-decl "nnreal" fast_approx nil)
    (SQRT const-decl "nnreal" stdmath nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sqrt_fast_approx_gen_est formula-decl nil sqrt_prop nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sqrt_fast_approx_upper 0
  (sqrt_fast_approx_upper-1 nil 3633687447
   ("" (skeep)
    (("" (expand "sqrt_fast_approx")
      (("" (expand "sqrt_fast_approx_gen")
        (("" (lift-if 1)
          (("" (ground)
            (("1" (grind) nil nil)
             ("2"
              (name "Sqrt" " sqrt_newton_fast_approx(X,
                      sqrt_newton_step_fast_approx(X,
                                           max(SQRT(X), eps),
                                           eps
                                           *
                                           2 ^ (1 + log_int(X, 4)`1)),
                      eps * 2 ^ (1 + log_int(X, 4)`1))")
              (("2" (replaces -1)
                (("2" (typepred (Sqrt))
                  (("2" (flip-ineq 2)
                    (("2" (mult-ineq -1 -1) (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_fast_approx const-decl "nnreal" fast_approx nil)
    (log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int
     "reals/")
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (SQRT const-decl "nnreal" stdmath nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (sqrt_newton_step_fast_approx const-decl "posreal" fast_approx nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqrt_newton_fast_approx def-decl
     "{z: posreal | z * z >= X AND z * z - X <= eps}" fast_approx nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (TRUE const-decl "bool" booleans nil)
    (sqrt_0 formula-decl nil sqrt "reals/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sqrt_fast_approx_gen const-decl "nnreal" fast_approx nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak)))


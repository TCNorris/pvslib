(tan_props
 (tan_fast_approx_bound_TCC1 0
  (tan_fast_approx_bound_TCC1-2 nil 3634494197
   ("" (skeep)
    (("" (expand "Tan?")
      (("" (lemma "cos_eq_0")
        (("" (inst -1 "x")
          (("" (flatten)
            (("" (hide -2)
              (("" (split -1)
                (("1" (skeep -1)
                  (("1" (case "abs(x)<=3.139/2")
                    (("1" (hide -3)
                      (("1" (expand "abs")
                        (("1" (lift-if -1)
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1" (replaces -3)
                                (("1" (simplify)
                                  (("1" (case "i<0")
                                    (("1" (case "3139/2000< pi/2")
                                      (("1"
                                        (case "-i*pi< pi")
                                        (("1" (cancel-by -1 "pi") nil nil)
                                         ("2" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "atan_approx.pi_bound")
                                        (("2"
                                          (expand "pi_lb")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (cancel-by -1 "pi") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground)
                              (("2" (flip-ineq 1)
                                (("2" (case "3139/2000< pi/2")
                                  (("1" (case "i<0")
                                    (("1" (ground)
                                      (("1"
                                        (case "x+pi/2>= pi/2")
                                        (("1"
                                          (replace -6 -1)
                                          (("1" (cancel-by -1 "pi") nil nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (flip-ineq 1)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (case "pi>0")
                                          (("1"
                                            (mult-ineq -1 -2)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "atan_approx.pi_bound")
                                    (("2" (expand "pi_lb")
                                      (("2" (ground) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (zero_div formula-decl nil extra_tegies nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_lb const-decl "posreal" atan_approx trig)
    (pi_bound judgement-tcc nil atan_approx trig)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cos_eq_0 formula-decl nil sincos trig))
   nil (tan_fast_approx_bound subtype "tan_props.x" "(trig_basic.Tan?)"))
  (tan_fast_approx_bound_TCC1-1 nil 3634405907
   ("" (skeep) (("" (expand "Tan?") (("" (postpone) nil nil)) nil)) nil) nil
   nil (tan_fast_approx_bound subtype "tan_props.x" "(trig_basic.Tan?)")))
 (tan_fast_approx_bound_TCC2 0
  (tan_fast_approx_bound_TCC2-1 nil 3634405907 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (^ const-decl "real" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (tan_fast_approx_bound subtype "tan_props.x"
    "{a | reals.<(real_defs.abs(fast_approx.a), 7)}")))
 (tan_fast_approx_bound 0
  (tan_fast_approx_bound-3 nil 3634481795
   (""
    (case "FORALL (x: posreal, eps: posreal):
                                                                (x <= 1.3 AND eps <= 10 ^ -1) OR
                                                                 (x <= 3.139 / 2 AND eps <= 10 ^ -4)
                                                                 IMPLIES abs(tan(x) - tan_fast_approx(x, eps)) <= eps")
    (("1" (skeep)
      (("1" (case-replace "x=0")
        (("1" (rewrite "tan_0")
          (("1" (expand "tan_fast_approx")
            (("1" (expand "abs") (("1" (ground) nil nil)) nil)) nil))
          nil)
         ("2" (case "x<0")
          (("1" (lemma "tan_neg")
            (("1" (inst -1 "x")
              (("1"
                (case "abs(tan(x)-tan_fast_approx(x,eps)) = abs(-tan(x)+tan_fast_approx(x, eps))")
                (("1" (replaces -1)
                  (("1" (replaces -1 :dir rl)
                    (("1" (expand "tan_fast_approx")
                      (("1" (lift-if 2)
                        (("1" (split 2)
                          (("1" (flatten) nil nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1" (flatten) (("1" (ground) nil nil)) nil)
                               ("2" (flatten)
                                (("2" (inst -2 "-x" "eps")
                                  (("1" (expand "abs" -3)
                                    (("1" (lift-if -3)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "abs")
                    (("2" (ground)
                      (("2" (lift-if 1)
                        (("2" (ground)
                          (("2" (lift-if 2) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x" "eps")
            (("1" (expand "abs" -2)
              (("1" (lift-if -2)
                (("1" (split -2)
                  (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2"
          (case " FORALL ((CL: real | CL<=cos(x) AND CL-eps>0), (CU: real | CU>=cos(x))):
                                                                    abs(tan(x)-tan_pos_fast_approx(x,eps,CL, CU))<=eps")
          (("1" (splash -2)
            (("1" (ground) nil nil)
             ("2" (expand "tan_fast_approx")
              (("2" (expand "tan_pos")
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide (-5 1)) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (flatten 1)
                      (("2" (split 2)
                        (("1" (flatten 1)
                          (("1" (hide (-3 2 3))
                            (("1" (expand "tan_pos_inst2")
                              (("1"
                                (inst -3 "1 - x * x / 2 -
                                                                                    x * x / 2 * (x * x / 12) * (x * x / 30)
                                                                                    + x * x / 2 * (x * x / 12)"
                                 " 1 + x ^ 8 / 40320 - x * x / 2 -
                                                                                    x * x / 2 * (x * x / 12) * (x * x / 30)
                                                                                    + x * x / 2 * (x * x / 12)")
                                (("1" (lemma "cos_bounds")
                                  (("1" (inst -1 "x" "2")
                                    (("1" (expand "cos_ub")
                                      (("1"
                                        (expand "cos_approx")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "cos_term")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "factorial")
                                                                            (("1"
                                                                              (expand
                                                                               "factorial")
                                                                              (("1"
                                                                                (expand
                                                                                 "factorial")
                                                                                (("1"
                                                                                  (expand
                                                                                   "factorial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "factorial")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "factorial")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "factorial")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "factorial")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "factorial")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (split 1)
                                  (("1" (lemma "cos_bounds")
                                    (("1" (inst -1 "x" "1")
                                      (("1"
                                        (expand "cos_lb")
                                        (("1"
                                          (expand "cos_approx")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "cos_term")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "factorial")
                                                                            (("1"
                                                                              (expand
                                                                               "factorial")
                                                                              (("1"
                                                                                (expand
                                                                                 "factorial")
                                                                                (("1"
                                                                                  (expand
                                                                                   "factorial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "factorial")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "factorial")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "factorial")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (name "px" "3139/2000")
                                    (("2"
                                      (case
                                       "1 - x * x / 2 - x * x / 2 * (x * x / 12) * (x * x / 30) +
                                                                                                                x * x / 2 * (x * x / 12)>= 1 - px * px / 2 - px * px / 2 * (px * px / 12) * (px * px / 30) +
                                                                                                                px * px / 2 * (px * px / 12)")
                                      (("1"
                                        (case
                                         "1 - px * px / 2 - px * px / 2 * (px * px / 12) * (px * px / 30) +
                                                                                                                           px * px / 2 * (px * px / 12) -eps>0")
                                        (("1"
                                          (expand "px")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (expand "px")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "px")
                                        (("2"
                                          (hide (-1 -3 2 3))
                                          (("2"
                                            (typepred (x))
                                            (("2"
                                              (hide -1)
                                              (("2" (metit *) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten 1)
                          (("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "tan_fast_approx")
              (("3" (expand "tan_pos")
                (("3" (lift-if 1)
                  (("3" (split 1)
                    (("1" (ground)
                      (("1" (hide (-3 -4))
                        (("1" (expand "tan_pos_inst1")
                          (("1"
                            (inst -3 "1 - x * x / 2"
                             "1 + x * x * x * x / 24 - x * x / 2")
                            (("1" (lemma "cos_bounds")
                              (("1" (inst -1 "x" "1")
                                (("1" (flatten)
                                  (("1" (expand "cos_ub")
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "cos_term")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (expand
                                                                 "factorial")
                                                                (("1"
                                                                  (expand
                                                                   "factorial")
                                                                  (("1"
                                                                    (expand
                                                                     "factorial")
                                                                    (("1"
                                                                      (expand
                                                                       "factorial")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split 1)
                              (("1" (lemma "cos_bounds")
                                (("1" (inst -1 "x" "0")
                                  (("1" (expand "cos_lb")
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "cos_term")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "factorial")
                                                          (("1"
                                                            (expand
                                                             "factorial")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (move-terms 1 l 2)
                                (("2" (move-terms 1 l 2)
                                  (("2" (hide 2)
                                    (("2" (typepred (x))
                                      (("2"
                                        (case
                                         "FORALL (a,b:posreal): a<=b IMPLIES a*a<=b*b")
                                        (("1"
                                          (inst -1 "x" "13/10")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (mult-ineq -1 -1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but (-1 -2 1)) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "tan_pos_fast_approx")
                (("2" (expand "tan")
                  (("2" (lemma "sin_fast_approx_bound")
                    (("2"
                      (name-replace "d1"
                       " (CL * CL * eps - CL * eps * eps) / 2 / CU ")
                      (("2"
                        (name-replace "d2"
                         " min((CL * CL * eps - CL * eps * eps) / 2 / x,eps) ")
                        (("2" (lemma "cos_fast_approx_bound")
                          (("2" (inst -1 "x" "d2")
                            (("1" (inst -2 "x" "d1")
                              (("1"
                                (case-replace
                                 "abs(sin(x) / cos(x) - sin_fast_approx(x, d1) / cos_fast_approx(x, d2)) = abs((sin(x)*cos_fast_approx(x,d2) - sin_fast_approx(x,d1)*cos(x))/(cos(x)*cos_fast_approx(x,d2)))")
                                (("1"
                                  (case "EXISTS ((D2: real | abs(D2)<=d2)): cos_fast_approx(x,d2) = cos(x)+D2")
                                  (("1" (skeep -1)
                                    (("1" (replaces -1)
                                      (("1"
                                        (case
                                         "EXISTS ((D1: real | abs(D1)<=d1)): sin_fast_approx(x,d1) = sin(x)+D1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (simplify 1)
                                              (("1"
                                                (lemma "triangle")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sin(x) * D2 / (cos(x) * cos(x) + cos(x) * D2)"
                                                   " (- cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2)")
                                                  (("1"
                                                    (case-replace
                                                     "sin(x) * D2 / (cos(x) * cos(x) + cos(x) * D2) +
                                                           (-cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2) = (sin(x) * D2 - cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2)")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (case
                                                           "abs(sin(x) * D2 / (cos(x) * cos(x) + cos(x) * D2))<=eps/2")
                                                          (("1"
                                                            (case
                                                             "abs((-cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2))<=eps/2")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case "d2<=eps")
                                                              (("1"
                                                                (case
                                                                 "D2>=-eps")
                                                                (("1"
                                                                  (typepred
                                                                   (CL))
                                                                  (("1"
                                                                    (case
                                                                     "CL-eps<=cos(x)+D2")
                                                                    (("1"
                                                                      (mult-ineq
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (simplify
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "abs_div")
                                                                            (("1"
                                                                              (rewrite
                                                                               "abs_mult")
                                                                              (("1"
                                                                                (case
                                                                                 "abs(-cos(x))<=CU")
                                                                                (("1"
                                                                                  (case
                                                                                   " abs(D1) / abs((cos(x) * cos(x) + cos(x) * D2))<= d1/(CL * CL - CL * eps)")
                                                                                  (("1"
                                                                                    (mult-ineq
                                                                                     -1
                                                                                     -2)
                                                                                    (("1"
                                                                                      (case
                                                                                       "CL>0")
                                                                                      (("1"
                                                                                        (mult-ineq
                                                                                         -1
                                                                                         -8)
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "(d1 / (CL * CL - CL * eps)) * CU =eps/2")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "d1")
                                                                                            (("2"
                                                                                              (field
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "abs"
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -15)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "abs"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (flatten)
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "abs_div"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "CL>0")
                                                                                    (("1"
                                                                                      (mult-ineq
                                                                                       -1
                                                                                       -6)
                                                                                      (("1"
                                                                                        (simplify
                                                                                         1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           (D1))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "abs"
                                                                                             1
                                                                                             2)
                                                                                            (("1"
                                                                                              (lift-if
                                                                                               1)
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (cross-mult
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (mult-ineq
                                                                                                       -1
                                                                                                       -5)
                                                                                                      (("1"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "abs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "abs"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (case
                                                                                     "CL>0")
                                                                                    (("1"
                                                                                      (mult-ineq
                                                                                       -1
                                                                                       -6)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "abs(-cos(x)) = cos(x)")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-11
                                                                                      1))
                                                                                    (("2"
                                                                                      (case
                                                                                       "cos(x)>=0")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "x<=pi/2")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               (x))
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (split-ineq
                                                                                                   -2)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "pi")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "pi_lb")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1 1))
                                                                  (("2"
                                                                    (typepred
                                                                     (D2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "d2<=eps")
                                                            (("1"
                                                              (case
                                                               "D2>=-eps")
                                                              (("1"
                                                                (typepred
                                                                 (CL))
                                                                (("1"
                                                                  (case
                                                                   "CL-eps<=cos(x)+D2")
                                                                  (("1"
                                                                    (mult-ineq
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (simplify
                                                                       -1)
                                                                      (("1"
                                                                        (case
                                                                         "CL>0")
                                                                        (("1"
                                                                          (mult-ineq
                                                                           -1
                                                                           -5)
                                                                          (("1"
                                                                            (simplify
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "abs_div"
                                                                               1)
                                                                              (("1"
                                                                                (simplify
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   1
                                                                                   2)
                                                                                  (("1"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (flip-ineq
                                                                                           1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "abs_mult"
                                                                                             1)
                                                                                            (("2"
                                                                                              (case
                                                                                               "abs(sin(x))<=x")
                                                                                              (("1"
                                                                                                (case
                                                                                                 "abs(D2)<=(CL * CL * eps - CL * eps * eps) / 2 / x")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "1/(cos(x) * cos(x) + cos(x) * D2)<= 1/(CL * CL - CL * eps)")
                                                                                                  (("1"
                                                                                                    (mult-ineq
                                                                                                     -3
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (mult-ineq
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "(x * ((CL * CL * eps - CL * eps * eps) / 2 / x)) *
                                                (1 / (CL * CL - CL * eps)) = eps/2")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (field
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "abs"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   1
                                                                                                                   3)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "abs"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (lift-if
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (split
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (lift-if
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (flatten)
                                                                                                        (("3"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "abs"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "abs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "abs"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (cross-mult
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   (D2))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "d2")
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "abs(sin(x)) = sin(x)")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sin_pos_bnds")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-13
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "x<=pi/2")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "sin(x)>=0")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "abs")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         (-2
                                                                                                          2))
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           (x))
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (split-ineq
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (split-ineq
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "sin_pos_0tohalfpi")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "pi")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "pi_lb")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1 1))
                                                                (("2"
                                                                  (typepred
                                                                   (D2))
                                                                  (("2"
                                                                    (expand
                                                                     "abs")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand "d2")
                                                              (("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           1
                                           "sin_fast_approx(x,d1)-sin(x)")
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (hide-all-but (-3 1))
                                            (("2"
                                              (grind
                                               :exclude
                                               ("sin_fast_approx" "sin"))
                                              nil
                                              nil))
                                            nil)
                                           ("3" (ground) nil nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide (-1 -3 -4 2))
                                    (("2"
                                      (inst 1 "cos_fast_approx(x,d2)-cos(x)")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (ground)
                                        (("2"
                                          (expand "abs")
                                          (("2"
                                            (grind
                                             :exclude
                                             ("cos_fast_approx" "cos"))
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                                  nil)
                                 ("2" (ground) nil nil)
                                 ("3" (case "cos_fast_approx(x,d2)/=0")
                                  (("1" (case "x<pi/2")
                                    (("1" (lemma "cos_eq_0")
                                      (("1"
                                        (hide -6)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -2)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "pi_bounds0")
                                      (("2"
                                        (lemma "pi_bounds")
                                        (("2"
                                          (inst -1 "0")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "cos_fast_approx")
                                    (("2" (ground) nil nil)) nil)
                                   ("3" (ground) nil nil))
                                  nil)
                                 ("4" (ground) nil nil)
                                 ("5" (ground) nil nil))
                                nil)
                               ("2" (expand "d1")
                                (("2" (typepred "CL")
                                  (("2" (typepred "CU")
                                    (("2" (case "CL>0")
                                      (("1"
                                        (typepred (eps))
                                        (("1"
                                          (mult-ineq -1 -3)
                                          (("1"
                                            (mult-ineq -1 -7)
                                            (("1"
                                              (cross-mult 1)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "d2")
                              (("2" (expand "min")
                                (("2" (lift-if 1)
                                  (("2" (split 1)
                                    (("1" (flatten) (("1" (ground) nil nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (typepred "CL")
                                        (("2"
                                          (case "CL>0")
                                          (("1"
                                            (typepred (eps))
                                            (("1"
                                              (mult-ineq -1 -3)
                                              (("1"
                                                (mult-ineq -1 -6)
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (cross-mult 1)
                                                    (("1" (ground) nil nil))
                                                    nil)
                                                   ("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep) (("3" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (expand "abs") (("3" (ground) nil nil)) nil)) nil)
     ("4" (skeep)
      (("4" (case "x<pi/2")
        (("1" (lemma "cos_eq_0")
          (("1" (inst -1 "x")
            (("1" (expand "Tan?")
              (("1" (flatten)
                (("1" (hide -4)
                  (("1" (hide -2)
                    (("1" (ground)
                      (("1" (skeep -1)
                        (("1" (case "i<0")
                          (("1" (ground)
                            (("1" (typepred (x))
                              (("1" (ground)
                                (("1" (replace -4)
                                  (("1" (cross-mult)
                                    (("1" (move-terms -2 l 2)
                                      (("1"
                                        (simplify)
                                        (("1" (cancel-by -2 "pi") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("2" (typepred (x))
                              (("2" (replaces -3)
                                (("2" (ground)
                                  (("2" (move-terms -3 r 1)
                                    (("2" (simplify)
                                      (("2"
                                        (cancel-by -4 "pi")
                                        (("2"
                                          (flip-ineq 2)
                                          (("2"
                                            (case "pi>=pi")
                                            (("1"
                                              (mult-ineq -2 -1)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "pi_bounds0")
          (("2" (lemma "pi_bounds")
            (("2" (inst -1 "0") (("2" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((both_sides_times_pos_gt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (zero_div formula-decl nil extra_tegies nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (cos const-decl "real" sincos_def trig)
    (tan_pos_fast_approx const-decl "real" fast_approx nil)
    (tan_pos_inst1 const-decl "real" fast_approx nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (tan_pos_inst2 const-decl "real" fast_approx nil)
    (cos_lb const-decl "real" trig_approx trig)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (px skolem-const-decl "posrat" tan_props nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (cos_bounds formula-decl nil trig_approx trig)
    (cos_ub const-decl "real" trig_approx trig)
    (sigma def-decl "real" sigma reals)
    (int_exp application-judgement "int" exponentiation nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (cos_term const-decl "real" trig_approx trig)
    (factorial def-decl "posnat" factorial ints)
    (posreal_expt application-judgement "posreal" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (cos_approx const-decl "real" trig_approx trig)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (eps skolem-const-decl "posreal" tan_props nil)
    (x skolem-const-decl "posreal" tan_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (expt def-decl "real" exponentiation nil)
    (tan_pos const-decl "real" fast_approx nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (cos_fast_approx_bound formula-decl nil cos_props nil)
    (d1 skolem-const-decl "real" tan_props nil)
    (pi_bounds0 formula-decl nil atan_approx trig)
    (pi_lb_pos application-judgement "posreal" atan_approx trig)
    (pi_ub_pos application-judgement "posreal" atan_approx trig)
    (pi_bounds formula-decl nil atan_approx trig)
    (cos_eq_0 formula-decl nil sincos trig)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" pi_def
     trig)
    (pi_ub_new const-decl "posreal" pi_def trig)
    (pi_lb_new const-decl "posreal" pi_def trig)
    (pi_ub const-decl "posreal" atan_approx trig)
    (pi_lb const-decl "posreal" atan_approx trig)
    (cross_mult formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}" real_defs
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (fdx_50 skolem-const-decl "real" tan_props nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (D2 skolem-const-decl "{D2: real | abs(D2) <= d2}" tan_props nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_times formula-decl nil real_props nil)
    (fdx_53 skolem-const-decl "real" tan_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (sin_pos_0tohalfpi formula-decl nil sincos trig)
    (sin_pos_bnds formula-decl nil sincos trig)
    (triangle formula-decl nil real_props nil)
    (sin const-decl "real" sincos_def trig)
    (sin_fast_approx const-decl "real" fast_approx nil)
    (cos_fast_approx const-decl "real" fast_approx nil)
    (d2 skolem-const-decl
     "{p: real | p <= (CL * CL * eps - CL * eps * eps) / 2 / x AND p <= eps}"
     tan_props nil)
    (CL skolem-const-decl "{CL: real | CL <= cos(x) AND CL - eps > 0}"
     tan_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (sin_fast_approx_bound formula-decl nil sin_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (x skolem-const-decl "real" tan_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (tan_neg formula-decl nil trig_basic trig)
    (tan_0 formula-decl nil trig_basic trig)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Tan? const-decl "bool" trig_basic trig)
    (tan const-decl "real" trig_basic trig) (< const-decl "bool" reals nil)
    (tan_fast_approx const-decl "real" fast_approx nil))
   nil)
  (tan_fast_approx_bound-2 nil 3634479393
   (""
    (case "FORALL (x: posreal, eps: posreal):
                                           (x <= 1.3 AND eps <= 10 ^ -1) OR
                                            (x <= 3.139 / 2 AND eps <= 10 ^ -4)
                                            IMPLIES abs(tan(x) - tan_fast_approx(x, eps)) <= eps")
    (("1" (skeep)
      (("1" (case-replace "x=0")
        (("1" (rewrite "tan_0")
          (("1" (expand "tan_fast_approx")
            (("1" (expand "abs") (("1" (ground) nil nil)) nil)) nil))
          nil)
         ("2" (case "x<0")
          (("1" (lemma "tan_neg")
            (("1" (inst -1 "x")
              (("1"
                (case "abs(tan(x)-tan_fast_approx(x,eps)) = abs(-tan(x)+tan_fast_approx(x, eps))")
                (("1" (replaces -1)
                  (("1" (replaces -1 :dir rl)
                    (("1" (expand "tan_fast_approx")
                      (("1" (lift-if 2)
                        (("1" (split 2)
                          (("1" (flatten) nil nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1" (flatten) (("1" (ground) nil nil)) nil)
                               ("2" (flatten)
                                (("2" (inst -2 "-x" "eps")
                                  (("1" (expand "abs" -3)
                                    (("1" (lift-if -3)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "abs")
                    (("2" (ground)
                      (("2" (lift-if 1)
                        (("2" (ground)
                          (("2" (lift-if 2) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x" "eps")
            (("1" (expand "abs" -2)
              (("1" (lift-if -2)
                (("1" (split -2)
                  (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2"
          (case " FORALL ((CL: real | CL<=cos(x) AND CL-eps>0), (CU: real | CU>=cos(x))):
                                         abs(tan(x)-tan_pos_fast_approx(x,eps,CL, CU))<=eps")
          (("1" (splash -2)
            (("1" (ground) nil nil)
             ("2" (expand "tan_fast_approx")
              (("2" (expand "tan_pos")
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide (-5 1)) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (flatten 1)
                      (("2" (split 2)
                        (("1" (flatten 1)
                          (("1" (hide (-3 2 3))
                            (("1" (expand "tan_pos_inst2")
                              (("1"
                                (inst -3 "1 - x * x / 2 -
                                                x * x / 2 * (x * x / 12) * (x * x / 30)
                                                + x * x / 2 * (x * x / 12)"
                                 " 1 + x ^ 8 / 40320 - x * x / 2 -
                                                x * x / 2 * (x * x / 12) * (x * x / 30)
                                                + x * x / 2 * (x * x / 12)")
                                (("1" (lemma "cos_bounds")
                                  (("1" (inst -1 "x" "2")
                                    (("1" (expand "cos_ub")
                                      (("1"
                                        (expand "cos_approx")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "cos_term")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "factorial")
                                                                            (("1"
                                                                              (expand
                                                                               "factorial")
                                                                              (("1"
                                                                                (expand
                                                                                 "factorial")
                                                                                (("1"
                                                                                  (expand
                                                                                   "factorial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "factorial")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "factorial")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "factorial")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "factorial")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "factorial")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (split 1)
                                  (("1" (lemma "cos_bounds")
                                    (("1" (inst -1 "x" "1")
                                      (("1"
                                        (expand "cos_lb")
                                        (("1"
                                          (expand "cos_approx")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "cos_term")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "factorial")
                                                                            (("1"
                                                                              (expand
                                                                               "factorial")
                                                                              (("1"
                                                                                (expand
                                                                                 "factorial")
                                                                                (("1"
                                                                                  (expand
                                                                                   "factorial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "factorial")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "factorial")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "factorial")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (name "px" "3139/2000")
                                    (("2"
                                      (case
                                       "1 - x * x / 2 - x * x / 2 * (x * x / 12) * (x * x / 30) +
                                                 x * x / 2 * (x * x / 12)>= 1 - px * px / 2 - px * px / 2 * (px * px / 12) * (px * px / 30) +
                                                 px * px / 2 * (px * px / 12)")
                                      (("1"
                                        (case
                                         "1 - px * px / 2 - px * px / 2 * (px * px / 12) * (px * px / 30) +
                                                      px * px / 2 * (px * px / 12) -eps>0")
                                        (("1"
                                          (expand "px")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (expand "px")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "px")
                                        (("2"
                                          (hide (-1 -3 2 3))
                                          (("2"
                                            (typepred (x))
                                            (("2"
                                              (hide -1)
                                              (("2" (metit *) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten 1)
                          (("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "tan_fast_approx")
              (("3" (expand "tan_pos")
                (("3" (lift-if 1)
                  (("3" (split 1)
                    (("1" (ground)
                      (("1" (hide (-3 -4))
                        (("1" (expand "tan_pos_inst1")
                          (("1"
                            (inst -3 "1 - x * x / 2"
                             "1 + x * x * x * x / 24 - x * x / 2")
                            (("1" (lemma "cos_bounds")
                              (("1" (inst -1 "x" "1")
                                (("1" (flatten)
                                  (("1" (expand "cos_ub")
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "cos_term")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (expand
                                                                 "factorial")
                                                                (("1"
                                                                  (expand
                                                                   "factorial")
                                                                  (("1"
                                                                    (expand
                                                                     "factorial")
                                                                    (("1"
                                                                      (expand
                                                                       "factorial")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split 1)
                              (("1" (lemma "cos_bounds")
                                (("1" (inst -1 "x" "0")
                                  (("1" (expand "cos_lb")
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "cos_term")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "factorial")
                                                          (("1"
                                                            (expand
                                                             "factorial")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (move-terms 1 l 2)
                                (("2" (move-terms 1 l 2)
                                  (("2" (hide 2)
                                    (("2" (typepred (x))
                                      (("2"
                                        (case
                                         "FORALL (a,b:posreal): a<=b IMPLIES a*a<=b*b")
                                        (("1"
                                          (inst -1 "x" "13/10")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (mult-ineq -1 -1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but (-1 -2 1)) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "tan_pos_fast_approx")
                (("2" (expand "tan")
                  (("2" (lemma "sin_fast_approx_bound")
                    (("2"
                      (name-replace "d1"
                       " (CL * CL * eps - CL * eps * eps) / 2 / CU ")
                      (("2"
                        (name-replace "d2"
                         " min((CL * CL * eps - CL * eps * eps) / 2 / x,1/2) ")
                        (("2" (lemma "cos_fast_approx_bound")
                          (("2" (inst -1 "x" "d2")
                            (("1" (inst -2 "x" "d1")
                              (("1"
                                (case-replace
                                 "abs(sin(x) / cos(x) - sin_fast_approx(x, d1) / cos_fast_approx(x, d2)) = abs((sin(x)*cos_fast_approx(x,d2) - sin_fast_approx(x,d1)*cos(x))/(cos(x)*cos_fast_approx(x,d2)))")
                                (("1"
                                  (case "EXISTS ((D2: real | abs(D2)<=d2)): cos_fast_approx(x,d2) = cos(x)+D2")
                                  (("1" (skeep -1)
                                    (("1" (replaces -1)
                                      (("1"
                                        (case
                                         "EXISTS ((D1: real | abs(D1)<=d1)): sin_fast_approx(x,d1) = sin(x)+D1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (simplify 1)
                                              (("1"
                                                (lemma "triangle")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "sin(x) * D2 / (cos(x) * cos(x) + cos(x) * D2)"
                                                   " (- cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2)")
                                                  (("1"
                                                    (case-replace
                                                     "sin(x) * D2 / (cos(x) * cos(x) + cos(x) * D2) +
           (-cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2) = (sin(x) * D2 - cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2)")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (case
                                                           "abs(sin(x) * D2 / (cos(x) * cos(x) + cos(x) * D2))<=eps/2")
                                                          (("1"
                                                            (case
                                                             "abs((-cos(x) * D1) / (cos(x) * cos(x) + cos(x) * D2))<=eps/2")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case "d2<=eps")
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst
                                           1
                                           "sin_fast_approx(x,d1)-sin(x)")
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (hide-all-but (-3 1))
                                            (("2"
                                              (grind
                                               :exclude
                                               ("sin_fast_approx" "sin"))
                                              nil
                                              nil))
                                            nil)
                                           ("3" (ground) nil nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide (-1 -3 -4 2))
                                    (("2"
                                      (inst 1 "cos_fast_approx(x,d2)-cos(x)")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (ground)
                                        (("2"
                                          (expand "abs")
                                          (("2"
                                            (grind
                                             :exclude
                                             ("cos_fast_approx" "cos"))
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                                  nil)
                                 ("2" (ground) nil nil)
                                 ("3" (case "cos_fast_approx(x,d2)/=0")
                                  (("1" (case "x<pi/2")
                                    (("1" (lemma "cos_eq_0")
                                      (("1"
                                        (hide -6)
                                        (("1"
                                          (inst -1 "x")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -2)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "pi_bounds0")
                                      (("2"
                                        (lemma "pi_bounds")
                                        (("2"
                                          (inst -1 "0")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (expand "cos_fast_approx")
                                    (("2" (ground) nil nil)) nil)
                                   ("3" (ground) nil nil))
                                  nil)
                                 ("4" (ground) nil nil)
                                 ("5" (ground) nil nil))
                                nil)
                               ("2" (expand "d1")
                                (("2" (typepred "CL")
                                  (("2" (typepred "CU")
                                    (("2" (case "CL>0")
                                      (("1"
                                        (typepred (eps))
                                        (("1"
                                          (mult-ineq -1 -3)
                                          (("1"
                                            (mult-ineq -1 -7)
                                            (("1"
                                              (cross-mult 1)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "d2")
                              (("2" (expand "min")
                                (("2" (lift-if 1)
                                  (("2" (split 1)
                                    (("1" (flatten) (("1" (ground) nil nil))
                                      nil)
                                     ("2" (flatten)
                                      (("2"
                                        (typepred "CL")
                                        (("2"
                                          (case "CL>0")
                                          (("1"
                                            (typepred (eps))
                                            (("1"
                                              (mult-ineq -1 -3)
                                              (("1"
                                                (mult-ineq -1 -6)
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (cross-mult 1)
                                                    (("1" (ground) nil nil))
                                                    nil)
                                                   ("2" (ground) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep) (("3" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (expand "abs") (("3" (ground) nil nil)) nil)) nil)
     ("4" (skeep)
      (("4" (case "x<pi/2")
        (("1" (lemma "cos_eq_0")
          (("1" (inst -1 "x")
            (("1" (expand "Tan?")
              (("1" (flatten)
                (("1" (hide -4)
                  (("1" (hide -2)
                    (("1" (ground)
                      (("1" (skeep -1)
                        (("1" (case "i<0")
                          (("1" (ground)
                            (("1" (typepred (x))
                              (("1" (ground)
                                (("1" (replace -4)
                                  (("1" (ground)
                                    (("1" (cross-mult)
                                      (("1"
                                        (move-terms -2 l 2)
                                        (("1"
                                          (simplify)
                                          (("1" (cancel-by -2 "pi") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("2" (typepred (x))
                              (("2" (replaces -3)
                                (("2" (ground)
                                  (("2" (move-terms -3 r 1)
                                    (("2" (simplify)
                                      (("2"
                                        (cancel-by -4 "pi")
                                        (("2"
                                          (flip-ineq 2)
                                          (("2"
                                            (case "pi>=pi")
                                            (("1"
                                              (mult-ineq -2 -1)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "pi_bounds0")
          (("2" (lemma "pi_bounds")
            (("2" (inst -1 "0") (("2" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (tan_fast_approx_bound-1 nil 3634405909
   (""
    (case "FORALL (x: posreal, eps: posreal):
                                    (x <= 1.3 AND eps <= 10 ^ -1) OR
                                     (x <= 3.139 / 2 AND eps <= 10 ^ -4)
                                     IMPLIES abs(tan(x) - tan_fast_approx(x, eps)) <= eps")
    (("1" (skeep)
      (("1" (case-replace "x=0")
        (("1" (rewrite "tan_0")
          (("1" (expand "tan_fast_approx")
            (("1" (expand "abs") (("1" (ground) nil nil)) nil)) nil))
          nil)
         ("2" (case "x<0")
          (("1" (lemma "tan_neg")
            (("1" (inst -1 "x")
              (("1"
                (case "abs(tan(x)-tan_fast_approx(x,eps)) = abs(-tan(x)+tan_fast_approx(x, eps))")
                (("1" (replaces -1)
                  (("1" (replaces -1 :dir rl)
                    (("1" (expand "tan_fast_approx")
                      (("1" (lift-if 2)
                        (("1" (split 2)
                          (("1" (flatten) nil nil)
                           ("2" (flatten)
                            (("2" (split 2)
                              (("1" (flatten) (("1" (ground) nil nil)) nil)
                               ("2" (flatten)
                                (("2" (inst -2 "-x" "eps")
                                  (("1" (expand "abs" -3)
                                    (("1" (lift-if -3)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2" (flatten) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "abs")
                    (("2" (ground)
                      (("2" (lift-if 1)
                        (("2" (ground)
                          (("2" (lift-if 2) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst -1 "x" "eps")
            (("1" (expand "abs" -2)
              (("1" (lift-if -2)
                (("1" (split -2)
                  (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2"
          (case " FORALL ((CL: real | CL<=cos(x) AND CL-eps>0), (CU: real | CU>=cos(x))):
                                abs(tan(x)-tan_pos_fast_approx(x,eps,CL, CU))<=eps")
          (("1" (splash -2)
            (("1" (ground) nil nil)
             ("2" (expand "tan_fast_approx")
              (("2" (expand "tan_pos")
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide (-5 1)) (("1" (grind) nil nil)) nil)) nil)
                     ("2" (flatten 1)
                      (("2" (split 2)
                        (("1" (flatten 1)
                          (("1" (hide (-3 2 3))
                            (("1" (expand "tan_pos_inst2")
                              (("1"
                                (inst -3 "1 - x * x / 2 -
                                    x * x / 2 * (x * x / 12) * (x * x / 30)
                                    + x * x / 2 * (x * x / 12)"
                                 " 1 + x ^ 8 / 40320 - x * x / 2 -
                                    x * x / 2 * (x * x / 12) * (x * x / 30)
                                    + x * x / 2 * (x * x / 12)")
                                (("1" (lemma "cos_bounds")
                                  (("1" (inst -1 "x" "2")
                                    (("1" (expand "cos_ub")
                                      (("1"
                                        (expand "cos_approx")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "cos_term")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "factorial")
                                                                            (("1"
                                                                              (expand
                                                                               "factorial")
                                                                              (("1"
                                                                                (expand
                                                                                 "factorial")
                                                                                (("1"
                                                                                  (expand
                                                                                   "factorial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "factorial")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "factorial")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "factorial")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "factorial")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "factorial")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (split 1)
                                  (("1" (lemma "cos_bounds")
                                    (("1" (inst -1 "x" "1")
                                      (("1"
                                        (expand "cos_lb")
                                        (("1"
                                          (expand "cos_approx")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "sigma")
                                                  (("1"
                                                    (expand "sigma")
                                                    (("1"
                                                      (expand "cos_term")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand "expt")
                                                              (("1"
                                                                (expand
                                                                 "expt")
                                                                (("1"
                                                                  (expand
                                                                   "expt")
                                                                  (("1"
                                                                    (expand
                                                                     "expt")
                                                                    (("1"
                                                                      (expand
                                                                       "expt")
                                                                      (("1"
                                                                        (expand
                                                                         "expt")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (expand
                                                                             "factorial")
                                                                            (("1"
                                                                              (expand
                                                                               "factorial")
                                                                              (("1"
                                                                                (expand
                                                                                 "factorial")
                                                                                (("1"
                                                                                  (expand
                                                                                   "factorial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "factorial")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "factorial")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "factorial")
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (name "px" "3139/2000")
                                    (("2"
                                      (case
                                       "1 - x * x / 2 - x * x / 2 * (x * x / 12) * (x * x / 30) +
                            x * x / 2 * (x * x / 12)>= 1 - px * px / 2 - px * px / 2 * (px * px / 12) * (px * px / 30) +
                            px * px / 2 * (px * px / 12)")
                                      (("1"
                                        (case
                                         "1 - px * px / 2 - px * px / 2 * (px * px / 12) * (px * px / 30) +
                               px * px / 2 * (px * px / 12) -eps>0")
                                        (("1"
                                          (expand "px")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (expand "px")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "px")
                                        (("2"
                                          (hide (-1 -3 2 3))
                                          (("2"
                                            (typepred (x))
                                            (("2"
                                              (hide -1)
                                              (("2" (metit *) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten 1)
                          (("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "tan_fast_approx")
              (("3" (expand "tan_pos")
                (("3" (lift-if 1)
                  (("3" (split 1)
                    (("1" (ground)
                      (("1" (hide (-3 -4))
                        (("1" (expand "tan_pos_inst1")
                          (("1"
                            (inst -3 "1 - x * x / 2"
                             "1 + x * x * x * x / 24 - x * x / 2")
                            (("1" (lemma "cos_bounds")
                              (("1" (inst -1 "x" "1")
                                (("1" (flatten)
                                  (("1" (expand "cos_ub")
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (expand "sigma")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "cos_term")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "expt")
                                                          (("1"
                                                            (expand "expt")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (expand
                                                                 "factorial")
                                                                (("1"
                                                                  (expand
                                                                   "factorial")
                                                                  (("1"
                                                                    (expand
                                                                     "factorial")
                                                                    (("1"
                                                                      (expand
                                                                       "factorial")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split 1)
                              (("1" (lemma "cos_bounds")
                                (("1" (inst -1 "x" "0")
                                  (("1" (expand "cos_lb")
                                    (("1" (expand "cos_approx")
                                      (("1"
                                        (expand "sigma")
                                        (("1"
                                          (expand "sigma")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "cos_term")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (expand "expt")
                                                    (("1"
                                                      (expand "expt")
                                                      (("1"
                                                        (expand "expt")
                                                        (("1"
                                                          (expand "factorial")
                                                          (("1"
                                                            (expand
                                                             "factorial")
                                                            (("1"
                                                              (expand
                                                               "factorial")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (move-terms 1 l 2)
                                (("2" (move-terms 1 l 2)
                                  (("2" (hide 2)
                                    (("2" (typepred (x))
                                      (("2"
                                        (case
                                         "FORALL (a,b:posreal): a<=b IMPLIES a*a<=b*b")
                                        (("1"
                                          (inst -1 "x" "13/10")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2" (mult-ineq -1 -1) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (hide-all-but (-1 -2 1)) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (skeep)
              (("2" (expand "tan_pos_fast_approx")
                (("2" (expand "tan")
                  (("2" (lemma "sin_fast_approx_bound")
                    (("2"
                      (name-replace "d1"
                       " (CL * CL * eps - CL * eps * eps) / 2 / CU ")
                      (("2"
                        (name-replace "d2"
                         " min((CL * CL * eps - CL * eps * eps) / 2 / x,1) ")
                        (("2" (lemma "cos_fast_approx_bound")
                          (("2" (inst -1 "x" "d2")
                            (("1" (inst -2 "x" "d1")
                              (("1"
                                (case-replace
                                 "abs(sin(x) / cos(x) - sin_fast_approx(x, d1) / cos_fast_approx(x, d2)) = abs((sin(x)*cos_fast_approx(x,d2) - sin_fast_approx(x,d1)*cos(x))/(cos(x)*cos_fast_approx(x,d2)))")
                                (("1" (postpone) nil nil)
                                 ("2" (ground) nil nil)
                                 ("3" (case "cos_fast_approx(x,d2)/=0")
                                  (("1" (postpone) nil nil)
                                   ("2" (expand "cos_fast_approx")
                                    (("2" (ground) nil nil)) nil)
                                   ("3" (ground) nil nil))
                                  nil)
                                 ("4" (ground) nil nil)
                                 ("5" (ground) nil nil))
                                nil)
                               ("2" (expand "d1")
                                (("2" (typepred "CL")
                                  (("2" (typepred "CU")
                                    (("2" (case "CL>0")
                                      (("1"
                                        (typepred (eps))
                                        (("1"
                                          (mult-ineq -1 -3)
                                          (("1"
                                            (mult-ineq -1 -7)
                                            (("1"
                                              (cross-mult 1)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep) (("3" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (expand "abs") (("3" (ground) nil nil)) nil)) nil)
     ("4" (skeep)
      (("4" (case "x<pi/2")
        (("1" (lemma "cos_eq_0")
          (("1" (inst -1 "x")
            (("1" (expand "Tan?")
              (("1" (flatten)
                (("1" (hide -4)
                  (("1" (hide -2)
                    (("1" (ground)
                      (("1" (skeep -1)
                        (("1" (case "i<0")
                          (("1" (ground)
                            (("1" (typepred (x))
                              (("1" (ground)
                                (("1" (replace -4)
                                  (("1" (ground)
                                    (("1" (cross-mult)
                                      (("1"
                                        (move-terms -2 l 2)
                                        (("1"
                                          (simplify)
                                          (("1" (cancel-by -2 "pi") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("2" (typepred (x))
                              (("2" (replaces -3)
                                (("2" (ground)
                                  (("2" (move-terms -3 r 1)
                                    (("2" (simplify)
                                      (("2"
                                        (cancel-by -4 "pi")
                                        (("2"
                                          (flip-ineq 2)
                                          (("2"
                                            (case "pi>=pi")
                                            (("1"
                                              (mult-ineq -2 -1)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "pi_bounds0")
          (("2" (lemma "pi_bounds")
            (("2" (inst -1 "0") (("2" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))


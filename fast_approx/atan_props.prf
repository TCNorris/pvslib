(atan_props
 (reduce_less 0
  (reduce_less-1 nil 3633688215
   ("" (skeep)
    (("" (expand "reduce_approx")
      (("" (expand "reduce_fun")
        (("" (lemma "sqrt_fast_approx_upper")
          (("" (inst?)
            (("" (cross-mult)
              (("" (ground)
                (("" (case "x>=x")
                  (("1" (mult-ineq -1 -2) (("1" (ground) nil nil)) nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (reduce_approx const-decl "real" fast_approx nil)
    (sqrt_fast_approx_upper formula-decl nil sqrt_prop nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (sqrt_fast_approx const-decl "nnreal" fast_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (reduce_fun const-decl "real" atan_approx "trig/"))
   shostak))
 (reduce_close 0
  (reduce_close-1 nil 3633689812
   ("" (skeep)
    (("" (expand "reduce_fun")
      (("" (case "x*x = x^2")
        (("1" (replaces -1)
          (("1" (expand "reduce_approx")
            (("1" (case "1+sqrt(1+x^2)>=2")
              (("1" (case "1+sqrt_fast_approx(1+x*x, eps)>=2")
                (("1" (mult-ineq -1 -2)
                  (("1"
                    (case "x / (1 + sqrt(1 + x ^ 2)) - x / (1 + sqrt_fast_approx(1 + x * x, eps)) = x*(sqrt_fast_approx(1 + x * x, eps) - sqrt(1 + x ^ 2))/((1 + sqrt_fast_approx(1 + x * x, eps))*(1 + sqrt(1 + x ^ 2)))")
                    (("1" (replaces -1)
                      (("1" (lemma "sqrt_fast_approx_est")
                        (("1" (lemma "sqrt_fast_approx_upper")
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (expand "abs")
                                (("1"
                                  (lift-if -2)
                                  (("1"
                                    (split -2)
                                    (("1" (ground) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (rewrite "expt_x2")
                                          (("2"
                                            (case "x<=x")
                                            (("1"
                                              (mult-ineq -1 -2)
                                              (("1"
                                                (case
                                                 "x * (sqrt_fast_approx(1 + x * x, eps) - sqrt(1 + x * x)) /
                        ((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x)))
                        <= x * eps /
                        ((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x)))")
                                                (("1"
                                                  (case
                                                   " x * eps / ((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x))) <= x * eps / 4")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "eps*x>=eps*x")
                                                    (("1"
                                                      (mult-ineq -1 -7)
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (name
                                                   "den"
                                                   "((1 + sqrt_fast_approx(1 + x * x, eps)) * (1 + sqrt(1 + x * x)))")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (case "den<=den")
                                                      (("1"
                                                        (mult-ineq
                                                         -1
                                                         -2)
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (field 1) nil nil))
                    nil))
                  nil)
                 ("2" (lemma "sqrt_fast_approx_upper")
                  (("2" (inst?)
                    (("2" (both-sides "+" "1" -1)
                      (("2" (rewrite "expt_x2")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "sqrt_ge")
                (("2" (inst -1 "1+x^2" "1") (("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "expt_x2") nil nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt "reals/")
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (reduce_fun const-decl "real" atan_approx "trig/")
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (odd? const-decl "bool" integers nil)
    (both_sides_plus_ge1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sqrt_fast_approx_upper formula-decl nil sqrt_prop nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqrt_fast_approx_est formula-decl nil sqrt_prop nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sqrt_fast_approx const-decl "nnreal" fast_approx nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (sqrt_1 formula-decl nil sqrt "reals/")
    (sqrt_ge formula-decl nil sqrt "reals/")
    (reduce_approx const-decl "real" fast_approx nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   shostak))
 (atan_of_sum 0
  (atan_of_sum-1 nil 3633694176
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "atan_strict_increasing")
        (("1" (expand "strict_increasing?")
          (("1" (inst -1 "x" "x+y") (("1" (ground) nil nil)) nil))
          nil))
        nil)
       ("2" (name "mu" "y/(1+x*(x+y))")
        (("2" (case "x+y = (x+mu)/(1-x*mu)")
          (("1" (replace -1 1)
            (("1" (lemma "atan_plus")
              (("1" (inst -1 "x" "mu")
                (("1" (flatten)
                  (("1" (hide (-2 -3))
                    (("1" (ground)
                      (("1" (replaces -1 :dir rl)
                        (("1" (case "mu<=y")
                          (("1" (lemma "atan_strict_increasing")
                            (("1" (expand "strict_increasing?")
                              (("1"
                                (case "atan(mu)<=atan(y)")
                                (("1"
                                  (case "atan(y)<=y")
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (case "y=0")
                                    (("1"
                                      (replaces -1)
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "atan_bnds")
                                      (("2"
                                        (inst -1 "y")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -1 "mu" "y")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("2" (case "1<=(1+x*x+x*y)")
                              (("1"
                                (case "y>=y/(1+x*x+x*y)")
                                (("1"
                                  (replaces -4 1 :dir rl)
                                  (("1"
                                    (cross-mult 1)
                                    (("1"
                                      (factor 1 r)
                                      (("1" (cancel-by 1 "y") nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (cross-mult 1)
                                  (("2"
                                    (case "y<=y")
                                    (("1"
                                      (mult-ineq -1 -2)
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -2 1 :dir rl)
                        (("2" (ground) (("2" (cross-mult 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (cross-mult 1)
            (("2" (replaces -1 :dir rl)
              (("2" (cross-mult 1)
                (("2" (grind-reals 1)
                  (("2" (move-terms 1 l 2)
                    (("2" (move-terms 1 l 2)
                      (("2" (simplify 1) (("2" (cross-mult 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (replaces -1 :dir rl)
            (("3" (ground)
              (("3" (move-terms -1 l 2)
                (("3" (assert)
                  (("3" (cross-mult -1)
                    (("3" (move-terms -1 l 1)
                      (("3" (assert)
                        (("3" (lemma "sq_gt_0")
                          (("3" (inst -1 "x")
                            (("3" (expand "sq")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (atan_strict_increasing formula-decl nil atan "trig/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (atan_plus formula-decl nil atan "trig/")
    (<= const-decl "bool" reals nil)
    (atan_bnds formula-decl nil atan "trig/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_distributes formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (times_div2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (sq_gt_0 formula-decl nil sq "reals/")
    (sq const-decl "nonneg_real" sq "reals/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak))
 (atan_reduce_close 0
  (atan_reduce_close-1 nil 3633696375
   ("" (skeep)
    (("" (lemma "reduce_close")
      (("" (inst?)
        (("" (name "delt" "reduce_fun(x) - reduce_approx(x, eps)")
          (("" (lemma "atan_of_sum")
            (("" (name "red" "reduce_fun(x)")
              (("" (name "rap" "reduce_approx(x,eps)")
                (("" (replace -1)
                  (("" (replace -2)
                    (("" (inst -3 "rap" "delt")
                      (("1" (flatten)
                        (("1" (move-terms -5 l 2)
                          (("1" (replace -5 -3 :dir rl)
                            (("1" (lemma "reduce_is_equal")
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (replace -3 -1)
                                  (("1"
                                    (replaces -1 :dir rl)
                                    (("1"
                                      (replace -5 -4 :dir rl)
                                      (("1"
                                        (case "2*delt<= x*eps/2")
                                        (("1"
                                          (move-terms -6 r 2)
                                          (("1"
                                            (replace -6 -7)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "x=0")
                                  (("1"
                                    (case "rap=0")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (rewrite "atan_0")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "rap")
                                      (("2"
                                        (expand "reduce_approx")
                                        (("2"
                                          (replaces -1)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "reduce_less")
                        (("2" (inst?) (("2" (ground) nil nil)) nil))
                        nil)
                       ("3" (expand "rap")
                        (("3" (expand "reduce_approx")
                          (("3" (cross-mult 1) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reduce_close formula-decl nil atan_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (reduce_fun const-decl "real" atan_approx "trig/")
    (reduce_approx const-decl "real" fast_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rap skolem-const-decl "real" atan_props nil)
    (delt skolem-const-decl "real" atan_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (reduce_is_equal formula-decl nil atan_approx "trig/")
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (atan_0 formula-decl nil atan "trig/")
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (x skolem-const-decl "nnreal" atan_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduce_less formula-decl nil atan_props nil)
    (sqrt_fast_approx const-decl "nnreal" fast_approx nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (atan_of_sum formula-decl nil atan_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak))
 (eps_sig_TCC1 0
  (eps_sig_TCC1-2 nil 3767448791
   ("" (skeep)
    (("" (lemma "sigma_nat.sigma_geometric")
      (("" (inst -1 "n" "1" "1/2")
        (("" (split -1)
          (("1" (lemma "sigma_scal")
            (("1" (inst -1 "LAMBDA (k:nat): (1/2)^k" "eps" "n" "1")
              (("1"
                (case-replace
                 "(LAMBDA (i: nat): eps * (1 / 2) ^ i) = LAMBDA (k: nat): eps  / 2^k")
                (("1" (replaces -2)
                  (("1" (replaces -2)
                    (("1" (ground)
                      (("1" (lemma "both_sides_expt_lt1_gt")
                        (("1" (inst -1 "1" "1+n" "1/2")
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (ground)
                                (("1"
                                  (move-terms -1 r 1)
                                  (("1"
                                    (cross-mult 1)
                                    (("1"
                                      (typepred (eps))
                                      (("1"
                                        (mult-ineq -2 -3)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cross-mult) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (decompose-equality 1)
                  (("2" (rewrite "inv_expt" 1) (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil) ("3" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (sigma_scal formula-decl nil sigma "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (sigma_rat application-judgement "rational" sigma_nat "reals/")
    (sigma_nnreal application-judgement "nnreal" sigma_nat "reals/")
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (both_sides_expt_lt1_gt formula-decl nil exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (inv_expt formula-decl nil exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (sigma_geometric formula-decl nil sigma_nat "reals/"))
   nil
   (eps_sig subtype
    "sigma[nat].sigma(1, atan_props.n, LAMBDA (k: naturalnumbers.nat): number_fields./(atan_props.eps, exponentiation.^(2, k)))"
    "{z: real_types.posreal | reals.<=(z, atan_props.eps)}"))
  (eps_sig_TCC1-1 nil 3634917736 ("" (subtype-tcc) nil nil) nil nil
   (eps_sig subtype
    "sigma[nat].sigma(1, atan_props.n, LAMBDA (k: naturalnumbers.nat): number_fields./(atan_props.eps, exponentiation.^(2, k)))"
    "{z: real_types.posreal | reals.<=(z, atan_props.eps)}")))
 (eps_sig_next 0
  (eps_sig_next-1 nil 3634987449
   ("" (skeep)
    (("" (expand "eps_sig")
      ((""
        (name-replace "sn1"
         "sigma(1, n, LAMBDA (k: nat): eps / 2 ^ k)")
        (("" (rewrite "sigma_last")
          (("" (expand "sn1") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (eps_sig const-decl "{z: posreal | z <= eps}" atan_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma_last formula-decl nil sigma "reals/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sn1 skolem-const-decl "nnreal" atan_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (sigma def-decl "real" sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sigma_nnreal application-judgement "nnreal" sigma_nat "reals/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (atan_iter_alt_series_TCC1 0
  (atan_iter_alt_series_TCC1-1 nil 3633699734
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (atan_iter_alt_series subtype "(number_fields.-)(atan_props.n, 1)"
    "nat")))
 (atan_iter_alt_series_TCC2 0
  (atan_iter_alt_series_TCC2-1 nil 3633699734
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atan_series_n const-decl "real" atan "trig/")
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (atan_iter_alt_series subtype "atan_props.n" "posnat")))
 (atan_iter_alt_series_TCC3 0
  (atan_iter_alt_series_TCC3-1 nil 3633699734
   ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (atan_iter_alt_series subtype
    "((number_fields.+)(number_fields.*(2, atan_props.n), 1))"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (atan_iter_alt_series_TCC4 0
  (atan_iter_alt_series_TCC4-1 nil 3634921315
   ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (atan_iter_alt_series subtype "2"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (atan_iter_alt_series 0
  (atan_iter_alt_series-2 "alt" 3634919570
   ("" (skeep :preds? t)
    (("" (expand "atan_approx_iter_alt")
      (("" (expand "atan_approx_iter_alt")
        (("" (rewrite "expt_x2")
          (("" (ground)
            (("" (case "n=0")
              (("1" (ground)
                (("1" (replace -1)
                  (("1" (expand "pm1")
                    (("1" (replace -11)
                      (("1" (simplify 1)
                        (("1" (rewrite "expt_x1")
                          (("1" (expand "atan_series_n")
                            (("1" (expand "sigma")
                              (("1"
                                (expand "atan_series_term")
                                (("1"
                                  (expand "sigma")
                                  (("1"
                                    (expand "atan_series_coef")
                                    (("1"
                                      (expand "^")
                                      (("1"
                                        (expand "expt")
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (typepred
                                             "eps_sig(eps, 1)")
                                            (("1"
                                              (typepred
                                               "best_rational(b + x, eps / 2 + b + x)")
                                              (("1"
                                                (inst
                                                 1
                                                 "best_rational(b + x, eps / 2 + b + x) -x")
                                                (("1" (ground) nil nil)
                                                 ("2"
                                                  (ground)
                                                  (("2"
                                                    (replace -6)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (move-terms
                                                         -2
                                                         r
                                                         3)
                                                        (("2"
                                                          (expand
                                                           "eps_sig")
                                                          (("2"
                                                            (expand
                                                             "sigma")
                                                            (("2"
                                                              (expand
                                                               "sigma")
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_x1")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground)
                (("2" (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
                  (("1" (inst -1 "n")
                    (("1" (replace -11 2)
                      (("1"
                        (case "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + atan_series_n(x, n - 1) = atan_series_n(x, n)")
                        (("1"
                          (both-sides "+"
                           "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))"
                           -8)
                          (("1"
                            (both-sides "+"
                             "pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))"
                             -9)
                            (("1" (replace -1)
                              (("1"
                                (move-terms -9 r 2)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (move-terms -9 l 3)
                                    (("1"
                                      (both-sides "+" "eps/2^(n+1)" -9)
                                      (("1"
                                        (move-terms -9 r 1)
                                        (("1"
                                          (rewrite "eps_sig_next")
                                          (("1"
                                            (move-terms -9 l 4)
                                            (("1"
                                              (inst
                                               2
                                               "best_rational(pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n)) + b,
                      eps / 2 ^ (1 + n) +
                       pm1(n) * ((x ^ (1 + 2 * n)) / (1 + 2 * n))
                       + b) - atan_series_n(x, n)")
                                              (("1" (ground) nil nil)
                                               ("2" (ground) nil nil)
                                               ("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "atan_series_n")
                          (("2"
                            (name-replace "sn1"
                             "sigma(0, n - 1, atan_series_term(x))")
                            (("2" (rewrite "sigma_last" 1)
                              (("2"
                                (hide 3)
                                (("2"
                                  (expand "sn1")
                                  (("2"
                                    (expand "atan_series_term")
                                    (("2"
                                      (expand "atan_series_coef")
                                      (("2"
                                        (replace -1 1)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (induct "nn" 1 NAT_induction)
                      (("2" (skeep)
                        (("2" (expand "pm1" 1)
                          (("2" (lift-if 1)
                            (("2" (ground)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (inst -1 "j-2")
                                (("3"
                                  (ground)
                                  (("3"
                                    (replaces -1)
                                    (("3"
                                      (expand "^")
                                      (("3"
                                        (expand "expt" 2 2)
                                        (("3"
                                          (expand "expt" 2 2)
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (atan_approx_iter_alt def-decl "real" fast_approx nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (sigma def-decl "real" sigma "reals/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (b skolem-const-decl "{b: real |
   IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF <= b AND
    b <=
     IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF +
      IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF}" atan_props nil)
    (eps skolem-const-decl "posreal" atan_props nil)
    (x skolem-const-decl "{x: nnreal | x <= 1}" atan_props nil)
    (n skolem-const-decl "nat" atan_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (eps_sig const-decl "{z: posreal | z <= eps}" atan_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (atan_series_coef const-decl "rat" atan "trig/")
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (atan_series_term const-decl "[nat -> real]" atan "trig/")
    (atan_series_n const-decl "real" atan "trig/")
    (pm1 def-decl "int" fast_approx nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sigma_last formula-decl nil sigma "reals/")
    (sn1 skolem-const-decl "real" atan_props nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (eps_sig_next formula-decl nil atan_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak)
  (atan_iter_alt_series-1 nil 3633699735
   ("" (skeep :preds? t)
    (("" (expand "atan_approx_iter_alt")
      (("" (expand "atan_approx_iter_alt")
        (("" (rewrite "expt_x2")
          (("" (ground)
            (("" (lift-if -6)
              (("" (split -6)
                (("1" (ground)
                  (("1" (replace -1)
                    (("1" (replace -2)
                      (("1" (expand "pm1")
                        (("1" (replace -10)
                          (("1" (simplify 1)
                            (("1" (rewrite "expt_x1")
                              (("1"
                                (expand "atan_series_n")
                                (("1"
                                  (expand "sigma")
                                  (("1"
                                    (expand "atan_series_term")
                                    (("1"
                                      (expand "sigma")
                                      (("1"
                                        (expand "atan_series_coef")
                                        (("1"
                                          (expand "^")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (expand "expt")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "atan_series_n")
                  (("2" (rewrite "sigma_last" 1)
                    (("2" (flatten)
                      (("2" (replace -1 :dir rl)
                        (("2"
                          (case "FORALL (nn:nat): pm1(nn) = (-1)^nn")
                          (("1" (inst -1 "n")
                            (("1" (replace -10 2)
                              (("1"
                                (expand "atan_series_term")
                                (("1"
                                  (expand "atan_series_coef")
                                  (("1"
                                    (replace -1 2)
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (induct "nn" 1 NAT_induction)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "pm1" 1)
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (ground)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replaces -1)
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3"
                                        (inst -1 "j-2")
                                        (("3"
                                          (ground)
                                          (("3"
                                            (replaces -1)
                                            (("3"
                                              (expand "^")
                                              (("3"
                                                (expand "expt" 2 2)
                                                (("3"
                                                  (expand "expt" 2 2)
                                                  (("3"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_approx_iter_alt def-decl "real" fast_approx nil)
    (sigma_last formula-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (T_low type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (atan_series_coef const-decl "rat" atan "trig/")
    (atan_series_term const-decl "[nat -> real]" atan "trig/")
    (atan_series_n const-decl "real" atan "trig/")
    (pm1 def-decl "int" fast_approx nil))
   shostak))
 (atan_iter_alt_series2_TCC1 0
  (atan_iter_alt_series2_TCC1-1 nil 3633703931
   ("" (subtype-tcc) nil nil)
   ((^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (atan_iter_alt_series2 subtype "(number_fields.*(2, atan_props.mm))"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (atan_iter_alt_series2_TCC2 0
  (atan_iter_alt_series2_TCC2-1 nil 3633703931
   ("" (subtype-tcc) nil nil)
   ((nnreal_expt application-judgement "nnreal" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (atan_iter_alt_series2 subtype "(number_fields.*(2, atan_props.m))"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (atan_iter_alt_series2_TCC3 0
  (atan_iter_alt_series2_TCC3-1 nil 3633703931
   ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (atan_iter_alt_series2 subtype
    "((number_fields.-)((number_fields.+)(atan_props.n, atan_props.m), 1))"
    "nat")))
 (atan_iter_alt_series2 0
  (atan_iter_alt_series2-1 nil 3633703938
   ("" (induct "m")
    (("1" (ground)
      (("1" (skeep :preds? t) (("1" (inst?) nil nil)) nil)) nil)
     ("2" (ground) nil nil) ("3" (ground) nil nil)
     ("4" (skeep)
      (("4" (skeep :preds? t)
        (("4" (case "j=0")
          (("1" (replace -1)
            (("1" (hide -14)
              (("1" (simplify)
                (("1" (lemma "atan_iter_alt_series")
                  (("1"
                    (name-replace "B"
                     "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF")
                    (("1" (inst -1 "x" "eps" "n" "b" "c")
                      (("1" (skeep)
                        (("1" (inst 1 "epsum")
                          (("1" (ground) nil nil)
                           ("2" (ground) nil nil))
                          nil))
                        nil)
                       ("2" (inst -12 "0")
                        (("2" (replaces -11)
                          (("2" (simplify)
                            (("2" (rewrite "expt_x0")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (split -13)
            (("1" (expand "atan_approx_iter_alt" 2)
              (("1" (inst-cp -12 "0")
                (("1" (simplify -13)
                  (("1" (rewrite "expt_x0")
                    (("1" (case-replace "(c/(1+2*n)<= eps) = FALSE")
                      (("1" (hide -1)
                        (("1"
                          (name-replace "B"
                           "IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF")
                          (("1" (both-sides "+" "eps/2^(n+1)" -8)
                            (("1"
                              (case "(IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF + eps / 2 ^ (n + 1)) = eps_sig(eps, 1+n)")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (move-terms -9 r 1)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (move-terms -8 l 3)
                                      (("1"
                                        (both-sides
                                         "+"
                                         "pm1(n) * (c / (1 + 2 * n))"
                                         -7)
                                        (("1"
                                          (both-sides
                                           "+"
                                           "pm1(n) * (c / (1 + 2 * n))"
                                           -8)
                                          (("1"
                                            (case
                                             "B + pm1(n) * (c / (1 + 2 * n)) = atan_series_n(x,n)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (move-terms -9 r 1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (move-terms -9 l 4)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "x"
                                                       " eps"
                                                       " 1 + n"
                                                       "
                             best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                                           eps / 2 ^ (1 + n)
                                           +
                                           pm1(n) * (c / (1 + 2 * n))
                                           +
                                           b)"
                                                       "
                             c * x^2")
                                                      (("1"
                                                        (rewrite
                                                         "expt_x2")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 3)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (rewrite
                                                             "expt_x2")
                                                            (("1"
                                                              (mult-ineq
                                                               -3
                                                               -3)
                                                              (("1"
                                                                (mult-ineq
                                                                 -11
                                                                 -1)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -11)
                                                            (("2"
                                                              (rewrite
                                                               "expt_plus"
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "expt_0"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "expt_0"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "expt_0"
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (inst
                                                               -12
                                                               "mm+1")
                                                              (("3"
                                                                (hide
                                                                 (-1
                                                                  -4))
                                                                (("3"
                                                                  (rewrite
                                                                   "expt_plus"
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (ground)
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_0"
                                                                           -10)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (rewrite
                                                             "expt_plus"
                                                             1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("2"
                                                                (replaces
                                                                 -1)
                                                                (("2"
                                                                  (rewrite
                                                                   "expt_0"
                                                                   1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "expt_0"
                                                                     1)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred
                                                         " best_rational(pm1(n) * (c / (1 + 2 * n)) + b,
                     eps / 2 ^ (1 + n) + pm1(n) * (c / (1 + 2 * n)) + b)")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 3))
                                              (("2"
                                                (expand "B")
                                                (("2"
                                                  (expand
                                                   "atan_series_n")
                                                  (("2"
                                                    (case "n=0")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (expand
                                                               "atan_series_term")
                                                              (("1"
                                                                (expand
                                                                 "atan_series_coef")
                                                                (("1"
                                                                  (expand
                                                                   "pm1")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      (("2"
                                                        (name-replace
                                                         "sn1"
                                                         "sigma(0, n - 1, atan_series_term(x))")
                                                        (("2"
                                                          (rewrite
                                                           "sigma_last"
                                                           2)
                                                          (("2"
                                                            (expand
                                                             "sn1")
                                                            (("2"
                                                              (case
                                                               "FORALL (nn:nat): pm1(nn) = (-1)^nn")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "n")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -11)
                                                                    (("1"
                                                                      (expand
                                                                       "atan_series_term")
                                                                      (("1"
                                                                        (expand
                                                                         "atan_series_coef")
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (induct
                                                                   "nn"
                                                                   1
                                                                   NAT_induction)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "pm1"
                                                                       1)
                                                                      (("2"
                                                                        (lift-if
                                                                         1)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "j!1-2")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "expt"
                                                                                           2
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "expt"
                                                                                             2
                                                                                             2)
                                                                                            (("1"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (ground)
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (expand "eps_sig")
                                            (("1"
                                              (expand "sigma")
                                              (("1"
                                                (expand "sigma")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "eps_sig_next")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (ground) nil nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil)
                           ("2" (ground) nil nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep) (("5" (skeep) (("5" (ground) nil nil)) nil)) nil)
     ("6" (skeep) (("6" (skeep) (("6" (ground) nil nil)) nil)) nil)
     ("7" (skeep) (("7" (skeep) (("7" (ground) nil nil)) nil)) nil)
     ("8" (skeep) (("8" (skeep) (("8" (ground) nil nil)) nil)) nil))
    nil)
   ((atan_iter_alt_series formula-decl nil atan_props nil)
    (x skolem-const-decl "{x: nnreal | x <= 1}" atan_props nil)
    (n skolem-const-decl "nat" atan_props nil)
    (j skolem-const-decl "nat" atan_props nil)
    (eps skolem-const-decl "posreal" atan_props nil)
    (c skolem-const-decl "{c: nnreal |
   c <= 1 AND
    c = x ^ (1 + 2 * n) AND
     (FORALL (mm: below(1 + j)):
        c * x ^ (2 * mm) / (1 + 2 * mm + 2 * n) > eps)
      AND (c * x ^ (2 + 2 * j)) / (3 + 2 * j + 2 * n) <= eps}"
     atan_props nil)
    (epsum skolem-const-decl
     "{epsum: nnreal | epsum <= eps_sig(eps, 1 + n)}" atan_props nil)
    (TRUE const-decl "bool" booleans nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (FALSE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sigma_last formula-decl nil sigma "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (expt def-decl "real" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (j!1 skolem-const-decl "nat" atan_props nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (sn1 skolem-const-decl "real" atan_props nil)
    (T_low type-eq-decl nil sigma "reals/")
    (T_high type-eq-decl nil sigma "reals/")
    (sigma def-decl "real" sigma "reals/")
    (atan_series_term const-decl "[nat -> real]" atan "trig/")
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (atan_series_coef const-decl "rat" atan "trig/")
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (B skolem-const-decl "real" atan_props nil)
    (b skolem-const-decl "{b: real |
   IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF <= b AND
    b <=
     IF n = 0 THEN 0 ELSE atan_series_n(x, n - 1) ENDIF +
      IF n = 0 THEN 0 ELSE eps_sig(eps, n) ENDIF}" atan_props nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    (expt_x2 formula-decl nil exponentiation nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (expt_0 formula-decl nil sqrt_exists "reals/")
    (zero_hat formula-decl nil exponent_props "reals/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le2 formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (pm1 def-decl "int" fast_approx nil)
    (eps_sig_next formula-decl nil atan_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (atan_approx_iter_alt def-decl "real" fast_approx nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (eps_sig const-decl "{z: posreal | z <= eps}" atan_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (atan_series_n const-decl "real" atan "trig/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (atan_alt_series_TCC1 0
  (atan_alt_series_TCC1-1 nil 3633712099 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (atan_alt_series subtype
    "((number_fields.+)(number_fields.*(2, atan_props.m), 1))"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (atan_alt_series_TCC2 0
  (atan_alt_series_TCC2-1 nil 3633712099 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil))
   nil
   (atan_alt_series subtype
    "((number_fields.+)(number_fields.*(2, atan_props.n), 1))"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (atan_alt_series_TCC3 0
  (atan_alt_series_TCC3-1 nil 3633712412 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (atan_alt_series subtype "(number_fields.-)(atan_props.n, 1)"
    "nat")))
 (atan_alt_series 0
  (atan_alt_series-1 nil 3633712128
   ("" (skeep)
    (("" (lemma "atan_iter_alt_series2")
      (("" (inst -1 "x" "eps" "0" "n" "0" "x")
        (("1" (skeep)
          (("1" (inst 1 "epsum")
            (("1" (ground) nil nil)
             ("2" (typepred (epsum))
              (("2" (typepred "eps_sig(eps, n)")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (ground)
          (("1" (typepred (n))
            (("1" (typepred "x")
              (("1" (skeep)
                (("1" (inst -4 "mm")
                  (("1" (rewrite "expt_plus")
                    (("1" (typepred "eps")
                      (("1" (cross-mult -6)
                        (("1" (typepred "mm")
                          (("1" (expand "/=")
                            (("1" (replace -4 -8)
                              (("1"
                                (case-replace
                                 "NOT 0 ^ (1 + 2 * mm) = 0")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred (n)) (("2" (rewrite "expt_plus") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_iter_alt_series2 formula-decl nil atan_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_hat formula-decl nil exponent_props "reals/")
    (nat_exp application-judgement "nat" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (epsum skolem-const-decl
     "{epsum: nnreal | epsum <= eps_sig(eps, n)}" atan_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_series_n const-decl "real" atan "trig/")
    (eps_sig const-decl "{z: posreal | z <= eps}" atan_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (x skolem-const-decl "{x: nnreal | x <= 1}" atan_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (eps skolem-const-decl "posreal" atan_props nil)
    (n skolem-const-decl "{n: posnat |
   (FORALL (m: below(n)): (x ^ (1 + 2 * m)) / (1 + 2 * m) > eps) AND
    (x ^ (1 + 2 * n)) / (1 + 2 * n) <= eps}" atan_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (bounding?_TCC1 0
  (bounding?_TCC1-1 nil 3633715562 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bounding? subtype
    "((number_fields.+)(number_fields.*(2, atan_props.n), 1))"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC1 0
  (bound_iter_TCC1-1 nil 3633715562 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (bound_iter subtype "atan_props.N"
    "{i: integers.int | booleans.OR(atan_props.x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC2 0
  (bound_iter_TCC2-1 nil 3633715562
   ("" (skeep)
    (("" (ground)
      (("" (case "1/eps-N/x^N>=0")
        (("1" (ground) nil nil)
         ("2" (move-terms 1 l 2) (("2" (cross-mult) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (odd_int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (<= const-decl "bool" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (bound_iter subtype
    "floor_ceil.ceiling((number_fields.-)(number_fields./(1, atan_props.eps), number_fields./((atan_props.N), exponentiation.^(atan_props.x, atan_props.N))))"
    "naturalnumber")))
 (bound_iter_TCC3 0
  (bound_iter_TCC3-1 nil 3633715562 ("" (subtype-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (bound_iter subtype
    "(number_fields.+)(1, number_fields.*(2, atan_props.n))"
    "{i: integers.int | booleans.OR(x /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC4 0
  (bound_iter_TCC4-2 nil 3767449114 ("" (subtype-tcc) nil nil) nil nil
   (bound_iter subtype "atan_props.N"
    "{i: integers.int | booleans.OR(atan_props.z`1 /= 0, reals.>=(i, 0))}"))
  (bound_iter_TCC4-1 nil 3633715562
   ("" (skeep :preds? t)
    (("" (expand "bounding?")
      (("" (ground)
        (("" (skeep :preds? t)
          (("" (case "x^(1+2*m)>= x ^ (1 + 2 * n)")
            (("1" (case "1/ (1 + 2 * m) >= 1/ (1 + 2 * n)")
              (("1" (mult-ineq -1 -2) (("1" (ground) nil nil)) nil)
               ("2" (cross-mult) nil nil))
              nil)
             ("2" (lemma "both_sides_expt_lt1_le")
              (("2" (case "x=1")
                (("1" (replaces -1)
                  (("1" (rewrite "expt_1i")
                    (("1" (rewrite "expt_1i") (("1" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "1+2*n" "1+2*m" "x")
                  (("1" (flatten)
                    (("1" (hide -1) (("1" (ground) nil nil)) nil)) nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (bound_iter subtype "atan_props.N"
    "{i: integers.int | booleans.OR(atan_props.z`1 /= 0, reals.>=(i, 0))}")))
 (bound_iter_TCC5 0
  (bound_iter_TCC5-3 nil 3767449092
   ("" (skeep :preds? t)
    (("" (expand "bounding?")
      (("" (ground)
        (("" (skeep :preds? t)
          (("" (case "x^(1+2*m)>= x ^ (1 + 2 * n)")
            (("1" (case "1/ (1 + 2 * m) >= 1/ (1 + 2 * n)")
              (("1" (mult-ineq -1 -2) (("1" (ground) nil nil)) nil)
               ("2" (cross-mult) nil nil))
              nil)
             ("2" (lemma "both_sides_expt_lt1_le")
              (("2" (case "x=1")
                (("1" (replaces -1)
                  (("1" (rewrite "expt_1i")
                    (("1" (rewrite "expt_1i") (("1" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "1+2*n" "1+2*m" "x")
                  (("1" (flatten)
                    (("1" (hide -1) (("1" (ground) nil nil)) nil)) nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_1i formula-decl nil exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (TRUE const-decl "bool" booleans nil)
    (x skolem-const-decl "{x: posreal | x <= 1}" atan_props nil)
    (both_sides_expt_lt1_le formula-decl nil exponentiation nil)
    (bounding? const-decl "bool" atan_props nil))
   nil
   (bound_iter subtype "(number_fields.+)(atan_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, m))), (number_fields.+)(1, number_fields.*(2, m))), atan_props.eps), reals.<=(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, nn))), (number_fields.+)(1, number_fields.*(2, nn))), atan_props.eps))}"))
  (bound_iter_TCC5-2 nil 3633734109
   ("" (skeep) (("" (expand "bounding?") (("" (ground) nil nil)) nil))
    nil)
   ((bounding? const-decl "bool" atan_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers
     nil))
   nil
   (bound_iter subtype "(number_fields.+)(atan_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, m))), (number_fields.+)(1, number_fields.*(2, m))), atan_props.eps), reals.<=(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, nn))), (number_fields.+)(1, number_fields.*(2, nn))), atan_props.eps))}"))
  (bound_iter_TCC5-1 nil 3633715562 ("" (subtype-tcc) nil nil) nil nil
   (bound_iter subtype "(number_fields.+)(atan_props.n, 1)"
    "{nn: integers.posnat | booleans.AND(FORALL (m: naturalnumbers.below(nn)): reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, m))), (number_fields.+)(1, number_fields.*(2, m))), atan_props.eps), reals.<=(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, nn))), (number_fields.+)(1, number_fields.*(2, nn))), atan_props.eps))}")))
 (bound_iter_TCC6 0
  (bound_iter_TCC6-2 nil 3767449078
   ("" (skeep) (("" (expand "bounding?") (("" (ground) nil nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bounding? const-decl "bool" atan_props nil))
   nil
   (bound_iter subtype "(number_fields.+)(atan_props.n, 1)"
    "{n: naturalnumbers.nat | reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, n))), (number_fields.+)(1, number_fields.*(2, n))), atan_props.eps)}"))
  (bound_iter_TCC6-1 nil 3633715562
   ("" (skeep)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (ground)
                (("1" (expand "bounding?") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "bounding?")
                  (("2" (flip-ineq 3)
                    (("2" (case "(3+2*n)/x^(3+2*n)<1/eps")
                      (("1" (move-terms -1 l 1)
                        (("1" (ground) nil nil)) nil)
                       ("2" (cross-mult) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lift-if 2)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (expand "bounding?") (("1" (ground) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (case "(2 * (n + 1) + 3) / x ^ (2 * (n + 1) + 3)>= 2+(2 * n + 3) / x ^ (2 * n + 3)")
                  (("1" (swap-rel -1)
                    (("1" (move-terms -1 r 1)
                      (("1" (move-terms -1 l 1)
                        (("1" (move-terms -1 l 1)
                          (("1" (both-sides "+" "1/eps" -1)
                            (("1" (ground) nil nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "2*(n+1)+3 = 2+(2*n+3)")
                    (("1" (rewrite "expt_plus" 1)
                      (("1"
                        (case "(2*n+3)/(x ^ 2 * x ^ (3 + 2 * n))>=(2*n+3)/x ^ (3 + 2 * n)")
                        (("1" (case "2/(x ^ 2 * x ^ (3 + 2 * n))>=2")
                          (("1" (ground) nil nil)
                           ("2" (typepred (x))
                            (("2" (case "FORALL (nn:nat): x^nn<=1")
                              (("1"
                                (inst-cp -1 "2")
                                (("1"
                                  (inst -1 "3+2*n")
                                  (("1"
                                    (mult-ineq -1 -2)
                                    (("1"
                                      (cross-mult 1)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (induct "nn")
                                (("1"
                                  (rewrite "expt_x0")
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (rewrite "expt_plus")
                                    (("2"
                                      (rewrite "expt_x1")
                                      (("2"
                                        (mult-ineq -1 -4)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "x^2<=1")
                          (("1" (cross-mult 1)
                            (("1" (ground)
                              (("1"
                                (case
                                 "3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)<=3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)")
                                (("1"
                                  (mult-ineq -1 -2)
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred (x))
                            (("2" (rewrite "expt_x2")
                              (("2"
                                (mult-ineq -3 -3)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (bounding? const-decl "bool" atan_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (bound_iter subtype "(number_fields.+)(atan_props.n, 1)"
    "{n: naturalnumbers.nat | reals.>(number_fields./(exponentiation.^(atan_props.x, (number_fields.+)(1, number_fields.*(2, n))), (number_fields.+)(1, number_fields.*(2, n))), atan_props.eps)}")))
 (bound_iter_TCC7 0
  (bound_iter_TCC7-2 nil 3767448975
   ("" (skeep)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (ground)
                (("1" (expand "bounding?") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "bounding?")
                  (("2" (flip-ineq 3)
                    (("2" (case "(3+2*n)/x^(3+2*n)<1/eps")
                      (("1" (move-terms -1 l 1)
                        (("1" (ground) nil nil)) nil)
                       ("2" (cross-mult) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lift-if 2)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (expand "bounding?") (("1" (ground) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2"
                  (case "(2 * (n + 1) + 3) / x ^ (2 * (n + 1) + 3)>= 2+(2 * n + 3) / x ^ (2 * n + 3)")
                  (("1" (swap-rel -1)
                    (("1" (move-terms -1 r 1)
                      (("1" (move-terms -1 l 1)
                        (("1" (move-terms -1 l 1)
                          (("1" (both-sides "+" "1/eps" -1)
                            (("1" (ground) nil nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "2*(n+1)+3 = 2+(2*n+3)")
                    (("1" (rewrite "expt_plus" 1)
                      (("1"
                        (case "(2*n+3)/(x ^ 2 * x ^ (3 + 2 * n))>=(2*n+3)/x ^ (3 + 2 * n)")
                        (("1" (case "2/(x ^ 2 * x ^ (3 + 2 * n))>=2")
                          (("1" (ground) nil nil)
                           ("2" (typepred (x))
                            (("2" (case "FORALL (nn:nat): x^nn<=1")
                              (("1"
                                (inst-cp -1 "2")
                                (("1"
                                  (inst -1 "3+2*n")
                                  (("1"
                                    (mult-ineq -1 -2)
                                    (("1"
                                      (cross-mult 1)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (induct "nn")
                                (("1"
                                  (rewrite "expt_x0")
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (rewrite "expt_plus")
                                    (("2"
                                      (mult-ineq -1 -4)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "x^2<=1")
                          (("1" (cross-mult 1)
                            (("1" (ground)
                              (("1"
                                (case
                                 "3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)<=3 * x ^ (3 + 2 * n) + 2 * (x ^ (3 + 2 * n) * n)")
                                (("1"
                                  (mult-ineq -1 -2)
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred (x))
                            (("2" (rewrite "expt_x2")
                              (("2"
                                (mult-ineq -3 -3)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (bounding? const-decl "bool" atan_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (expt_x2 formula-decl nil exponentiation nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (expt_plus formula-decl nil exponentiation nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil))
   nil
   (bound_iter termination
    "atan_props.bound_iter(atan_props.x, atan_props.eps, (number_fields.+)(atan_props.n, 1))"
    "nil"))
  (bound_iter_TCC7-1 nil 3767448175 ("" (termination-tcc) nil nil) nil
   nil
   (bound_iter termination
    "atan_props.bound_iter(atan_props.x, atan_props.eps, (number_fields.+)(atan_props.n, 1))"
    "nil")))
 (iter_bound 0
  (iter_bound-1 nil 3633713098
   ("" (skeep)
    (("" (inst 2 "bound_iter(x,eps,0)")
      (("1" (typepred "bound_iter(x,eps,0)")
        (("1" (ground) nil nil)
         ("2" (rewrite "expt_x1") (("2" (ground) nil nil)) nil)
         ("3" (ground) nil nil))
        nil)
       ("2" (rewrite "expt_x1") (("2" (ground) nil nil)) nil)
       ("3" (ground) nil nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (x skolem-const-decl "{x: nnreal | x <= 1}" atan_props nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (eps skolem-const-decl "posreal" atan_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (bound_iter def-decl "{nn: posnat |
   (FORALL (m: below(nn)): x ^ (2 * m + 1) / (2 * m + 1) > eps) AND
    x ^ (2 * nn + 1) / (2 * nn + 1) <= eps}" atan_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_exp application-judgement "posreal" exponentiation nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (atan_alt_bound1 0
  (atan_alt_bound1-2 "" 3634985553
   ("" (skeep)
    (("" (expand "atan_alt")
      ((""
        (name-replace "X" "IF x = 1 THEN 1
                                    ELSE best_rational(x, min(eps / 3 + x, 1))
                                    ENDIF")
        (("1"
          (case-replace
           "atan(x) - atan_approx_iter_alt(X, eps / 3, 0, 0, X) = (atan(x) - atan(X)) + (atan(X)-atan_approx_iter_alt(X, eps / 3, 0, 0, X))")
          (("1" (hide -1)
            (("1" (lemma "triangle")
              (("1"
                (inst -1 "(atan(x) - atan(X))"
                 "(atan(X) - atan_approx_iter_alt(X, eps / 3, 0, 0, X))")
                (("1" (case "abs(atan(x) - atan(X))<=eps/3")
                  (("1"
                    (case "abs((atan(X) - atan_approx_iter_alt(X, eps / 3, 0, 0, X)))<=2*eps/3")
                    (("1" (ground) nil nil)
                     ("2" (hide -)
                      (("2" (hide 2)
                        (("2" (case "X>=0 AND X<=1")
                          (("1" (flatten)
                            (("1" (lemma "iter_bound")
                              (("1"
                                (inst -1 "X" "eps/3")
                                (("1"
                                  (splash -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (lemma "atan_alt_series")
                                      (("1"
                                        (inst -1 "X" "eps/3" "n")
                                        (("1"
                                          (skeep :preds? t)
                                          (("1"
                                            (replaces -3)
                                            (("1"
                                              (lemma "triangle")
                                              (("1"
                                                (inst
                                                 -1
                                                 "(atan(X) - atan_series_n(X, n - 1))"
                                                 "-delt")
                                                (("1"
                                                  (case
                                                   "abs(-delt)<=eps/3")
                                                  (("1"
                                                    (case
                                                     "abs((atan(X) - atan_series_n(X, n - 1)))<=eps/3")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "atan_series")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "n-1 "
                                                         "X")
                                                        (("2"
                                                          (simplify -1)
                                                          (("2"
                                                            (case
                                                             "X=0")
                                                            (("1"
                                                              (replaces
                                                               -1)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case-replace
                                                               "abs(X ^ (1 + 2 * n)) / (1 + 2 * n) = X ^ (2 * n + 1) / (2 * n + 1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "X ^ (1 + 2 * n) >= 0")
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-8
                                                                    1))
                                                                  (("2"
                                                                    (case
                                                                     "X=0")
                                                                    (("1"
                                                                      (replaces
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (expand
                                                                           "expt")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "NOT X > 0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -2
                                                                         1)
                                                                        (("2"
                                                                          (lemma
                                                                           "nnreal_expt")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "1+2*n"
                                                                             "X")
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -2 -3))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "atan_approx_iter_alt")
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lemma
                                           "atan_strict_increasing")
                                          (("2"
                                            (expand
                                             "strict_increasing?")
                                            (("2"
                                              (inst -1 "0" "X")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (rewrite "atan_0")
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "atan_bnds")
                                                        (("1"
                                                          (inst -1 "X")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "X=0")
                                                  (("1"
                                                    (replaces -1)
                                                    (("1"
                                                      (rewrite
                                                       "atan_0")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "X")
                            (("2" (hide 2) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide-all-but 1)
                      (("3" (grind)
                        (("3" (expand "X") (("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 2))
                    (("2"
                      (case "EXISTS ((ep:nnreal | ep<=eps/3)): X= x+ep")
                      (("1" (skeep)
                        (("1" (replaces -1)
                          (("1" (typepred (ep))
                            (("1" (lemma "atan_of_sum")
                              (("1"
                                (inst -1 "x" "ep")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (grind :exclude "atan")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "X")
                        (("2" (hide 2)
                          (("2" (case "x=1")
                            (("1" (inst 1 "0") (("1" (ground) nil nil))
                              nil)
                             ("2"
                              (typepred
                               "best_rational(x, min(eps / 3 + x, 1))")
                              (("1"
                                (ground)
                                (("1"
                                  (inst
                                   2
                                   "best_rational(x, min(eps / 3 + x, 1))-x")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (ground)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "X") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil)
           ("3" (expand "X")
            (("3" (lift-if 1) (("3" (ground) nil nil)) nil)) nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (atan_alt const-decl "real" fast_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atan_approx_iter_alt def-decl "real" fast_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (triangle formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (iter_bound formula-decl nil atan_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_exp application-judgement "rat" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (^ const-decl "real" exponentiation nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (atan_alt_series formula-decl nil atan_props nil)
    (atan_series formula-decl nil atan "trig/")
    (rat_abs_is_nonneg application-judgement "{r: nonneg_rat | r >= q}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_expt judgement-tcc nil exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (zero_hat formula-decl nil exponent_props "reals/")
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (atan_series_n const-decl "real" atan "trig/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (eps skolem-const-decl "posreal" atan_props nil)
    (n skolem-const-decl "posnat" atan_props nil)
    (atan_strict_increasing formula-decl nil atan "trig/")
    (atan_0 formula-decl nil atan "trig/")
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (atan_bnds formula-decl nil atan "trig/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (expt_x1 formula-decl nil exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan_of_sum formula-decl nil atan_props nil)
    (X skolem-const-decl "rational" atan_props nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)
  (atan_alt_bound1-1 nil 3633734539
   ("" (skeep)
    (("" (lemma "iter_bound")
      (("" (inst -1 "x" "eps")
        (("" (splash -1)
          (("1" (skeep)
            (("1" (lemma "atan_alt_series")
              (("1" (inst -1 "x" "eps" "n")
                (("1" (replaces -1)
                  (("1" (lemma "atan_series")
                    (("1" (inst -1 "n-1" "x")
                      (("1" (simplify -1)
                        (("1" (expand "abs" -1 2)
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground) nil nil))
                nil))
              nil))
            nil)
           ("2" (expand "atan_alt")
            (("2" (expand "atan_approx_iter_alt")
              (("2" (lift-if 1)
                (("2" (ground)
                  (("2" (case "x=0")
                    (("1" (ground)
                      (("1" (replace -1)
                        (("1" (ground)
                          (("1" (rewrite "atan_0")
                            (("1" (ground)
                              (("1"
                                (expand "abs")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "atan_strict_increasing")
                      (("2" (expand "strict_increasing?")
                        (("2" (inst -1 "0" "x")
                          (("2" (ground)
                            (("2" (rewrite "atan_0")
                              (("2"
                                (expand "abs")
                                (("2"
                                  (ground)
                                  (("2"
                                    (lemma "atan_bnds")
                                    (("2"
                                      (inst -1 "x")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (atan_series formula-decl nil atan "trig/")
    (atan_approx_iter_alt def-decl "real" fast_approx nil)
    (atan_strict_increasing formula-decl nil atan "trig/")
    (atan_bnds formula-decl nil atan "trig/")
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (atan_0 formula-decl nil atan "trig/")
    (atan_alt const-decl "real" fast_approx nil))
   shostak))
 (atan_alt_bound2 0
  (atan_alt_bound2-1 nil 3633735575
   ("" (skeep)
    (("" (expand "atan_approx_pos_le1_alt")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_alt_bound1") nil nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "atan_reduce_close")
              (("2" (inst -1 "x" "eps/x")
                (("2" (lemma "triangle")
                  (("2"
                    (inst -1
                     "atan(x) -2 * atan(reduce_approx(x, eps / x))"
                     "2 * atan(reduce_approx(x, eps / x)) -  2 * atan_alt(reduce_approx(x, eps / x), eps / 4)")
                    (("1" (simplify 1)
                      (("1"
                        (case "atan(x) - 2 * atan(reduce_approx(x, eps / x)) +
                      (2 * atan(reduce_approx(x, eps / x)) -
                        2 * atan_alt(reduce_approx(x, eps / x), eps / 4)) = atan(x) - 2 * atan_alt(reduce_approx(x, eps / x), eps / 4)")
                        (("1" (replaces -1)
                          (("1"
                            (case "(2 * atan(reduce_approx(x, eps / x)) -
                          2 * atan_alt(reduce_approx(x, eps / x), eps / 4)) = 2*(atan(reduce_approx(x, eps / x)) -
                           atan_alt(reduce_approx(x, eps / x), eps / 4))")
                            (("1" (replaces -1)
                              (("1"
                                (rewrite "abs_mult")
                                (("1"
                                  (expand "abs" -1 3)
                                  (("1"
                                    (lemma "atan_alt_bound1")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (move-terms -3 l 1)
                                          (("1"
                                            (expand "abs" -2 3)
                                            (("1"
                                              (lift-if -2)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (move-terms -4 r 1)
                                                    (("2"
                                                      (case
                                                       "x * (eps / x) / 2 = eps/2")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "reduce_approx")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil)
                         ("3" (expand "reduce_approx")
                          (("3" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "reduce_approx")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_approx_pos_le1_alt const-decl "real" fast_approx nil)
    (atan_alt_bound1 formula-decl nil atan_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (atan_reduce_close formula-decl nil atan_props nil)
    (triangle formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (atan_alt const-decl "real" fast_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (cos const-decl "real" sincos_def "trig/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eps skolem-const-decl "posreal" atan_props nil)
    (x skolem-const-decl "{x: posreal | x <= 1}" atan_props nil)
    (reduce_approx const-decl "real" fast_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (atan_alt_bound3 0
  (atan_alt_bound3-1 nil 3633738203
   ("" (skeep)
    (("" (expand "atan_approx_pos")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_alt_bound2") nil nil))
            nil)
           ("2" (flatten)
            (("2" (lemma "atan_inv")
              (("2" (inst -1 "x")
                (("2" (move-terms -1 r 2)
                  (("2" (move-terms -1 l 1)
                    (("2" (replaces -1)
                      (("2"
                        (case "pi / 2 - atan(1 / x) -
                    (pihalf - atan_approx_pos_le1_alt(1 / x,  eps / 2)) = (pi / 2 - pihalf) + (atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))")
                        (("1" (replaces -1)
                          (("1" (lemma "triangle")
                            (("1"
                              (inst -1 "(pi / 2 - pihalf)"
                               "(atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))")
                              (("1"
                                (typepred (pihalf))
                                (("1"
                                  (case
                                   "abs((atan_approx_pos_le1_alt(1 / x,  eps / 2) - atan(1 / x))) = abs((atan(1 / x)-atan_approx_pos_le1_alt(1 / x,  eps / 2) ))")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (lemma "atan_alt_bound2")
                                      (("1"
                                        (inst?)
                                        (("1" (ground) nil nil)
                                         ("2" (cross-mult) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (ground)
                                    (("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "abs")
                                        (("2"
                                          (lift-if 1)
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_approx_pos const-decl "real" fast_approx nil)
    (atan_alt_bound2 formula-decl nil atan_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (atan_inv formula-decl nil atan "trig/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (triangle formula-decl nil real_props nil)
    (atan_approx_pos_le1_alt const-decl "real" fast_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak))
 (atan_fast_approx_bound 0
  (atan_fast_approx_bound-1 nil 3633739159
   ("" (skeep)
    (("" (expand "atan_fast_approx")
      (("" (lift-if 1)
        (("" (split 1)
          (("1" (flatten) (("1" (rewrite "atan_alt_bound3") nil nil))
            nil)
           ("2" (flatten)
            (("2" (split 2)
              (("1" (flatten)
                (("1" (replaces -1)
                  (("1" (rewrite "atan_0")
                    (("1" (ground)
                      (("1" (expand "abs") (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lemma "atan_neg")
                  (("2" (inst -1 "x")
                    (("2" (move-terms -1 l 1)
                      (("2" (move-terms -1 r 1)
                        (("2" (simplify 1)
                          (("2" (case "0 - -atan(x) = atan(x)")
                            (("1" (replaces -1)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (case
                                   "abs(-(atan(-x)) - -atan_approx_pos(-x, eps, pihalf)) = abs(atan(-x)  -atan_approx_pos(-x, eps, pihalf))")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (rewrite "atan_alt_bound3")
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "abs")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (lift-if 1)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (lift-if 2)
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atan_fast_approx const-decl "real" fast_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (atan_alt_bound3 formula-decl nil atan_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (atan_0 formula-decl nil atan "trig/")
    (atan_neg formula-decl nil atan "trig/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (atan_approx_pos const-decl "real" fast_approx nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   shostak))
 (pi_bound 0
  (pi_bound-1 nil 3633777417
   ("" (skeep)
    (("" (rewrite "pi_value")
      (("" (rewrite "atan_1")
        (("" (expand "pi_fast_approx")
          (("" (lemma "triangle")
            ((""
              (inst -1 "16 * atan(1/5)  -
           16 * atan_alt(1/5, eps / 20)"
               "4 * atan_alt(1/239, eps / 20)- 4 * atan(1/239)")
              ((""
                (case-replace
                 "16 * atan(1 / 5) - 16 * atan_alt(1 / 5, eps / 20) = 16 *( atan(1 / 5) - atan_alt(1 / 5, eps / 20))")
                (("1" (hide -1)
                  (("1" (rewrite "abs_mult")
                    (("1"
                      (case-replace
                       "abs(4 * atan_alt(1 / 239, eps / 20) - 4 * atan(1 / 239)) = abs(4 * (atan(1 / 239) - atan_alt(1 / 239, eps / 20) ))")
                      (("1" (hide -1)
                        (("1" (rewrite "abs_mult")
                          (("1" (expand "abs" -1 2)
                            (("1" (expand "abs" -1 3)
                              (("1"
                                (lemma "atan_alt_bound1")
                                (("1"
                                  (inst-cp -1 "1/5" "eps/20")
                                  (("1"
                                    (inst -1 "1/239" "eps/20")
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "abs")
                          (("2" (lift-if 1)
                            (("2" (ground)
                              (("2"
                                (lift-if 2)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pi_value formula-decl nil atan "trig/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pi_fast_approx const-decl "real" fast_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types "trig/")
    (tan_restrict const-decl "real" trig_basic "trig/")
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          "trig/")
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (atan_alt const-decl "real" fast_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (atan_alt_bound1 formula-decl nil atan_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs_mult formula-decl nil real_props nil)
    (triangle formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (atan_1 formula-decl nil atan "trig/")
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (pi_br_bound 0
  (pi_br_bound-1 nil 3633778087
   ("" (skeep)
    (("" (expand "pi_fast_approx_br")
      ((""
        (typepred "best_rational(pi_fast_approx(eps / 2) - eps / 2,
                           pi_fast_approx(eps / 2) + eps / 2)")
        ((""
          (case "abs(pi_fast_approx(eps/2) - best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                pi_fast_approx(eps / 2) + eps / 2) )<=eps/2")
          (("1" (hide (-2 -3))
            (("1"
              (case "abs(pi -
                    best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                  pi_fast_approx(eps / 2) + eps / 2)) = abs((pi - pi_fast_approx(eps/2)) + (pi_fast_approx(eps/2)-
                    best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                  pi_fast_approx(eps / 2) + eps / 2)))")
              (("1" (replace -1)
                (("1" (lemma "triangle")
                  (("1"
                    (inst -1 "(pi - pi_fast_approx(eps / 2))"
                     "            (pi_fast_approx(eps / 2) -
                    best_rational(pi_fast_approx(eps / 2) - eps / 2,
                                  pi_fast_approx(eps / 2) + eps / 2))")
                    (("1" (lemma "pi_bound")
                      (("1" (inst -1 "eps/2") (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground) nil nil))
              nil))
            nil)
           ("2" (expand "abs")
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (ground) nil nil)
                 ("2" (flatten) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_fast_approx_br const-decl "real" fast_approx nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cos const-decl "real" sincos_def "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (triangle formula-decl nil real_props nil)
    (pi_bound formula-decl nil atan_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_fast_approx const-decl "real" fast_approx nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}"
     best_rational "reals/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (pihalf_bound 0
  (pihalf_bound-1 nil 3633779379
   ("" (skeep)
    (("" (expand "pihalf_fast_approx")
      ((""
        (case " abs(pi / 2 - pi_fast_approx(eps) / 2) =  abs(1/2*(pi  - pi_fast_approx(eps)))")
        (("1" (replaces -1)
          (("1" (rewrite "abs_mult")
            (("1" (expand "abs" 1 1)
              (("1" (cross-mult)
                (("1" (lemma "pi_bound")
                  (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (ground) nil nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (pihalf_fast_approx const-decl "real" fast_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (pi_bound formula-decl nil atan_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (abs_mult formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_fast_approx const-decl "real" fast_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (pihalf_br_bound 0
  (pihalf_br_bound-1 nil 3633779631
   ("" (skeep)
    (("" (expand "pihalf_fast_approx_br")
      ((""
        (case " abs(pi / 2 - pi_fast_approx_br(eps) / 2) =  abs(1/2*(pi  - pi_fast_approx_br(eps)))")
        (("1" (replaces -1)
          (("1" (rewrite "abs_mult")
            (("1" (expand "abs" 1 1)
              (("1" (cross-mult)
                (("1" (lemma "pi_br_bound")
                  (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (ground) nil nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (pihalf_fast_approx_br const-decl "real" fast_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (pi_br_bound formula-decl nil atan_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (abs_mult formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (cos const-decl "real" sincos_def "trig/")
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def "trig/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi_fast_approx_br const-decl "real" fast_approx nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def "trig/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))


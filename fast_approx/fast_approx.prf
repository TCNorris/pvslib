(fast_approx
 (sqrt_newton_step_fast_approx_TCC1 0
  (sqrt_newton_step_fast_approx_TCC1-1 nil 3632745805
   ("" (subtype-tcc) nil nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (sqrt_newton_step_fast_approx subtype "fast_approx.sqrtnewt"
    "{r2 | reals.<((number_fields.-)(fast_approx.sqrtnewt, fast_approx.eps), best_rational.r2)}")))
 (sqrt_newton_step_fast_approx_TCC2 0
  (sqrt_newton_step_fast_approx_TCC2-1 nil 3632745805
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}" best_rational
     reals)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil (sqrt_newton_step_fast_approx subtype "fast_approx.brnewt" "posreal")))
 (sqrt_newton_fast_approx_TCC1 0
  (sqrt_newton_fast_approx_TCC1-1 nil 3632746976
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (sqrt_newton_fast_approx subtype
    "number_fields./(((number_fields.-)(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.X)), fast_approx.eps)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (sqrt_newton_fast_approx_TCC2 0
  (sqrt_newton_fast_approx_TCC2-1 nil 3632746976
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (sqrt_newton_fast_approx subtype
    "number_fields./(((number_fields.-)(number_fields.*(fast_approx.z1`2, fast_approx.z1`2), fast_approx.z1`1)), fast_approx.z1`3)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (sqrt_newton_fast_approx_TCC3 0
  (sqrt_newton_fast_approx_TCC3-2 "" 3790099947
   ("" (skeep) (("" (ground) nil nil)) nil) nil shostak
   (sqrt_newton_fast_approx subtype "fast_approx.Y"
    "{z: real_types.posreal | booleans.AND(reals.>=(number_fields.*(z, z), fast_approx.X), reals.<=((number_fields.-)(number_fields.*(z, z), fast_approx.X), fast_approx.eps))}"))
  (sqrt_newton_fast_approx_TCC3-1 nil 3632761643
   ("" (skeep)
    (("" (expand "sqrt_newton_step_fast_approx")
      (("" (ground)
        (("" (lift-if 2)
          (("" (ground)
            (("" (hide 1)
              (("" (case-replace "(X/Y+Y) = (X+Y*Y)/Y")
                (("1" (case-replace " (X + Y * Y) / Y / 2 = (X+Y*Y)/(2*Y)")
                  (("1"
                    (case-replace
                     "(X + Y * Y) / (2 * Y) * ((X + Y * Y) / (2 * Y)) = ((X + Y * Y) *(X + Y * Y)) /  (4 * Y*Y)")
                    (("1" (move-terms 1 r 1)
                      (("1"
                        (case-replace
                         " ((X + Y * Y) * (X + Y * Y)) / (4 * Y * Y) - X = ((X + Y * Y) * (X + Y * Y)-4*X*Y*Y) / (4 * Y * Y)")
                        (("1"
                          (case-replace
                           "(X + Y * Y) * (X + Y * Y) - 4 * X * Y * Y = (Y*Y - X)*(Y*Y-X)")
                          (("1"
                            (case-replace
                             "(Y * Y - X) * (Y * Y - X) = abs((Y * Y - X) * (Y * Y - X))")
                            (("1" (cross-mult 1) nil nil)
                             ("2" (rewrite "abs_square" 1)
                              (("2" (ground) nil nil)) nil))
                            nil)
                           ("2" (ground) nil nil))
                          nil)
                         ("2" (cross-mult 1) nil nil))
                        nil))
                      nil)
                     ("2" (cross-mult 1) nil nil))
                    nil)
                   ("2" (cross-mult) nil nil))
                  nil)
                 ("2" (cross-mult 1) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (sqrt_newton_fast_approx subtype "fast_approx.Y"
    "{z: real_types.posreal | booleans.AND(reals.>=(number_fields.*(z, z), fast_approx.X), reals.<=((number_fields.-)(number_fields.*(z, z), fast_approx.X), fast_approx.eps))}")))
 (sqrt_newton_fast_approx_TCC4 0
  (sqrt_newton_fast_approx_TCC4-1 nil 3632761643
   ("" (skeep :preds? t)
    (("" (expand "sqrt_newton_step_fast_approx")
      (("" (lift-if 2)
        (("" (ground)
          (("" (field 2)
            (("" (move-terms 2 r 1)
              (("" (simplify 2)
                ((""
                  (case-replace
                   "(Y * Y * Y * Y) - 2 * (X * Y * Y) + (X * X) = (Y*Y-X)*(Y*Y-X)")
                  (("1" (lemma "abs_square")
                    (("1" (inst -1 "(Y*Y-X)")
                      (("1" (replaces -1 :dir rl) (("1" (ground) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (field 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sqrt_newton_step_fast_approx const-decl "posreal" fast_approx nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs_square formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (sqrt_newton_fast_approx subtype
    "fast_approx.sqrt_newton_step_fast_approx(fast_approx.X, fast_approx.Y, number_fields./(fast_approx.eps, 2))"
    "{Y | reals.>=(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.X)}")))
 (sqrt_newton_fast_approx_TCC5 0
  (sqrt_newton_fast_approx_TCC5-1 nil 3632833805
   ("" (skeep :preds? t)
    (("" (lift-if 2)
      (("" (split 2)
        (("1" (flatten) (("1" (ground) nil nil)) nil)
         ("2" (flatten)
          (("2" (name "newt" "(Y+X/Y)/2")
            (("2" (case "newt>=sqrt_newton_step_fast_approx(X, Y, eps / 2)")
              (("1" (lemma "log_int_le")
                (("1" (mult-ineq -2 -2)
                  (("1"
                    (case "(sqrt_newton_step_fast_approx(X, Y, eps / 2) *
                  sqrt_newton_step_fast_approx(X, Y, eps / 2)
                  - X)/eps
                  >1")
                    (("1" (case "(newt*newt-X)/eps >1")
                      (("1"
                        (inst -4 "4"
                         "(sqrt_newton_step_fast_approx(X, Y, eps / 2) *
                  sqrt_newton_step_fast_approx(X, Y, eps / 2)-X)/eps"
                         "(newt*newt-X)/eps")
                        (("1" (ground)
                          (("1" (expand "log_int" -1)
                            (("1"
                              (case "log_nat((newt * newt - X) / eps, 4)`1<log_nat((Y * Y - X) / eps, 4)`1")
                              (("1" (ground) nil nil)
                               ("2" (hide 3)
                                (("2" (hide (-1 -3 -4 -5))
                                  (("2"
                                    (case "newt*newt-X = (((Y*Y-X)*(Y*Y-X))/(Y*Y))/4")
                                    (("1" (replaces -1)
                                      (("1"
                                        (lemma "log_nat_incr")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (field 1)
                                              (("1"
                                                (grind-reals 1)
                                                (("1"
                                                  (field 1)
                                                  (("1"
                                                    (both-sides
                                                     "-"
                                                     "Y*Y*Y*Y"
                                                     1)
                                                    (("1"
                                                      (simplify 1)
                                                      (("1"
                                                        (both-sides
                                                         "+"
                                                         "X*Y*Y"
                                                         1)
                                                        (("1"
                                                          (simplify 1)
                                                          (("1"
                                                            (both-sides
                                                             "*"
                                                             "X"
                                                             -8)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (expand "newt")
                                        (("2" (field 1) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cross-mult 1) nil nil))
                          nil)
                         ("2" (ground) nil nil) ("3" (ground) nil nil))
                        nil)
                       ("2" (cross-mult) nil nil))
                      nil)
                     ("2" (cross-mult 1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "sqrt_newton_step_fast_approx")
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (flatten)
                        (("1"
                          (typepred
                           "best_rational((X / Y + Y) / 2 - eps / 2, (X / Y + Y) / 2)")
                          (("1" (ground)
                            (("1" (expand "newt") (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "newt") (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sqrt_newton_step_fast_approx const-decl "posreal" fast_approx nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (div_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (log_nat_incr formula-decl nil log_nat reals)
    (log_int const-decl
     "[z: int, {y: real | y < p AND y >= 1 AND x = p ^ z * y}]" log_int reals)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (newt skolem-const-decl "posreal" fast_approx nil)
    (eps skolem-const-decl "posreal" fast_approx nil)
    (Y skolem-const-decl "{Y | Y * Y >= X}" fast_approx nil)
    (X skolem-const-decl "posreal" fast_approx nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (log_int_le formula-decl nil log_int reals)
    (best_rational const-decl "{q: rat | r1 <= q AND q <= r2}" best_rational
     reals)
    (rat nonempty-type-eq-decl nil rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (sqrt_newton_fast_approx termination
    "fast_approx.sqrt_newton_fast_approx(fast_approx.X, fast_approx.sqrt_newton_step_fast_approx(fast_approx.X, fast_approx.Y, number_fields./(fast_approx.eps, 2)), fast_approx.eps)"
    "nil")))
 (sqrt_fast_approx_gen_TCC1 0
  (sqrt_fast_approx_gen_TCC1-1 nil 3632834727 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (sqrt_fast_approx_gen subtype "fast_approx.x" "posreal")))
 (sqrt_fast_approx_gen_TCC2 0
  (sqrt_fast_approx_gen_TCC2-1 nil 3632834727
   ("" (skeep)
    (("" (skeep)
      (("" (expand "sqrt_newton_step_fast_approx")
        (("" (lift-if 2)
          (("" (ground)
            (("" (field 2)
              (("" (move-terms 2 r 1)
                (("" (simplify 2)
                  ((""
                    (case-replace
                     "(X * X * X * X) - 2 * (X * X * x) + (x * x) = (X*X-x)*(X*X-x)")
                    (("1" (lemma "abs_square")
                      (("1" (inst -1 "(X*X-x)")
                        (("1" (replaces -1 :dir rl) (("1" (ground) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (field 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs_square formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (sqrt_newton_step_fast_approx const-decl "posreal" fast_approx nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil
   (sqrt_fast_approx_gen subtype
    "fast_approx.sqrt_newton_step_fast_approx(fast_approx.x, fast_approx.X, fast_approx.delta)"
    "{Y | reals.>=(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.x)}")))
 (sqrt_fast_approx_TCC1 0
  (sqrt_fast_approx_TCC1-1 nil 3632746976 ("" (subtype-tcc) nil nil) nil nil
   (sqrt_fast_approx subtype "fast_approx.X" "posreal")))
 (sqrt_fast_approx_det_TCC1 0
  (sqrt_fast_approx_det_TCC1-1 nil 3633183920
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (expand "sqrt_newton_step_fast_approx")
          (("" (lift-if 2)
            (("" (split 2)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (field 2)
                  (("2" (move-terms 2 r 1)
                    (("2" (simplify 2)
                      (("2"
                        (case "(M * M * M * M) - 2 * (M * M * x) + (x * x) = (M*M-x)*(M*M-x)")
                        (("1" (replaces -1)
                          (("1" (lemma "abs_square")
                            (("1" (inst -1 "(M*M-x)")
                              (("1" (replaces -1 :dir rl)
                                (("1" (expand "abs") (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (sqrt_newton_step_fast_approx const-decl "posreal" fast_approx nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (nonneg_rat nonempty-type-eq-decl nil rationals nil)
    (> const-decl "bool" reals nil)
    (posrat nonempty-type-eq-decl nil rationals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (abs_square formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil
   (sqrt_fast_approx_det subtype
    "fast_approx.sqrt_newton_step_fast_approx(fast_approx.x, fast_approx.M, fast_approx.delta)"
    "{Y | reals.>=(number_fields.*(fast_approx.Y, fast_approx.Y), fast_approx.x)}")))
 (facto_it_TCC1 0
  (facto_it_TCC1-1 nil 3632747390 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (facto_it subtype "(number_fields.-)(fast_approx.n, 1)" "nat")))
 (facto_it_TCC2 0
  (facto_it_TCC2-1 nil 3632747390 ("" (termination-tcc) nil nil) nil nil
   (facto_it termination
    "fast_approx.facto_it((number_fields.-)(fast_approx.n, 1), number_fields.*(fast_approx.n, fast_approx.m))"
    "nil")))
 (pm1_TCC1 0
  (pm1_TCC1-1 nil 3632747390 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil (pm1 subtype "(number_fields.-)(fast_approx.n, 2)" "nat")))
 (pm1_TCC2 0
  (pm1_TCC2-1 nil 3632747390 ("" (termination-tcc) nil nil) nil nil
   (pm1 termination "fast_approx.pm1((number_fields.-)(fast_approx.n, 2))"
    "nil")))
 (sin_approx_iter_TCC1 0
  (sin_approx_iter_TCC1-1 nil 3632747390 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (sin_approx_iter subtype
    "(number_fields.*(number_fields.*(((number_fields.+)(number_fields.*(2, fast_approx.n), 1)), 2), fast_approx.n))"
    "nznum")))
 (sin_approx_iter_alt_TCC1 0
  (sin_approx_iter_alt_TCC1-1 nil 3633258031 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (sin_approx_iter_alt subtype "(number_fields.-)(8, fast_approx.n)" "nat")))
 (sin_approx_iter_alt_TCC2 0
  (sin_approx_iter_alt_TCC2-1 nil 3633258031
   ("" (skeep) (("" (flip-ineq 2) (("" (cross-mult) nil nil)) nil)) nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil
   (sin_approx_iter_alt subtype
    "number_fields./(fast_approx.c, fast_approx.eps)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (sin_approx_iter_alt_TCC3 0
  (sin_approx_iter_alt_TCC3-1 nil 3633258031
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sin_approx_iter_alt subtype "(number_fields.-)(8, fast_approx.z`3)"
    "nat")))
 (sin_approx_iter_alt_TCC4 0
  (sin_approx_iter_alt_TCC4-1 nil 3633258031
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   nil
   (sin_approx_iter_alt subtype
    "number_fields./(fast_approx.z`5, fast_approx.z`2)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (sin_approx_iter_alt_TCC5 0
  (sin_approx_iter_alt_TCC5-2 "" 3790099964
   ("" (skeep) (("" (ground) nil nil)) nil) nil shostak
   (sin_approx_iter_alt subtype "(number_fields.-)(8, fast_approx.n)" "nat"))
  (sin_approx_iter_alt_TCC5-1 nil 3633258031
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (flatten)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
                nil))
              nil)
             ("2" (ground)
              (("2" (lift-if 2)
                (("2" (split 2)
                  (("1" (flatten) (("1" (postpone) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (simplify 2)
                      (("2" (move-terms 2 r 1)
                        (("2" (ground) (("2" (postpone) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (sin_approx_iter_alt subtype "(number_fields.-)(8, fast_approx.n)" "nat")))
 (sin_approx_iter_alt_TCC6 0
  (sin_approx_iter_alt_TCC6-1 nil 3633349106
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   nil
   (sin_approx_iter_alt subtype
    "number_fields./(fast_approx.c, fast_approx.eps)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (sin_approx_iter_alt_TCC7 0
  (sin_approx_iter_alt_TCC7-1 nil 3633349106
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (flatten)
              (("1" (expand "lex2")
                (("1" (ground)
                  (("1" (ground)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (ground)
                          (("1" (lift-if 1)
                            (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (ground)
                (("1" (grind) nil nil)
                 ("2" (ground)
                  (("2" (lift-if 2)
                    (("2" (ground)
                      (("1" (grind) nil nil)
                       ("2"
                        (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                        (("1" (grind) nil nil)
                         ("2" (hide (2 3 -2))
                          (("2" (lemma "log_nat_incr")
                            (("2" (inst -1 "4" "C/eps" "c/eps")
                              (("2" (ground)
                                (("2" (flip-ineq 3)
                                  (("2" (case "x/(2*(1+n))<=1/2")
                                    (("1" (case "x/(2*n+3)<= x/(2*(1+n))")
                                      (("1"
                                        (case "x/(2*n+3)<= 1/2")
                                        (("1"
                                          (case
                                           "x*x/(6 + 6 * n + (4 * (n * n) + 4 * n)) <= 1/4")
                                          (("1"
                                            (case "c<=c")
                                            (("1"
                                              (mult-ineq -1 -2)
                                              (("1"
                                                (case "C <= c/4")
                                                (("1"
                                                  (ground)
                                                  (("1" (cross-mult) nil nil))
                                                  nil)
                                                 ("2" (ground) nil nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (mult-ineq -1 -3)
                                            (("2"
                                              (ground)
                                              (("2" (cross-mult) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel4 formula-decl nil real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (<= const-decl "bool" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (log_nat_incr formula-decl nil log_nat reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pm1 def-decl "int" fast_approx nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (< def-decl "bool" ordinals nil) (lex2 const-decl "ordinal" lex2 nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (sin_approx_iter_alt termination
    "fast_approx.sin_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.B, fast_approx.C)"
    "nil")))
 (sin_fast_approx_TCC1 0
  (sin_fast_approx_TCC1-1 nil 3633350903 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (sin_fast_approx subtype "fast_approx.a"
    "{x | reals.<(fast_approx.x, 7)}")))
 (sin_fast_approx_TCC2 0
  (sin_fast_approx_TCC2-1 nil 3633350903 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (sin_fast_approx subtype "fast_approx.a" "nnreal")))
 (sin_fast_approx_TCC3 0
  (sin_fast_approx_TCC3-1 nil 3633350903
   ("" (skeep)
    (("" (grind) (("" (typepred (a)) (("" (grind) nil nil)) nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil
   (sin_fast_approx subtype "(number_fields.-)(fast_approx.a)"
    "{x | reals.<(fast_approx.x, 7)}")))
 (sin_fast_approx_TCC4 0
  (sin_fast_approx_TCC4-1 nil 3633350903 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (sin_fast_approx subtype "(number_fields.-)(fast_approx.a)" "nnreal")))
 (cos_approx_iter_alt_TCC1 0
  (cos_approx_iter_alt_TCC1-2 "" 3790099966
   ("" (skeep) (("" (ground) nil nil)) nil) nil shostak
   (cos_approx_iter_alt subtype "(number_fields.-)(8, fast_approx.z`3)"
    "nat"))
  (cos_approx_iter_alt_TCC1-1 nil 3633351360
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (flatten)
              (("1" (expand "lex2")
                (("1" (ground)
                  (("1" (ground)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (ground)
                          (("1" (lift-if 1)
                            (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (ground)
                (("1" (grind) nil nil)
                 ("2" (ground)
                  (("2" (lift-if 2)
                    (("2" (ground)
                      (("1" (grind) nil nil)
                       ("2"
                        (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                        (("1" (grind) nil nil)
                         ("2" (hide (4 3 -2))
                          (("2" (lemma "log_nat_incr")
                            (("2" (inst -1 "4" "C/eps" "c/eps")
                              (("2" (ground)
                                (("2" (flip-ineq 3)
                                  (("2" (case "x/(2*(1+n))<=1/2")
                                    (("1" (case "x/(2*n+1)<= 1/2")
                                      (("1"
                                        (case
                                         "x * x / (2 + 2 * n + (4 * (n * n) + 4 * n))<=1/4")
                                        (("1"
                                          (case "c<=c")
                                          (("1"
                                            (mult-ineq -1 -2)
                                            (("1"
                                              (case "C <= c/4")
                                              (("1"
                                                (ground)
                                                (("1" (cross-mult) nil nil))
                                                nil)
                                               ("2" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (mult-ineq -1 -2)
                                          (("2"
                                            (ground)
                                            (("2" (cross-mult) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (cos_approx_iter_alt subtype "(number_fields.-)(8, fast_approx.z`3)"
    "nat")))
 (cos_approx_iter_alt_TCC2 0
  (cos_approx_iter_alt_TCC2-1 nil 3634296180
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil))
   nil
   (cos_approx_iter_alt subtype
    "number_fields./(fast_approx.z`5, fast_approx.z`2)"
    "{x: reals.real | reals.>=(x, 1)}")))
 (cos_approx_iter_alt_TCC3 0
  (cos_approx_iter_alt_TCC3-2 "" 3790099966
   ("" (skeep)
    (("" (replaces -1)
      (("" (typepred (c))
        (("" (case "forall (nn:nat): pm1(nn)/=0")
          (("1" (inst -1 "n") (("1" (ground) nil nil)) nil)
           ("2" (induct "nn" 1 NAT_induction)
            (("2" (skeep)
              (("2" (expand "pm1" -2)
                (("2" (lift-if -2)
                  (("2" (ground)
                    (("2" (inst -2 "j-2") (("2" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (cos_approx_iter_alt subtype
    "(number_fields.+)(fast_approx.b, number_fields.*(fast_approx.pm1(fast_approx.n), fast_approx.c))"
    "nzreal"))
  (cos_approx_iter_alt_TCC3-1 nil 3634296180
   ("" (skeep)
    (("" (replaces -3)
      (("" (replaces -1)
        (("" (typepred (c))
          (("" (case "forall (nn:nat): pm1(nn)/=0")
            (("1" (inst -1 "n") (("1" (ground) nil nil)) nil)
             ("2" (induct "nn" 1 NAT_induction)
              (("2" (skeep)
                (("2" (expand "pm1" -2)
                  (("2" (lift-if -2)
                    (("2" (ground)
                      (("2" (inst -2 "j-2") (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (pm1 def-decl "int" fast_approx nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (cos_approx_iter_alt subtype
    "(number_fields.+)(fast_approx.b, number_fields.*(fast_approx.pm1(fast_approx.n), fast_approx.c))"
    "nzreal")))
 (cos_approx_iter_alt_TCC4 0
  (cos_approx_iter_alt_TCC4-1 nil 3634296180
   ("" (skeep)
    (("" (skeep)
      (("" (typepred (c))
        (("" (skeep)
          (("" (typepred (X))
            (("" (case "c>0")
              (("1" (case "1/((2 * n + 1) * 2 * (n + 1))>0")
                (("1" (mult-ineq -2 -4)
                  (("1" (mult-ineq -1 -5)
                    (("1" (mult-ineq -1 -3) (("1" (ground) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (cross-mult 1) nil nil))
                nil)
               ("2" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (cos_approx_iter_alt subtype "fast_approx.C" "{c | fast_approx.c /= 0}")))
 (cos_approx_iter_alt_TCC5 0
  (cos_approx_iter_alt_TCC5-1 nil 3634296180
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (flatten)
              (("1" (expand "lex2")
                (("1" (ground)
                  (("1" (ground)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (ground)
                          (("1" (lift-if 1)
                            (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                          nil)
                         ("2" (flatten) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (ground)
                (("1" (grind) nil nil)
                 ("2" (ground)
                  (("2" (lift-if 2)
                    (("2" (ground)
                      (("1" (grind) nil nil)
                       ("2"
                        (case "log_nat(C / eps, 4)`1< log_nat(c / eps, 4)`1")
                        (("1" (grind) nil nil)
                         ("2" (hide (4 3 -2))
                          (("2" (lemma "log_nat_incr")
                            (("2" (inst -1 "4" "C/eps" "c/eps")
                              (("2" (ground)
                                (("2" (flip-ineq 3)
                                  (("2" (case "X/(2*(1+n))<=1/2")
                                    (("1" (case "X/(2*n+1)<= 1/2")
                                      (("1"
                                        (case
                                         "X * X / (2 + 2 * n + (4 * (n * n) + 4 * n))<=1/4")
                                        (("1"
                                          (case "c<=c")
                                          (("1"
                                            (mult-ineq -1 -2)
                                            (("1"
                                              (case "C <= c/4")
                                              (("1"
                                                (ground)
                                                (("1" (cross-mult) nil nil))
                                                nil)
                                               ("2" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (mult-ineq -1 -2)
                                          (("2"
                                            (ground)
                                            (("2" (cross-mult) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (log_nat_incr formula-decl nil log_nat reals)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pm1 def-decl "int" fast_approx nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (< def-decl "bool" ordinals nil) (lex2 const-decl "ordinal" lex2 nil)
    (posint_exp application-judgement "posint" exponentiation nil))
   nil
   (cos_approx_iter_alt termination
    "fast_approx.cos_approx_iter_alt(fast_approx.X, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.B, fast_approx.C)"
    "nil")))
 (cos_fast_approx_TCC1 0
  (cos_fast_approx_TCC1-1 nil 3633353466 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cos_fast_approx subtype "real_defs.abs(fast_approx.a)"
    "{X | reals.<(fast_approx.X, 7)}")))
 (cos_approx_iter_TCC1 0
  (cos_approx_iter_TCC1-1 nil 3633356355 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (even_minus_even_is_even application-judgement "even_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil))
   nil
   (cos_approx_iter subtype
    "(number_fields.*(number_fields.*(2, fast_approx.n), ((number_fields.-)(number_fields.*(2, fast_approx.n), 1))))"
    "nznum")))
 (tan_pos_fast_approx_TCC1 0
  (tan_pos_fast_approx_TCC1-1 nil 3634387747
   ("" (skeep :preds? t)
    (("" (mult-ineq -7 -8)
      (("" (mult-ineq -6 -1) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (int_times_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (tan_pos_fast_approx subtype
    "number_fields./(number_fields.*(number_fields.*(fast_approx.eps, fast_approx.CosLow), ((number_fields.-)(fast_approx.CosLow, fast_approx.eps))), 2)"
    "posreal")))
 (tan_pos_fast_approx_TCC2 0
  (tan_pos_fast_approx_TCC2-1 nil 3634387747 ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil
   (tan_pos_fast_approx subtype "fast_approx.X"
    "{a | reals.<(real_defs.abs(fast_approx.a), 7)}")))
 (tan_pos_fast_approx_TCC3 0
  (tan_pos_fast_approx_TCC3-1 nil 3634387747 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (cos_fast_approx const-decl "real" fast_approx nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (tan_pos_fast_approx subtype
    "fast_approx.cos_fast_approx(fast_approx.X, fast_approx.d2)" "nznum")))
 (tan_pos_inst1_TCC1 0
  (tan_pos_inst1_TCC1-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (tan_pos_inst1 subtype "fast_approx.CL"
    "{CosLow: real_types.posreal | reals.>((number_fields.-)(CosLow, fast_approx.eps), 0)}")))
 (tan_pos_inst1_TCC2 0
  (tan_pos_inst1_TCC2-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (tan_pos_inst1 subtype
    "(number_fields.+)(fast_approx.CL, number_fields./(number_fields.*(number_fields.*(number_fields.*(fast_approx.X, fast_approx.X), fast_approx.X), fast_approx.X), 24))"
    "posreal")))
 (tan_pos_inst2_TCC1 0
  (tan_pos_inst2_TCC1-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (tan_pos_inst2 subtype "fast_approx.CL"
    "{CosLow: real_types.posreal | reals.>((number_fields.-)(CosLow, fast_approx.eps), 0)}")))
 (tan_pos_inst2_TCC2 0
  (tan_pos_inst2_TCC2-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (tan_pos_inst2 subtype "8"
    "{i: integers.int | booleans.OR(fast_approx.X /= 0, reals.>=(i, 0))}")))
 (tan_pos_inst2_TCC3 0
  (tan_pos_inst2_TCC3-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (^ const-decl "real" exponentiation nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_expt application-judgement "posreal" exponentiation nil))
   nil
   (tan_pos_inst2 subtype
    "(number_fields.+)(fast_approx.CL, number_fields./(exponentiation.^(fast_approx.X, 8), 40320))"
    "posreal")))
 (tan_pos_TCC1 0
  (tan_pos_TCC1-1 nil 3634393340
   ("" (skeep)
    (("" (mult-ineq -1 -1)
      (("" (simplify -1)
        (("" (move-terms 1 l 3)
          (("" (simplify) (("" (cross-mult) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat" rationals
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (tan_pos subtype "fast_approx.eps"
    "{eps | reals.>((number_fields.-)((number_fields.-)(1, fast_approx.eps), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2)), 0)}")))
 (tan_pos_TCC2 0
  (tan_pos_TCC2-1 nil 3634393340 ("" (skeep) (("" (metit *) nil nil)) nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (tan_pos subtype "fast_approx.eps"
    "{eps | reals.>((number_fields.+)((number_fields.-)((number_fields.-)((number_fields.-)(1, fast_approx.eps), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2)), number_fields.*(number_fields.*(number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 12)), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 30))), number_fields.*(number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 2), number_fields./(number_fields.*(fast_approx.X, fast_approx.X), 12))), 0)}")))
 (tan_pos_TCC3 0
  (tan_pos_TCC3-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil))
   nil
   (tan_pos subtype "fast_approx.X"
    "{a | reals.<(real_defs.abs(fast_approx.a), 7)}")))
 (tan_pos_TCC4 0
  (tan_pos_TCC4-1 nil 3634393340 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (cos_fast_approx const-decl "real" fast_approx nil))
   nil
   (tan_pos subtype
    "fast_approx.cos_fast_approx(fast_approx.X, fast_approx.eps)" "nznum")))
 (tan_fast_approx_TCC1 0
  (tan_fast_approx_TCC1-1 nil 3634481731 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (tan_fast_approx subtype "(number_fields.-)(fast_approx.a)"
    "{X | reals.<(fast_approx.X, 7)}")))
 (atan_approx_iter_alt_TCC1 0
  (atan_approx_iter_alt_TCC1-1 nil 3633357907 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil (atan_approx_iter_alt subtype "fast_approx.c" "nznum")))
 (atan_approx_iter_alt_TCC2 0
  (atan_approx_iter_alt_TCC2-1 nil 3633357907
   ("" (skeep)
    (("" (ground)
      (("" (flip-ineq 1)
        (("" (case "(1+2*n)/c < 1/eps")
          (("1" (move-terms -1 l 1) (("1" (ground) nil nil)) nil)
           ("2" (cross-mult) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (atan_approx_iter_alt subtype
    "floor_ceil.ceiling((number_fields.-)(number_fields./(1, fast_approx.eps), number_fields./(((number_fields.+)(number_fields.*(2, fast_approx.n), 1)), fast_approx.c)))"
    "naturalnumber")))
 (atan_approx_iter_alt_TCC3 0
  (atan_approx_iter_alt_TCC3-1 nil 3633360958 ("" (subtype-tcc) nil nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil (atan_approx_iter_alt subtype "fast_approx.z`5" "nznum")))
 (atan_approx_iter_alt_TCC4 0
  (atan_approx_iter_alt_TCC4-1 nil 3633360958 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat" rationals
     nil)
    (/= const-decl "boolean" notequal nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil (atan_approx_iter_alt subtype "fast_approx.c" "nznum")))
 (atan_approx_iter_alt_TCC5 0
  (atan_approx_iter_alt_TCC5-2 "" 3790099972
   ("" (skeep)
    (("" (skeep)
      (("" (typepred (c))
        (("" (typepred (x))
          (("" (mult-ineq -2 -2)
            (("" (mult-ineq -5 -1) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (atan_approx_iter_alt subtype
    "(number_fields.+)(fast_approx.B, number_fields./(fast_approx.eps, exponentiation.^(2, ((number_fields.+)(fast_approx.n, 1)))))"
    "{r2 | reals.<(fast_approx.B, best_rational.r2)}"))
  (atan_approx_iter_alt_TCC5-1 nil 3633360958
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred (c))
          (("" (typepred (x))
            (("" (mult-ineq -2 -2)
              (("" (mult-ineq -5 -1) (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil))
   nil
   (atan_approx_iter_alt subtype
    "(number_fields.+)(fast_approx.B, number_fields./(fast_approx.eps, exponentiation.^(2, ((number_fields.+)(fast_approx.n, 1)))))"
    "{r2 | reals.<(fast_approx.B, best_rational.r2)}")))
 (atan_approx_iter_alt_TCC6 0
  (atan_approx_iter_alt_TCC6-1 nil 3633360958
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (typepred (C))
            (("" (typepred (c))
              (("" (typepred (x))
                (("" (mult-ineq -2 -2)
                  (("" (mult-ineq -5 -1) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (atan_approx_iter_alt subtype "fast_approx.C"
    "{c | reals.<=(fast_approx.c, 1)}")))
 (atan_approx_iter_alt_TCC7 0
  (atan_approx_iter_alt_TCC7-2 nil 3634910906
   ("" (skeep)
    (("" (skeep)
      (("" (skeep)
        (("" (skeep)
          (("" (hide -3)
            (("" (lift-if 2)
              (("" (split 2)
                (("1" (flatten)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (ground) (("1" (replaces -3) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (replaces -2)
                          (("2" (flip-ineq 3)
                            (("2" (case "(1+2*n)/c < 1/eps")
                              (("1" (move-terms -1 l 1)
                                (("1" (ground) nil nil)) nil)
                               ("2" (cross-mult) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lift-if 2)
                    (("2" (split 2)
                      (("1" (flatten) (("1" (replaces -2) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (case "(2*(n+1)+1)/(c*x*x)>= (2*n+1)/c +2")
                          (("1" (swap-rel -1)
                            (("1" (move-terms -1 r 1)
                              (("1" (move-terms -1 l 1)
                                (("1" (move-terms -1 l 1)
                                  (("1" (both-sides "+" "1/eps" -1)
                                    (("1" (ground)
                                      (("1"
                                        (replaces -4 :dir rl)
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "(2*n+1)/(c*x*x)>=(2*n+1)/c")
                            (("1" (case "2/(c*x*x)>=2")
                              (("1" (ground) nil nil)
                               ("2" (typepred (x))
                                (("2" (typepred (c))
                                  (("2" (mult-ineq -4 -4)
                                    (("2" (mult-ineq -1 -3)
                                      (("2" (cross-mult) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred (x))
                              (("2" (mult-ineq -2 -2)
                                (("2" (cross-mult)
                                  (("2"
                                    (case-replace
                                     "2 * (c * n * x * x) = (2 *(c * n)) *( x * x)")
                                    (("1"
                                      (case
                                       "2 * (c * n)>=(2 * (c * n)) * (x * x) AND c >= c * x * x")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (case
                                         "2 * (c * n)>=(2 * (c * n))  AND c >= c ")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (copy -4)
                                            (("1"
                                              (swap-rel -2)
                                              (("1"
                                                (mult-ineq -1 -2)
                                                (("1"
                                                  (swap-rel -4)
                                                  (("1"
                                                    (mult-ineq -4 -2)
                                                    (("1" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (both_sides_div_pos_le2 formula-decl nil real_props nil)
    (both_sides_plus_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x skolem-const-decl "{x | x <= 1}" fast_approx nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_times_posint_is_posint application-judgement "posint" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil) (< const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (c skolem-const-decl "{c | c <= 1}" fast_approx nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (pm1 def-decl "int" fast_approx nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (even_times_int_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (atan_approx_iter_alt termination
    "fast_approx.atan_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.BB, fast_approx.C)"
    "nil"))
  (atan_approx_iter_alt_TCC7-1 nil 3634910138
   ("" (skeep)
    (("" (skeep)
      (("" (skeep) (("" (skeep) (("" (postpone) nil nil)) nil)) nil)) nil))
    nil)
   nil nil
   (atan_approx_iter_alt termination
    "fast_approx.atan_approx_iter_alt(fast_approx.x, fast_approx.eps, (number_fields.+)(fast_approx.n, 1), fast_approx.BB, fast_approx.C)"
    "nil")))
 (atan_alt_TCC1 0
  (atan_alt_TCC1-1 nil 3634910330
   ("" (skeep)
    (("" (ground)
      (("" (expand "min") (("" (lift-if 2) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (atan_alt subtype
    "real_defs.min((number_fields.+)(fast_approx.x, number_fields./(fast_approx.eps, 3)), 1)"
    "{r2 | reals.<(fast_approx.x, best_rational.r2)}")))
 (atan_alt_TCC2 0
  (atan_alt_TCC2-1 nil 3634910330 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_min application-judgement "{z: posreal | z <= x AND z <= y}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil (atan_alt subtype "fast_approx.X" "{x | reals.<=(fast_approx.x, 1)}")))
 (pi_fast_approx_br_TCC1 0
  (pi_fast_approx_br_TCC1-1 nil 3633879872 ("" (subtype-tcc) nil nil)
   ((atan_alt const-decl "real" fast_approx nil)
    (pi_fast_approx const-decl "real" fast_approx nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil))
   nil
   (pi_fast_approx_br subtype
    "(number_fields.+)(fast_approx.piclose, fast_approx.e)"
    "{r2 | reals.<((number_fields.-)(fast_approx.piclose, fast_approx.e), best_rational.r2)}")))
 (atan_approx_pos_le1_alt_TCC1 0
  (atan_approx_pos_le1_alt_TCC1-1 nil 3633699608
   ("" (skeep :preds? t)
    (("" (expand "reduce_approx")
      (("" (ground) (("" (cross-mult 1) nil nil)) nil)) nil))
    nil)
   ((posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal" real_types
     nil)
    (reduce_approx const-decl "real" fast_approx nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_fast_approx const-decl "nnreal" fast_approx nil)
    (nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (atan_approx_pos_le1_alt subtype
    "fast_approx.reduce_approx(fast_approx.X, number_fields./(fast_approx.eps, fast_approx.X))"
    "{x | reals.<=(fast_approx.x, 1)}")))
 (atan_approx_pos_TCC1 0
  (atan_approx_pos_TCC1-1 nil 3633970790
   ("" (skeep) (("" (cross-mult) nil nil)) nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal" real_types
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (div_mult_pos_le1 formula-decl nil real_props nil))
   nil
   (atan_approx_pos subtype "number_fields./(1, fast_approx.X)"
    "{X | reals.<=(fast_approx.X, 1)}")))
 (atan_fast_approx_TCC1 0
  (atan_fast_approx_TCC1-1 nil 3633879872 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (atan_fast_approx subtype "fast_approx.x" "posreal")))
 (atan_fast_approx_TCC2 0
  (atan_fast_approx_TCC2-1 nil 3633879872 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (atan_fast_approx subtype "(number_fields.-)(fast_approx.x)" "posreal"))))


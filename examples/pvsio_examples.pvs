%% Examples of use of PVSio 7.0
%% Cesar Munoz 
%% http://shemesh.larc.nasa.gov/people/cam/PVSio
%% NASA LaRC

pvsio_examples : THEORY
BEGIN

  %% Printing to stdout 
  hello_world : void =
    println("+"+pad(50,"-")+"+") &
    println("|"+center(50,"Hello World")+"|")&
    print("+"+pad(50,"-")+"+") 

  %% Formatted printing
  pp : void =
    LET l = (: 1,2,3,4 :),
        b = odd?(length(l)),
        n = (12/7)^5,
        r = (# x:= 1, y:= 2 #) IN
    printf("PVS Values:~%") &	
    printf("  List: ~a~%  Boolean: ~a~%  Rational Number: ~a~%  Record: ~a~%",
           {|(l,b,n,r)|}) &
    printf("Formated Values:~%") &	
    printf("  List: ~{~a~^,~}~%",{|l|}) &
    printf("  Boolean: ~:[*false*~;*true*~]~%",{|b|}) &
    printf("  Number: ~,2f~%",n) &
    printf("  Decimal (precision 10): ~-10/pvs:d/~%",1/3) &
    print("  ... and most Common Lisp format's directives.")

  IMPORTING reals@sqrt
  
  %% Reading from stdin a string and a number, checking if number is
  %% non-negative, and computing sqrt.
  hello_you : void =
     LET s = query_line("What is your name?") IN
     println("Hi "+s) &
     LET r = query_real(s+", enter a non-negative real number:") IN
     assert(r>=0,"Sorry, "+r+" is < 0") &
     print("The sqrt of "+r+" is: "+sqrt(r))

  %% Same a hello_you but catch an exception is entered string is not a number
  hello_catch : void = 
    catch(NotARealNumber,
          hello_you,
          LAMBDA(e:Exception[string]):println(tag(e)+": "+val(e)))

  %% Reading a file, the imperative way
  cat : void =
    LET f=fopenin("pvsio_examples.pvs") IN
    while(not eof?(f),println(fread_line(f))) &
    fclose(f)

  %% Reading a file, the functional way
  more(n:nat) : void =
    LET f = fopenin("pvsio_examples.pvs") IN
    try(forall(i:below(n)):
        IF not eof?(f) then 
          println(fread_line(f)) 
        ELSE 
          fail
        ENDIF,
        fclose(f))

  %% Iterating a function on a file 
  copy : void =
    LET f  = fopenout(create,"pvsio_examples.copy"),
        nf = fmap_line(fopenin("pvsio_examples.pvs"),
                       1,
                       lambda(s:string,l:nat):
                         prog(fprintf(f,"[~3,'0d]~a~%",{|(l,s)|}),l+1)) IN
    print("*** Check the content of pvsio_examples.copy in the working directory") &
    fclose(f)

  %% Using mutable variable
  woow(x:int) : void =
    LET lvar = ref[int](x) IN
    println("The value of lvar is: "+val(lvar)) &
    set[int](lvar,x+1) &
    print("The new value of lvar is: "+val(lvar))

  %% Unisng global variables
  gvar : Global[int,0]

  WOOW(x:int) : void = 
    println("The original of gvar is: "+val(gvar)) &
    set(gvar,x) &
    print("The current value of gvar is: "+val(gvar))

  %% Exception handling
  safe_sqrt(x:real) : nnreal =
    IF x < 0 THEN 
      throw[nnreal,string](NotARealNumber,"safe_sqrt("+x+")")
    ELSE sqrt(x)
    ENDIF

  mysqrt(r:real):real = 
    catch(NotARealNumber,
          safe_sqrt(r),
          0)

  int_aux : int =
    LET i = query_int("Enter a number less than 10") IN
    IF i > 10 then throw("GreaterThan10")
    ELSE i
    ENDIF

  readupto10 : int =  
    catch[int]((:NotAnInteger,"GreaterThan10":),
	       int_aux,0)

  %% PVS parsing and printing

  Point : TYPE = [# x : real, y: real #]

  zero : Point = str2pvs("(# x := 0, y:= 0#)")
   
  rec2str(p:Point):string = pvs2str(p)

  %% Parsing and printing decimals
  dec_parser : void =
    LET r = decstr2rat("1.23456789") IN
    printf("~a",r)

  dec_format : void =
    LET r = 1/3 IN
    printf("~a~%",rat2decstr(r,5)) & %% 5 decimals
    set[nat](PRECISION,10) &
    printf("~a",rat2str(r))          %% 10 decimals

  dec_formatter : void =
    LET r = 1/3 IN
    printf("~-10/pvs:d/~%",r) &  %% 10 decimals
    printf("~-20/pvs:d/",r)      %% 20 decimals

  %% ... and many other things.
  % But, semantic attachments may produce surprising results:

  paradox: bool =
    (RANDOM=RANDOM) % often evaluates to FALSE!

  notaparadox: bool =
    LET r = RANDOM IN
      r = r         % evaluates to TRUE

  afact : LEMMA 
    RANDOM = RANDOM % is trivially TRUE!

  %%% Printing welcome message 
  welcome : void =
    println("+"+pad(50,"-")+"+") &
    println("|"+center(50,pvsio_version)+"|")&
    println("|"+center(50,date)+"|")&
    print("+"+pad(50,"-")+"+") 
    
END pvsio_examples

(riemann_examples
 (cos_test_TCC1 0
  (cos_test_TCC1-3 "" 3790357368 ("" (prove-integrable?) nil) nil shostak
   (cos_test subtype "sincos_def.cos"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}"))
  (cos_test_TCC1-2 "" 3790354788 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (cos_test subtype "sincos_def.cos"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}"))
  (cos_test_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (cos_test subtype "sincos_def.cos"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}")))
 (cos_test 0
  (cos_test-3 "" 3790357370
   ("" (riemann-numerical :breaks 9 :precision 2) nil) nil shostak)
  (cos_test-2 "" 3790354789
   ("" (riemann-numerical :breaks 9 :precision 2) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (cos_test-1 nil 3788721858
   ("" (riemann-numerical :breaks 9 :precision 2) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (cos_test1 0
  (cos_test1-3 "" 3790357372 ("" (riemann-numerical) nil) nil shostak)
  (cos_test1-2 "" 3790354791 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (cos_test1-1 nil 3788721858 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (cos_test5_TCC1 0
  (cos_test5_TCC1-3 "" 3790357372 ("" (prove-integrable?) nil) nil shostak
   (cos_test5 subtype "sincos_def.cos"
    "{f | integral_def[real].integrable?(0, number_fields./(1, 230), riemann_examples.f)}"))
  (cos_test5_TCC1-2 "" 3790354791 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (cos_test5 subtype "sincos_def.cos"
    "{f | integral_def[real].integrable?(0, number_fields./(1, 230), riemann_examples.f)}"))
  (cos_test5_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (cos_test5 subtype "sincos_def.cos"
    "{f | integral_def[real].integrable?(0, number_fields./(1, 230), riemann_examples.f)}")))
 (cos_test5 0
  (cos_test5-3 "" 3790357374 ("" (riemann-numerical) nil) nil shostak)
  (cos_test5-2 "" 3790354793 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (cos_test5-1 nil 3788721858 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (sin_test1_TCC1 0
  (sin_test1_TCC1-3 "" 3790357374 ("" (prove-integrable?) nil) nil shostak
   (sin_test1 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, (number_fields./(14142135, 10000000)), riemann_examples.f)}"))
  (sin_test1_TCC1-2 "" 3790354793 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (sin_test1 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, (number_fields./(14142135, 10000000)), riemann_examples.f)}"))
  (sin_test1_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (sin_test1 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, (number_fields./(14142135, 10000000)), riemann_examples.f)}")))
 (sin_test1 0
  (sin_test1-3 "" 3790357391 ("" (riemann-numerical) nil) nil shostak)
  (sin_test1-2 "" 3790354803 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (sin_test1-1 nil 3788721858 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (sin_test_TCC1 0
  (sin_test_TCC1-3 "" 3790357391 ("" (prove-integrable?) nil) nil shostak
   (sin_test subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, number_fields./(1, 30), riemann_examples.f)}"))
  (sin_test_TCC1-2 "" 3790354804 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (sin_test subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, number_fields./(1, 30), riemann_examples.f)}"))
  (sin_test_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (sin_test subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, number_fields./(1, 30), riemann_examples.f)}")))
 (sin_test 0
  (sin_test-2 "" 3790357526
   ("" (riemann-numerical :breaks 13 :precision 4) nil) nil shostak)
  (sin_test-1 nil 3788721859
   ("" (riemann-numerical :breaks 13 :precision 4) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (sin_test2_TCC1 0
  (sin_test2_TCC1-3 "" 3790357526 ("" (prove-integrable?) nil) nil shostak
   (sin_test2 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, 2, riemann_examples.f)}"))
  (sin_test2_TCC1-2 "" 3790354864 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (sin_test2 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, 2, riemann_examples.f)}"))
  (sin_test2_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (sin_test2 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, 2, riemann_examples.f)}")))
 (sin_test2 0
  (sin_test2-3 "" 3790357536 ("" (riemann-numerical) nil) nil shostak)
  (sin_test2-2 "" 3790354873 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (sin_test2-1 nil 3788721859 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (sin_test4_TCC1 0
  (sin_test4_TCC1-3 "" 3790357536 ("" (prove-integrable?) nil) nil shostak
   (sin_test4 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(-3/2, 1, riemann_examples.f)}"))
  (sin_test4_TCC1-2 "" 3790354873 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (sin_test4 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(-3/2, 1, riemann_examples.f)}"))
  (sin_test4_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (sin_test4 subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(-3/2, 1, riemann_examples.f)}")))
 (sin_test4 0
  (sin_test4-3 "" 3790357546 ("" (riemann-numerical) nil) nil shostak)
  (sin_test4-2 "" 3790354883 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (sin_test4-1 nil 3788721859 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (exp_test3_TCC1 0
  (exp_test3_TCC1-3 "" 3790357546 ("" (prove-integrable?) nil) nil shostak
   (exp_test3 subtype "ln_exp.exp"
    "{f | integral_def[real].integrable?(0, 3, riemann_examples.f)}"))
  (exp_test3_TCC1-2 "" 3790354883 ("" (prove-integrable?) nil nil)
   ((EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (exp_test3 subtype "ln_exp.exp"
    "{f | integral_def[real].integrable?(0, 3, riemann_examples.f)}"))
  (exp_test3_TCC1-1 nil 3788721816 ("" (prove-integrable?) nil nil)
   ((EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (exp_test3 subtype "ln_exp.exp"
    "{f | integral_def[real].integrable?(0, 3, riemann_examples.f)}")))
 (exp_test3 0
  (exp_test3-3 "" 3790357555 ("" (riemann-numerical :precision 3) nil) nil
   shostak)
  (exp_test3-2 "" 3790354885 ("" (riemann-numerical :precision 3) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (exp_test3-1 nil 3788721860 ("" (riemann-numerical :precision 3) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (expcos_TCC1 0
  (expcos_TCC1-3 "" 3790357555 ("" (prove-integrable?) nil) nil shostak
   (expcos subtype "real_fun_ops[real].*(ln_exp.exp, sincos_def.cos)"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}"))
  (expcos_TCC1-2 "" 3790354886 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (expcos subtype "real_fun_ops[real].*(ln_exp.exp, sincos_def.cos)"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}"))
  (expcos_TCC1-1 nil 3783363293 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (expcos subtype "real_fun_ops[real].*(ln_exp.exp, sincos_def.cos)"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}")))
 (expcos 0 (expcos-3 "" 3790357557 ("" (riemann-numerical) nil) nil shostak)
  (expcos-2 "" 3790354888 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (expcos-1 nil 3783363305 ("" (riemann-numerical) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (sin_half_period_TCC1 0
  (sin_half_period_TCC1-3 "" 3790357557 ("" (prove-integrable?) nil) nil
   shostak
   (sin_half_period subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, (number_fields./(314159, 100000)), riemann_examples.f)}"))
  (sin_half_period_TCC1-2 "" 3790354888 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (sin_half_period subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, (number_fields./(314159, 100000)), riemann_examples.f)}"))
  (sin_half_period_TCC1-1 nil 3783363293 ("" (prove-integrable?) nil nil)
   ((SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (sin_half_period subtype "sincos_def.sin"
    "{f | integral_def[real].integrable?(0, (number_fields./(314159, 100000)), riemann_examples.f)}")))
 (sin_half_period 0
  (sin_half_period-3 "" 3790357561 ("" (riemann-numerical :breaks 10) nil) nil
   shostak)
  (sin_half_period-2 "" 3790354898 ("" (riemann-numerical :breaks 10) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (sin_half_period-1 nil 3783363305
   ("" (riemann-numerical :breaks 10) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (SIN adt-constructor-decl "(sin?)" RiemannExpr_adt Riemann)
    (sin? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (sin const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (square_TCC1 0
  (square_TCC1-3 "" 3790357561 ("" (prove-integrable?) nil) nil shostak
   (square subtype
    "real_fun_ops[real].*(3, real_fun_ops[real].^(riemann_expr_eval.idr, 2))"
    "{f | integral_def[real].integrable?(0, 2, riemann_examples.f)}"))
  (square_TCC1-2 "" 3790354898 ("" (prove-integrable?) nil nil)
   ((ID adt-constructor-decl "(id?)" RiemannExpr_adt Riemann)
    (id? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (POW adt-constructor-decl "[[RiemannExpr, nat] -> (pow?)]" RiemannExpr_adt
     Riemann)
    (pow? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (CONST adt-constructor-decl "[rat -> (const?)]" RiemannExpr_adt Riemann)
    (const? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (idr const-decl "real" riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (square subtype
    "real_fun_ops[real].*(3, real_fun_ops[real].^(riemann_expr_eval.idr, 2))"
    "{f | integral_def[real].integrable?(0, 2, riemann_examples.f)}"))
  (square_TCC1-1 nil 3783363293 ("" (prove-integrable?) nil nil)
   ((ID adt-constructor-decl "(id?)" RiemannExpr_adt Riemann)
    (id? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (POW adt-constructor-decl "[[RiemannExpr, nat] -> (pow?)]" RiemannExpr_adt
     Riemann)
    (pow? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (CONST adt-constructor-decl "[rat -> (const?)]" RiemannExpr_adt Riemann)
    (const? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (idr const-decl "real" riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (square subtype
    "real_fun_ops[real].*(3, real_fun_ops[real].^(riemann_expr_eval.idr, 2))"
    "{f | integral_def[real].integrable?(0, 2, riemann_examples.f)}")))
 (square 0
  (square-3 "" 3790357562 ("" (riemann-numerical :breaks 11) nil) nil shostak)
  (square-2 "" 3790354899 ("" (riemann-numerical :breaks 11) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (ID adt-constructor-decl "(id?)" RiemannExpr_adt Riemann)
    (id? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (POW adt-constructor-decl "[[RiemannExpr, nat] -> (pow?)]" RiemannExpr_adt
     Riemann)
    (pow? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (CONST adt-constructor-decl "[rat -> (const?)]" RiemannExpr_adt Riemann)
    (const? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (idr const-decl "real" riemann_expr_eval Riemann)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (square-1 nil 3783363305 ("" (riemann-numerical :breaks 11) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (ID adt-constructor-decl "(id?)" RiemannExpr_adt Riemann)
    (id? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (POW adt-constructor-decl "[[RiemannExpr, nat] -> (pow?)]" RiemannExpr_adt
     Riemann)
    (pow? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (CONST adt-constructor-decl "[rat -> (const?)]" RiemannExpr_adt Riemann)
    (const? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (MULT adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (mult?)]"
     RiemannExpr_adt Riemann)
    (mult? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (idr const-decl "real" riemann_expr_eval Riemann)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak))
 (comp_TCC1 0
  (comp_TCC1-3 "" 3790357563 ("" (prove-integrable?) nil) nil shostak
   (comp subtype
    "function_props[real, real, real].o(ln_exp.exp, sincos_def.cos)"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}"))
  (comp_TCC1-2 "" 3790354900 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (COMP adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (comp?)]"
     RiemannExpr_adt Riemann)
    (comp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   shostak
   (comp subtype
    "function_props[real, real, real].o(ln_exp.exp, sincos_def.cos)"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}"))
  (comp_TCC1-1 nil 3783363293 ("" (prove-integrable?) nil nil)
   ((COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (COMP adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (comp?)]"
     RiemannExpr_adt Riemann)
    (comp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (not_one_element_real formula-decl nil deriv_domain analysis))
   nil
   (comp subtype
    "function_props[real, real, real].o(ln_exp.exp, sincos_def.cos)"
    "{f | integral_def[real].integrable?(0, 1, riemann_examples.f)}")))
 (comp 0
  (comp-3 "" 3790357564 ("" (riemann-numerical :breaks 10) nil) nil shostak)
  (comp-2 "" 3790354901 ("" (riemann-numerical :breaks 10) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (COMP adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (comp?)]"
     RiemannExpr_adt Riemann)
    (comp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (O const-decl "T3" function_props nil) (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)
  (comp-1 nil 3783363305 ("" (riemann-numerical :breaks 10) nil nil)
   ((StrictInterval? const-decl "bool" interval interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (COS adt-constructor-decl "(cos?)" RiemannExpr_adt Riemann)
    (cos? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (EXP adt-constructor-decl "(exp?)" RiemannExpr_adt Riemann)
    (exp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (COMP adt-constructor-decl "[[RiemannExpr, RiemannExpr] -> (comp?)]"
     RiemannExpr_adt Riemann)
    (comp? adt-recognizer-decl "[RiemannExpr -> boolean]" RiemannExpr_adt
     Riemann)
    (Eval_real def-decl "[real -> real]" riemann_expr_eval Riemann)
    (RiemannExpr type-decl nil RiemannExpr_adt Riemann)
    (integ_inclus_fun? const-decl "bool" Riemann_integ_interval_approx
     Riemann)
    (StrictInterval type-eq-decl nil interval interval_arith)
    (Integ_Inclusion_fun nonempty-type-eq-decl nil
     Riemann_integ_interval_approx Riemann)
    (Eval def-decl "[Interval -> Interval]" riemann_expr_eval Riemann)
    (eq_partition const-decl "partition(a, b)" integral_def analysis)
    (partition type-eq-decl nil integral_def analysis)
    (closed_interval type-eq-decl nil intervals_real reals)
    (F_Bound? const-decl "bool" Riemann_integ_interval_approx Riemann)
    (Eval_inclusion formula-decl nil riemann_expr_eval Riemann)
    (f_bound_determines_locally_proper_results formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (R__ const-decl "Interval" Riemann_integ_interval_approx_perf Riemann)
    (RiemannSum_R2I_tr const-decl "Interval"
     Riemann_integ_interval_approx_perf Riemann)
    (Riem_sec_r2i type-eq-decl nil Riemann_integ_interval_approx Riemann)
    (O const-decl "T3" function_props nil) (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (cos const-decl "real" sincos_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (locallyProper? const-decl "bool" Riemann_integ_interval_approx_perf
     Riemann)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}" integral_def
     analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (LocallyProper type-eq-decl nil Riemann_integ_interval_approx_perf
     Riemann)
    (tr_Riemann_correctness formula-decl nil
     Riemann_integ_interval_approx_perf Riemann)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (fundamental_indef formula-decl nil indefinite_integral analysis)
    (Eval_cont_fun formula-decl nil riemann_expr_eval Riemann)
    (Integrable? const-decl "bool" integral_def analysis)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Simple_Riemann_Soundness formula-decl nil Riemann_integ_interval_approx
     Riemann))
   shostak)))


(tarski_examples
 (example_1_TCC1 0
  (example_1_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "3"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_1_TCC2 0
  (example_1_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_1 0
  (example_1-1 nil 3703875088 ("" (tarski) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for const-decl "T" for_iterate "structures/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (pprod const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_2_TCC1 0
  (example_2_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_2 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_2 0
  (example_2-1 nil 3703875088 ("" (tarski) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (for const-decl "T" for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak))
 (example_3_TCC1 0
  (example_3_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 2)) /= 0, reals.>=(i, 0))}")))
 (example_3_TCC2 0
  (example_3_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_3_TCC3 0
  (example_3_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 3)) /= 0, reals.>=(i, 0))}")))
 (example_3_TCC4 0
  (example_3_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 11/12)) = 0), reals.>=(i, 0))}")))
 (example_3_TCC5 0
  (example_3_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 41/10)) = 0), reals.>=(i, 0))}")))
 (example_3 0
  (example_3-1 nil 3703875088 ("" (tarski) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for const-decl "T" for_iterate "structures/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/"))
   shostak))
 (example_4_TCC1 0
  (example_4_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC2 0
  (example_4_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4 0
  (example_4-1 nil 3703875088 ("" (tarski) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (for const-decl "T" for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak))
 (example_5 0
  (example_5-1 nil 3703875088 ("" (tarski) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pneg const-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for const-decl "T" for_iterate "structures/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/"))
   shostak))
 (example_6_TCC1 0
  (example_6_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "5"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC2 0
  (example_6_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC3 0
  (example_6_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "11"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC4 0
  (example_6_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "10"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC5 0
  (example_6_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "8"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC6 0
  (example_6_TCC6-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "7"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC7 0
  (example_6_TCC7-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC8 0
  (example_6_TCC8-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC9 0
  (example_6_TCC9-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC10 0
  (example_6_TCC10-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "22"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC11 0
  (example_6_TCC11-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_6 subtype "20"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6 0
  (example_6-1 nil 3703875088 ("" (tarski) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (for const-decl "T" for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak))
 (example_7_TCC1 0
  (example_7_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_7 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_7 0
  (example_7-1 nil 3703875088 ("" (tarski) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (abs_ge formula-decl nil abs_lems "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for const-decl "T" for_iterate "structures/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (pminus const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (legendre_4_TCC1 0
  (legendre_4_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (legendre_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (legendre_6_TCC1 0
  (legendre_6_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (legendre_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (Legendre_2_6 0
  (Legendre_2_6-1 nil 3703875088 ("" (tarski) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (pdiv const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_div formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for const-decl "T" for_iterate "structures/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/"))
   shostak))
 (conflict?_TCC1 0
  (conflict?_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (conflict? subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (yes_conflict_TCC1 0
  (yes_conflict_TCC1-1 nil 3758453094 ("" (subtype-tcc) nil) nil nil
   (yes_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (yes_conflict 0
  (yes_conflict-1 nil 3703875088 ("" (tarski) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (for const-decl "T" for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (|##| const-decl "bool" interval "interval_arith/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (abs_lt formula-decl nil abs_lems "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (dot_scal_left formula-decl nil vectors_2D "vectors/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (pminus const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (no_conflict_TCC1 0
  (no_conflict_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (no_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (no_conflict 0
  (no_conflict-1 nil 3703875088 ("" (tarski) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (tarski const-decl "bool" poly_system_strategy "Tarski/")
    (for const-decl "T" for_iterate "structures/")
    (iterate_left const-decl "T" for_iterate "structures/")
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate "structures/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (abs_lt formula-decl nil abs_lems "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (forall_and_upto formula-decl nil for_examples "structures/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polynomial const-decl "[real -> real]" polynomials "reals/")
    (|##| const-decl "bool" interval "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (* const-decl "Vector" vectors_2D "vectors/")
    (Vect2 type-eq-decl nil vectors_2D_def "vectors/")
    (* const-decl "real" vectors_2D "vectors/")
    (Vector type-eq-decl nil vectors_2D "vectors/")
    (sq const-decl "nonneg_real" sq "reals/")
    (tarski_def formula-decl nil poly_system_strategy "Tarski/")
    (pminus const-decl "Polylist" polylist "Sturm/"))
   shostak)))


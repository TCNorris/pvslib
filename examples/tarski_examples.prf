(tarski_examples
 (example_1_TCC1 0
  (example_1_TCC1-3 "" 3790356946 ("" (subtype-tcc) nil) nil shostak
   (example_1 subtype "3"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_1_TCC1-2 "" 3790354381 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_1 subtype "3"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_1_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_1 subtype "3"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_1_TCC2 0
  (example_1_TCC2-3 "" 3790356947 ("" (subtype-tcc) nil) nil shostak
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_1_TCC2-2 "" 3790354381 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_1_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_1 0 (example_1-3 "" 3790356953 ("" (tarski) nil) nil shostak)
  (example_1-2 "" 3790354388 ("" (tarski) nil nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (pprod const-decl "Polylist" polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski))
   shostak)
  (example_1-1 nil 3703875088 ("" (tarski) nil nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (pprod const-decl "Polylist" polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski))
   shostak))
 (example_2_TCC1 0
  (example_2_TCC1-3 "" 3790356953 ("" (subtype-tcc) nil) nil shostak
   (example_2 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_2_TCC1-2 "" 3790354388 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_2 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_2_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_2 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_2 0 (example_2-3 "" 3790356955 ("" (tarski) nil) nil shostak)
  (example_2-2 "" 3790354389 ("" (tarski) nil nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski))
   shostak)
  (example_2-1 nil 3703875088 ("" (tarski) nil nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski))
   shostak))
 (example_3_TCC1 0
  (example_3_TCC1-3 "" 3790356955 ("" (subtype-tcc) nil) nil shostak
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 2)) /= 0, reals.>=(i, 0))}"))
  (example_3_TCC1-2 "" 3790354390 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 2)) /= 0, reals.>=(i, 0))}"))
  (example_3_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 2)) /= 0, reals.>=(i, 0))}")))
 (example_3_TCC2 0
  (example_3_TCC2-3 "" 3790356955 ("" (subtype-tcc) nil) nil shostak
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_3_TCC2-2 "" 3790354390 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_3_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_3_TCC3 0
  (example_3_TCC3-3 "" 3790356955 ("" (subtype-tcc) nil) nil shostak
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 3)) /= 0, reals.>=(i, 0))}"))
  (example_3_TCC3-2 "" 3790354390 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 3)) /= 0, reals.>=(i, 0))}"))
  (example_3_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_3 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(tarski_examples.x, 3)) /= 0, reals.>=(i, 0))}")))
 (example_3_TCC4 0
  (example_3_TCC4-3 "" 3790356956 ("" (subtype-tcc) nil) nil shostak
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 11/12)) = 0), reals.>=(i, 0))}"))
  (example_3_TCC4-2 "" 3790354390 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 11/12)) = 0), reals.>=(i, 0))}"))
  (example_3_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 11/12)) = 0), reals.>=(i, 0))}")))
 (example_3_TCC5 0
  (example_3_TCC5-3 "" 3790356956 ("" (subtype-tcc) nil) nil shostak
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 41/10)) = 0), reals.>=(i, 0))}"))
  (example_3_TCC5-2 "" 3790354390 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 41/10)) = 0), reals.>=(i, 0))}"))
  (example_3_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_3 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(tarski_examples.x, 41/10)) = 0), reals.>=(i, 0))}")))
 (example_3 0 (example_3-3 "" 3790356970 ("" (tarski) nil) nil shostak)
  (example_3-2 "" 3790354404 ("" (tarski) nil nil)
   ((pneg const-decl "Polylist" polylist Sturm)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (ppow def-decl "Polylist" polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_neg formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_pow formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt
     Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski))
   shostak)
  (example_3-1 nil 3703875088 ("" (tarski) nil nil)
   ((pneg const-decl "Polylist" polylist Sturm)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (ppow def-decl "Polylist" polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_neg formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_pow formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt
     Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski))
   shostak))
 (example_4_TCC1 0
  (example_4_TCC1-3 "" 3790356970 ("" (subtype-tcc) nil) nil shostak
   (example_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_4_TCC1-2 "" 3790354404 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_4_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC2 0
  (example_4_TCC2-3 "" 3790356970 ("" (subtype-tcc) nil) nil shostak
   (example_4 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_4_TCC2-2 "" 3790354404 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_4 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_4_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_4 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4 0 (example_4-3 "" 3790356973 ("" (tarski) nil) nil shostak)
  (example_4-2 "" 3790354407 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt
     Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak)
  (example_4-1 nil 3703875088 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt
     Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak))
 (example_5 0 (example_5-3 "" 3790356990 ("" (tarski) nil) nil shostak)
  (example_5-2 "" 3790354424 ("" (tarski) nil nil)
   ((pneg const-decl "Polylist" polylist Sturm)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (ppow def-decl "Polylist" polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_pow formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_neg formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski))
   shostak)
  (example_5-1 nil 3703875088 ("" (tarski) nil nil)
   ((pneg const-decl "Polylist" polylist Sturm)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (ppow def-decl "Polylist" polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_pow formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_neg formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski))
   shostak))
 (example_6_TCC1 0
  (example_6_TCC1-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "5"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC1-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "5"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "5"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC2 0
  (example_6_TCC2-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC2-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "12"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC3 0
  (example_6_TCC3-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "11"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC3-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "11"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "11"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC4 0
  (example_6_TCC4-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "10"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC4-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "10"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "10"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC5 0
  (example_6_TCC5-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "8"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC5-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "8"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "8"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC6 0
  (example_6_TCC6-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "7"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC6-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "7"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC6-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "7"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC7 0
  (example_6_TCC7-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC7-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC7-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC8 0
  (example_6_TCC8-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC8-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC8-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC9 0
  (example_6_TCC9-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC9-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC9-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC10 0
  (example_6_TCC10-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "22"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC10-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "22"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC10-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "22"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6_TCC11 0
  (example_6_TCC11-3 "" 3790356990 ("" (subtype-tcc) nil) nil shostak
   (example_6 subtype "20"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC11-2 "" 3790354424 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_6 subtype "20"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_6_TCC11-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_6 subtype "20"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_6 0 (example_6-3 "" 3790357011 ("" (tarski) nil) nil shostak)
  (example_6-2 "" 3790354439 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak)
  (example_6-1 nil 3703875088 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak))
 (example_7_TCC1 0
  (example_7_TCC1-3 "" 3790357011 ("" (subtype-tcc) nil) nil shostak
   (example_7 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_7_TCC1-2 "" 3790354439 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_7 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_7_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (example_7 subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_7 0 (example_7-3 "" 3790357014 ("" (tarski) nil) nil shostak)
  (example_7-2 "" 3790354441 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (abs_ge formula-decl nil abs_lems reals)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt
     Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy Tarski))
   shostak)
  (example_7-1 nil 3703875088 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (abs_ge formula-decl nil abs_lems reals)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PIMPLIES adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PIMPLIES?)]" PolyRelExpr_adt
     Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy Tarski))
   shostak))
 (example_8_TCC1 0
  (example_8_TCC1-3 "" 3790357014 ("" (subtype-tcc) nil) nil shostak
   (example_8 subtype "9"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_8_TCC1-2 "" 3790354441 ("" (subtype-tcc) nil nil) nil
   shostak
   (example_8 subtype "9"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (example_8_TCC1-1 nil 3771839714 ("" (subtype-tcc) nil nil) nil nil
   (example_8 subtype "9"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (example_8 0 (example_8-3 "" 3790357018 ("" (tarski) nil) nil shostak)
  (example_8-2 "" 3790354452 ("" (tarski) nil nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (pminus const-decl "Polylist" polylist Sturm)
    (pconst const-decl "Polylist" polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak)
  (example_8-1 nil 3771839764 ("" (tarski) nil nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (pminus const-decl "Polylist" polylist Sturm)
    (pconst const-decl "Polylist" polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (peq? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (peq adt-constructor-decl "(peq?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak))
 (legendre_4_TCC1 0
  (legendre_4_TCC1-3 "" 3790357018 ("" (subtype-tcc) nil) nil shostak
   (legendre_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (legendre_4_TCC1-2 "" 3790354452 ("" (subtype-tcc) nil nil) nil
   shostak
   (legendre_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (legendre_4_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (legendre_4 subtype "4"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (legendre_6_TCC1 0
  (legendre_6_TCC1-3 "" 3790357018 ("" (subtype-tcc) nil) nil shostak
   (legendre_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (legendre_6_TCC1-2 "" 3790354452 ("" (subtype-tcc) nil nil) nil
   shostak
   (legendre_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}"))
  (legendre_6_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (legendre_6 subtype "6"
    "{i: integers.int | booleans.OR(tarski_examples.x /= 0, reals.>=(i, 0))}")))
 (Legendre_2_6 0
  (Legendre_2_6-3 "" 3790357034 ("" (tarski) nil) nil shostak)
  (Legendre_2_6-2 "" 3790354461 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (pdiv const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_div formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski))
   shostak)
  (Legendre_2_6-1 nil 3703875088 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (pdiv const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_div formula-decl nil polylist Sturm)
    (polylist_eval formula-decl nil polylist Sturm)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (POR? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (POR adt-constructor-decl "[[PolyRelExpr, PolyRelExpr] -> (POR?)]"
     PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski))
   shostak))
 (conflict?_TCC1 0
  (conflict?_TCC1-3 "" 3790357034 ("" (subtype-tcc) nil) nil shostak
   (conflict? subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}"))
  (conflict?_TCC1-2 "" 3790354461 ("" (subtype-tcc) nil nil) nil
   shostak
   (conflict? subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}"))
  (conflict?_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (conflict? subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (yes_conflict_TCC1 0
  (yes_conflict_TCC1-3 "" 3790357034 ("" (subtype-tcc) nil) nil shostak
   (yes_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}"))
  (yes_conflict_TCC1-2 "" 3790354461 ("" (subtype-tcc) nil nil) nil
   shostak
   (yes_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}"))
  (yes_conflict_TCC1-1 nil 3758453094 ("" (subtype-tcc) nil nil) nil
   nil
   (yes_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (yes_conflict 0
  (yes_conflict-3 "" 3790357042 ("" (tarski) nil) nil shostak)
  (yes_conflict-2 "" 3790354469 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (sq const-decl "nonneg_real" sq reals)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Interval type-eq-decl nil interval interval_arith)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (abs_lt formula-decl nil abs_lems reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak)
  (yes_conflict-1 nil 3703875088 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (sq const-decl "nonneg_real" sq reals)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Interval type-eq-decl nil interval interval_arith)
    (polylist_eval formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_sum formula-decl nil polylist Sturm)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (abs_lt formula-decl nil abs_lems reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak))
 (no_conflict_TCC1 0
  (no_conflict_TCC1-3 "" 3790357042 ("" (subtype-tcc) nil) nil shostak
   (no_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}"))
  (no_conflict_TCC1-2 "" 3790354469 ("" (subtype-tcc) nil nil) nil
   shostak
   (no_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}"))
  (no_conflict_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil nil) nil nil
   (no_conflict subtype "2"
    "{i: integers.int | booleans.OR(tarski_examples.t /= 0, reals.>=(i, 0))}")))
 (no_conflict 0
  (no_conflict-3 "" 3790357050 ("" (tarski) nil) nil shostak)
  (no_conflict-2 "" 3790354483 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (sq const-decl "nonneg_real" sq reals)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Interval type-eq-decl nil interval interval_arith)
    (polylist_eval formula-decl nil polylist Sturm)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (abs_lt formula-decl nil abs_lems reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (|##| const-decl "bool" interval interval_arith)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak)
  (no_conflict-1 nil 3703875088 ("" (tarski) nil nil)
   ((pconst const-decl "Polylist" polylist Sturm)
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist Sturm)
    (polylist const-decl "real" polylist Sturm)
    (pminus const-decl "Polylist" polylist Sturm)
    (Polylist type-eq-decl nil polylist Sturm)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist Sturm)
    (pprod const-decl "Polylist" polylist Sturm)
    (sq const-decl "nonneg_real" sq reals)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Interval type-eq-decl nil interval interval_arith)
    (polylist_eval formula-decl nil polylist Sturm)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (abs_lt formula-decl nil abs_lems reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (polylist_sum formula-decl nil polylist Sturm)
    (polylist_prod formula-decl nil polylist Sturm)
    (polylist_monom formula-decl nil polylist Sturm)
    (polylist_const formula-decl nil polylist Sturm)
    (polylist_minus formula-decl nil polylist Sturm)
    (|##| const-decl "bool" interval interval_arith)
    (eval_rel const-decl "bool" dnf_polynomials Tarski)
    (rel_to_tarski const-decl "bool" dnf_strategy Tarski)
    (rel_to_tarski_sound formula-decl nil dnf_strategy Tarski)
    (PolyRelExpr type-decl nil PolyRelExpr_adt Tarski)
    (PREL? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PNOT adt-constructor-decl "[PolyRelExpr -> (PNOT?)]"
     PolyRelExpr_adt Tarski)
    (PAND? adt-recognizer-decl "[PolyRelExpr -> boolean]"
     PolyRelExpr_adt Tarski)
    (PAND adt-constructor-decl
     "[[PolyRelExpr, PolyRelExpr] -> (PAND?)]" PolyRelExpr_adt Tarski)
    (TarskiRel type-decl nil poly_system_strategy Tarski)
    (PREL adt-constructor-decl
     "[[[nat -> rat], nat, TarskiRel, rat] -> (PREL?)]" PolyRelExpr_adt
     Tarski)
    (list2array def-decl "T" array2list structures)
    (ple? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (ple adt-constructor-decl "(ple?)" poly_system_strategy Tarski)
    (pge? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pge adt-constructor-decl "(pge?)" poly_system_strategy Tarski)
    (plt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (plt adt-constructor-decl "(plt?)" poly_system_strategy Tarski)
    (pgt? adt-recognizer-decl "[TarskiRel -> boolean]"
     poly_system_strategy Tarski)
    (pgt adt-constructor-decl "(pgt?)" poly_system_strategy Tarski))
   shostak)))


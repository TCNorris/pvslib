(hutch_examples
 (example_fall_TCC1 0
  (example_fall_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_fall subtype "3"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_fall_TCC2 0
  (example_fall_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_fall subtype "2"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_fall 0
  (example_fall-1 nil 3703875089 ("" (hutch) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (hutch const-decl "bool" hutch "Tarski/")
    (hutch_def formula-decl nil hutch "Tarski/")
    (pprod const-decl "Polylist" polylist "Sturm/"))
   shostak))
 (example_ex_TCC1 0
  (example_ex_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_ex subtype "2"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_ex 0
  (example_ex-1 nil 3703875089 ("" (hutch) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (hutch_def formula-decl nil hutch "Tarski/")
    (hutch const-decl "bool" hutch "Tarski/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak))
 (example_1_TCC1 0
  (example_1_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 2)) /= 0, reals.>=(i, 0))}")))
 (example_1_TCC2 0
  (example_1_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_1_TCC3 0
  (example_1_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(hutch_examples.x, 3)) /= 0, reals.>=(i, 0))}")))
 (example_1_TCC4 0
  (example_1_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 11/12)) = 0), reals.>=(i, 0))}")))
 (example_1_TCC5 0
  (example_1_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_1 subtype "3"
    "{i: integers.int | booleans.OR((booleans.NOT)(((number_fields.-)(hutch_examples.x, 41/10)) = 0), reals.>=(i, 0))}")))
 (example_1 0
  (example_1-1 nil 3703875089 ("" (hutch) nil)
   ((pneg const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (hutch const-decl "bool" hutch "Tarski/")
    (hutch_def formula-decl nil hutch "Tarski/"))
   shostak))
 (example_2_TCC1 0
  (example_2_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_2 subtype "4"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_2_TCC2 0
  (example_2_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_2 subtype "12"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_2 0
  (example_2-1 nil 3703875089 ("" (hutch) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (hutch_def formula-decl nil hutch "Tarski/")
    (hutch const-decl "bool" hutch "Tarski/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak))
 (example_3 0
  (example_3-1 nil 3703875089 ("" (hutch) nil)
   ((pneg const-decl "Polylist" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (ppow def-decl "Polylist" polylist "Sturm/")
    (pprod const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_prod formula-decl nil polylist "Sturm/")
    (polylist_pow formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_neg formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (hutch const-decl "bool" hutch "Tarski/")
    (hutch_def formula-decl nil hutch "Tarski/"))
   shostak))
 (example_4_TCC1 0
  (example_4_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "5"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC2 0
  (example_4_TCC2-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "12"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC3 0
  (example_4_TCC3-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "11"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC4 0
  (example_4_TCC4-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "10"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC5 0
  (example_4_TCC5-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "8"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC6 0
  (example_4_TCC6-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "7"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC7 0
  (example_4_TCC7-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "6"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC8 0
  (example_4_TCC8-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "4"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC9 0
  (example_4_TCC9-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "2"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC10 0
  (example_4_TCC10-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "22"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4_TCC11 0
  (example_4_TCC11-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_4 subtype "20"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_4 0
  (example_4-1 nil 3703875089 ("" (hutch) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (hutch_def formula-decl nil hutch "Tarski/")
    (hutch const-decl "bool" hutch "Tarski/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/"))
   shostak))
 (example_5_TCC1 0
  (example_5_TCC1-1 nil 3703875066 ("" (subtype-tcc) nil) nil nil
   (example_5 subtype "2"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_5 0
  (example_5-1 nil 3703875089 ("" (hutch) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (abs_ge formula-decl nil abs_lems "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (hutch const-decl "bool" hutch "Tarski/")
    (hutch_def formula-decl nil hutch "Tarski/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/"))
   shostak))
 (example_6 0
  (example_6-1 nil 3720530622 ("" (hutch) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (pminus const-decl "Polylist" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (hutch_def formula-decl nil hutch "Tarski/")
    (hutch const-decl "bool" hutch "Tarski/")
    (polylist_minus formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (abs_le formula-decl nil abs_lems "reals/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (|##| const-decl "bool" interval "interval_arith/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak))
 (example_8_TCC1 0
  (example_8_TCC1-1 nil 3720530597 ("" (subtype-tcc) nil) nil nil
   (example_8 subtype "7"
    "{i: integers.int | booleans.OR(hutch_examples.x /= 0, reals.>=(i, 0))}")))
 (example_8 0
  (example_8-1 nil 3720530622 ("" (hutch) nil)
   ((pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (zero_pol const-decl "rat" polylist "Sturm/")
    (list2array def-decl "T" array2list "structures/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (hutch const-decl "bool" hutch "Tarski/")
    (hutch_def formula-decl nil hutch "Tarski/"))
   shostak))
 (example_9 0
  (example_9-1 nil 3720530622 ("" (hutch) nil)
   ((pconst const-decl "Polylist" polylist "Sturm/")
    (pmonom def-decl "{pl: Polylist |
   length(pl) = deg + 1 AND FORALL (x: real): polylist(pl)(x) = c * x ^ deg}"
     polylist "Sturm/")
    (psum def-decl "{pql: Polylist |
   FORALL (x: real): polylist(pql)(x) = polylist(pl)(x) + polylist(ql)(x)}"
     polylist "Sturm/")
    (polylist const-decl "real" polylist "Sturm/")
    (Polylist type-eq-decl nil polylist "Sturm/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (hutch_def formula-decl nil hutch "Tarski/")
    (hutch const-decl "bool" hutch "Tarski/")
    (polylist_sum formula-decl nil polylist "Sturm/")
    (polylist_const formula-decl nil polylist "Sturm/")
    (polylist_monom formula-decl nil polylist "Sturm/")
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (polylist_eval formula-decl nil polylist "Sturm/")
    (rel5 const-decl "bool" poly_system_strategy "Tarski/")
    (SystemSatRat? const-decl "bool" hutch "Tarski/")
    (BoolTuple type-eq-decl nil hutch "Tarski/")
    (BoolExpr type-eq-decl nil hutch "Tarski/")
    (list2array def-decl "T" array2list "structures/")
    (zero_pol const-decl "rat" polylist "Sturm/"))
   shostak)))


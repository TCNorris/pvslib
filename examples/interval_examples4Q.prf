(interval_examples4Q
 (zero_to_one_quarter 0
  (zero_to_one_quarter-3 "" 3790356556
   (""
    (then (skeep)
     (numerical (! 1 1) :precision 4 :maxdepth 20 :verbose? t))
    nil)
   nil shostak)
  (zero_to_one_quarter-2 "" 3790354017
   (""
    (then (skeep)
     (numerical (! 1 1) :precision 4 :maxdepth 20 :verbose? t))
    nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (|##| const-decl "bool" interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak)
  (zero_to_one_quarter-1 nil 3600857764
   (""
    (then (skeep)
     (numerical (! 1 1) :precision 4 :maxdepth 20 :verbose? t))
    nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (|##| const-decl "bool" interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak))
 (Heart_TCC1 0
  (Heart_TCC1-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (Heart subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x5 /= 0, reals.>=(i, 0))}")))
 (Heart_TCC2 0
  (Heart_TCC2-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (Heart subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x6 /= 0, reals.>=(i, 0))}")))
 (hdp_mm_TCC1 0
  (hdp_mm_TCC1-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (hdp_mm subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x6 /= 0, reals.>=(i, 0))}")))
 (hdp_mm_TCC2 0
  (hdp_mm_TCC2-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (hdp_mm subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x5 /= 0, reals.>=(i, 0))}")))
 (hdp_mm_TCC3 0
  (hdp_mm_TCC3-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (hdp_mm subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (hdp_mm_TCC4 0
  (hdp_mm_TCC4-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (hdp_mm subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x7 /= 0, reals.>=(i, 0))}")))
 (hdp_mm_TCC5 0
  (hdp_mm_TCC5-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (hdp_mm subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x7 /= 0, reals.>=(i, 0))}")))
 (hdp_mm_TCC6 0
  (hdp_mm_TCC6-1 nil 3600857764 ("" (subtype-tcc) nil nil) nil nil
   (hdp_mm subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (hdp_mm 0
  (hdp_mm-3 "" 3790356570
   ("" (then (skeep) (numerical (! 1 1) :verbose? t)) nil) nil shostak)
  (hdp_mm-2 "" 3790354025
   ("" (then (skeep) (numerical (! 1 1) :verbose? t)) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak)
  (hdp_mm-1 nil 3600857764
   ("" (then (skeep) (numerical (! 1 1) :verbose? t)) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil))
   shostak))
 (hdp_minmax 0
  (hdp_minmax-3 "" 3790356580 ("" (then (skeep) (interval)) nil) nil
   shostak)
  (hdp_minmax-2 "" 3790354035 ("" (then (skeep) (interval)) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (hdp_minmax-1 nil 3600857764 ("" (then (skeep) (interval)) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (common_point_TCC1 0
  (common_point_TCC1-1 nil 3600857764 ("" (subtype-tcc) nil nil)
   ((|##| const-decl "bool" interval interval_arith)) nil
   (common_point subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (common_point 0
  (common_point-3 "" 3790356582 ("" (interval :verbose? t) nil) nil
   shostak)
  (common_point-2 "" 3790354037 ("" (interval :verbose? t) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl
     "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt
     interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (common_point-1 nil 3600857764 ("" (interval :verbose? t) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl
     "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt
     interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (simple_ite 0
  (simple_ite-3 "" 3790356583 ("" (interval) nil) nil shostak)
  (simple_ite-2 "" 3790354038 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BITE adt-constructor-decl
     "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]" IntervalExpr_adt
     interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (simple_ite-1 nil 3600857764 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BITE adt-constructor-decl
     "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]" IntervalExpr_adt
     interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (zumkeller1b__TCC1 0
  (zumkeller1b__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil
   nil
   (zumkeller1b_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (zumkeller1b__TCC2 0
  (zumkeller1b__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil
   nil
   (zumkeller1b_ subtype "6"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (zumkeller1b__TCC3 0
  (zumkeller1b__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil
   nil
   (zumkeller1b_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (zumkeller1b__TCC4 0
  (zumkeller1b__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil
   nil
   (zumkeller1b_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (zumkeller1b_ 0
  (zumkeller1b_-3 "" 3790356585 ("" (interval) nil) nil shostak)
  (zumkeller1b_-2 "" 3790354039 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (zumkeller1b_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (zumkeller2__TCC1 0
  (zumkeller2__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (zumkeller2_ subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.y, exponentiation.^(interval_examples4Q.x, 2))) /= 0, reals.>=(i, 0))}")))
 (zumkeller2__TCC2 0
  (zumkeller2__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (zumkeller2_ subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(1, interval_examples4Q.x)) /= 0, reals.>=(i, 0))}")))
 (zumkeller2_ 0
  (zumkeller2_-3 "" 3790356587 ("" (interval) nil) nil shostak)
  (zumkeller2_-2 "" 3790354041 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (zumkeller2_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (smith__TCC1 0
  (smith__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (smith_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (smith__TCC2 0
  (smith__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (smith_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (smith__TCC3 0
  (smith__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (smith_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x1 /= 0, reals.>=(i, 0))}")))
 (smith__TCC4 0
  (smith__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (smith_ subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (smith_ 0 (smith_-3 "" 3790356592 ("" (interval) nil) nil shostak)
  (smith_-2 "" 3790354052 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (smith_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (beale1a__TCC1 0
  (beale1a__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(3/2, number_fields.*(interval_examples4Q.x, interval_examples4Q.y)), interval_examples4Q.x) = 0), reals.>=(i, 0))}")))
 (beale1a__TCC2 0
  (beale1a__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (beale1a__TCC3 0
  (beale1a__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(9/4, number_fields.*(interval_examples4Q.x, exponentiation.^(interval_examples4Q.y, 2))), interval_examples4Q.x) = 0), reals.>=(i, 0))}")))
 (beale1a__TCC4 0
  (beale1a__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (beale1a_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (beale1a__TCC5 0
  (beale1a__TCC5-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (beale1a_ subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.+)(21/8, number_fields.*(interval_examples4Q.x, exponentiation.^(interval_examples4Q.y, 3))), interval_examples4Q.x) = 0), reals.>=(i, 0))}")))
 (beale1a_ 0 (beale1a_-3 "" 3790356601 ("" (interval) nil) nil shostak)
  (beale1a_-2 "" 3790354056 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (beale1a_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (beale1b_ 0
  (beale1b_-3 "" 3790356604 ("" (interval :maxdepth 17) nil) nil
   shostak)
  (beale1b_-2 "" 3790354059 ("" (interval :maxdepth 17) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (beale1b_-1 nil 3645973651 ("" (interval :maxdepth 17) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (crespo1a__TCC1 0
  (crespo1a__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1a_ subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC2 0
  (crespo1a__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1a_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC3 0
  (crespo1a__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1a_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo1a__TCC4 0
  (crespo1a__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1a_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo1a_ 0
  (crespo1a_-3 "" 3790356608 ("" (interval) nil) nil shostak)
  (crespo1a_-2 "" 3790354062 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (crespo1a_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (crespo1b__TCC1 0
  (crespo1b__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1b_ subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC2 0
  (crespo1b__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1b_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC3 0
  (crespo1b__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1b_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo1b__TCC4 0
  (crespo1b__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo1b_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo1b_ 0
  (crespo1b_-3 "" 3790356609 ("" (interval) nil) nil shostak)
  (crespo1b_-2 "" 3790354064 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (crespo1b_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (crespo2a__TCC1 0
  (crespo2a__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2a_ subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC2 0
  (crespo2a__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2a_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC3 0
  (crespo2a__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2a_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC4 0
  (crespo2a__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2a_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo2a__TCC5 0
  (crespo2a__TCC5-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2a_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (crespo2a_ 0
  (crespo2a_-3 "" 3790356614 ("" (interval) nil) nil shostak)
  (crespo2a_-2 "" 3790354068 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (crespo2a_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (crespo2b__TCC1 0
  (crespo2b__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2b_ subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC2 0
  (crespo2b__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2b_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC3 0
  (crespo2b__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2b_ subtype "4"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC4 0
  (crespo2b__TCC4-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2b_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo2b__TCC5 0
  (crespo2b__TCC5-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo2b_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (crespo2b_ 0
  (crespo2b_-3 "" 3790356617 ("" (interval :maxdepth 17) nil) nil
   shostak)
  (crespo2b_-2 "" 3790354071 ("" (interval :maxdepth 17) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (crespo2b_-1 nil 3645973651 ("" (interval :maxdepth 17) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (crespo3a__TCC1 0
  (crespo3a__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo3a_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo3a__TCC2 0
  (crespo3a__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo3a_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo3a__TCC3 0
  (crespo3a__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo3a_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (crespo3a_ 0
  (crespo3a_-3 "" 3790356622 ("" (interval) nil) nil shostak)
  (crespo3a_-2 "" 3790354076 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (crespo3a_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (crespo3b__TCC1 0
  (crespo3b__TCC1-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo3b_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo3b__TCC2 0
  (crespo3b__TCC2-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo3b_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.y /= 0, reals.>=(i, 0))}")))
 (crespo3b__TCC3 0
  (crespo3b__TCC3-1 nil 3645973643 ("" (subtype-tcc) nil nil) nil nil
   (crespo3b_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.z /= 0, reals.>=(i, 0))}")))
 (crespo3b_ 0
  (crespo3b_-3 "" 3790356624 ("" (interval) nil) nil shostak)
  (crespo3b_-2 "" 3790354078 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (crespo3b_-1 nil 3645973651 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (Magnetism_exists__TCC1 0
  (Magnetism_exists__TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Magnetism_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x1 /= 0, reals.>=(i, 0))}")))
 (Magnetism_exists__TCC2 0
  (Magnetism_exists__TCC2-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Magnetism_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (Magnetism_exists__TCC3 0
  (Magnetism_exists__TCC3-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Magnetism_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (Magnetism_exists__TCC4 0
  (Magnetism_exists__TCC4-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Magnetism_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (Magnetism_exists__TCC5 0
  (Magnetism_exists__TCC5-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Magnetism_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x5 /= 0, reals.>=(i, 0))}")))
 (Magnetism_exists__TCC6 0
  (Magnetism_exists__TCC6-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Magnetism_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x7 /= 0, reals.>=(i, 0))}")))
 (Magnetism_exists_ 0
  (Magnetism_exists_-3 "" 3790356634 ("" (interval) nil) nil shostak)
  (Magnetism_exists_-2 "" 3790354088 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Magnetism_exists_-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (Butcher_exists__TCC1 0
  (Butcher_exists__TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (Butcher_exists__TCC2 0
  (Butcher_exists__TCC2-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (Butcher_exists__TCC3 0
  (Butcher_exists__TCC3-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_exists_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (Butcher_exists__TCC4 0
  (Butcher_exists__TCC4-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil
   nil
   (Butcher_exists_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (Butcher_exists_ 0
  (Butcher_exists_-3 "" 3790356636 ("" (interval) nil) nil shostak)
  (Butcher_exists_-2 "" 3790354090 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Butcher_exists_-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (AdaptiveLV_forall__TCC1 0
  (AdaptiveLV_forall__TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (AdaptiveLV_forall_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x2 /= 0, reals.>=(i, 0))}")))
 (AdaptiveLV_forall__TCC2 0
  (AdaptiveLV_forall__TCC2-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (AdaptiveLV_forall_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (AdaptiveLV_forall__TCC3 0
  (AdaptiveLV_forall__TCC3-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (AdaptiveLV_forall_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (AdaptiveLV_forall_ 0
  (AdaptiveLV_forall_-3 "" 3790356640 ("" (interval) nil) nil shostak)
  (AdaptiveLV_forall_-2 "" 3790354094 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (AdaptiveLV_forall_-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (Caprasse_exists__TCC1 0
  (Caprasse_exists__TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Caprasse_exists_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (Caprasse_exists__TCC2 0
  (Caprasse_exists__TCC2-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Caprasse_exists_ subtype "3"
    "{i: integers.int | booleans.OR(interval_examples4Q.x4 /= 0, reals.>=(i, 0))}")))
 (Caprasse_exists_ 0
  (Caprasse_exists_-3 "" 3790356643 ("" (interval) nil) nil shostak)
  (Caprasse_exists_-2 "" 3790354097 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Caprasse_exists_-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (Schwefel_TCC1 0
  (Schwefel_TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil nil
   (Schwefel subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x1, exponentiation.^(interval_examples4Q.x2, 2))) /= 0, reals.>=(i, 0))}")))
 (Schwefel_TCC2 0
  (Schwefel_TCC2-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil nil
   (Schwefel subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x2, 1)) /= 0, reals.>=(i, 0))}")))
 (Schwefel_forall__TCC1 0
  (Schwefel_forall__TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Schwefel_forall_ subtype "2"
    "{i: integers.int | booleans.OR(interval_examples4Q.x3 /= 0, reals.>=(i, 0))}")))
 (Schwefel_forall__TCC2 0
  (Schwefel_forall__TCC2-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Schwefel_forall_ subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x1, exponentiation.^(interval_examples4Q.x3, 2))) /= 0, reals.>=(i, 0))}")))
 (Schwefel_forall__TCC3 0
  (Schwefel_forall__TCC3-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (Schwefel_forall_ subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(interval_examples4Q.x3, 1)) /= 0, reals.>=(i, 0))}")))
 (Schwefel_forall_ 0
  (Schwefel_forall_-3 "" 3790356646 ("" (interval) nil) nil shostak)
  (Schwefel_forall_-2 "" 3790354100 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Schwefel_forall_-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (ReactionDiffusion_forall_ 0
  (ReactionDiffusion_forall_-3 "" 3790356648 ("" (interval) nil) nil
   shostak)
  (ReactionDiffusion_forall_-2 "" 3790354102 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (ReactionDiffusion_forall_-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (Chebyshev1_TCC1 0
  (Chebyshev1_TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil nil
   (Chebyshev1 subtype "2"
    "{i: integers.int | booleans.OR(((number_fields.-)(number_fields.*(2, exponentiation.^(interval_examples4Q.x, 2)), 1)) /= 0, reals.>=(i, 0))}")))
 (Chebyshev1 0
  (Chebyshev1-3 "" 3790356650 ("" (interval) nil) nil shostak)
  (Chebyshev1-2 "" 3790354103 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Chebyshev1-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (abs_le formula-decl nil abs_lems reals)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (example_5_TCC1 0
  (example_5_TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil) nil nil
   (example_5 subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (example_5 0
  (example_5-3 "" 3790356651 ("" (interval) nil) nil shostak)
  (example_5-2 "" 3790354104 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (example_5-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (example_5_m1000_0_TCC1 0
  (example_5_m1000_0_TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (example_5_m1000_0 subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (example_5_m1000_0 0
  (example_5_m1000_0-3 "" 3790356652 ("" (interval) nil) nil shostak)
  (example_5_m1000_0-2 "" 3790354105 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (example_5_m1000_0-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (example_5_m800_0_TCC1 0
  (example_5_m800_0_TCC1-1 nil 3645974363 ("" (subtype-tcc) nil nil)
   nil nil
   (example_5_m800_0 subtype "5"
    "{i: integers.int | booleans.OR(interval_examples4Q.x /= 0, reals.>=(i, 0))}")))
 (example_5_m800_0 0
  (example_5_m800_0-3 "" 3790356653 ("" (interval) nil) nil shostak)
  (example_5_m800_0-2 "" 3790354107 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (example_5_m800_0-1 nil 3645974364 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (max_1 0 (max_1-3 "" 3790356654 ("" (interval) nil) nil shostak)
  (max_1-2 "" 3790354107 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (MAX const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (max_1-1 nil 3708473097 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (MAX const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (min_1 0 (min_1-3 "" 3790356654 ("" (interval) nil) nil shostak)
  (min_1-2 "" 3790354108 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (MIN const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (min_1-1 nil 3708473465 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (MIN const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (floor_sqrt_2_TCC1 0
  (floor_sqrt_2_TCC1-1 nil 3708474789 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil (floor_sqrt_2 subtype "interval_examples4Q.x" "nonneg_real")))
 (floor_sqrt_2 0
  (floor_sqrt_2-3 "" 3790356655 ("" (interval) nil) nil shostak)
  (floor_sqrt_2-2 "" 3790354109 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (FLOOR const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (floor_sqrt_2-1 nil 3708474797 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (FLOOR const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)))


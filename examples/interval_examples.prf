(interval_examples
 (sqrt23 0
  (sqrt23-3 "" 3790356504 ("" (numerical (! 1 1) :verbose? t) nil) nil
   shostak)
  (sqrt23-2 "" 3790353961 ("" (numerical (! 1 1) :verbose? t) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (|##| const-decl "bool" interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak)
  (sqrt23-1 nil 3600857800 ("" (numerical (! 1 1) :verbose? t) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (|##| const-decl "bool" interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (sin6sqrt2 0
  (sin6sqrt2-3 "" 3790356507 ("" (numerical (! 1 1)) nil) nil shostak)
  (sin6sqrt2-2 "" 3790353970 ("" (numerical (! 1 1)) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (sin const-decl "real" sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak)
  (sin6sqrt2-1 nil 3600857800 ("" (numerical (! 1 1)) nil nil)
   ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (numerical_soundness formula-decl nil numerical_bandb
     interval_arith)
    (sound? const-decl "bool" numerical_bandb interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (|##| const-decl "bool" interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (sin const-decl "real" sincos_def trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (Interval type-eq-decl nil interval interval_arith)
    (list type-decl nil list_adt nil)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (IntervalMinMax type-eq-decl nil numerical_bandb interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (numerical const-decl "Output" numerical_bandb interval_arith)
    (altdir_maxvar const-decl "DirVar" numerical_bandb interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (sqrtx3_TCC1 0
  (sqrtx3_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil (sqrtx3 subtype "interval_examples.x" "nonneg_real")))
 (sqrtx3 0 (sqrtx3-3 "" 3790356510 ("" (interval) nil) nil shostak)
  (sqrtx3-2 "" 3790353973 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (sqrtx3-1 nil 3600857800 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (tr_TCC1 0
  (tr_TCC1-1 nil 3600857800
   ("" (skosimp*)
    (("" (replace -1)
      (("" (hide -1) (("" (mult-cases -1) nil nil)) nil)) nil))
    nil)
   ((pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   nil
   (tr subtype
    "(number_fields.*(number_fields.*(interval_examples.PI, interval_examples.v), (number_fields./(514, 1000))))"
    "nznum")))
 (tr_TCC2 0
  (tr_TCC2-1 nil 3708378650 ("" (subtype-tcc) nil nil)
   ((cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (Tan? const-decl "bool" trig_basic trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig))
   nil
   (tr subtype
    "number_fields./((number_fields.*(interval_examples.PI, interval_examples.phi)), 180)"
    "(trig_basic.Tan?)")))
 (tr_250_35_TCC1 0
  (tr_250_35_TCC1-2 "" 3790353975
   ("" (skeep :preds? t)
    (("" (expand "Tan?") (("" (interval -5) nil nil)) nil)) nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (cos const-decl "real" sincos_def trig)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak
   (tr_250_35 subtype
    "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)"
    "(trig_basic.Tan?)"))
  (tr_250_35_TCC1-1 nil 3600857800
   ("" (skeep :preds? t)
    (("" (replaces -5)
      (("" (expand "Tan?") (("" (interval -5) nil nil)) nil)) nil))
    nil)
   ((Tan? const-decl "bool" trig_basic trig)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (cos const-decl "real" sincos_def trig)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   nil
   (tr_250_35 subtype
    "number_fields./((number_fields.*(interval_examples.PI, 35)), 180)"
    "(trig_basic.Tan?)")))
 (tr_250_35 0
  (tr_250_35-3 "" 3790356516 ("" (interval) nil) nil shostak)
  (tr_250_35-2 "" 3790353979 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (tan_safe const-decl "real" trig_safe_ops trig)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl
     "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt
     interval_arith)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Tan? const-decl "bool" trig_basic trig))
   shostak)
  (tr_250_35-1 nil 3600857800 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (realexpr? const-decl "bool" interval_expr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (tan_safe const-decl "real" trig_safe_ops trig)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (BLETIN adt-constructor-decl
     "[[IntervalExpr, BoolExpr] -> (bletin?)]" IntervalExpr_adt
     interval_arith)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Tan? const-decl "bool" trig_basic trig))
   shostak))
 (tr_200_250_abs_35 0
  (tr_200_250_abs_35-3 "" 3790356527 ("" (then (skeep) (interval)) nil)
   nil shostak)
  (tr_200_250_abs_35-2 "" 3790353983
   ("" (then (skeep) (interval)) nil nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (tan_safe const-decl "real" trig_safe_ops trig)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (abs_le formula-decl nil abs_lems reals)
    (tan const-decl "real" trig_basic trig)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Tan? const-decl "bool" trig_basic trig))
   shostak)
  (tr_200_250_abs_35-1 nil 3600857800
   ("" (then (skeep) (interval)) nil nil)
   ((pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (pi_safe const-decl "[Unit -> real]" interval_expr_trig
     interval_arith)
    (tan_safe const-decl "real" trig_safe_ops trig)
    (|##| const-decl "bool" interval interval_arith)
    (vars_in_box formula-decl nil box interval_arith)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (abs_le formula-decl nil abs_lems reals)
    (tan const-decl "real" trig_basic trig)
    (lb_interval formula-decl nil interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (RealOrder type-eq-decl nil real_orders reals)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (LETIN adt-constructor-decl "[[RealExpr, RealExpr] -> (letin?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (TAN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (PI_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (cos const-decl "real" sincos_def trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (Tan? const-decl "bool" trig_basic trig))
   shostak))
 (G_TCC1 0
  (G_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) nil nil
   (G subtype "(number_fields.-)(1, interval_examples.x)" "posreal")))
 (A_and_S_TCC1 0
  (A_and_S_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (gt_realorder name-judgement "RealOrder" real_orders reals))
   nil
   (A_and_S subtype "(number_fields.-)(1, interval_examples.X)"
    "posreal")))
 (A_and_S 0 (A_and_S-3 "" 3790356528 ("" (interval) nil) nil shostak)
  (A_and_S-2 "" 3790353985 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (A_and_S-1 nil 3600857800 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (Env type-eq-decl nil box interval_arith)
    (vars_in_box? const-decl "bool" box interval_arith)
    (list2array def-decl "T" array2list structures)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (gt_realorder name-judgement "RealOrder" real_orders reals)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (common_point_TCC1 0
  (common_point_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((|##| const-decl "bool" interval interval_arith)) nil
   (common_point subtype "2"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (common_point_TCC2 0
  (common_point_TCC2-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((|##| const-decl "bool" interval interval_arith)) nil
   (common_point subtype "2"
    "{i: integers.int | booleans.OR(interval_examples.y /= 0, reals.>=(i, 0))}")))
 (common_point_TCC3 0
  (common_point_TCC3-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (|##| const-decl "bool" interval interval_arith))
   nil
   (common_point subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)(interval_examples.x, 1), number_fields.*(interval_examples.r, sincos_def.cos(interval_examples.theta))) = 0), reals.>=(i, 0))}")))
 (common_point_TCC4 0
  (common_point_TCC4-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (|##| const-decl "bool" interval interval_arith))
   nil
   (common_point subtype "2"
    "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.-)((number_fields.-)(interval_examples.y, 1), number_fields.*(interval_examples.r, sincos_def.sin(interval_examples.theta))) = 0), reals.>=(i, 0))}")))
 (common_point 0
  (common_point-3 "" 3790356533 ("" (interval :verbose? t) nil) nil
   shostak)
  (common_point-2 "" 3790353990 ("" (interval :verbose? t) nil nil)
   ((cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (list2array def-decl "T" array2list structures)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (cos const-decl "real" sincos_def trig)
    (sin const-decl "real" sincos_def trig))
   shostak)
  (common_point-1 nil 3600857800 ("" (interval :verbose? t) nil nil)
   ((cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (BNOT adt-constructor-decl "[BoolExpr -> (bnot?)]" IntervalExpr_adt
     interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (list2array def-decl "T" array2list structures)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (lt_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BAND adt-constructor-decl "[[BoolExpr, BoolExpr] -> (band?)]"
     IntervalExpr_adt interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (cos const-decl "real" sincos_def trig)
    (sin const-decl "real" sincos_def trig))
   shostak))
 (r_TCC1 0
  (r_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil) nil nil
   (r subtype "3"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (r_TCC2 0
  (r_TCC2-1 nil 3600857800 ("" (subtype-tcc) nil nil) nil nil
   (r subtype "5"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (atan_implementation 0
  (atan_implementation-3 "" 3790356536 ("" (interval :precision 4) nil)
   nil shostak)
  (atan_implementation-2 "" 3790353998
   ("" (interval :precision 4) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (abs_le formula-decl nil abs_lems reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ATAN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak)
  (atan_implementation-1 nil 3600857800
   ("" (interval :precision 4) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (|##| const-decl "bool" interval interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (atan const-decl "{x: real_abs_lt_pi2 | y = tan_restrict(x)}" atan
          trig)
    (tan_restrict const-decl "real" trig_basic trig)
    (real_abs_lt_pi2 nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (abs_le formula-decl nil abs_lems reals)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (ATAN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx trig)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig))
   shostak))
 (ex1_ba_TCC1 0
  (ex1_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((|##| const-decl "bool" interval interval_arith)) nil
   (ex1_ba subtype "2"
    "{i: integers.int | booleans.OR(interval_examples.x /= 0, reals.>=(i, 0))}")))
 (ex1_ba_TCC2 0
  (ex1_ba_TCC2-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil
   (ex1_ba subtype "(number_fields.+)(1, interval_examples.x)"
    "posreal")))
 (ex1_ba 0 (ex1_ba-3 "" 3790356538 ("" (interval) nil) nil shostak)
  (ex1_ba-2 "" 3790354000 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (ex1_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (ex2_ba_TCC1 0
  (ex2_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil
   (ex2_ba subtype "(number_fields.-)(1, interval_examples.x)"
    "posreal")))
 (ex2_ba 0 (ex2_ba-3 "" 3790356540 ("" (interval) nil) nil shostak)
  (ex2_ba-2 "" 3790354002 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (ex2_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (ex3_ba_TCC1 0
  (ex3_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil
   (ex3_ba subtype "(number_fields.-)(1, interval_examples.x)"
    "posreal")))
 (ex3_ba 0 (ex3_ba-3 "" 3790356542 ("" (interval) nil) nil shostak)
  (ex3_ba-2 "" 3790354004 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (ex3_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (ex4_ba 0 (ex4_ba-3 "" 3790356544 ("" (interval) nil) nil shostak)
  (ex4_ba-2 "" 3790354006 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (ex4_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (ex5_ba_TCC1 0
  (ex5_ba_TCC1-1 nil 3600857800 ("" (subtype-tcc) nil nil)
   ((ge_realorder name-judgement "RealOrder" real_orders reals)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (|##| const-decl "bool" interval interval_arith))
   nil
   (ex5_ba subtype "(number_fields.+)(1, interval_examples.x)"
    "posreal")))
 (ex5_ba 0 (ex5_ba-3 "" 3790356546 ("" (interval) nil) nil shostak)
  (ex5_ba-2 "" 3790354008 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (ex5_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ln_safe const-decl "real" lnexp_safe_ops lnexp)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (LN_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (ABS adt-constructor-decl "[RealExpr -> (abs?)]" IntervalExpr_adt
     interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (ex6_ba 0 (ex6_ba-3 "" 3790356547 ("" (interval) nil) nil shostak)
  (ex6_ba-2 "" 3790354009 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (ex6_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (SQ adt-constructor-decl "[RealExpr -> (sq?)]" IntervalExpr_adt
     interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (ex7_ba 0 (ex7_ba-3 "" 3790356549 ("" (interval) nil) nil shostak)
  (ex7_ba-2 "" 3790354010 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak)
  (ex7_ba-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (POW adt-constructor-decl "[[RealExpr, nat] -> (pow?)]"
     IntervalExpr_adt interval_arith)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (|##| const-decl "bool" interval interval_arith))
   shostak))
 (Tunnel_3_IL 0
  (Tunnel_3_IL-3 "" 3790356551 ("" (interval) nil) nil shostak)
  (Tunnel_3_IL-2 "" 3790354012 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Tunnel_3_IL-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (Tunnel_3_IL_LU 0
  (Tunnel_3_IL_LU-3 "" 3790356553 ("" (interval) nil) nil shostak)
  (Tunnel_3_IL_LU-2 "" 3790354014 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (Tunnel_3_IL_LU-1 nil 3600857801 ("" (interval) nil nil)
   ((Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (ub_interval formula-decl nil interval interval_arith)
    (lb_interval formula-decl nil interval interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box formula-decl nil box interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (EXP_n const-decl "RealExpr" interval_expr_lnexp interval_arith)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (max_sin_cos 0
  (max_sin_cos-3 "" 3790356554 ("" (interval) nil) nil shostak)
  (max_sin_cos-2 "" 3790354015 ("" (interval) nil nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (MAX const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (max_sin_cos-1 nil 3708870709 ("" (interval) nil nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (ge_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (SUB adt-constructor-decl "[[RealExpr, RealExpr] -> (sub?)]"
     IntervalExpr_adt interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (MAX const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak))
 (min_sin_cos 0
  (min_sin_cos-3 "" 3790356555 ("" (interval) nil) nil shostak)
  (min_sin_cos-2 "" 3790354016 ("" (interval) nil nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (MIN const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)
  (min_sin_cos-1 nil 3708870709 ("" (interval) nil nil)
   ((sqrt_pos application-judgement "posreal" sqrt reals)
    (Maybe type-decl nil Maybe structures)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe structures)
    (val adt-accessor-decl "[(some?) -> T]" Maybe structures)
    (IntervalOutput type-eq-decl nil gbandb_boolexpr interval_arith)
    (Box type-eq-decl nil box interval_arith)
    (ProperBox? const-decl "bool" box interval_arith)
    (ProperBox type-eq-decl nil box interval_arith)
    (DirVar type-eq-decl nil branch_and_bound structures)
    (DirVarStack type-eq-decl nil branch_and_bound structures)
    (DirVarSelector type-eq-decl nil branch_and_bound structures)
    (Output type-eq-decl nil branch_and_bound structures)
    (interval const-decl "Output" interval_bandb interval_arith)
    (alt_max const-decl "DirVar" gbandb_boolexpr interval_arith)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (vars_in_box formula-decl nil box interval_arith)
    (length_singleton formula-decl nil more_list_props structures)
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box interval_arith)
    (|##| const-decl "bool" interval interval_arith)
    (sqrt_safe_eq formula-decl nil reals_safe_ops reals)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (eval def-decl "real" interval_expr interval_arith)
    (beval def-decl "bool" interval_bexpr interval_arith)
    (list2array def-decl "T" array2list structures)
    (vars_in_box? const-decl "bool" box interval_arith)
    (Env type-eq-decl nil box interval_arith)
    (sound? const-decl "bool" interval_bandb interval_arith)
    (interval_soundness formula-decl nil interval_bandb interval_arith)
    (le_realorder name-judgement "RealOrder" real_orders reals)
    (r2E const-decl "RealExpr" interval_expr interval_arith)
    (SQRT_n const-decl "RealExpr" interval_expr_extra interval_arith)
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt interval_arith)
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt interval_arith)
    (COS_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (SIN_n const-decl "RealExpr" interval_expr_trig interval_arith)
    (MIN const-decl "RealExpr" interval_expr_extra interval_arith)
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     interval_arith)
    (RealOrder type-eq-decl nil real_orders reals)
    (realorder? const-decl "bool" real_orders reals)
    (X const-decl "RealExpr" interval_expr interval_arith)
    (BINCLUDES adt-constructor-decl
     "[[RealExpr, Interval] -> (bincludes?)]" IntervalExpr_adt
     interval_arith)
    (Interval type-eq-decl nil interval interval_arith)
    (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (BIMPLIES adt-constructor-decl
     "[[BoolExpr, BoolExpr] -> (bimplies?)]" IntervalExpr_adt
     interval_arith)
    (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt interval_arith)
    (IntervalExpr type-decl nil IntervalExpr_adt interval_arith))
   shostak)))


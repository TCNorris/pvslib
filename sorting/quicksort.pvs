%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% Ariane A. Almeida & Thiago M.F. Ramos & 
%%% Ana C. R. Oliveira Valverde & M. Ayala-Rincon
%%% Last modification:  May, 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

quicksort [T : TYPE,(IMPORTING total_preorder) leq : (total_preorder?[T])]: THEORY

BEGIN


IMPORTING sorting[T, leq]
l,l1,l2 : VAR list[T]
x,p: VAR T

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% The functions below select, respectively, the 
%%%%% elelments smaller or equal and bigger than a given pivot
%%%%% creating new lists.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


 leq_elements (l,p): RECURSIVE list[T] = 
    CASES l OF 
      null: null,
      cons (x, r): IF leq(x, p) THEN 
                    cons (x, leq_elements (r, p))
                   ELSE
                    leq_elements (r, p)
                   ENDIF
    ENDCASES
  MEASURE length (l)

 g_elements (l,p): RECURSIVE list[T] = 
    CASES l OF 
      null: null,
      cons (x, r): IF gt(x, p) THEN 
                    cons (x, g_elements (r, p))
                   ELSE
                    g_elements (r, p)
                   ENDIF
    ENDCASES
  MEASURE length (l)

leq_elements_size : LEMMA 
FORALL (l1 : list[T], x:T) : 
  length(leq_elements(l1,x)) <= length(l1)

g_elements_size : LEMMA 
FORALL (l1 : list[T], x:T) : 
  length(g_elements(l1,x)) <= length(l1)

same_occurrence_leq: LEMMA
FORALL (l1:list[T], x,p:T):
  leq(x, p) IMPLIES 
  ((occurrences(l1)(x) = occurrences(leq_elements(l1,p))(x))
  AND 
  (occurrences(g_elements(l1,p))(x) = 0))

same_occurrence_g: LEMMA
FORALL (l1:list[T], x,p:T):
  gt(x, p) IMPLIES 
  ((occurrences(l1)(x) = occurrences(g_elements(l1,p))(x))
  AND 
  (occurrences(leq_elements(l1,p))(x) = 0))

quick_sort (l): RECURSIVE list[T] = 
     CASES l OF 
       null: null,
       cons (x, r): append 
        (quick_sort (leq_elements (r,x)), 
          cons (x, quick_sort (g_elements (r, x))))
     ENDCASES
  MEASURE length (l)

g_leq_car_size:  LEMMA 
FORALL (l1: list[T]): 
  NOT (l1=null) IMPLIES
       (length(g_elements(cdr(l1), car(l1))) +
       length(leq_elements(cdr(l1), car(l1))) + 1
       = length(l1))

quick_sort_size: LEMMA
FORALL (l : list[T]) :
  length(quick_sort(l)) = length(l)

leq_elements_works: LEMMA
FORALL(l:list[T], x,i: T):
  member(i,leq_elements(l,x)) IMPLIES leq(i, x)

g_elements_works: LEMMA
FORALL(l:list[T], x,i: T):
  member(i,g_elements(l,x)) IMPLIES gt(i, x)

quick_sort_is_permutation: LEMMA
FORALL (l : list[T]):
  permutations(quick_sort(l),l)

append_null_in_sorted_is_sorted: LEMMA
  FORALL (l1, l2: list[T]):
  	 ((is_sorted?(l1) AND is_sorted?(l2)) AND (null?(l1) OR null(l2))) IMPLIES 
	 is_sorted?(append(l1,l2))

cons_in_sorted: LEMMA
 FORALL ((l1: list[T] | NOT null?(l1)), x:T):
 	is_sorted?(l1) AND leq(x, car(l1)) IMPLIES is_sorted?(cons(x,l1))

quick_sort_is_sorted: LEMMA
FORALL (l : list[T]):
  is_sorted?(quick_sort(l))

quick_sort_works: LEMMA
FORALL (l : list[T]):
  is_sorted?(quick_sort(l)) AND permutations(quick_sort(l), l)

END quicksort

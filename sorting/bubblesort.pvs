%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Flavio L.C. de Moura,
%%% Ariane Alves Almeida
%%% Last modification:  May 06, 2020
%%% 
%%% This file contains the specification of bubblesort and
%%% formalization of its correctness and completeness. 
%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

bubblesort  [T : TYPE, (IMPORTING total_preorder) leq : (total_preorder?[T])] : THEORY
BEGIN



IMPORTING   sorting[T, leq] 

l,l1,l2 : VAR list[T]
%i,j,k,n : VAR nat

% This is the bubbling function that moves the greates key in
% the n-prefix of a list l to the n-th position of the list. 
bubbling(l, ( n : below[ length(l)])) : RECURSIVE  list[T] =
IF n = 0 THEN l
ELSIF gt(car(l), car(cdr(l))) THEN cons(car(cdr(l)), bubbling(cons(car(l),cdr(cdr(l))), n - 1))
ELSE cons(car(l), bubbling(cdr(l), n - 1))
ENDIF
MEASURE n   

% This simple lemma is necessary to prove some TCCs for 
% bubblesort_aux. It states the simple result that bubbling
% of a list gives as output a list of the same length.
bubbling_preserves_length : LEMMA
FORALL  (l: list[T], n :below[length(l)]) :
  length(bubbling(l,n)) = length(l)

% This lemma states invariance of the keys in the n-suffix of
% a list l, when bubbling acts in its n-prefix. 
bubbling_preserves_suffix : LEMMA  
FORALL  (l: list[T], n :below[length(l)]) :
 LET l1 = bubbling(l,n) IN
   FORALL (i:below[length(l)]) :  i > n IMPLIES nth(l1,i) = nth(l,i)  

% This is the auxiliary function that calls bubbling addequately
% starting from n. The result is that the first n+1 elements of the
% given input list will be sorted. 
bubblesort_aux(l, ( n : below[length(l) ] )) : RECURSIVE list[T] =
IF n = 0 THEN l
ELSE bubblesort_aux(bubbling(l, n), n-1)
ENDIF
MEASURE n

% This states that bubblesort_aux also preserves length of the
% input list.
bubblesort_aux_preserves_length : LEMMA
FORALL  (l: list[T], n :below[length(l)]) :
  length(bubblesort_aux(l,n)) = length(l)

% This is the main function which calls the auxiliary function
% bubblesort_aux starting from length of the input list minus one.  
% As result, bubblesort_aux will sort the whole input list.
bubblesort(l) : list[T] = 
IF null?(l) THEN l
ELSE bubblesort_aux(l, length(l) - 1 )
ENDIF

% For proving nex lemma, named bubbling_preserves_contents, you 
% need only to use lemmas related with transitivity, cons and 
% elimination of members of permutations (available in sorting Theory).
bubbling_preseves_contents :  LEMMA  
FORALL (l: list[T], n :below[length(l)]) :
 permutations(l, bubbling(l,n))

% Despite this lemma is proved directly, another interesting 
% approach would be using lemmas in sorting Theory stating 
% that permutations with identical suffixes that are also 
% permutations, have as prefixes permutations. 
bubbling_preserves_prefix : LEMMA
FORALL (l: list[T], n :below[length(l)]) :
   FORALL (i:below[n+1]) :  EXISTS (j:below[n+1]) : nth(l,i) = nth(bubbling(l,n),j)  

% This is the relevant theorem about ordering regarding the
% funcion bubbling: bubbling n times moves the greates key
% in the n-prefix of the input list to the n-th position.
bubbling_bubbles : LEMMA
FORALL  (l: list[T], n :below[length(l)]) :
 LET l1 = bubbling(l,n) IN
   FORALL (i:nat) :  i <= n IMPLIES leq(nth(l1,i), nth(l1,n)) 

% The formalization of this lemma uses the fact that outputs
% of bubblesort_aux are permutations and their n-prefixes too.
% Thus, applying lemmas for append of permutations in the
% sorting theory one obtains the proof.
bubblesort_aux_preserves_suffix : LEMMA
FORALL  (l: list[T], n :below[length(l)]) :
 LET l1 = bubblesort_aux(l,n) IN
   FORALL (i:below[length(l)]) : i > n IMPLIES nth(l1,i) = nth(l,i)  

% This is a simple interesting lemma that needs only
% transitivity of permutations and bubbling_preserves_contents.
bubblesort_aux_is_permutation : LEMMA
FORALL  (l: list[T], n : below[length(l)]) : permutations(l, bubblesort_aux(l, n))

% This lemma is proved directly.
bubblesort_aux_preserves_prefix : LEMMA
FORALL  (l: list[T], n :below[length(l)]) :
 LET l1 = bubblesort_aux(l,n) IN
   FORALL (i:below[n+1]) :  EXISTS (j:below[n+1]) : nth(l1,i) = nth(l,j)  

% This needs only the previous lemma.
bubblesort_is_permutation : LEMMA
FORALL (l: list[T]): permutations(l, bubblesort(l)) 

% It depends on bubblesort_aux_preserves_prefix, suffix, bubbling_preserves_contents
% and bubblesort_aux_is_permutation.
bubblesort_aux_sorts_prefix : LEMMA
FORALL  (l: list[T], n : below[length(l)], i : below[n]) : 
   leq(nth(bubblesort_aux(l, n),i), nth(bubblesort_aux(l, n),i+1))

% This lemma depends of bubblesort_aux_sorts_prefix - previus one. 
bubblesort_is_sorted  : LEMMA 
FORALL (l: list[T]): is_sorted?(bubblesort(l)) 

% This is the main lemma stating that bubblesort with input a list
% l, gives as output a permutation of l that is sorted. Since the
% sentence is universally quantified, this constitutes also a 
% completeness lemma. 
% This follows straightforwardly from the previous two lemmas.
bubblesort_works : LEMMA		 
FORALL (l: list[T]):
     is_sorted?(bubblesort(l)) AND permutations(l, bubblesort(l)) 


END bubblesort

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% Ariane A. Almeida & M. Ayala-Rincon
%%% Last modification:  May 06, 2020
%%%
%%% This theory contains verification of sorting by selection
%%% of minimum and switching.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sorting_min[T : TYPE, (IMPORTING total_preorder) leq : (total_preorder?[T])]: THEORY

BEGIN

 IMPORTING sorting[T, leq]

 l,l1,l2 : VAR list[T]
 x: VAR T

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sorting by switching and reversals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% This function switches the minimal element 
%%% of a non empty list to the end of the list
switching_min(l : list[T]) : RECURSIVE list[T] =
 IF l`length < 2 THEN l
 ELSIF lt(car(l), car(cdr(l))) THEN 
    cons(car(cdr(l)), switching_min(cons(car(l), cdr(cdr(l))))) 
 ELSE cons(car(l), switching_min(cdr(l))) 
 ENDIF
MEASURE length(l)

%% occurrence of an element implies that the list have this element

reverse_is_permutation : LEMMA
        FORALL (l:list[T]) : permutations(reverse(l),l)


swch_min_preserves_length : LEMMA
   FORALL (l : list[T]) : 
     length(l) = length(switching_min(l))

%% switching_min preserves membership. 
 
swch_min_preserves_contents : LEMMA
   FORALL (l : list[T], i : T) : member(i,l) IMPLIES member(i,switching_min(l))

%% switching_min gives as output a permutation of the input list.

swch_min_is_permutation : LEMMA
   FORALL (l : list[T]) : permutations(l, switching_min(l))

last_swch_min_element_is_least : LEMMA
   FORALL (l : list[T], k: below[l`length]) : leq(nth(switching_min(l),length(l)-1), nth(l,k))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% sorting_min sorts by switching and reversals. 
%%% In each recursive step the 
%%% minimum of a partial list is switched to the
%%% end of the list; the sub list is then reversed and
%%% the process recursively applied to the cdr
%%% of the reverse of the switched list.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sorting_min(l : list[T]) : RECURSIVE list[T] =
 IF l`length < 2 THEN l
 ELSE LET rev_sw_min = reverse(switching_min(l)) IN
       cons(car(rev_sw_min), sorting_min(cdr(rev_sw_min)))
 ENDIF
MEASURE length(l)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Auxiliary lemmas and proof that sorting_min  
%%% works: the last LEMMA below: sorting_min_work  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sorting_min_preserves_length : LEMMA
   FORALL (l : list[T]) : 
     length(l) = length(sorting_min(l))

sorting_min_is_permutations: LEMMA
FORALL (l : list[T]) : permutations(l, sorting_min(l))


swch_min_moves_min_to_end : LEMMA
   FORALL (l : list[T]) : 
     NOT null?(l) IMPLIES 
       FORALL (k : below[length(l)]) : 
         geq(nth(switching_min(l),k), nth(switching_min(l),length(l) -1))

sorting_min_moves_min_to_begining : LEMMA 
    FORALL (l : list[T]) :
      NOT null?(l) IMPLIES
        FORALL (k : below[l`length]) :
          leq(nth(sorting_min(l),0), nth(sorting_min(l),k))

%%% Formalizes the fact that sorting_min is correct. 
sorting_min_work  : LEMMA
FORALL (l: list[T]): is_sorted?(sorting_min(l)) AND permutations(l, sorting_min(l)) 

END sorting_min

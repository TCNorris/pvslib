%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Grupo de Teoria da Computacao, Universidade de Brasilia
%%% M. Ayala-Rincon, Ariane A. Almeida
%%% Last modification:  May, 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%
%%%%% In the sequel insertion sort on finite sequences is given.
%%%%% and proved correct by functional equivalence with
%%%%% insertion sort on lists.
%%%%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

insertionsort_fs[T : TYPE, (IMPORTING total_preorder) leq : (total_preorder?[T])]: THEORY

BEGIN

 IMPORTING sorting_seq[T, leq]

 s,s1,s2 : VAR finseq[T]
 x: VAR T

%%%%% This function correctly inserts an element in a non decreasing 
%%%%% sorted list.
%%%%% It looks for the right position recursively.
insertion (x, s): RECURSIVE finseq[T] =
	IF length(s) = 0 THEN add_first(x,s)
	ELSIF leq(x, first(s)) THEN add_first(x,s) 
	ELSE add_first(first(s), insertion(x,rest(s)))
ENDIF
MEASURE length(s)

length_insertion  : LEMMA
FORALL (s : finseq[T], x) :
length(insertion(x, s)) = length(s) + 1


occ_in_insert : LEMMA
FORALL (s : finseq[T], x,y:T) :
IF x=y THEN occurrences(insertion(y,s))(x) = 1 + occurrences(s)(x)
ELSE  occurrences(insertion(y,s))(x) = occurrences(s)(x)
ENDIF

%%%%% This function sorts a list recursively using the 
%%%%% insert function defined above
fs_insertion_sort(s): RECURSIVE finseq[T] = 
IF length(s) = 0 THEN s ELSE
insertion(first(s), fs_insertion_sort(rest(s)))
ENDIF
MEASURE length(s)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Based on the poof techniques applied to formalize 
%%%%% correctness of searching and sorting by switching and 
%%%%% reversals, correctness of the insertion sort function 
%%%%% is proved below.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% insert increases the length of lists by one:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fs_insert_size: LEMMA
FORALL (s: finseq[T], x: T):
       insertion(x,s)`length = s`length + 1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% Inserting an element in a sorted list in non decreasing 
%%%%% order gives as output a correctly sorted list; that is: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fs_insert_in_sorted_preserves_sort : LEMMA
FORALL (s: finseq[T], x: T):
   is_sorted?(s) IMPLIES is_sorted?(insertion(x,s))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% insertion_sort in fact sorts lists; that is, 
%%%%% the output list has exactly the same number of
%%%%% ocurrences of each element in the original list
%%%%% and is sorted as stated by insertion_sort_works
%%%%% lemma below.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% A few lemmas are added to simplify the proof

fs_insertionsort_is_sorted: LEMMA
FORALL (s : finseq[T]) : is_sorted?(fs_insertion_sort(s))

fs_ins_and_add_in_perm_is_perm : LEMMA
FORALL (s1, 
       (s2  | permutations(s1,s2)),  
        x: T) : permutations(add_first(x,s1), insertion(x,s2))

fs_insertion_sort_is_permutations: LEMMA	   
FORALL (s) : permutations(s, fs_insertion_sort(s))

fs_insertion_sort_works : LEMMA		 
FORALL (s):
     is_sorted?(fs_insertion_sort(s)) AND permutations(s, fs_insertion_sort(s)) 

END insertionsort_fs

(Stm
 (Stm_measure_TCC1 0
  (Stm_measure_TCC1-1 nil 3353643606 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (Stm_measure termination "Stm.Stm_measure(Stm.S1)" "nil")))
 (Stm_measure_TCC2 0
  (Stm_measure_TCC2-1 nil 3353643606 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (Stm_measure termination "Stm.Stm_measure(Stm.S2)" "nil")))
 (Stm_measure_TCC3 0
  (Stm_measure_TCC3-1 nil 3353643606 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (Stm_measure termination "Stm.Stm_measure(Stm.S1)" "nil")))
 (Stm_measure_TCC4 0
  (Stm_measure_TCC4-1 nil 3353644080 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (Stm_measure termination "Stm.Stm_measure(Stm.S2)" "nil")))
 (Stm_measure_TCC5 0
  (Stm_measure_TCC5-1 nil 3353644080 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (Stm_measure termination "Stm.Stm_measure(Stm.S1)" "nil")))
 (IMP_measure_induction_TCC1 0
  (IMP_measure_induction_TCC1-1 nil 3353643606
   ("" (lemma "wf_nat")
    (("" (expand "well_founded?")
      (("" (expand "restrict") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (restrict const-decl "R" restrict nil)
    (wf_nat formula-decl nil naturalnumbers nil))
   nil
   (IMP_measure_induction subtype
    "restrict[[real, real], [nat, nat], booleans.bool].restrict(reals.<)"
    "(orders[nat].well_founded?)")))
 (structural_induction 0
  (structural_induction-1 nil 3353642491
   ("" (skolem!)
    (("" (lemma "measure_induction" ("p" "p!1"))
      (("" (skosimp)
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (skolem + ("S!1"))
              (("2" (flatten)
                (("2" (case "Assign?(S!1)")
                  (("1" (hide-all-but (-1 -3 1))
                    (("1" (inst - "x(S!1)" "a(S!1)")
                      (("1" (case-replace "Assign(x(S!1), a(S!1)) = S!1")
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (case "Skip?(S!1)")
                    (("1" (hide-all-but (-1 -4 2))
                      (("1" (case-replace "S!1=Skip")
                        (("1" (decompose-equality 1) nil nil)) nil))
                      nil)
                     ("2" (case "Sequence?(S!1)")
                      (("1" (hide-all-but (-1 -2 -5 3))
                        (("1" (inst - "S1(S!1)" "S2(S!1)")
                          (("1"
                            (case-replace "Sequence(S1(S!1), S2(S!1)) = S!1")
                            (("1" (inst-cp - "S1(S!1)")
                              (("1" (inst - "S2(S!1)")
                                (("1" (expand "Stm_measure" -3 2)
                                  (("1" (expand "Stm_measure" -4 2)
                                    (("1" (assert)
                                      (("1"
                                        (split -3)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality 1) nil nil)
                             ("3" (assert) nil nil) ("4" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil) ("3" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (case "Conditional?(S!1)")
                        (("1" (hide-all-but (-1 -2 -6 4))
                          (("1" (inst - "b(S!1)" "S1(S!1)" "S2(S!1)")
                            (("1" (inst-cp - "S1(S!1)")
                              (("1" (inst - "S2(S!1)")
                                (("1" (expand "Stm_measure" -2 2)
                                  (("1" (expand "Stm_measure" -3 2)
                                    (("1" (assert)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case-replace
                                             "Conditional(b(S!1), S1(S!1), S2(S!1)) = S!1")
                                            (("1"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "max")
                                            (("2"
                                              (lift-if)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil) ("3" (assert) nil nil)
                             ("4" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (case "While?(S!1)")
                          (("1" (hide-all-but (-1 -2 -7 5))
                            (("1" (inst - "b(S!1)" "S1(S!1)")
                              (("1" (inst - "S1(S!1)")
                                (("1" (expand "Stm_measure" -2 2)
                                  (("1" (assert)
                                    (("1"
                                      (case-replace
                                       "While(b(S!1), S1(S!1)) = S!1")
                                      (("1" (decompose-equality 1) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil) ("3" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil) (restrict const-decl "R" restrict nil)
    (Stm_measure def-decl "nat" Stm nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) (Stm type-decl nil Stm nil)
    (pred type-eq-decl nil defined_types nil)
    (measure_induction formula-decl nil measure_induction nil)
    (Assign? adt-recognizer-decl "[Stm -> boolean]" Stm nil)
    (S!1 skolem-const-decl "Stm" Stm nil)
    (a adt-accessor-decl "[(Assign?) -> AExp[V]]" Stm nil)
    (AExp type-decl nil AExp nil)
    (x adt-accessor-decl "[(Assign?) -> V]" Stm nil)
    (V formal-nonempty-type-decl nil Stm nil)
    (Stm_Assign_extensionality formula-decl nil Stm nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Assign adt-constructor-decl "[[V, AExp[V]] -> (Assign?)]" Stm nil)
    (Sequence? adt-recognizer-decl "[Stm -> boolean]" Stm nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Conditional? adt-recognizer-decl "[Stm -> boolean]" Stm nil)
    (While? adt-recognizer-decl "[Stm -> boolean]" Stm nil)
    (S2 shared-adt-accessor-decl
     "[{x: Stm | Sequence?(x) OR Conditional?(x)} -> Stm]" Stm nil)
    (S1 shared-adt-accessor-decl
     "[{x: Stm | Sequence?(x) OR Conditional?(x) OR While?(x)} -> Stm]" Stm
     nil)
    (Stm_Sequence_extensionality formula-decl nil Stm nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}" real_defs
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Sequence adt-constructor-decl "[[Stm, Stm] -> (Sequence?)]" Stm nil)
    (While adt-constructor-decl "[[BExp[V], Stm] -> (While?)]" Stm nil)
    (Stm_While_extensionality formula-decl nil Stm nil)
    (Stm_Conditional_extensionality formula-decl nil Stm nil)
    (Conditional adt-constructor-decl
     "[[BExp[V], Stm, Stm] -> (Conditional?)]" Stm nil)
    (BExp type-decl nil BExp nil)
    (b shared-adt-accessor-decl
     "[{x: Stm | Conditional?(x) OR While?(x)} -> BExp[V]]" Stm nil)
    (Stm_Skip_extensionality formula-decl nil Stm nil)
    (Skip adt-constructor-decl "(Skip?)" Stm nil)
    (Skip? adt-recognizer-decl "[Stm -> boolean]" Stm nil))
   shostak)))


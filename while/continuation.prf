(continuation
 (IMP_fixpoints_TCC1 0
  (IMP_fixpoints_TCC1-2 "" 3790337780 ("" (inst + "I[Cont]") nil nil) nil
   shostak
   (IMP_fixpoints existence ""
    "scott_continuous[Cont[V], Cont[V], (sq_le[V]), (sq_le[V])]"))
  (IMP_fixpoints_TCC1-1 nil 3353544462
   ("" (inst + "I[Cont]")
    (("" (assert)
      (("" (expand "scott_continuous?")
        (("" (split)
          (("1" (expand "increasing?")
            (("1" (skosimp) (("1" (expand "I") (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "lub_preserving?")
            (("2" (skosimp*)
              (("2" (expand "I")
                (("2" (expand "image")
                  (("2"
                    (case-replace
                     "{y: Cont | EXISTS (x_1: (D!1)): y = x_1} = D!1")
                    (("2" (apply-extensionality 1 :hide? t)
                      (("2" (case-replace "D!1(x!1)")
                        (("1" (inst + "x!1") nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((I const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (scott_continuous type-eq-decl nil scott_continuity scott)
    (scott_continuous? const-decl "bool" scott_continuity scott)
    (sq_le const-decl "bool" Cont nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (I_is_continuous name-judgement "continuous
    [Cont[V], scott_open_sets[Cont[V], (sq_le)], Cont[V],
     scott_open_sets[Cont[V], (sq_le)]]" continuation nil))
   nil
   (IMP_fixpoints existence ""
    "scott_continuous[Cont[V], Cont[V], (sq_le[V]), (sq_le[V])]")))
 (identity_continuous 0
  (identity_continuous-1 nil 3353548340
   ("" (expand "I")
    (("" (expand "scott_continuous?")
      (("" (split)
        (("1" (expand "increasing?") (("1" (skosimp) nil nil)) nil)
         ("2" (expand "lub_preserving?")
          (("2" (skosimp)
            (("2" (typepred "D!1")
              (("2" (expand "image")
                (("2"
                  (case-replace
                   "{y: Cont | EXISTS (x_1: (D!1)): y = x_1}=D!1")
                  (("2" (hide 2)
                    (("2" (apply-extensionality 1 :hide? t)
                      (("2" (case-replace "D!1(x!1)")
                        (("1" (inst + "x!1") nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scott_continuous? const-decl "bool" scott_continuity scott)
    (lub_preserving? const-decl "bool" scott_continuity scott)
    (directed type-eq-decl nil directed_order_props orders)
    (directed? const-decl "bool" directed_order_props orders)
    (sq_le const-decl "bool" Cont nil) (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil) (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (D!1 skolem-const-decl "directed[Cont[V], (sq_le)]" continuation nil)
    (x!1 skolem-const-decl "[[V -> int] -> lift[State[V]]]" continuation nil)
    (image const-decl "set[R]" function_image nil)
    (increasing? const-decl "bool" fun_preds_partial scott)
    (I const-decl "(bijective?[T, T])" identity nil))
   shostak))
 (composition_continuous 0
  (composition_continuous-2 "" 3790337782
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "scott_continuous?")
          (("" (flatten)
            (("" (expand "o ")
              (("" (split)
                (("1" (expand "increasing?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1" "y!1")
                      (("1" (assert)
                        (("1" (inst - "g!1(x!1)" "g!1(y!1)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "lub_preserving?")
                  (("2" (skosimp)
                    (("2" (typepred "D!1")
                      (("2" (inst - "D!1")
                        (("2" (lemma "lub_set_image" ("g" "g!1" "D" "D!1"))
                          (("2" (assert)
                            (("2" (replace -6)
                              (("2" (inst - "image(g!1,D!1)")
                                (("1" (split -8)
                                  (("1" (replace -1)
                                    (("1"
                                      (case-replace
                                       "image(LAMBDA (x: Cont): f!1(g!1(x)), D!1) = image(f!1, image(g!1, D!1))")
                                      (("1"
                                        (hide-all-but 1)
                                        (("1"
                                          (expand "image")
                                          (("1"
                                            (apply-extensionality 1 :hide? t)
                                            (("1"
                                              (case-replace
                                               "(EXISTS (x_1: (D!1)): x!1 = f!1(g!1(x_1)))")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "g!1(x!2)")
                                                  (("1"
                                                    (inst + "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace 1 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (typepred "x!2")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace -2)
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (inst + "x!3")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace
                                     "image(LAMBDA (x: Cont): f!1(g!1(x)), D!1) = image(f!1, image(g!1, D!1))")
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (expand "image")
                                        (("2"
                                          (apply-extensionality 1 :hide? t)
                                          (("2"
                                            (case-replace
                                             "(EXISTS (x_1: (D!1)): x!1 = f!1(g!1(x_1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "g!1(x!2)")
                                                (("1" (inst + "x!2") nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "x!2")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst + "x!3")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "directed_image"
                                   ("g" "g!1" "D" "D!1"))
                                  (("2" (assert)
                                    (("2" (hide-all-but (-3 1))
                                      (("2"
                                        (expand "image")
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "g!1(x!1)")
                                                  (("2"
                                                    (inst + "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (composition_continuous-1 nil 3353645372
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "scott_continuous?")
          (("" (flatten)
            (("" (expand "o ")
              (("" (split)
                (("1" (expand "increasing?")
                  (("1" (skosimp)
                    (("1" (inst - "x!1" "y!1")
                      (("1" (assert)
                        (("1" (inst - "g!1(x!1)" "g!1(y!1)")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "lub_preserving?")
                  (("2" (skosimp)
                    (("2" (typepred "D!1")
                      (("2" (inst - "D!1")
                        (("2" (lemma "lub_set_image" ("g" "g!1" "D" "D!1"))
                          (("1" (assert)
                            (("1" (replace -6)
                              (("1" (inst - "image(g!1,D!1)")
                                (("1" (split -8)
                                  (("1" (replace -1)
                                    (("1"
                                      (case-replace
                                       "image(LAMBDA (x: Cont): f!1(g!1(x)), D!1) = image(f!1, image(g!1, D!1))")
                                      (("1"
                                        (hide-all-but 1)
                                        (("1"
                                          (expand "image")
                                          (("1"
                                            (apply-extensionality 1 :hide? t)
                                            (("1"
                                              (case-replace
                                               "(EXISTS (x_1: (D!1)): x!1 = f!1(g!1(x_1)))")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst + "g!1(x!2)")
                                                  (("1"
                                                    (inst + "x!2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace 1 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (typepred "x!2")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (replace -1)
                                                          (("2"
                                                            (replace -2)
                                                            (("2"
                                                              (hide-all-but 1)
                                                              (("2"
                                                                (inst + "x!3")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace
                                     "image(LAMBDA (x: Cont): f!1(g!1(x)), D!1) = image(f!1, image(g!1, D!1))")
                                    (("2" (hide-all-but 1)
                                      (("2"
                                        (expand "image")
                                        (("2"
                                          (apply-extensionality 1 :hide? t)
                                          (("2"
                                            (case-replace
                                             "(EXISTS (x_1: (D!1)): x!1 = f!1(g!1(x_1)))")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (inst + "g!1(x!2)")
                                                (("1" (inst + "x!2") nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace 1 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "x!2")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst + "x!3")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "directed_image"
                                   ("g" "g!1" "D" "D!1"))
                                  (("2" (assert)
                                    (("2" (hide-all-but (-3 1))
                                      (("2"
                                        (expand "image")
                                        (("2"
                                          (expand "nonempty?")
                                          (("2"
                                            (expand "empty?")
                                            (("2"
                                              (expand "member")
                                              (("2"
                                                (skosimp*)
                                                (("2"
                                                  (inst - "g!1(x!1)")
                                                  (("2"
                                                    (inst + "x!1")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scott_continuous type-eq-decl nil scott_continuity scott)
    (scott_continuous? const-decl "bool" scott_continuity scott)
    (sq_le const-decl "bool" Cont nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (composition_is_continuous application-judgement "continuous
    [Cont[V], scott_open_sets[Cont[V], (sq_le)], Cont[V],
     scott_open_sets[Cont[V], (sq_le)]]" continuation nil)
    (O const-decl "T3" function_props nil)
    (lub_preserving? const-decl "bool" scott_continuity scott)
    (set type-eq-decl nil sets nil) (nonempty? const-decl "bool" sets nil)
    (directed? const-decl "bool" directed_order_props orders)
    (directed type-eq-decl nil directed_order_props orders)
    (lub_set_image formula-decl nil scott_continuity scott)
    (directed_image formula-decl nil scott_continuity scott)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "Cont[V]" continuation nil)
    (empty? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x!2 skolem-const-decl "(D!1)" continuation nil)
    (x!2 skolem-const-decl "(D!1)" continuation nil)
    (D!1 skolem-const-decl "directed[Cont[V], (sq_le)]" continuation nil)
    (g!1 skolem-const-decl
     "scott_continuous[Cont[V], Cont[V], (sq_le), (sq_le)]" continuation nil)
    (image const-decl "set[R]" function_image nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (increasing? const-decl "bool" fun_preds_partial scott)
    (sq_le_pdcpo name-judgement
     "(pointed_directed_complete_partial_order?[Cont])" continuation nil))
   shostak))
 (assign_continuous 0
  (assign_continuous-1 nil 3354465346
   ("" (skosimp)
    (("" (expand "assign")
      (("" (expand "assign")
        (("" (lemma "Cont.apply_continuous")
          ((""
            (inst -
             "(LAMBDA s: up(lambda (y:V): IF y = x!1 THEN A(a!1)(s) ELSE s(y) ENDIF))")
            (("" (expand "o") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((assign const-decl "State" State nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (apply_continuous formula-decl nil Cont nil)
    (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil)
    (A def-decl "[State -> int]" AExp nil) (AExp type-decl nil AExp nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (up adt-constructor-decl "[T -> (up?)]" lift_adt nil)
    (up? adt-recognizer-decl "[lift -> boolean]" lift_adt nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (assign const-decl "State" State nil))
   shostak))
 (conditional_continuous 0
  (conditional_continuous-1 nil 3354078097
   ("" (skosimp)
    (("" (typepred "f!1")
      (("" (typepred "g!1")
        (("" (expand "scott_continuous?")
          ((""
            (case-replace
             "increasing?(LAMBDA c: conditional(B(b!1), f!1(c), g!1(c)))")
            (("1" (flatten)
              (("1" (expand "lub_preserving?")
                (("1" (skosimp)
                  (("1" (typepred "D!1")
                    (("1" (inst - "D!1")
                      (("1" (inst - "D!1")
                        (("1" (lemma "lub_set_image" ("g" "f!1" "D" "D!1"))
                          (("1" (lemma "lub_set_image" ("g" "g!1" "D" "D!1"))
                            (("1" (assert)
                              (("1" (typepred "lub(image(f!1, D!1))")
                                (("1" (typepred "lub(image(g!1, D!1))")
                                  (("1"
                                    (typepred
                                     "lub(image(LAMBDA c: conditional(B(b!1), f!1(c), g!1(c)), D!1))")
                                    (("1" (expand "least_upper_bound?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -13)
                                          (("1"
                                            (replace -15)
                                            (("1"
                                              (inst
                                               -2
                                               "conditional(B(b!1), lub(image(f!1, D!1)), lub(image(g!1, D!1)))")
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (case
                                                     "(sq_le)(conditional(B(b!1), lub(image(f!1, D!1)),
                          lub(image(g!1, D!1))),lub(image(LAMBDA c: conditional(B(b!1), f!1(c), g!1(c)),
                        D!1)))")
                                                    (("1"
                                                      (typepred "sq_le")
                                                      (("1"
                                                        (expand
                                                         "pointed_directed_complete_partial_order?")
                                                        (("1"
                                                          (expand
                                                           "directed_complete_partial_order?")
                                                          (("1"
                                                            (expand
                                                             "partial_order?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "antisymmetric?")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "conditional(B(b!1), lub(image(f!1, D!1)), lub(image(g!1, D!1)))"
                                                                   "lub(image(LAMBDA c: conditional(B(b!1), f!1(c), g!1(c)), D!1))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (typepred
                                                         "lub(image(LAMBDA c: conditional(B(b!1),f!1(c),g!1(c)),D!1))")
                                                        (("2"
                                                          (name-replace
                                                           "LUB_C"
                                                           "lub(image(LAMBDA c: conditional(B(b!1), f!1(c), g!1(c)),
                        D!1))")
                                                          (("2"
                                                            (expand
                                                             "least_upper_bound?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "upper_bound?"
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -14
                                                                   1
                                                                   rl)
                                                                  (("2"
                                                                    (replace
                                                                     -16
                                                                     1
                                                                     rl)
                                                                    (("2"
                                                                      (replace
                                                                       -16
                                                                       -7
                                                                       rl)
                                                                      (("2"
                                                                        (replace
                                                                         -14
                                                                         -5
                                                                         rl)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "conditional(B(b!1), g!1(lub(D!1)), LUB_C)")
                                                                          (("2"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "conditional(B(b!1), LUB_C, f!1(lub(D!1)))")
                                                                              (("1"
                                                                                (split
                                                                                 -7)
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    -2
                                                                                    1))
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sq_le")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "conditional")
                                                                                      (("1"
                                                                                        (skosimp*)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "s1!1"
                                                                                           "s2!1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "s1!1"
                                                                                             "s2!1")
                                                                                            (("1"
                                                                                              (case-replace
                                                                                               "B(b!1)(s1!1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "upper_bound?")
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "r!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "image"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (skosimp)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -2
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "lub(D!1)")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "least_upper_bound?")
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "upper_bound?"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "increasing?")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -14
                                                                                                                 "x!1"
                                                                                                                 "lub(D!1)")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -16
                                                                                                                   "x!1"
                                                                                                                   "lub(D!1)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -4
                                                                                                                       "conditional(B(b!1), f!1(x!1), g!1(x!1))")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "sq_le")
                                                                                                                        (("1"
                                                                                                                          (skosimp)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "conditional")
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "B(b!1)(s1!1)")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -6
                                                                                                                                 "s1!1"
                                                                                                                                 "s2!1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -17
                                                                                                                                   "s1!1"
                                                                                                                                   "s2!1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "image")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           +
                                                                                                                           "x!1")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "upper_bound?"
                                                                                 1)
                                                                                (("2"
                                                                                  (skosimp)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "r!1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "image"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (skosimp)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x!1")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "sq_le"
                                                                                               1)
                                                                                              (("2"
                                                                                                (skosimp)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "conditional"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (case-replace
                                                                                                     "B(b!1)(s1!1)")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "lub(D!1)")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "least_upper_bound?")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "upper_bound?"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "x!1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "increasing?"
                                                                                                                 -18)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -18
                                                                                                                   "x!1"
                                                                                                                   "lub(D!1)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sq_le"
                                                                                                                       -18)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -18
                                                                                                                         "s1!1"
                                                                                                                         "s2!1")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "conditional(B(b!1), f!1(x!1), g!1(x!1))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "sq_le"
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "s1!1"
                                                                                                             "s2!1")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "conditional"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "image")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "x!1")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (expand "upper_bound?")
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (typepred "r!1")
                                                        (("2"
                                                          (expand "image" -1)
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred "x!1")
                                                              (("2"
                                                                (replace -2)
                                                                (("2"
                                                                  (hide -2)
                                                                  (("2"
                                                                    (expand
                                                                     "sq_le"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "conditional"
                                                                       1)
                                                                      (("2"
                                                                        (skosimp)
                                                                        (("2"
                                                                          (case-replace
                                                                           "B(b!1)(s1!1)")
                                                                          (("1"
                                                                            (replace
                                                                             -17
                                                                             1
                                                                             rl)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (1
                                                                                -2
                                                                                -3
                                                                                -16
                                                                                -11
                                                                                -12))
                                                                              (("1"
                                                                                (expand
                                                                                 "increasing?")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "x!1"
                                                                                   "lub(D!1)")
                                                                                  (("1"
                                                                                    (split
                                                                                     -5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "sq_le")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "s1!1"
                                                                                         "s2!1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "lub(D!1)")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "least_upper_bound?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "upper_bound?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "x!1")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -14
                                                                               2
                                                                               rl)
                                                                              (("2"
                                                                                (typepred
                                                                                 "lub(D!1)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "least_upper_bound?")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "upper_bound?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "x!1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "increasing?"
                                                                                           -15)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -15
                                                                                             "x!1"
                                                                                             "lub(D!1)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "sq_le"
                                                                                                 -15)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -15
                                                                                                   "s1!1"
                                                                                                   "s2!1")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide -2 -4 2)
                (("2" (expand "increasing?")
                  (("2" (skosimp*)
                    (("2" (inst - "x!1" "y!1")
                      (("2" (inst - "x!1" "y!1")
                        (("2" (assert)
                          (("2" (expand "sq_le")
                            (("2" (skosimp)
                              (("2" (expand "conditional")
                                (("2" (inst -3 "s1!1" "s2!1")
                                  (("2" (inst -4 "s1!1" "s2!1")
                                    (("2" (case-replace "B(b!1)(s1!1)")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scott_continuous type-eq-decl nil scott_continuity scott)
    (scott_continuous? const-decl "bool" scott_continuity scott)
    (sq_le const-decl "bool" Cont nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (lub_set_image formula-decl nil scott_continuity scott)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x!1 skolem-const-decl "(D!1)" continuation nil)
    (b!1 skolem-const-decl "BExp[V]" continuation nil)
    (f!1 skolem-const-decl
     "scott_continuous[Cont[V], Cont[V], (sq_le), (sq_le)]" continuation nil)
    (g!1 skolem-const-decl
     "scott_continuous[Cont[V], Cont[V], (sq_le), (sq_le)]" continuation nil)
    (D!1 skolem-const-decl "directed[Cont[V], (sq_le)]" continuation nil)
    (x!1 skolem-const-decl "(D!1)" continuation nil)
    (upper_bound? const-decl "bool" bounded_orders orders)
    (pointed_directed_complete_partial_order? const-decl "bool"
     directed_orders orders)
    (directed_complete_partial_order? const-decl "bool" directed_orders
     orders)
    (fullset_is_clopen name-judgement "clopen[Cont[V], scott_open_sets]"
     continuation nil)
    (partial_order_antisymmetric formula-decl nil partial_order_props orders)
    (antisymmetric? const-decl "bool" relations nil)
    (partial_order? const-decl "bool" orders nil)
    (image const-decl "set[R]" function_image nil)
    (lub const-decl "{x | bounded_orders[T].least_upper_bound?(x, SA, <=)}"
     bounded_order_props orders)
    (lub_set? const-decl "bool" bounded_order_props orders)
    (least_upper_bound? const-decl "bool" bounded_orders orders)
    (directed type-eq-decl nil directed_order_props orders)
    (directed? const-decl "bool" directed_order_props orders)
    (nonempty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (lub_preserving? const-decl "bool" scott_continuity scott)
    (B def-decl "[State -> bool]" BExp nil) (BExp type-decl nil BExp nil)
    (conditional const-decl "Cont" Cont nil)
    (pred type-eq-decl nil defined_types nil)
    (increasing? const-decl "bool" fun_preds_partial scott)
    (sq_le_pdcpo name-judgement
     "(pointed_directed_complete_partial_order?[Cont])" continuation nil))
   shostak))
 (composition_conditional 0
  (composition_conditional-1 nil 3382283903
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (expand "conditional")
        (("" (expand "o ")
          (("" (case-replace "B(b!1)(x!1)") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((V formal-nonempty-type-decl nil continuation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State nonempty-type-eq-decl nil State nil)
    (lift type-decl nil lift_adt nil)
    (O const-decl "LiftPartialFunction[X, Z]" PartialFunctionComposition nil)
    (LiftPartialFunction type-eq-decl nil PartialFunctionDefinitions nil)
    (B def-decl "[State -> bool]" BExp nil) (BExp type-decl nil BExp nil)
    (conditional const-decl "Cont" Cont nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (SS_TCC1 0
  (SS_TCC1-1 nil 3353079331
   ("" (skosimp)
    (("" (lemma "assign_continuous" ("a" "a!1" "x" "x!1"))
      (("" (propax) nil nil)) nil))
    nil)
   ((AExp type-decl nil AExp nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (assign_continuous formula-decl nil continuation nil))
   nil
   (SS subtype
    "(LAMBDA c: LAMBDA s: continuation.c(State[continuation.V].assign(continuation.x, AExp[continuation.V].A(continuation.a))(continuation.s)))"
    "(scott_continuity[Cont[V], Cont[V], (Cont[continuation.V].sq_le), (Cont[continuation.V].sq_le)].scott_continuous?)")))
 (SS_TCC2 0
  (SS_TCC2-1 nil 3353079331
   ("" (skosimp)
    (("" (expand "<<")
      (("" (assert)
        (("" (flatten)
          (("" (assert) (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (SS termination "continuation.SS(continuation.S1)" "nil")))
 (SS_TCC3 0
  (SS_TCC3-1 nil 3353079331 ("" (grind) nil nil)
   ((V formal-nonempty-type-decl nil continuation nil)
    (<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil))
   nil (SS termination "continuation.SS(continuation.S2)" "nil")))
 (SS_TCC4 0
  (SS_TCC4-1 nil 3353079331
   ("" (skosimp)
    (("" (replace -1) (("" (expand "<<") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (SS termination "continuation.SS(continuation.S1)" "nil")))
 (SS_TCC5 0
  (SS_TCC5-1 nil 3353079331
   ("" (skosimp)
    (("" (expand "<<") (("" (replace -1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)) nil
   (SS termination "continuation.SS(continuation.S2)" "nil")))
 (SS_TCC6 0
  (SS_TCC6-1 nil 3353079331
   ("" (skosimp*)
    (("" (typepred "v!1(S1!1)")
      (("1" (typepred "v!1(S2!1)")
        (("1"
          (lemma "conditional_continuous"
           ("b" "b!1" "f" "v!1(S1!1)" "g" "v!1(S2!1)"))
          (("1" (propax) nil nil)) nil)
         ("2" (replace -2) (("2" (expand "<<") (("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (replace -1) (("2" (expand "<<") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil) (Stm type-decl nil Stm nil)
    (scott_continuous? const-decl "bool" scott_continuity scott)
    (sq_le const-decl "bool" Cont nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (scott_continuous type-eq-decl nil scott_continuity scott)
    (BExp type-decl nil BExp nil)
    (conditional_continuous formula-decl nil continuation nil))
   nil
   (SS subtype
    "LAMBDA c: Cont[continuation.V].conditional(BExp[continuation.V].B(continuation.b), continuation.SS(continuation.S1)(continuation.c), continuation.SS(continuation.S2)(continuation.c))"
    "(scott_continuity[Cont[V], Cont[V], (Cont[continuation.V].sq_le), (Cont[continuation.V].sq_le)].scott_continuous?)")))
 (SS_TCC7 0
  (SS_TCC7-1 nil 3353089153 ("" (skosimp) (("" (grind) nil nil)) nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)
    (V formal-nonempty-type-decl nil continuation nil))
   nil (SS termination "continuation.SS(continuation.S1)" "nil")))
 (SS_TCC8 0
  (SS_TCC8-1 nil 3353545746
   ("" (skosimp*)
    (("" (rewrite "conditional_continuous")
      (("1" (lemma "identity_continuous")
        (("1" (expand "I") (("1" (propax) nil nil)) nil)) nil)
       ("2" (typepred "v!1(S1!1)")
        (("1" (lemma "composition_continuous" ("f" "v!1(S1!1)" "g" "g!1"))
          (("1" (expand "o ") (("1" (propax) nil nil)) nil)) nil)
         ("2" (replace -1) (("2" (expand "<<") (("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("3" (replace -1) (("3" (expand "<<") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((conditional_continuous formula-decl nil continuation nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (BExp type-decl nil BExp nil) (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (State nonempty-type-eq-decl nil State nil)
    (lift type-decl nil lift_adt nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sq_le const-decl "bool" Cont nil)
    (scott_continuous? const-decl "bool" scott_continuity scott)
    (scott_continuous type-eq-decl nil scott_continuity scott)
    (Stm type-decl nil Stm nil) (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)
    (I const-decl "(bijective?[T, T])" identity nil)
    (identity_continuous formula-decl nil continuation nil)
    (composition_continuous formula-decl nil continuation nil)
    (O const-decl "T3" function_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (SS subtype
    "LAMBDA c: Cont[continuation.V].conditional(BExp[continuation.V].B(continuation.b), continuation.SS(continuation.S1)(continuation.g(continuation.c)), continuation.c)"
    "scott_continuous[Cont[V], Cont[V], (sq_le[V]), (sq_le[V])]")))
 (SS_TCC9 0
  (SS_TCC9-1 nil 3353545746
   ("" (skosimp*)
    (("" (typepred "v!1(S1!1)")
      (("1" (expand "scott_continuous?")
        (("1" (flatten)
          (("1" (hide -2)
            (("1" (expand "increasing?")
              (("1" (skolem + ("f!1" "g!1"))
                (("1" (flatten)
                  (("1" (expand "continuous_pointwise")
                    (("1" (expand "pointwise")
                      (("1" (skolem + "c!1")
                        (("1" (inst -3 "c!1")
                          (("1" (inst - "f!1(c!1)" "g!1(c!1)")
                            (("1" (assert)
                              (("1" (hide -3 -2)
                                (("1" (expand "sq_le")
                                  (("1" (skolem + ("s!1" "s!2"))
                                    (("1" (flatten)
                                      (("1"
                                        (inst - "s!1" "s!2")
                                        (("1"
                                          (expand "conditional")
                                          (("1"
                                            (case-replace "B[V](b!1)(s!1)")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -1) (("2" (expand "<<") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[Stm])" Stm nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil) (Stm type-decl nil Stm nil)
    (scott_continuous? const-decl "bool" scott_continuity scott)
    (sq_le const-decl "bool" Cont nil)
    (Cont nonempty-type-eq-decl nil Cont nil)
    (lift type-decl nil lift_adt nil)
    (State nonempty-type-eq-decl nil State nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (V formal-nonempty-type-decl nil continuation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (increasing? const-decl "bool" fun_preds_partial scott)
    (pointwise const-decl "bool" pointwise_orders orders)
    (sq_le_pdcpo name-judgement
     "(pointed_directed_complete_partial_order?[Cont])" continuation nil)
    (conditional const-decl "Cont" Cont nil) (BExp type-decl nil BExp nil)
    (B def-decl "[State -> bool]" BExp nil)
    (scott_continuous type-eq-decl nil scott_continuity scott)
    (continuous_pointwise const-decl "bool" pointwise_orders_aux scott))
   nil
   (SS subtype
    "LAMBDA g: LAMBDA c: Cont[continuation.V].conditional(BExp[continuation.V].B(continuation.b), continuation.SS(continuation.S1)(continuation.g(continuation.c)), continuation.c)"
    "(fun_preds_partial[scott_continuous[Cont[V], Cont[V], (sq_le[V]), (sq_le[V])], scott_continuous[Cont[V], Cont[V], (sq_le[V]), (sq_le[V])], pointwise_orders_aux[Cont[V], Cont[V]].continuous_pointwise(Cont[continuation.V].sq_le, Cont[continuation.V].sq_le), pointwise_orders_aux[Cont[V], Cont[V]].continuous_pointwise(Cont[continuation.V].sq_le, Cont[continuation.V].sq_le)].increasing?)"))))


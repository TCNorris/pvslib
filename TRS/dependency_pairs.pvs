%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Dependency Pairs notions and formalization of the equivalence between
%% dependency pairs termination and noetherianity of the innermost 
%% reduction relation. 
%%
%% Author: Ariane Alves Almeida, Thiago Mendonca Ferreira Ramos, 
%%         Mauricio Ayala-Rincon
%%         Universidade de Brasilia
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dependency_pairs[variable: TYPE+, symbol: TYPE+, arity: [symbol -> nat]]: THEORY

  BEGIN

  ASSUMING
   
     IMPORTING variables_term[variable,symbol, arity],
               sets_aux@countability[term],
               sets_aux@countable_props[term]
 
       var_countable: ASSUMPTION is_countably_infinite(V)

  ENDASSUMING
    IMPORTING innermost_reduction[variable, symbol, arity]
		    r,s,t: VAR term
			E: VAR set[rewrite_rule]
	        e, e1, e2: VAR rewrite_rule
	  rho, rho1, rho2: VAR Ren
    sigma, sigma1, sigma2: VAR Sub
    	   	   	p: VAR position
                        R: VAR pred[[term,term]]
		      i,j: VAR nat


  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %%%%% Dependency pairs as pairs of terms
  dep_pair?(E)(s,t): bool =
    app?(t) AND defined?(E)(f(t)) AND 
    EXISTS(e: rewrite_rule):
      member(e,E) AND
      lhs(e) = s AND (EXISTS (p: positions?(rhs(e))): subtermOF(rhs(e),p)=t)

  %%%%% Dependency pairs as pair of rule and position
  dep_pair_alt?(E)(e,p): bool =
    member(e,E) AND app?(lhs(e)) AND positionsOF(rhs(e))(p) AND 
    app?(subtermOF(rhs(e),p)) AND defined?(E)(f(subtermOF(rhs(e),p)))

  %%%%% Types of dependency pairs
   dep_pair(E):     TYPE = (dep_pair?(E))
   dep_pair_alt(E): TYPE = (dep_pair_alt?(E))

  %%%%% The rule and position of a dep_pair?
  rule_and_pos_from_dp(E)(dp: dep_pair(E)): [rewrite_rule,position] = 
     choose({(e:rewrite_rule, p:position) | 
       member(e,E) AND
       lhs(e) = dp`1 AND positionsOF(rhs(e))(p) AND subtermOF(rhs(e),p)=dp`2})  
    

  %% This recursive definition builds from sequences of DPs and   
  %% substitutions, indexed pairs of term and position that will
  %% be used to build an infinite rewriting derivation from a 
  %% chained sequence of DPs 
  term_pos_dps_alt(E)(dps: sequence[dep_pair_alt(E)], 
		  sigmas:sequence[Sub], 
		  i:nat): RECURSIVE {(t,p) | positionsOF(t)(p)}=
   LET delta = ext(sigmas(i)) IN
   IF i=0 THEN 
      (delta(rhs(dps(0)`1)),dps(0)`2)
    ELSE LET (prevCont,prevPos) = term_pos_dps_alt(E)(dps,sigmas,i-1) IN 
      (replaceTerm(prevCont, delta(rhs(dps(i)`1)), prevPos), 
       prevPos o dps(i)`2)
    ENDIF
  MEASURE i


IMPORTING orders@infinite_pigeonhole,
	  sets_aux@infinite_nat_def,
	  sets_aux@card_finite


%%%%% For any infinite sequence non-empty position, this auxiliary
%%%%% function extracts its first position, wich is an argument position
%%%%% and will be used to provide the set of positions where an infinite 
%%%%% reduction would take place in the lemma that follows.  

  args_of_pos_seq(seqp: sequence[position] | FORALL(i:nat): NOT seqp(i) = empty_seq)(n:nat): posnat =
     first(seqp(n))

%%%% For any sequence as in the previous definition, and an index l of an argument of s
%%%% the predicate verifies whether there is an infinite number of redexes in the lth 
%%%% argument.
  inf_red_arg_in_inf_nr_im_red(seqp: sequence[position] | FORALL(i:nat): NOT seqp(i) = empty_seq)	
                                 (l : posnat) : bool = 
      is_infinite(inverse_image(args_of_pos_seq(seqp), l))



  
  END dependency_pairs

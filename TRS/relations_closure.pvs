%%-------------------** Abstract Reduction System (ARS) **-------------------
%%                                                                          
%% Authors         : Andre Luiz Galdino 
%%                   Universidade Federal de Goiás - Brasil
%%
%%                         and 
%%
%%                   Mauricio Ayala Rincon  
%%                   Universidade de Brasília - Brasil  
%%              
%% Last Modified On: October 23, 2018                                      
%%                                                                          
%%---------------------------------------------------------------------------


%%---------------------------------------------------------------------------
%%
%% We defined reflexive, symmetric, transitive, reflexive and transitive, 
%% and equivalence closures of a binary relation in the same way that 
%% Alfons Geser defined in .../lib/../closure_ops.pvs. We just changed
%% the names of the definitions and we proved some additional properties.
%%                                                                          
%%---------------------------------------------------------------------------



relations_closure[T : TYPE] : THEORY
BEGIN


 IMPORTING
    orders@closure_ops[T],
    sets_lemmas[T]

   S, R: VAR pred[[T, T]]
   n: VAR nat
   p: VAR posnat


   reflexive: TYPE = (reflexive?)

   symmetric: TYPE = (symmetric?)

   transitive: TYPE = (transitive?)

   reflexive_transitive?(R): bool = reflexive?(R) & transitive?(R)

   reflexive_transitive: TYPE = (reflexive_transitive?)

   equivalence: TYPE = (equivalence?)



% % Reflexive Closure (RC)

    RC(R): reflexive = union(R, =)


% %% Properties

   change_to_RC : LEMMA reflexive_closure(R) = RC(R) 

   R_subset_RC : LEMMA subset?(R, RC(R))

   RC_idempotent : LEMMA  RC(RC(R)) = RC(R)

   RC_characterization : LEMMA  reflexive?(S) <=> (S = RC(S))



% % Symmetric Closure (SC)

    SC(R): symmetric = union(R, converse(R))


% %% Properties

   change_to_SC : LEMMA symmetric_closure(R) = SC(R)

   R_subset_SC : LEMMA subset?(R, SC(R))

   SC_idempotent : LEMMA  SC(SC(R)) = SC(R)

   SC_characterization : LEMMA  symmetric?(S) <=> (S = SC(S))

 

% % Transitive Closure (TC)

    TC(R): transitive = IUnion(LAMBDA p: iterate(R, p))


% %% Properties

   change_to_TC : LEMMA transitive_closure(R) = TC(R)

   R_subset_TC :LEMMA subset?(R, TC(R))

   TC_converse: LEMMA  TC(converse(R)) = converse(TC(R))

   TC_idempotent : LEMMA  TC(TC(R)) = TC(R)

   TC_characterization : LEMMA  transitive?(S) <=> (S = TC(S))

   

% % Reflexive Transitive Closure (RTC)

   RTC(R): reflexive_transitive = IUnion(LAMBDA n: iterate(R, n)) 


% %% Properties

   change_to_RTC : LEMMA preorder_closure(R) = RTC(R)

   R_subset_RTC: LEMMA subset?(R, RTC(R))

   iterate_RTC: LEMMA FORALL n : subset?(iterate(R, n), RTC(R))

   RTC_idempotent : LEMMA  RTC(RTC(R)) = RTC(R)

   RTC_characterization : LEMMA reflexive_transitive?(S) <=> (S = RTC(S))



% % Equivalence Closure (EC)

    EC(R): equivalence = RTC(SC(R))


% %% Properties

    change_to_EC : LEMMA equivalence_closure(R) = EC(R)  

    R_subset_EC: LEMMA subset?(R, EC(R))

    RTC_subset_EC: LEMMA subset?(RTC(R), EC(R))

    EC_idempotent : LEMMA  EC(EC(R)) = EC(R)

    EC_characterization : LEMMA  equivalence?(S) <=> (S = EC(S))


% Additional closure properties  - Added by Ariane Alves 

    RTC_vs_TC: LEMMA RTC(R) = union(=, TC(R))

    Closure_monotony : LEMMA subset?(R,S) =>
     subset?(SC(R), SC(S)) AND subset?(RC(R), RC(S)) AND
     subset?(TC(R), TC(S)) AND subset?(RTC(R), RTC(S)) AND
     subset?(EC(R), EC(S))

%%%%%%%%%%%%%%%%%%%%  Auxiliary lemmas by Ariane Alves - used for Dependency Pairs.

%% A sequence of elements such that consecutive elements rewrite
%% is related by the reflexive transitive closure. 
 seq_of_relation_RTC: LEMMA
    FORALL(seq: sequence[T], R):
      FORALL(i:nat, j:nat | j>=i): 
        (FORALL(k:nat | k>=i AND k<j): R(seq(k),seq(k+1))) IMPLIES
	RTC(R)(seq(i),seq(j))

 IMPORTING structures@seq_extras[T]


  finseq_to_RTC: LEMMA
    FORALL(seq: finseq[T] | NOT seq = empty_seq, R):
      FORALL(i:nat | i>=0 AND i<length(seq), 
             j:nat | j>=0 AND j<length(seq) AND j>=i): 
        (FORALL(k:nat | k>=i AND k<j): R(seq(k),seq(k+1))) IMPLIES
	RTC(R)(seq(i),seq(j))


%% Two elements related by the reflexive transitive closure
%% of a relation by a given number of iterations have a
%% corresponding finite sequence with these two elements on
%% is first and last element and size equal to the number
%% of iterations + 1
 iterate_to_finseq: LEMMA
   FORALL(x,y:T, R:pred[[T,T]], i:nat):
     iterate(R,i)(x,y) IMPLIES
     EXISTS(seq: finseq[T] | length(seq) = i + 1):
       seq(0) = x AND seq(length(seq)-1) = y AND 
       FORALL(k:below[length(seq)-1]):
         R(seq(k),seq(k+1))


END relations_closure


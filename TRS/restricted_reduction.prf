(restricted_reduction
 (rest_is_subset 0
  (rest_is_subset-1 nil 3751377110 ("" (grind) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil restricted_reduction nil)
    (RTC const-decl "reflexive_transitive" relations_closure nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (rest? const-decl "bool" restricted_reduction nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil))
   shostak))
 (rest_of_subset_is_subset 0
  (rest_of_subset_is_subset-1 nil 3751378546
   ("" (skeep)
    (("" (lemma "Closure_monotony")
      (("" (inst?)
        (("" (prop)
          (("" (hide -1 -2 -3 -5)
            (("" (expand "subset?" 1)
              (("" (expand* "member" "rest?")
                (("" (skeep)
                  (("" (assert)
                    (("" (copy -1)
                      (("" (expand "subset?" -1)
                        (("" (expand "subset?" -2)
                          (("" (inst -1 "(s, x`1)")
                            (("" (inst -2 "(s, x`2)")
                              (("" (expand "member")
                                (("" (assert)
                                  (("" (hide-all-but (-3 -6 1))
                                    (("" (expand "subset?")
                                      ((""
                                        (inst -1 "(x`1, x`2)")
                                        ((""
                                          (expand "member")
                                          (("" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil restricted_reduction nil)
    (Closure_monotony formula-decl nil relations_closure nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (rest? const-decl "bool" restricted_reduction nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (non_noetherian_and_noetherian_rest 0
  (non_noetherian_and_noetherian_rest-1 nil 3751377483
   ("" (lemma "rest_is_subset")
    (("" (skeep)
      (("" (inst?)
        (("" (skeep)
          (("" (lemma "non_noetherian_and_noetherian_subset")
            (("" (inst?)
              (("" (assert) (("" (inst?) (("" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((PRED type-eq-decl nil defined_types nil)
    (rest? const-decl "bool" restricted_reduction nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (non_noetherian_and_noetherian_subset formula-decl nil noetherian nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil restricted_reduction nil)
    (rest_is_subset formula-decl nil restricted_reduction nil))
   shostak))
 (non_noetherian_and_noetherian_rest_subset 0
  (non_noetherian_and_noetherian_rest_subset-1 nil 3751379301
   ("" (lemma "rest_of_subset_is_subset")
    (("" (skeep)
      (("" (inst?)
        (("" (lemma "rest_is_subset")
          (("" (inst -1 "R" "s")
            (("" (inst?)
              (("" (assert)
                (("" (skeep)
                  (("" (lemma "non_noetherian_and_noetherian_subset")
                    (("" (inst -1 "R" "rest?(R1, s)")
                      (("" (prop)
                        (("1" (inst? -1)
                          (("1" (prop)
                            (("1" (skeep)
                              (("1" (inst? 2) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 -2 1)) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rest_is_subset formula-decl nil restricted_reduction nil)
    (rest? const-decl "bool" restricted_reduction nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil) (member const-decl "bool" sets nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (RTC const-decl "reflexive_transitive" relations_closure nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sequence type-eq-decl nil sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (non_noetherian_and_noetherian_subset formula-decl nil noetherian nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil restricted_reduction nil)
    (rest_of_subset_is_subset formula-decl nil restricted_reduction nil))
   shostak)))


%%-------------------** Term Rewriting System (TRS) **------------------------
%%                                                                          
%% Authors         : Andre Luiz Galdino 
%%                   Universidade Federal de Goiás - Brasil
%%
%%                         and 
%%
%%                   Mauricio Ayala Rincon  
%%                   Universidade de Brasília - Brasil  
%%             
%% Last Modified On: October 23, 2018                                      
%%                                                                          
%%----------------------------------------------------------------------------


reduction[variable: TYPE+, symbol: TYPE+, arity: [symbol -> nat]]: THEORY

 BEGIN

   ASSUMING
   
     IMPORTING variables_term[variable,symbol, arity],
               sets_aux@countability[term],
               sets_aux@countable_props[term]
 
       var_countable: ASSUMPTION is_countably_infinite(V)

ENDASSUMING
IMPORTING rewrite_rules[variable,symbol, arity]            

%           sets_aux@countability[term],
 %           sets_aux@countable_props[term]
 
 %      var_countable: ASSUMPTION is_countably_infinite(V)
           

   s, t, t1, t2, u, v: VAR term
sigma, sg1, sg2: VAR Sub
              x: VAR (V)
              R: VAR pred[[term, term]] 
              E: VAR set[rewrite_rule]
              e: VAR rewrite_rule
	      k: VAR posnat


%%%% Defining, respectively, the concepts Reduction relation and closed under %%
%%%% substitutions,Close under substitution                                   %%

 reduction?(E)(s,t): bool =  
     EXISTS ( (e | member(e, E)), sigma, (p: positions?(s))): 
                      subtermOF(s, p) = ext(sigma)(lhs(e)) & 
                                    t = replaceTerm(s, ext(sigma)(rhs(e)), p)

 reduction_fix?(E)(s, t, (p: positions?(s))): bool =
     EXISTS ( (e | member(e, E)), sigma):
        subtermOF(s, p) = ext(sigma)(lhs(e)) &
                      t = replaceTerm(s, ext(sigma)(rhs(e)), p)


 close_subs?(R): bool = FORALL s, t, sigma: R(s,t) => 
                                            R(ext(sigma)(s),ext(sigma)(t))


%%%% Properties %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 closure_close_subs: LEMMA close_subs?(R)  =>
                (close_subs?(TC(R)) & close_subs?(RTC(R)) & close_subs?(EC(R)))

 reduction_is_subs_op: LEMMA close_subs?(reduction?(E)) & comp_op?(reduction?(E))

 lhs_reduces_to_rhs: LEMMA
                    FORALL (E, (e | member(e, E))): reduction?(E)(lhs(e), rhs(e))

%%% Complement of reduction theory with definition and 
%%% Subset property of non-root reduction abd
%%% Auxiliary lemmas on non reducibility and noetherianity
%%% of terms and all their subterms
%%% By Ariane Alves Almeida
%%%    Universidade de Brasília


% Simple definitional lemma useful in several proofs:
% Every reducible term is an application
  reducible_is_app: LEMMA
    reducible?(reduction?(E))(t) IMPLIES app?(t)

% Reduction at non root positions relation. 
  non_root_reduction?(E)(s,t): bool =  
     EXISTS (p: positions?(s) | NOT(p=empty_seq)): 
       reduction_fix?(E)(s,t,p)

% Inclusion of reduction at nr positions in the reduction relation
  non_root_subset_reduction: LEMMA
    subset?(non_root_reduction?(E), reduction?(E))

  non_root_rtc_preserves_root_symbol: LEMMA 
     FORALL(s: term | app?(s), t: term) :   
         RTC(non_root_reduction?(E))(s,t)    IMPLIES          
                (app?(t) AND f(s) = f(t))

   non_root_rtc_preserves_pos_args: LEMMA 
       FORALL(s: term | app?(s),  k: posnat | positionsOF(s)( #(k)), t: term) :   
         RTC(non_root_reduction?(E))(s,t) IMPLIES 
             positionsOF(t)( #(k))

  arg_preservation_in_finite_rtc: LEMMA
   FORALL(E)(seqt: finseq[term] | NOT seqt = empty_seq AND app?(seqt(0)))
	    (seqp: finseq[position] | length(seqt) = length(seqp))
	    (l: posnat | l <= length(args(seqt(0)))):
     (FORALL(n: below[length(seqp) - 1]):
       (positionsOF(seqt(n))(seqp(n)) AND 
       NOT empty_seq = seqp(n) AND 
       NOT first(seqp(n)) = l AND
       reduction_fix?(E)(seqt(n), seqt(n+1), seqp(n)))) IMPLIES
       FORALL(n: below[length(seqp)]):
       subtermOF(seqt(0), #(l)) = subtermOF(seqt(n), #(l))

  non_root_rtc_rtc_of_argument: LEMMA
    FORALL(s: term | app?(s)):
    RTC(non_root_reduction?(E))(s,t) IMPLIES
      FORALL(k:posnat | k <= length(args(s))):
        RTC(reduction?(E))(subtermOF(s, #(k)), subtermOF(t, #(k)))

 arg_rest_std?(E)(s)(k)(u,v)(p: positions?(u) | NOT (p = empty_seq)): bool = 
   rest?(non_root_reduction?(E),s)(u,v) AND
   first(p) = k AND 
   reduction_fix?(E)(u,v,p)


% Any term that is in normal form has all its subterms in normal form
  nf_subterms: LEMMA
    is_normal_form?(reduction?(E))(t) IFF 
      FORALL(p:positions?(t)): is_normal_form?(reduction?(E))(subtermOF(t,p))

% Definition of normal substitution
  normal_sub?(E)(sigma: Sub): bool =
    FORALL(x: (Dom(sigma))):
      is_normal_form?(reduction?(E))(sigma(x))

% Definition of terminating substitution
  terminating_sub?(E)(sigma: Sub): bool =
    FORALL(x: (Dom(sigma))):
      terminating?(reduction?(E))(sigma(x))


  terminating_all_subterms: LEMMA
    FORALL(E: set[rewrite_rule]):
      FORALL(t:term): 
        terminating?(reduction?(E))(t) IFF
  	  FORALL(p: positions?(t)):
      	    terminating?(reduction?(E))(subtermOF(t,p)) 



END reduction
